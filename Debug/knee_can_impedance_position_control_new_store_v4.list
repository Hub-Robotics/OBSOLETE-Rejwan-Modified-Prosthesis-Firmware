
knee_can_impedance_position_control_new_store_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f0  0800e040  0800e040  0001e040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f230  0800f230  0001f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f238  0800f238  0001f238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f23c  0800f23c  0001f23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004b0  20000000  0800f240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000204b0  2**0
                  CONTENTS
  8 .bss          0000ac24  200004b0  200004b0  000204b0  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  2000b0d4  2000b0d4  000204b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00064ff6  00000000  00000000  000204e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000aca5  00000000  00000000  000854d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001fcd3  00000000  00000000  0009017b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002310  00000000  00000000  000afe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003f88  00000000  00000000  000b2160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00019675  00000000  00000000  000b60e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000c9b1  00000000  00000000  000cf75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000dc10e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007398  00000000  00000000  000dc18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000e3524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004b0 	.word	0x200004b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e028 	.word	0x0800e028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004b4 	.word	0x200004b4
 80001cc:	0800e028 	.word	0x0800e028

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000f50:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000f52:	4c13      	ldr	r4, [pc, #76]	; (8000fa0 <set_int_enable+0x50>)
 8000f54:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f58:	b193      	cbz	r3, 8000f80 <set_int_enable+0x30>
        if (enable)
 8000f5a:	b1c0      	cbz	r0, 8000f8e <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8000f5c:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8000f5e:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	6860      	ldr	r0, [r4, #4]
 8000f66:	7c49      	ldrb	r1, [r1, #17]
 8000f68:	7800      	ldrb	r0, [r0, #0]
 8000f6a:	f10d 0307 	add.w	r3, sp, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f007 faa0 	bl	80084b4 <mpu9255_write>
 8000f74:	b970      	cbnz	r0, 8000f94 <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8000f76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f7a:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8000f80:	7aa2      	ldrb	r2, [r4, #10]
 8000f82:	b13a      	cbz	r2, 8000f94 <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8000f84:	b118      	cbz	r0, 8000f8e <set_int_enable+0x3e>
 8000f86:	7c62      	ldrb	r2, [r4, #17]
 8000f88:	b93a      	cbnz	r2, 8000f9a <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e7e7      	b.n	8000f5e <set_int_enable+0xe>
            tmp = 0x00;
 8000f8e:	f88d 0007 	strb.w	r0, [sp, #7]
 8000f92:	e7e6      	b.n	8000f62 <set_int_enable+0x12>
            return -1;
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	e7f0      	b.n	8000f7c <set_int_enable+0x2c>
            return 0;
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	e7ee      	b.n	8000f7c <set_int_enable+0x2c>
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8000fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000fa6:	4c53      	ldr	r4, [pc, #332]	; (80010f4 <mpu_reset_fifo+0x150>)
 8000fa8:	7aa3      	ldrb	r3, [r4, #10]
 8000faa:	b91b      	cbnz	r3, 8000fb4 <mpu_reset_fifo+0x10>
        return -1;
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8000fb4:	ad02      	add	r5, sp, #8
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000fbc:	6821      	ldr	r1, [r4, #0]
 8000fbe:	6860      	ldr	r0, [r4, #4]
 8000fc0:	7c49      	ldrb	r1, [r1, #17]
 8000fc2:	7800      	ldrb	r0, [r0, #0]
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f007 fa74 	bl	80084b4 <mpu9255_write>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d1ed      	bne.n	8000fac <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000fd0:	6821      	ldr	r1, [r4, #0]
 8000fd2:	6860      	ldr	r0, [r4, #4]
 8000fd4:	7949      	ldrb	r1, [r1, #5]
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	462b      	mov	r3, r5
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f007 fa6a 	bl	80084b4 <mpu9255_write>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d1e3      	bne.n	8000fac <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000fe4:	6821      	ldr	r1, [r4, #0]
 8000fe6:	6860      	ldr	r0, [r4, #4]
 8000fe8:	7909      	ldrb	r1, [r1, #4]
 8000fea:	7800      	ldrb	r0, [r0, #0]
 8000fec:	462b      	mov	r3, r5
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f007 fa60 	bl	80084b4 <mpu9255_write>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d1d9      	bne.n	8000fac <mpu_reset_fifo+0x8>
    if (st.chip_cfg.dmp_on) {
 8000ff8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d040      	beq.n	8001082 <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001000:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001002:	6821      	ldr	r1, [r4, #0]
 8001004:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001006:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800100a:	2201      	movs	r2, #1
 800100c:	462b      	mov	r3, r5
 800100e:	7909      	ldrb	r1, [r1, #4]
 8001010:	7800      	ldrb	r0, [r0, #0]
 8001012:	f007 fa4f 	bl	80084b4 <mpu9255_write>
 8001016:	2800      	cmp	r0, #0
 8001018:	d1c8      	bne.n	8000fac <mpu_reset_fifo+0x8>
        delay_ms(50);
 800101a:	2032      	movs	r0, #50	; 0x32
 800101c:	f007 faa4 	bl	8008568 <mpu9255_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001020:	23c0      	movs	r3, #192	; 0xc0
 8001022:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001026:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001028:	6821      	ldr	r1, [r4, #0]
 800102a:	6860      	ldr	r0, [r4, #4]
 800102c:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800102e:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8001030:	bf44      	itt	mi
 8001032:	23e0      	movmi	r3, #224	; 0xe0
 8001034:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001038:	2201      	movs	r2, #1
 800103a:	462b      	mov	r3, r5
 800103c:	7800      	ldrb	r0, [r0, #0]
 800103e:	f007 fa39 	bl	80084b4 <mpu9255_write>
 8001042:	2800      	cmp	r0, #0
 8001044:	d1b2      	bne.n	8000fac <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8001046:	7c63      	ldrb	r3, [r4, #17]
 8001048:	b103      	cbz	r3, 800104c <mpu_reset_fifo+0xa8>
            data = BIT_DMP_INT_EN;
 800104a:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800104c:	6821      	ldr	r1, [r4, #0]
 800104e:	6860      	ldr	r0, [r4, #4]
            data = 0;
 8001050:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001054:	2201      	movs	r2, #1
 8001056:	462b      	mov	r3, r5
 8001058:	7c49      	ldrb	r1, [r1, #17]
 800105a:	7800      	ldrb	r0, [r0, #0]
 800105c:	f007 fa2a 	bl	80084b4 <mpu9255_write>
 8001060:	2800      	cmp	r0, #0
 8001062:	d1a3      	bne.n	8000fac <mpu_reset_fifo+0x8>
        data = 0;
 8001064:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	6860      	ldr	r0, [r4, #4]
 800106c:	462b      	mov	r3, r5
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800106e:	2201      	movs	r2, #1
 8001070:	7949      	ldrb	r1, [r1, #5]
 8001072:	7800      	ldrb	r0, [r0, #0]
 8001074:	f007 fa1e 	bl	80084b4 <mpu9255_write>
 8001078:	3000      	adds	r0, #0
 800107a:	bf18      	it	ne
 800107c:	2001      	movne	r0, #1
 800107e:	4240      	negs	r0, r0
 8001080:	e796      	b.n	8000fb0 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8001082:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001084:	6821      	ldr	r1, [r4, #0]
 8001086:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST;
 8001088:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800108c:	2201      	movs	r2, #1
 800108e:	462b      	mov	r3, r5
 8001090:	7909      	ldrb	r1, [r1, #4]
 8001092:	7800      	ldrb	r0, [r0, #0]
 8001094:	f007 fa0e 	bl	80084b4 <mpu9255_write>
 8001098:	2800      	cmp	r0, #0
 800109a:	d187      	bne.n	8000fac <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800109c:	7ca3      	ldrb	r3, [r4, #18]
 800109e:	b913      	cbnz	r3, 80010a6 <mpu_reset_fifo+0x102>
 80010a0:	7aa3      	ldrb	r3, [r4, #10]
 80010a2:	07db      	lsls	r3, r3, #31
 80010a4:	d424      	bmi.n	80010f0 <mpu_reset_fifo+0x14c>
            data = BIT_FIFO_EN;
 80010a6:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80010a8:	6821      	ldr	r1, [r4, #0]
 80010aa:	6860      	ldr	r0, [r4, #4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80010ac:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80010b0:	2201      	movs	r2, #1
 80010b2:	462b      	mov	r3, r5
 80010b4:	7909      	ldrb	r1, [r1, #4]
 80010b6:	7800      	ldrb	r0, [r0, #0]
 80010b8:	f007 f9fc 	bl	80084b4 <mpu9255_write>
 80010bc:	2800      	cmp	r0, #0
 80010be:	f47f af75 	bne.w	8000fac <mpu_reset_fifo+0x8>
        delay_ms(50);
 80010c2:	2032      	movs	r0, #50	; 0x32
 80010c4:	f007 fa50 	bl	8008568 <mpu9255_delay_ms>
        if (st.chip_cfg.int_enable)
 80010c8:	7c63      	ldrb	r3, [r4, #17]
 80010ca:	b103      	cbz	r3, 80010ce <mpu_reset_fifo+0x12a>
            data = BIT_DATA_RDY_EN;
 80010cc:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80010ce:	6821      	ldr	r1, [r4, #0]
 80010d0:	6860      	ldr	r0, [r4, #4]
            data = 0;
 80010d2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80010d6:	2201      	movs	r2, #1
 80010d8:	462b      	mov	r3, r5
 80010da:	7c49      	ldrb	r1, [r1, #17]
 80010dc:	7800      	ldrb	r0, [r0, #0]
 80010de:	f007 f9e9 	bl	80084b4 <mpu9255_write>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	f47f af62 	bne.w	8000fac <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80010e8:	6821      	ldr	r1, [r4, #0]
 80010ea:	6860      	ldr	r0, [r4, #4]
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <mpu_reset_fifo+0x154>)
 80010ee:	e7be      	b.n	800106e <mpu_reset_fifo+0xca>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	e7d9      	b.n	80010a8 <mpu_reset_fifo+0x104>
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000010 	.word	0x20000010

080010fc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80010fc:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80010fe:	4c1a      	ldr	r4, [pc, #104]	; (8001168 <mpu_set_gyro_fsr+0x6c>)
 8001100:	7aa3      	ldrb	r3, [r4, #10]
 8001102:	b913      	cbnz	r3, 800110a <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	e01d      	b.n	8001146 <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 800110a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800110e:	d024      	beq.n	800115a <mpu_set_gyro_fsr+0x5e>
 8001110:	d81b      	bhi.n	800114a <mpu_set_gyro_fsr+0x4e>
 8001112:	28fa      	cmp	r0, #250	; 0xfa
 8001114:	d1f6      	bne.n	8001104 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8001116:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8001118:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800111c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001120:	7a23      	ldrb	r3, [r4, #8]
 8001122:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001126:	d01c      	beq.n	8001162 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001128:	6821      	ldr	r1, [r4, #0]
 800112a:	6860      	ldr	r0, [r4, #4]
 800112c:	7989      	ldrb	r1, [r1, #6]
 800112e:	7800      	ldrb	r0, [r0, #0]
 8001130:	f10d 0307 	add.w	r3, sp, #7
 8001134:	2201      	movs	r2, #1
 8001136:	f007 f9bd 	bl	80084b4 <mpu9255_write>
 800113a:	2800      	cmp	r0, #0
 800113c:	d1e2      	bne.n	8001104 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 800113e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	7223      	strb	r3, [r4, #8]
    return 0;
}
 8001146:	b002      	add	sp, #8
 8001148:	bd10      	pop	{r4, pc}
    switch (fsr) {
 800114a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800114e:	d006      	beq.n	800115e <mpu_set_gyro_fsr+0x62>
 8001150:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001154:	d1d6      	bne.n	8001104 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8001156:	2318      	movs	r3, #24
 8001158:	e7de      	b.n	8001118 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 800115a:	2308      	movs	r3, #8
 800115c:	e7dc      	b.n	8001118 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 800115e:	2310      	movs	r3, #16
 8001160:	e7da      	b.n	8001118 <mpu_set_gyro_fsr+0x1c>
        return 0;
 8001162:	2000      	movs	r0, #0
 8001164:	e7ef      	b.n	8001146 <mpu_set_gyro_fsr+0x4a>
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000

0800116c <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <mpu_get_accel_fsr+0x34>)
 800116e:	7a5a      	ldrb	r2, [r3, #9]
 8001170:	2a03      	cmp	r2, #3
 8001172:	d812      	bhi.n	800119a <mpu_get_accel_fsr+0x2e>
 8001174:	e8df f002 	tbb	[pc, r2]
 8001178:	0f0d0b02 	.word	0x0f0d0b02
    case INV_FSR_2G:
        fsr[0] = 2;
 800117c:	2202      	movs	r2, #2
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
 800117e:	7002      	strb	r2, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 8001180:	7cdb      	ldrb	r3, [r3, #19]
 8001182:	b113      	cbz	r3, 800118a <mpu_get_accel_fsr+0x1e>
        fsr[0] <<= 1;
 8001184:	7803      	ldrb	r3, [r0, #0]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	7003      	strb	r3, [r0, #0]
    return 0;
 800118a:	2000      	movs	r0, #0
 800118c:	4770      	bx	lr
        fsr[0] = 4;
 800118e:	2204      	movs	r2, #4
 8001190:	e7f5      	b.n	800117e <mpu_get_accel_fsr+0x12>
        fsr[0] = 8;
 8001192:	2208      	movs	r2, #8
 8001194:	e7f3      	b.n	800117e <mpu_get_accel_fsr+0x12>
        fsr[0] = 16;
 8001196:	2210      	movs	r2, #16
 8001198:	e7f1      	b.n	800117e <mpu_get_accel_fsr+0x12>
        return -1;
 800119a:	f04f 30ff 	mov.w	r0, #4294967295
 800119e:	4770      	bx	lr
 80011a0:	20000000 	.word	0x20000000

080011a4 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 80011a4:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80011a6:	4c18      	ldr	r4, [pc, #96]	; (8001208 <mpu_set_accel_fsr+0x64>)
 80011a8:	7aa3      	ldrb	r3, [r4, #10]
 80011aa:	b913      	cbnz	r3, 80011b2 <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	e01c      	b.n	80011ec <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 80011b2:	2804      	cmp	r0, #4
 80011b4:	d022      	beq.n	80011fc <mpu_set_accel_fsr+0x58>
 80011b6:	d81b      	bhi.n	80011f0 <mpu_set_accel_fsr+0x4c>
 80011b8:	2802      	cmp	r0, #2
 80011ba:	d1f7      	bne.n	80011ac <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 80011bc:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 80011be:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80011c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80011c6:	7a63      	ldrb	r3, [r4, #9]
 80011c8:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 80011cc:	d01a      	beq.n	8001204 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80011ce:	6821      	ldr	r1, [r4, #0]
 80011d0:	6860      	ldr	r0, [r4, #4]
 80011d2:	79c9      	ldrb	r1, [r1, #7]
 80011d4:	7800      	ldrb	r0, [r0, #0]
 80011d6:	f10d 0307 	add.w	r3, sp, #7
 80011da:	2201      	movs	r2, #1
 80011dc:	f007 f96a 	bl	80084b4 <mpu9255_write>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1e3      	bne.n	80011ac <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 80011e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	7263      	strb	r3, [r4, #9]
    return 0;
}
 80011ec:	b002      	add	sp, #8
 80011ee:	bd10      	pop	{r4, pc}
    switch (fsr) {
 80011f0:	2808      	cmp	r0, #8
 80011f2:	d005      	beq.n	8001200 <mpu_set_accel_fsr+0x5c>
 80011f4:	2810      	cmp	r0, #16
 80011f6:	d1d9      	bne.n	80011ac <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 80011f8:	2318      	movs	r3, #24
 80011fa:	e7e0      	b.n	80011be <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 80011fc:	2308      	movs	r3, #8
 80011fe:	e7de      	b.n	80011be <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8001200:	2310      	movs	r3, #16
 8001202:	e7dc      	b.n	80011be <mpu_set_accel_fsr+0x1a>
        return 0;
 8001204:	2000      	movs	r0, #0
 8001206:	e7f1      	b.n	80011ec <mpu_set_accel_fsr+0x48>
 8001208:	20000000 	.word	0x20000000

0800120c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800120c:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800120e:	4c19      	ldr	r4, [pc, #100]	; (8001274 <mpu_set_lpf+0x68>)
 8001210:	7aa3      	ldrb	r3, [r4, #10]
 8001212:	b91b      	cbnz	r3, 800121c <mpu_set_lpf+0x10>
        return -1;
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8001218:	b002      	add	sp, #8
 800121a:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 800121c:	28bb      	cmp	r0, #187	; 0xbb
 800121e:	d916      	bls.n	800124e <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8001220:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8001222:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8001226:	7ae2      	ldrb	r2, [r4, #11]
 8001228:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800122c:	429a      	cmp	r2, r3
 800122e:	d01f      	beq.n	8001270 <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001230:	6821      	ldr	r1, [r4, #0]
 8001232:	6860      	ldr	r0, [r4, #4]
 8001234:	7889      	ldrb	r1, [r1, #2]
 8001236:	7800      	ldrb	r0, [r0, #0]
 8001238:	f10d 0307 	add.w	r3, sp, #7
 800123c:	2201      	movs	r2, #1
 800123e:	f007 f939 	bl	80084b4 <mpu9255_write>
 8001242:	2800      	cmp	r0, #0
 8001244:	d1e6      	bne.n	8001214 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8001246:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800124a:	72e3      	strb	r3, [r4, #11]
    return 0;
 800124c:	e7e4      	b.n	8001218 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 800124e:	2861      	cmp	r0, #97	; 0x61
 8001250:	d901      	bls.n	8001256 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8001252:	2302      	movs	r3, #2
 8001254:	e7e5      	b.n	8001222 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8001256:	2829      	cmp	r0, #41	; 0x29
 8001258:	d901      	bls.n	800125e <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 800125a:	2303      	movs	r3, #3
 800125c:	e7e1      	b.n	8001222 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 800125e:	2813      	cmp	r0, #19
 8001260:	d901      	bls.n	8001266 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8001262:	2304      	movs	r3, #4
 8001264:	e7dd      	b.n	8001222 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8001266:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8001268:	bf8c      	ite	hi
 800126a:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 800126c:	2306      	movls	r3, #6
 800126e:	e7d8      	b.n	8001222 <mpu_set_lpf+0x16>
        return 0;
 8001270:	2000      	movs	r0, #0
 8001272:	e7d1      	b.n	8001218 <mpu_set_lpf+0xc>
 8001274:	20000000 	.word	0x20000000

08001278 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8001278:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 800127a:	b918      	cbnz	r0, 8001284 <mpu_set_compass_sample_rate+0xc>
        return -1;
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8001280:	b002      	add	sp, #8
 8001282:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001284:	4c0e      	ldr	r4, [pc, #56]	; (80012c0 <mpu_set_compass_sample_rate+0x48>)
 8001286:	89e3      	ldrh	r3, [r4, #14]
 8001288:	4298      	cmp	r0, r3
 800128a:	d8f7      	bhi.n	800127c <mpu_set_compass_sample_rate+0x4>
 800128c:	2864      	cmp	r0, #100	; 0x64
 800128e:	d8f5      	bhi.n	800127c <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8001290:	fbb3 f0f0 	udiv	r0, r3, r0
 8001294:	ab02      	add	r3, sp, #8
 8001296:	3801      	subs	r0, #1
 8001298:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800129c:	6821      	ldr	r1, [r4, #0]
 800129e:	6860      	ldr	r0, [r4, #4]
 80012a0:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 80012a4:	7800      	ldrb	r0, [r0, #0]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f007 f904 	bl	80084b4 <mpu9255_write>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d1e5      	bne.n	800127c <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 80012b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80012b4:	89e3      	ldrh	r3, [r4, #14]
 80012b6:	3201      	adds	r2, #1
 80012b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80012bc:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 80012be:	e7df      	b.n	8001280 <mpu_set_compass_sample_rate+0x8>
 80012c0:	20000000 	.word	0x20000000

080012c4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <mpu_configure_fifo+0x4c>)
 80012c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80012cc:	461e      	mov	r6, r3
 80012ce:	b9e2      	cbnz	r2, 800130a <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 80012d0:	7a9c      	ldrb	r4, [r3, #10]
 80012d2:	b19c      	cbz	r4, 80012fc <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 80012d4:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80012d8:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 80012da:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80012dc:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80012de:	1b2c      	subs	r4, r5, r4
 80012e0:	bf18      	it	ne
 80012e2:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 80012e6:	b90d      	cbnz	r5, 80012ec <mpu_configure_fifo+0x28>
 80012e8:	7d18      	ldrb	r0, [r3, #20]
 80012ea:	b150      	cbz	r0, 8001302 <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fe2f 	bl	8000f50 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 80012f2:	b145      	cbz	r5, 8001306 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 80012f4:	f7ff fe56 	bl	8000fa4 <mpu_reset_fifo>
 80012f8:	b128      	cbz	r0, 8001306 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 80012fa:	7437      	strb	r7, [r6, #16]
            return -1;
 80012fc:	f04f 34ff 	mov.w	r4, #4294967295
 8001300:	e001      	b.n	8001306 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8001302:	f7ff fe25 	bl	8000f50 <set_int_enable>
            }
        }
    }

    return result;
}
 8001306:	4620      	mov	r0, r4
 8001308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800130a:	2400      	movs	r4, #0
 800130c:	e7fb      	b.n	8001306 <mpu_configure_fifo+0x42>
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8001314:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8001316:	4c36      	ldr	r4, [pc, #216]	; (80013f0 <mpu_set_bypass+0xdc>)
 8001318:	7ca3      	ldrb	r3, [r4, #18]
 800131a:	4283      	cmp	r3, r0
{
 800131c:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 800131e:	d041      	beq.n	80013a4 <mpu_set_bypass+0x90>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001320:	6821      	ldr	r1, [r4, #0]
 8001322:	6860      	ldr	r0, [r4, #4]
 8001324:	7909      	ldrb	r1, [r1, #4]
 8001326:	7800      	ldrb	r0, [r0, #0]
 8001328:	f10d 0307 	add.w	r3, sp, #7
 800132c:	2201      	movs	r2, #1
    if (bypass_on) {
 800132e:	2d00      	cmp	r5, #0
 8001330:	d03a      	beq.n	80013a8 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001332:	f007 f8eb 	bl	800850c <mpu9255_read>
 8001336:	b118      	cbz	r0, 8001340 <mpu_set_bypass+0x2c>
            return -1;
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 800133c:	b003      	add	sp, #12
 800133e:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8001340:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001344:	6821      	ldr	r1, [r4, #0]
 8001346:	6860      	ldr	r0, [r4, #4]
 8001348:	7909      	ldrb	r1, [r1, #4]
        tmp &= ~BIT_AUX_IF_EN;
 800134a:	f023 0320 	bic.w	r3, r3, #32
 800134e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001352:	2201      	movs	r2, #1
 8001354:	f10d 0307 	add.w	r3, sp, #7
 8001358:	7800      	ldrb	r0, [r0, #0]
 800135a:	f007 f8ab 	bl	80084b4 <mpu9255_write>
 800135e:	2800      	cmp	r0, #0
 8001360:	d1ea      	bne.n	8001338 <mpu_set_bypass+0x24>
        delay_ms(3);
 8001362:	2003      	movs	r0, #3
 8001364:	f007 f900 	bl	8008568 <mpu9255_delay_ms>
        tmp = BIT_BYPASS_EN;
 8001368:	2302      	movs	r3, #2
 800136a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 800136e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001372:	b113      	cbz	r3, 800137a <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8001374:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 8001376:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 800137a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800137e:	b12b      	cbz	r3, 800138c <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001380:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001384:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001388:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800138c:	6821      	ldr	r1, [r4, #0]
 800138e:	6860      	ldr	r0, [r4, #4]
 8001390:	7dc9      	ldrb	r1, [r1, #23]
 8001392:	7800      	ldrb	r0, [r0, #0]
 8001394:	f10d 0307 	add.w	r3, sp, #7
 8001398:	2201      	movs	r2, #1
 800139a:	f007 f88b 	bl	80084b4 <mpu9255_write>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d1ca      	bne.n	8001338 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 80013a2:	74a5      	strb	r5, [r4, #18]
        return 0;
 80013a4:	2000      	movs	r0, #0
 80013a6:	e7c9      	b.n	800133c <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80013a8:	f007 f8b0 	bl	800850c <mpu9255_read>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d1c3      	bne.n	8001338 <mpu_set_bypass+0x24>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013b0:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80013b2:	6821      	ldr	r1, [r4, #0]
 80013b4:	6860      	ldr	r0, [r4, #4]
 80013b6:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013b8:	f013 0f01 	tst.w	r3, #1
 80013bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
            tmp |= BIT_AUX_IF_EN;
 80013c0:	bf14      	ite	ne
 80013c2:	f043 0320 	orrne.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 80013c6:	f023 0320 	biceq.w	r3, r3, #32
 80013ca:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80013ce:	2201      	movs	r2, #1
 80013d0:	f10d 0307 	add.w	r3, sp, #7
 80013d4:	7800      	ldrb	r0, [r0, #0]
 80013d6:	f007 f86d 	bl	80084b4 <mpu9255_write>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d1ac      	bne.n	8001338 <mpu_set_bypass+0x24>
        delay_ms(3);
 80013de:	2003      	movs	r0, #3
 80013e0:	f007 f8c2 	bl	8008568 <mpu9255_delay_ms>
        if (st.chip_cfg.active_low_int)
 80013e4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0c4      	beq.n	8001376 <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	e7c2      	b.n	8001376 <mpu_set_bypass+0x62>
 80013f0:	20000000 	.word	0x20000000

080013f4 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80013f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80013f6:	4c18      	ldr	r4, [pc, #96]	; (8001458 <mpu_set_int_latched+0x64>)
 80013f8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80013fc:	4283      	cmp	r3, r0
{
 80013fe:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8001400:	d025      	beq.n	800144e <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
 8001402:	b308      	cbz	r0, 8001448 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001404:	2330      	movs	r3, #48	; 0x30
 8001406:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 800140a:	7ca3      	ldrb	r3, [r4, #18]
 800140c:	b12b      	cbz	r3, 800141a <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 800140e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 800141a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800141e:	b12b      	cbz	r3, 800142c <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001420:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001428:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800142c:	6821      	ldr	r1, [r4, #0]
 800142e:	6860      	ldr	r0, [r4, #4]
 8001430:	7dc9      	ldrb	r1, [r1, #23]
 8001432:	7800      	ldrb	r0, [r0, #0]
 8001434:	f10d 0307 	add.w	r3, sp, #7
 8001438:	2201      	movs	r2, #1
 800143a:	f007 f83b 	bl	80084b4 <mpu9255_write>
 800143e:	b940      	cbnz	r0, 8001452 <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
 8001440:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 8001444:	b003      	add	sp, #12
 8001446:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 8001448:	f88d 0007 	strb.w	r0, [sp, #7]
 800144c:	e7dd      	b.n	800140a <mpu_set_int_latched+0x16>
        return 0;
 800144e:	2000      	movs	r0, #0
 8001450:	e7f8      	b.n	8001444 <mpu_set_int_latched+0x50>
        return -1;
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	e7f5      	b.n	8001444 <mpu_set_int_latched+0x50>
 8001458:	20000000 	.word	0x20000000

0800145c <mpu_lp_accel_mode>:
    if (rate > 40)
 800145c:	2828      	cmp	r0, #40	; 0x28
{
 800145e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001460:	4605      	mov	r5, r0
    if (rate > 40)
 8001462:	d902      	bls.n	800146a <mpu_lp_accel_mode+0xe>
        return -1;
 8001464:	f04f 35ff 	mov.w	r5, #4294967295
 8001468:	e014      	b.n	8001494 <mpu_lp_accel_mode+0x38>
 800146a:	4c28      	ldr	r4, [pc, #160]	; (800150c <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 800146c:	b9a8      	cbnz	r0, 800149a <mpu_lp_accel_mode+0x3e>
        mpu_set_int_latched(0);
 800146e:	f7ff ffc1 	bl	80013f4 <mpu_set_int_latched>
        tmp[1] = BIT_STBY_XYZG;
 8001472:	2307      	movs	r3, #7
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001474:	6821      	ldr	r1, [r4, #0]
 8001476:	6860      	ldr	r0, [r4, #4]
        tmp[0] = 0;
 8001478:	f88d 5004 	strb.w	r5, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 800147c:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001480:	2202      	movs	r2, #2
 8001482:	ab01      	add	r3, sp, #4
 8001484:	7d49      	ldrb	r1, [r1, #21]
 8001486:	7800      	ldrb	r0, [r0, #0]
 8001488:	f007 f814 	bl	80084b4 <mpu9255_write>
 800148c:	4605      	mov	r5, r0
 800148e:	2800      	cmp	r0, #0
 8001490:	d1e8      	bne.n	8001464 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 8001492:	7520      	strb	r0, [r4, #20]
}
 8001494:	4628      	mov	r0, r5
 8001496:	b003      	add	sp, #12
 8001498:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff ffaa 	bl	80013f4 <mpu_set_int_latched>
    if (rate == 1)
 80014a0:	2d01      	cmp	r5, #1
 80014a2:	d122      	bne.n	80014ea <mpu_lp_accel_mode+0x8e>
        tmp[0] = INV_LPA_1_25HZ;
 80014a4:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80014a6:	6821      	ldr	r1, [r4, #0]
 80014a8:	6860      	ldr	r0, [r4, #4]
        tmp[0] = INV_LPA_40HZ;
 80014aa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80014ae:	2201      	movs	r2, #1
 80014b0:	ab01      	add	r3, sp, #4
 80014b2:	7a49      	ldrb	r1, [r1, #9]
 80014b4:	7800      	ldrb	r0, [r0, #0]
 80014b6:	f006 fffd 	bl	80084b4 <mpu9255_write>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1d2      	bne.n	8001464 <mpu_lp_accel_mode+0x8>
    tmp[0] = BIT_LPA_CYCLE;
 80014be:	2320      	movs	r3, #32
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80014c0:	6821      	ldr	r1, [r4, #0]
 80014c2:	6860      	ldr	r0, [r4, #4]
    tmp[0] = BIT_LPA_CYCLE;
 80014c4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80014c8:	2201      	movs	r2, #1
 80014ca:	ab01      	add	r3, sp, #4
 80014cc:	7d49      	ldrb	r1, [r1, #21]
 80014ce:	7800      	ldrb	r0, [r0, #0]
 80014d0:	f006 fff0 	bl	80084b4 <mpu9255_write>
 80014d4:	4605      	mov	r5, r0
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d1c4      	bne.n	8001464 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014da:	2308      	movs	r3, #8
 80014dc:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 80014de:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 80014e0:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80014e2:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 80014e4:	f7ff feee 	bl	80012c4 <mpu_configure_fifo>
 80014e8:	e7d4      	b.n	8001494 <mpu_lp_accel_mode+0x38>
    else if (rate == 2)
 80014ea:	2d02      	cmp	r5, #2
 80014ec:	d101      	bne.n	80014f2 <mpu_lp_accel_mode+0x96>
        tmp[0] = INV_LPA_2_5HZ;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e7d9      	b.n	80014a6 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 5)
 80014f2:	2d05      	cmp	r5, #5
 80014f4:	d801      	bhi.n	80014fa <mpu_lp_accel_mode+0x9e>
        tmp[0] = INV_LPA_5HZ;
 80014f6:	2304      	movs	r3, #4
 80014f8:	e7d5      	b.n	80014a6 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 10)
 80014fa:	2d0a      	cmp	r5, #10
 80014fc:	d801      	bhi.n	8001502 <mpu_lp_accel_mode+0xa6>
        tmp[0] = INV_LPA_10HZ;
 80014fe:	2305      	movs	r3, #5
 8001500:	e7d1      	b.n	80014a6 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 20)
 8001502:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 8001504:	bf94      	ite	ls
 8001506:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 8001508:	2307      	movhi	r3, #7
 800150a:	e7cc      	b.n	80014a6 <mpu_lp_accel_mode+0x4a>
 800150c:	20000000 	.word	0x20000000

08001510 <mpu_set_sample_rate>:
{
 8001510:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <mpu_set_sample_rate+0x8c>)
 8001514:	7a9a      	ldrb	r2, [r3, #10]
{
 8001516:	4604      	mov	r4, r0
 8001518:	461e      	mov	r6, r3
    if (!(st.chip_cfg.sensors))
 800151a:	b922      	cbnz	r2, 8001526 <mpu_set_sample_rate+0x16>
        return -1;
 800151c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001520:	4620      	mov	r0, r4
 8001522:	b002      	add	sp, #8
 8001524:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 8001526:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 800152a:	2d00      	cmp	r5, #0
 800152c:	d1f6      	bne.n	800151c <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 800152e:	7d1b      	ldrb	r3, [r3, #20]
 8001530:	b14b      	cbz	r3, 8001546 <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8001532:	1e43      	subs	r3, r0, #1
 8001534:	2b27      	cmp	r3, #39	; 0x27
 8001536:	d803      	bhi.n	8001540 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 8001538:	f7ff ff90 	bl	800145c <mpu_lp_accel_mode>
                return 0;
 800153c:	462c      	mov	r4, r5
 800153e:	e7ef      	b.n	8001520 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8001540:	4628      	mov	r0, r5
 8001542:	f7ff ff8b 	bl	800145c <mpu_lp_accel_mode>
 8001546:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800154a:	bf28      	it	cs
 800154c:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 8001550:	2c04      	cmp	r4, #4
 8001552:	ab02      	add	r3, sp, #8
 8001554:	bf38      	it	cc
 8001556:	2404      	movcc	r4, #4
 8001558:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800155c:	fb95 f4f4 	sdiv	r4, r5, r4
 8001560:	3c01      	subs	r4, #1
 8001562:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001566:	6831      	ldr	r1, [r6, #0]
 8001568:	6870      	ldr	r0, [r6, #4]
 800156a:	7849      	ldrb	r1, [r1, #1]
 800156c:	7800      	ldrb	r0, [r0, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	f006 ffa0 	bl	80084b4 <mpu9255_write>
 8001574:	4604      	mov	r4, r0
 8001576:	2800      	cmp	r0, #0
 8001578:	d1d0      	bne.n	800151c <mpu_set_sample_rate+0xc>
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800157a:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800157c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001580:	2864      	cmp	r0, #100	; 0x64
 8001582:	bf28      	it	cs
 8001584:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001586:	3301      	adds	r3, #1
 8001588:	fb95 f5f3 	sdiv	r5, r5, r3
 800158c:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800158e:	f7ff fe73 	bl	8001278 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001592:	89f0      	ldrh	r0, [r6, #14]
 8001594:	0840      	lsrs	r0, r0, #1
 8001596:	f7ff fe39 	bl	800120c <mpu_set_lpf>
        return 0;
 800159a:	e7c1      	b.n	8001520 <mpu_set_sample_rate+0x10>
 800159c:	20000000 	.word	0x20000000

080015a0 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 80015a0:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 80015a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015a6:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 80015a8:	d014      	beq.n	80015d4 <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 80015aa:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80015ac:	4c49      	ldr	r4, [pc, #292]	; (80016d4 <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 80015ae:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80015b2:	6821      	ldr	r1, [r4, #0]
 80015b4:	6860      	ldr	r0, [r4, #4]
 80015b6:	7d49      	ldrb	r1, [r1, #21]
 80015b8:	7800      	ldrb	r0, [r0, #0]
 80015ba:	f10d 0306 	add.w	r3, sp, #6
 80015be:	2201      	movs	r2, #1
 80015c0:	f006 ff78 	bl	80084b4 <mpu9255_write>
 80015c4:	b150      	cbz	r0, 80015dc <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	72a3      	strb	r3, [r4, #10]
        return -1;
 80015ca:	f04f 36ff 	mov.w	r6, #4294967295
}
 80015ce:	4630      	mov	r0, r6
 80015d0:	b002      	add	sp, #8
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d1e9      	bne.n	80015ac <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 80015d8:	2340      	movs	r3, #64	; 0x40
 80015da:	e7e7      	b.n	80015ac <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80015dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (!(sensors & INV_X_GYRO))
 80015e0:	066e      	lsls	r6, r5, #25
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80015e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015e6:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 80015e8:	bf5a      	itte	pl
 80015ea:	2304      	movpl	r3, #4
 80015ec:	f88d 3006 	strbpl.w	r3, [sp, #6]
    data = 0;
 80015f0:	f88d 0006 	strbmi.w	r0, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 80015f4:	06a9      	lsls	r1, r5, #26
        data |= BIT_STBY_YG;
 80015f6:	bf58      	it	pl
 80015f8:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80015fc:	6821      	ldr	r1, [r4, #0]
 80015fe:	6860      	ldr	r0, [r4, #4]
 8001600:	7d89      	ldrb	r1, [r1, #22]
        data |= BIT_STBY_YG;
 8001602:	bf5c      	itt	pl
 8001604:	f043 0302 	orrpl.w	r3, r3, #2
 8001608:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800160c:	06ea      	lsls	r2, r5, #27
        data |= BIT_STBY_ZG;
 800160e:	bf5e      	ittt	pl
 8001610:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001614:	f043 0301 	orrpl.w	r3, r3, #1
 8001618:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 800161c:	072b      	lsls	r3, r5, #28
        data |= BIT_STBY_XYZA;
 800161e:	bf5e      	ittt	pl
 8001620:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001624:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 8001628:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800162c:	2201      	movs	r2, #1
 800162e:	f10d 0306 	add.w	r3, sp, #6
 8001632:	7800      	ldrb	r0, [r0, #0]
 8001634:	f006 ff3e 	bl	80084b4 <mpu9255_write>
 8001638:	2800      	cmp	r0, #0
 800163a:	d1c4      	bne.n	80015c6 <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 800163c:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 8001640:	d001      	beq.n	8001646 <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 8001642:	f7ff fed7 	bl	80013f4 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001646:	6821      	ldr	r1, [r4, #0]
 8001648:	6860      	ldr	r0, [r4, #4]
 800164a:	7909      	ldrb	r1, [r1, #4]
 800164c:	7800      	ldrb	r0, [r0, #0]
 800164e:	f10d 0307 	add.w	r3, sp, #7
 8001652:	2201      	movs	r2, #1
 8001654:	f006 ff5a 	bl	800850c <mpu9255_read>
 8001658:	2800      	cmp	r0, #0
 800165a:	d1b6      	bne.n	80015ca <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 800165c:	f015 0f01 	tst.w	r5, #1
 8001660:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 8001664:	bf15      	itete	ne
 8001666:	2211      	movne	r2, #17
        data = AKM_POWER_DOWN;
 8001668:	2210      	moveq	r2, #16
        user_ctrl |= BIT_AUX_IF_EN;
 800166a:	f043 0320 	orrne.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 800166e:	f023 0320 	biceq.w	r3, r3, #32
        data = AKM_SINGLE_MEASUREMENT;
 8001672:	bf14      	ite	ne
 8001674:	f88d 2006 	strbne.w	r2, [sp, #6]
        data = AKM_POWER_DOWN;
 8001678:	f88d 2006 	strbeq.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 800167c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 8001680:	f88d 3007 	strb.w	r3, [sp, #7]
 8001684:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 8001688:	b30a      	cbz	r2, 80016ce <mpu_set_sensors+0x12e>
        user_ctrl |= BIT_DMP_EN;
 800168a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 800168e:	6821      	ldr	r1, [r4, #0]
 8001690:	6860      	ldr	r0, [r4, #4]
        user_ctrl &= ~BIT_DMP_EN;
 8001692:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8001696:	2201      	movs	r2, #1
 8001698:	f10d 0306 	add.w	r3, sp, #6
 800169c:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80016a0:	7800      	ldrb	r0, [r0, #0]
 80016a2:	f006 ff07 	bl	80084b4 <mpu9255_write>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d18f      	bne.n	80015ca <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	6860      	ldr	r0, [r4, #4]
 80016ae:	7909      	ldrb	r1, [r1, #4]
 80016b0:	7800      	ldrb	r0, [r0, #0]
 80016b2:	f10d 0307 	add.w	r3, sp, #7
 80016b6:	2201      	movs	r2, #1
 80016b8:	f006 fefc 	bl	80084b4 <mpu9255_write>
 80016bc:	4606      	mov	r6, r0
 80016be:	2800      	cmp	r0, #0
 80016c0:	d183      	bne.n	80015ca <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 80016c2:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 80016c4:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 80016c6:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 80016c8:	f006 ff4e 	bl	8008568 <mpu9255_delay_ms>
    return 0;
 80016cc:	e77f      	b.n	80015ce <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 80016ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016d2:	e7dc      	b.n	800168e <mpu_set_sensors+0xee>
 80016d4:	20000000 	.word	0x20000000

080016d8 <mpu_init>:
{
 80016d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80016da:	4ca6      	ldr	r4, [pc, #664]	; (8001974 <mpu_init+0x29c>)
    data[0] = BIT_RESET;
 80016dc:	ad04      	add	r5, sp, #16
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80016e4:	6821      	ldr	r1, [r4, #0]
 80016e6:	6860      	ldr	r0, [r4, #4]
 80016e8:	7d49      	ldrb	r1, [r1, #21]
 80016ea:	7800      	ldrb	r0, [r0, #0]
 80016ec:	462b      	mov	r3, r5
 80016ee:	2201      	movs	r2, #1
 80016f0:	f006 fee0 	bl	80084b4 <mpu9255_write>
 80016f4:	4606      	mov	r6, r0
 80016f6:	b120      	cbz	r0, 8001702 <mpu_init+0x2a>
        return -1;
 80016f8:	f04f 34ff 	mov.w	r4, #4294967295
}
 80016fc:	4620      	mov	r0, r4
 80016fe:	b004      	add	sp, #16
 8001700:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f006 ff30 	bl	8008568 <mpu9255_delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001708:	6821      	ldr	r1, [r4, #0]
 800170a:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x00;
 800170c:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001710:	462b      	mov	r3, r5
 8001712:	2201      	movs	r2, #1
 8001714:	7d49      	ldrb	r1, [r1, #21]
 8001716:	7800      	ldrb	r0, [r0, #0]
 8001718:	f006 fecc 	bl	80084b4 <mpu9255_write>
 800171c:	2800      	cmp	r0, #0
 800171e:	d1eb      	bne.n	80016f8 <mpu_init+0x20>
   st.chip_cfg.accel_half = 0;
 8001720:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001722:	2348      	movs	r3, #72	; 0x48
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001724:	6821      	ldr	r1, [r4, #0]
 8001726:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001728:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800172c:	2201      	movs	r2, #1
 800172e:	462b      	mov	r3, r5
 8001730:	7a09      	ldrb	r1, [r1, #8]
 8001732:	7800      	ldrb	r0, [r0, #0]
 8001734:	f006 febe 	bl	80084b4 <mpu9255_write>
 8001738:	2800      	cmp	r0, #0
 800173a:	d1dd      	bne.n	80016f8 <mpu_init+0x20>
    st.chip_cfg.sensors = 0xFF;
 800173c:	23ff      	movs	r3, #255	; 0xff
    st.chip_cfg.sample_rate = 0xFFFF;
 800173e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001742:	2501      	movs	r5, #1
    st.chip_cfg.latched_int = 0;
 8001744:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8001748:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800174a:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800174c:	f8c4 0016 	str.w	r0, [r4, #22]
 8001750:	f8c4 001a 	str.w	r0, [r4, #26]
 8001754:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 8001758:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 800175c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001760:	84e0      	strh	r0, [r4, #38]	; 0x26
    if (mpu_set_gyro_fsr(1000))
 8001762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    st.chip_cfg.sensors = 0xFF;
 8001766:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001768:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800176a:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
 800176c:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800176e:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001770:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001772:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8001774:	8522      	strh	r2, [r4, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001776:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 8001778:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(1000))
 800177c:	f7ff fcbe 	bl	80010fc <mpu_set_gyro_fsr>
 8001780:	2800      	cmp	r0, #0
 8001782:	d1b9      	bne.n	80016f8 <mpu_init+0x20>
    if (mpu_set_accel_fsr(2))
 8001784:	2002      	movs	r0, #2
 8001786:	f7ff fd0d 	bl	80011a4 <mpu_set_accel_fsr>
 800178a:	2800      	cmp	r0, #0
 800178c:	d1b4      	bne.n	80016f8 <mpu_init+0x20>
    if (mpu_set_lpf(188))
 800178e:	20bc      	movs	r0, #188	; 0xbc
 8001790:	f7ff fd3c 	bl	800120c <mpu_set_lpf>
 8001794:	2800      	cmp	r0, #0
 8001796:	d1af      	bne.n	80016f8 <mpu_init+0x20>
    if (mpu_set_sample_rate(100))
 8001798:	2064      	movs	r0, #100	; 0x64
 800179a:	f7ff feb9 	bl	8001510 <mpu_set_sample_rate>
 800179e:	2800      	cmp	r0, #0
 80017a0:	d1aa      	bne.n	80016f8 <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 80017a2:	f7ff fd8f 	bl	80012c4 <mpu_configure_fifo>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d1a6      	bne.n	80016f8 <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 80017aa:	4628      	mov	r0, r5
 80017ac:	f7ff fdb2 	bl	8001314 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80017b0:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80017b2:	ab01      	add	r3, sp, #4
 80017b4:	2201      	movs	r2, #1
 80017b6:	2100      	movs	r1, #0
 80017b8:	4628      	mov	r0, r5
 80017ba:	f006 fea7 	bl	800850c <mpu9255_read>
        if (!result && (data[0] == AKM_WHOAMI))
 80017be:	b918      	cbnz	r0, 80017c8 <mpu_init+0xf0>
 80017c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017c4:	2b48      	cmp	r3, #72	; 0x48
 80017c6:	d00c      	beq.n	80017e2 <mpu_init+0x10a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80017c8:	3501      	adds	r5, #1
 80017ca:	b2ed      	uxtb	r5, r5
 80017cc:	2d10      	cmp	r5, #16
 80017ce:	d1f0      	bne.n	80017b2 <mpu_init+0xda>
    if (mpu_set_compass_sample_rate(10))
 80017d0:	200a      	movs	r0, #10
 80017d2:	f7ff fd51 	bl	8001278 <mpu_set_compass_sample_rate>
 80017d6:	4604      	mov	r4, r0
 80017d8:	2800      	cmp	r0, #0
 80017da:	d18d      	bne.n	80016f8 <mpu_init+0x20>
    mpu_set_sensors(0);
 80017dc:	f7ff fee0 	bl	80015a0 <mpu_set_sensors>
    return 0;
 80017e0:	e78c      	b.n	80016fc <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 80017e2:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80017e4:	ab01      	add	r3, sp, #4
 80017e6:	2201      	movs	r2, #1
 80017e8:	210a      	movs	r1, #10
 80017ea:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 80017ec:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 80017f0:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80017f4:	f006 fe5e 	bl	80084b4 <mpu9255_write>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d1e9      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;
    delay_ms(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f006 feb3 	bl	8008568 <mpu9255_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8001802:	231f      	movs	r3, #31
 8001804:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001808:	2201      	movs	r2, #1
 800180a:	ab01      	add	r3, sp, #4
 800180c:	210a      	movs	r1, #10
 800180e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001812:	f006 fe4f 	bl	80084b4 <mpu9255_write>
 8001816:	2800      	cmp	r0, #0
 8001818:	d1da      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;
    delay_ms(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f006 fea4 	bl	8008568 <mpu9255_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001820:	ab01      	add	r3, sp, #4
 8001822:	2203      	movs	r2, #3
 8001824:	4631      	mov	r1, r6
 8001826:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800182a:	f006 fe6f 	bl	800850c <mpu9255_read>
 800182e:	2800      	cmp	r0, #0
 8001830:	d1ce      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001832:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001836:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 800183a:	f88d 6004 	strb.w	r6, [sp, #4]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800183e:	3380      	adds	r3, #128	; 0x80
 8001840:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001842:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001846:	3380      	adds	r3, #128	; 0x80
 8001848:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800184a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800184e:	3380      	adds	r3, #128	; 0x80
 8001850:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001852:	2201      	movs	r2, #1
 8001854:	ab01      	add	r3, sp, #4
 8001856:	210a      	movs	r1, #10
 8001858:	f006 fe2c 	bl	80084b4 <mpu9255_write>
 800185c:	4605      	mov	r5, r0
 800185e:	2800      	cmp	r0, #0
 8001860:	d1b6      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;
    delay_ms(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f006 fe80 	bl	8008568 <mpu9255_delay_ms>

    mpu_set_bypass(0);
 8001868:	4628      	mov	r0, r5
 800186a:	f7ff fd53 	bl	8001314 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 800186e:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001870:	6821      	ldr	r1, [r4, #0]
 8001872:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x40;
 8001874:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001878:	2201      	movs	r2, #1
 800187a:	ab01      	add	r3, sp, #4
 800187c:	7e89      	ldrb	r1, [r1, #26]
 800187e:	7800      	ldrb	r0, [r0, #0]
 8001880:	f006 fe18 	bl	80084b4 <mpu9255_write>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1a3      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001888:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 800188c:	6821      	ldr	r1, [r4, #0]
 800188e:	6860      	ldr	r0, [r4, #4]
 8001890:	7f89      	ldrb	r1, [r1, #30]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001896:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 800189a:	2201      	movs	r2, #1
 800189c:	ab01      	add	r3, sp, #4
 800189e:	7800      	ldrb	r0, [r0, #0]
 80018a0:	f006 fe08 	bl	80084b4 <mpu9255_write>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d193      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 80018a8:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80018aa:	6821      	ldr	r1, [r4, #0]
 80018ac:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_ST1;
 80018ae:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80018b2:	2201      	movs	r2, #1
 80018b4:	ab01      	add	r3, sp, #4
 80018b6:	7fc9      	ldrb	r1, [r1, #31]
 80018b8:	7800      	ldrb	r0, [r0, #0]
 80018ba:	f006 fdfb 	bl	80084b4 <mpu9255_write>
 80018be:	2800      	cmp	r0, #0
 80018c0:	d186      	bne.n	80017d0 <mpu_init+0xf8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 80018c2:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80018c4:	6821      	ldr	r1, [r4, #0]
 80018c6:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 8;
 80018c8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80018cc:	2201      	movs	r2, #1
 80018ce:	ab01      	add	r3, sp, #4
 80018d0:	f891 1020 	ldrb.w	r1, [r1, #32]
 80018d4:	7800      	ldrb	r0, [r0, #0]
 80018d6:	f006 fded 	bl	80084b4 <mpu9255_write>
 80018da:	2800      	cmp	r0, #0
 80018dc:	f47f af78 	bne.w	80017d0 <mpu_init+0xf8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 80018e0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80018e4:	6821      	ldr	r1, [r4, #0]
 80018e6:	6860      	ldr	r0, [r4, #4]
    data[0] = st.chip_cfg.compass_addr;
 80018e8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80018ec:	2201      	movs	r2, #1
 80018ee:	ab01      	add	r3, sp, #4
 80018f0:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 80018f4:	7800      	ldrb	r0, [r0, #0]
 80018f6:	f006 fddd 	bl	80084b4 <mpu9255_write>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	f47f af68 	bne.w	80017d0 <mpu_init+0xf8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8001900:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001902:	6821      	ldr	r1, [r4, #0]
 8001904:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_CNTL;
 8001906:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800190a:	2201      	movs	r2, #1
 800190c:	ab01      	add	r3, sp, #4
 800190e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001912:	7800      	ldrb	r0, [r0, #0]
 8001914:	f006 fdce 	bl	80084b4 <mpu9255_write>
 8001918:	2800      	cmp	r0, #0
 800191a:	f47f af59 	bne.w	80017d0 <mpu_init+0xf8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 800191e:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001920:	6821      	ldr	r1, [r4, #0]
 8001922:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 1;
 8001924:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001928:	2201      	movs	r2, #1
 800192a:	ab01      	add	r3, sp, #4
 800192c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8001930:	7800      	ldrb	r0, [r0, #0]
 8001932:	f006 fdbf 	bl	80084b4 <mpu9255_write>
 8001936:	2800      	cmp	r0, #0
 8001938:	f47f af4a 	bne.w	80017d0 <mpu_init+0xf8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 800193c:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800193e:	6821      	ldr	r1, [r4, #0]
 8001940:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001942:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001946:	2201      	movs	r2, #1
 8001948:	ab01      	add	r3, sp, #4
 800194a:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 800194e:	7800      	ldrb	r0, [r0, #0]
 8001950:	f006 fdb0 	bl	80084b4 <mpu9255_write>
 8001954:	2800      	cmp	r0, #0
 8001956:	f47f af3b 	bne.w	80017d0 <mpu_init+0xf8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 800195a:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 800195c:	6821      	ldr	r1, [r4, #0]
 800195e:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x03;
 8001960:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001964:	2201      	movs	r2, #1
 8001966:	ab01      	add	r3, sp, #4
 8001968:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 800196c:	7800      	ldrb	r0, [r0, #0]
 800196e:	f006 fda1 	bl	80084b4 <mpu9255_write>
 8001972:	e72d      	b.n	80017d0 <mpu_init+0xf8>
 8001974:	20000000 	.word	0x20000000

08001978 <mpu_write_mem>:
{
 8001978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800197a:	460d      	mov	r5, r1
    if (!data)
 800197c:	4616      	mov	r6, r2
 800197e:	b91a      	cbnz	r2, 8001988 <mpu_write_mem+0x10>
        return -1;
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001984:	b003      	add	sp, #12
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8001988:	4c12      	ldr	r4, [pc, #72]	; (80019d4 <mpu_write_mem+0x5c>)
 800198a:	7aa3      	ldrb	r3, [r4, #10]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f7      	beq.n	8001980 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8001990:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001992:	0a03      	lsrs	r3, r0, #8
 8001994:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001998:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 800199a:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800199c:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80019a0:	4408      	add	r0, r1
 80019a2:	4298      	cmp	r0, r3
 80019a4:	dcec      	bgt.n	8001980 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80019a6:	6821      	ldr	r1, [r4, #0]
 80019a8:	7838      	ldrb	r0, [r7, #0]
 80019aa:	7ec9      	ldrb	r1, [r1, #27]
 80019ac:	ab01      	add	r3, sp, #4
 80019ae:	2202      	movs	r2, #2
 80019b0:	f006 fd80 	bl	80084b4 <mpu9255_write>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d1e3      	bne.n	8001980 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80019b8:	6821      	ldr	r1, [r4, #0]
 80019ba:	6860      	ldr	r0, [r4, #4]
 80019bc:	7e09      	ldrb	r1, [r1, #24]
 80019be:	7800      	ldrb	r0, [r0, #0]
 80019c0:	4633      	mov	r3, r6
 80019c2:	b2ea      	uxtb	r2, r5
 80019c4:	f006 fd76 	bl	80084b4 <mpu9255_write>
 80019c8:	3000      	adds	r0, #0
 80019ca:	bf18      	it	ne
 80019cc:	2001      	movne	r0, #1
 80019ce:	4240      	negs	r0, r0
 80019d0:	e7d8      	b.n	8001984 <mpu_write_mem+0xc>
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000

080019d8 <mpu_read_mem>:
{
 80019d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019da:	460d      	mov	r5, r1
    if (!data)
 80019dc:	4616      	mov	r6, r2
 80019de:	b91a      	cbnz	r2, 80019e8 <mpu_read_mem+0x10>
        return -1;
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019e4:	b003      	add	sp, #12
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80019e8:	4c12      	ldr	r4, [pc, #72]	; (8001a34 <mpu_read_mem+0x5c>)
 80019ea:	7aa3      	ldrb	r3, [r4, #10]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f7      	beq.n	80019e0 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80019f0:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80019f2:	0a03      	lsrs	r3, r0, #8
 80019f4:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80019f8:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80019fa:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80019fc:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8001a00:	4408      	add	r0, r1
 8001a02:	4298      	cmp	r0, r3
 8001a04:	dcec      	bgt.n	80019e0 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001a06:	6821      	ldr	r1, [r4, #0]
 8001a08:	7838      	ldrb	r0, [r7, #0]
 8001a0a:	7ec9      	ldrb	r1, [r1, #27]
 8001a0c:	ab01      	add	r3, sp, #4
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f006 fd50 	bl	80084b4 <mpu9255_write>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d1e3      	bne.n	80019e0 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001a18:	6821      	ldr	r1, [r4, #0]
 8001a1a:	6860      	ldr	r0, [r4, #4]
 8001a1c:	7e09      	ldrb	r1, [r1, #24]
 8001a1e:	7800      	ldrb	r0, [r0, #0]
 8001a20:	4633      	mov	r3, r6
 8001a22:	b2ea      	uxtb	r2, r5
 8001a24:	f006 fd72 	bl	800850c <mpu9255_read>
 8001a28:	3000      	adds	r0, #0
 8001a2a:	bf18      	it	ne
 8001a2c:	2001      	movne	r0, #1
 8001a2e:	4240      	negs	r0, r0
 8001a30:	e7d8      	b.n	80019e4 <mpu_read_mem+0xc>
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <mpu_load_firmware>:
{
 8001a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001a3c:	4d26      	ldr	r5, [pc, #152]	; (8001ad8 <mpu_load_firmware+0xa0>)
{
 8001a3e:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8001a40:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	4607      	mov	r7, r0
 8001a48:	4689      	mov	r9, r1
 8001a4a:	4616      	mov	r6, r2
    if (st.chip_cfg.dmp_loaded)
 8001a4c:	b124      	cbz	r4, 8001a58 <mpu_load_firmware+0x20>
        return -1;
 8001a4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a52:	b009      	add	sp, #36	; 0x24
 8001a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	d0f8      	beq.n	8001a4e <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 8001a5c:	42bc      	cmp	r4, r7
 8001a5e:	d315      	bcc.n	8001a8c <mpu_load_firmware+0x54>
    tmp[0] = start_addr >> 8;
 8001a60:	0a33      	lsrs	r3, r6, #8
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8001a62:	6829      	ldr	r1, [r5, #0]
 8001a64:	6868      	ldr	r0, [r5, #4]
    tmp[0] = start_addr >> 8;
 8001a66:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 8001a6a:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8001a6e:	ab03      	add	r3, sp, #12
 8001a70:	2202      	movs	r2, #2
 8001a72:	7f49      	ldrb	r1, [r1, #29]
 8001a74:	7800      	ldrb	r0, [r0, #0]
 8001a76:	f006 fd1d 	bl	80084b4 <mpu9255_write>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1e7      	bne.n	8001a4e <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001a84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001a88:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 8001a8a:	e7e2      	b.n	8001a52 <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001a8c:	eba7 0804 	sub.w	r8, r7, r4
 8001a90:	f1b8 0f10 	cmp.w	r8, #16
 8001a94:	bfa8      	it	ge
 8001a96:	f04f 0810 	movge.w	r8, #16
 8001a9a:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8001a9e:	eb09 0b04 	add.w	fp, r9, r4
 8001aa2:	465a      	mov	r2, fp
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff ff66 	bl	8001978 <mpu_write_mem>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d1ce      	bne.n	8001a4e <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 8001ab0:	aa04      	add	r2, sp, #16
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff ff8f 	bl	80019d8 <mpu_read_mem>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d1c7      	bne.n	8001a4e <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 8001abe:	4652      	mov	r2, sl
 8001ac0:	a904      	add	r1, sp, #16
 8001ac2:	4658      	mov	r0, fp
 8001ac4:	f00a fe9c 	bl	800c800 <memcmp>
 8001ac8:	b910      	cbnz	r0, 8001ad0 <mpu_load_firmware+0x98>
    for (ii = 0; ii < length; ii += this_write) {
 8001aca:	4454      	add	r4, sl
 8001acc:	b2a4      	uxth	r4, r4
 8001ace:	e7c5      	b.n	8001a5c <mpu_load_firmware+0x24>
            return -2;
 8001ad0:	f06f 0001 	mvn.w	r0, #1
 8001ad4:	e7bd      	b.n	8001a52 <mpu_load_firmware+0x1a>
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <mpu_set_dmp_state>:
{
 8001adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001ade:	4d1c      	ldr	r5, [pc, #112]	; (8001b50 <mpu_set_dmp_state+0x74>)
 8001ae0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001ae4:	4283      	cmp	r3, r0
{
 8001ae6:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 8001ae8:	d01d      	beq.n	8001b26 <mpu_set_dmp_state+0x4a>
    if (enable) {
 8001aea:	b1f8      	cbz	r0, 8001b2c <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 8001aec:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8001af0:	b35b      	cbz	r3, 8001b4a <mpu_set_dmp_state+0x6e>
        set_int_enable(0);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fa2c 	bl	8000f50 <set_int_enable>
        mpu_set_bypass(0);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fc0b 	bl	8001314 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001afe:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8001b00:	f7ff fd06 	bl	8001510 <mpu_set_sample_rate>
        tmp = 0;
 8001b04:	ab02      	add	r3, sp, #8
 8001b06:	2400      	movs	r4, #0
 8001b08:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001b0c:	6868      	ldr	r0, [r5, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2123      	movs	r1, #35	; 0x23
 8001b12:	7800      	ldrb	r0, [r0, #0]
 8001b14:	f006 fcce 	bl	80084b4 <mpu9255_write>
        st.chip_cfg.dmp_on = 1;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8001b1e:	f7ff fa17 	bl	8000f50 <set_int_enable>
        mpu_reset_fifo();
 8001b22:	f7ff fa3f 	bl	8000fa4 <mpu_reset_fifo>
        return 0;
 8001b26:	2000      	movs	r0, #0
}
 8001b28:	b003      	add	sp, #12
 8001b2a:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8001b2c:	f7ff fa10 	bl	8000f50 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8001b30:	ab02      	add	r3, sp, #8
 8001b32:	7c2a      	ldrb	r2, [r5, #16]
 8001b34:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001b38:	6868      	ldr	r0, [r5, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2123      	movs	r1, #35	; 0x23
 8001b3e:	7800      	ldrb	r0, [r0, #0]
 8001b40:	f006 fcb8 	bl	80084b4 <mpu9255_write>
        st.chip_cfg.dmp_on = 0;
 8001b44:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8001b48:	e7eb      	b.n	8001b22 <mpu_set_dmp_state+0x46>
            return -1;
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	e7eb      	b.n	8001b28 <mpu_set_dmp_state+0x4c>
 8001b50:	20000000 	.word	0x20000000

08001b54 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8001b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <dmp_enable_gyro_cal.part.0+0x24>)
 8001b58:	6810      	ldr	r0, [r2, #0]
 8001b5a:	6851      	ldr	r1, [r2, #4]
 8001b5c:	7a12      	ldrb	r2, [r2, #8]
 8001b5e:	ab01      	add	r3, sp, #4
 8001b60:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001b62:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001b64:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001b66:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001b6a:	aa01      	add	r2, sp, #4
 8001b6c:	f7ff ff04 	bl	8001978 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8001b70:	b005      	add	sp, #20
 8001b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b76:	bf00      	nop
 8001b78:	0800e040 	.word	0x0800e040

08001b7c <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8001b7c:	23c8      	movs	r3, #200	; 0xc8
 8001b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b82:	4902      	ldr	r1, [pc, #8]	; (8001b8c <dmp_load_motion_driver_firmware+0x10>)
 8001b84:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8001b88:	f7ff bf56 	b.w	8001a38 <mpu_load_firmware>
 8001b8c:	0800e0f4 	.word	0x0800e0f4

08001b90 <dmp_set_orientation>:
{
 8001b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8001b92:	234c      	movs	r3, #76	; 0x4c
 8001b94:	f88d 3008 	strb.w	r3, [sp, #8]
 8001b98:	23cd      	movs	r3, #205	; 0xcd
 8001b9a:	f88d 3009 	strb.w	r3, [sp, #9]
 8001b9e:	236c      	movs	r3, #108	; 0x6c
 8001ba0:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	f88d 300c 	strb.w	r3, [sp, #12]
 8001baa:	23c9      	movs	r3, #201	; 0xc9
 8001bac:	f88d 300d 	strb.w	r3, [sp, #13]
 8001bb0:	232c      	movs	r3, #44	; 0x2c
 8001bb2:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 8001bb6:	f000 0103 	and.w	r1, r0, #3
 8001bba:	ab04      	add	r3, sp, #16
 8001bbc:	4419      	add	r1, r3
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001bbe:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 8001bc2:	f811 3c08 	ldrb.w	r3, [r1, #-8]
 8001bc6:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001bca:	ab04      	add	r3, sp, #16
 8001bcc:	441a      	add	r2, r3
{
 8001bce:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001bd0:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8001bd4:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001bd8:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8001bdc:	a804      	add	r0, sp, #16
 8001bde:	4403      	add	r3, r0
    accel_regs[0] = accel_axes[orient & 3];
 8001be0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001be4:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001be8:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001bec:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 8001bf0:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001bf4:	f88d 2005 	strb.w	r2, [sp, #5]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001bf8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001bfc:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001c00:	466a      	mov	r2, sp
 8001c02:	2103      	movs	r1, #3
 8001c04:	f240 4026 	movw	r0, #1062	; 0x426
 8001c08:	f7ff feb6 	bl	8001978 <mpu_write_mem>
 8001c0c:	b118      	cbz	r0, 8001c16 <dmp_set_orientation+0x86>
        return -1;
 8001c0e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c12:	b004      	add	sp, #16
 8001c14:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8001c16:	aa01      	add	r2, sp, #4
 8001c18:	2103      	movs	r1, #3
 8001c1a:	f240 402a 	movw	r0, #1066	; 0x42a
 8001c1e:	f7ff feab 	bl	8001978 <mpu_write_mem>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d1f3      	bne.n	8001c0e <dmp_set_orientation+0x7e>
    memcpy(gyro_regs, gyro_sign, 3);
 8001c26:	2336      	movs	r3, #54	; 0x36
 8001c28:	f88d 3000 	strb.w	r3, [sp]
 8001c2c:	2356      	movs	r3, #86	; 0x56
 8001c2e:	f88d 3001 	strb.w	r3, [sp, #1]
 8001c32:	2376      	movs	r3, #118	; 0x76
 8001c34:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8001c38:	2326      	movs	r3, #38	; 0x26
 8001c3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8001c3e:	2346      	movs	r3, #70	; 0x46
    if (orient & 4) {
 8001c40:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 8001c42:	f88d 3005 	strb.w	r3, [sp, #5]
 8001c46:	f04f 0366 	mov.w	r3, #102	; 0x66
 8001c4a:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8001c4e:	bf41      	itttt	mi
 8001c50:	2337      	movmi	r3, #55	; 0x37
 8001c52:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8001c56:	2327      	movmi	r3, #39	; 0x27
 8001c58:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 8001c5c:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8001c5e:	bf41      	itttt	mi
 8001c60:	2357      	movmi	r3, #87	; 0x57
 8001c62:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8001c66:	2347      	movmi	r3, #71	; 0x47
 8001c68:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 8001c6c:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8001c6e:	bf44      	itt	mi
 8001c70:	2377      	movmi	r3, #119	; 0x77
 8001c72:	f88d 3002 	strbmi.w	r3, [sp, #2]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001c76:	466a      	mov	r2, sp
        accel_regs[2] |= 1;
 8001c78:	bf48      	it	mi
 8001c7a:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001c7c:	f04f 0103 	mov.w	r1, #3
 8001c80:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8001c84:	bf48      	it	mi
 8001c86:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001c8a:	f7ff fe75 	bl	8001978 <mpu_write_mem>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d1bd      	bne.n	8001c0e <dmp_set_orientation+0x7e>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001c92:	aa01      	add	r2, sp, #4
 8001c94:	2103      	movs	r1, #3
 8001c96:	f240 4031 	movw	r0, #1073	; 0x431
 8001c9a:	f7ff fe6d 	bl	8001978 <mpu_write_mem>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d1b5      	bne.n	8001c0e <dmp_set_orientation+0x7e>
    dmp.orient = orient;
 8001ca2:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <dmp_set_orientation+0x118>)
 8001ca4:	811c      	strh	r4, [r3, #8]
    return 0;
 8001ca6:	e7b4      	b.n	8001c12 <dmp_set_orientation+0x82>
 8001ca8:	200004cc 	.word	0x200004cc

08001cac <dmp_set_fifo_rate>:
{
 8001cac:	b510      	push	{r4, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <dmp_set_fifo_rate+0x58>)
{
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001cb4:	6810      	ldr	r0, [r2, #0]
 8001cb6:	6851      	ldr	r1, [r2, #4]
 8001cb8:	ab03      	add	r3, sp, #12
 8001cba:	c303      	stmia	r3!, {r0, r1}
    if (rate > DMP_SAMPLE_RATE)
 8001cbc:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001cbe:	6890      	ldr	r0, [r2, #8]
 8001cc0:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8001cc2:	d903      	bls.n	8001ccc <dmp_set_fifo_rate+0x20>
        return -1;
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001cc8:	b006      	add	sp, #24
 8001cca:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f88d 3004 	strb.w	r3, [sp, #4]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001cd2:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8001cd4:	23c8      	movs	r3, #200	; 0xc8
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001cd6:	2102      	movs	r1, #2
    div = DMP_SAMPLE_RATE / rate - 1;
 8001cd8:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001cdc:	f240 2016 	movw	r0, #534	; 0x216
    div = DMP_SAMPLE_RATE / rate - 1;
 8001ce0:	3b01      	subs	r3, #1
    tmp[1] = (unsigned char)(div & 0xFF);
 8001ce2:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001ce6:	f7ff fe47 	bl	8001978 <mpu_write_mem>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d1ea      	bne.n	8001cc4 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8001cee:	aa03      	add	r2, sp, #12
 8001cf0:	210c      	movs	r1, #12
 8001cf2:	f640 20c1 	movw	r0, #2753	; 0xac1
 8001cf6:	f7ff fe3f 	bl	8001978 <mpu_write_mem>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d1e2      	bne.n	8001cc4 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 8001cfe:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <dmp_set_fifo_rate+0x5c>)
 8001d00:	819c      	strh	r4, [r3, #12]
    return 0;
 8001d02:	e7e1      	b.n	8001cc8 <dmp_set_fifo_rate+0x1c>
 8001d04:	0800e049 	.word	0x0800e049
 8001d08:	200004cc 	.word	0x200004cc

08001d0c <dmp_set_tap_thresh>:
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	ed2d 8b02 	vpush	{d8}
 8001d12:	4604      	mov	r4, r0
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8001d14:	0760      	lsls	r0, r4, #29
{
 8001d16:	b084      	sub	sp, #16
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8001d18:	d102      	bne.n	8001d20 <dmp_set_tap_thresh+0x14>
        return -1;
 8001d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1e:	e04b      	b.n	8001db8 <dmp_set_tap_thresh+0xac>
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8001d20:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8001d24:	d8f9      	bhi.n	8001d1a <dmp_set_tap_thresh+0xe>
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8001d26:	ee07 1a90 	vmov	s15, r1
 8001d2a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001e68 <dmp_set_tap_thresh+0x15c>
 8001d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    mpu_get_accel_fsr(&accel_fsr);
 8001d32:	f10d 000b 	add.w	r0, sp, #11
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8001d36:	ee87 8a87 	vdiv.f32	s16, s15, s14
    mpu_get_accel_fsr(&accel_fsr);
 8001d3a:	f7ff fa17 	bl	800116c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8001d3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d04d      	beq.n	8001de2 <dmp_set_tap_thresh+0xd6>
 8001d46:	d83b      	bhi.n	8001dc0 <dmp_set_tap_thresh+0xb4>
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d1e6      	bne.n	8001d1a <dmp_set_tap_thresh+0xe>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8001d4c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001e6c <dmp_set_tap_thresh+0x160>
 8001d50:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d58:	edcd 7a01 	vstr	s15, [sp, #4]
 8001d5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8001d60:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001e70 <dmp_set_tap_thresh+0x164>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8001d64:	f88d 200d 	strb.w	r2, [sp, #13]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8001d68:	ee28 8a27 	vmul.f32	s16, s16, s15
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8001d6c:	0a11      	lsrs	r1, r2, #8
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8001d6e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8001d72:	f88d 100c 	strb.w	r1, [sp, #12]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8001d76:	edcd 7a01 	vstr	s15, [sp, #4]
 8001d7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8001d7e:	f88d 300f 	strb.w	r3, [sp, #15]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8001d82:	0a1a      	lsrs	r2, r3, #8
 8001d84:	f88d 200e 	strb.w	r2, [sp, #14]
    if (axis & TAP_X) {
 8001d88:	07e2      	lsls	r2, r4, #31
 8001d8a:	d444      	bmi.n	8001e16 <dmp_set_tap_thresh+0x10a>
    if (axis & TAP_Y) {
 8001d8c:	07a3      	lsls	r3, r4, #30
 8001d8e:	d510      	bpl.n	8001db2 <dmp_set_tap_thresh+0xa6>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8001d90:	aa03      	add	r2, sp, #12
 8001d92:	2102      	movs	r1, #2
 8001d94:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8001d98:	f7ff fdee 	bl	8001978 <mpu_write_mem>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d1bc      	bne.n	8001d1a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8001da0:	f10d 020e 	add.w	r2, sp, #14
 8001da4:	2102      	movs	r1, #2
 8001da6:	f44f 7094 	mov.w	r0, #296	; 0x128
 8001daa:	f7ff fde5 	bl	8001978 <mpu_write_mem>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d1b3      	bne.n	8001d1a <dmp_set_tap_thresh+0xe>
    if (axis & TAP_Z) {
 8001db2:	f014 0004 	ands.w	r0, r4, #4
 8001db6:	d141      	bne.n	8001e3c <dmp_set_tap_thresh+0x130>
}
 8001db8:	b004      	add	sp, #16
 8001dba:	ecbd 8b02 	vpop	{d8}
 8001dbe:	bd10      	pop	{r4, pc}
    switch (accel_fsr) {
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d01b      	beq.n	8001dfc <dmp_set_tap_thresh+0xf0>
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d1a8      	bne.n	8001d1a <dmp_set_tap_thresh+0xe>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8001dc8:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8001e74 <dmp_set_tap_thresh+0x168>
 8001dcc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd4:	edcd 7a01 	vstr	s15, [sp, #4]
 8001dd8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8001ddc:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001e78 <dmp_set_tap_thresh+0x16c>
 8001de0:	e7c0      	b.n	8001d64 <dmp_set_tap_thresh+0x58>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8001de2:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001e7c <dmp_set_tap_thresh+0x170>
 8001de6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dee:	edcd 7a01 	vstr	s15, [sp, #4]
 8001df2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8001df6:	eddf 7a22 	vldr	s15, [pc, #136]	; 8001e80 <dmp_set_tap_thresh+0x174>
 8001dfa:	e7b3      	b.n	8001d64 <dmp_set_tap_thresh+0x58>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8001dfc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001e84 <dmp_set_tap_thresh+0x178>
 8001e00:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e08:	edcd 7a01 	vstr	s15, [sp, #4]
 8001e0c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8001e10:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001e88 <dmp_set_tap_thresh+0x17c>
 8001e14:	e7a6      	b.n	8001d64 <dmp_set_tap_thresh+0x58>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8001e16:	aa03      	add	r2, sp, #12
 8001e18:	2102      	movs	r1, #2
 8001e1a:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8001e1e:	f7ff fdab 	bl	8001978 <mpu_write_mem>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	f47f af79 	bne.w	8001d1a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8001e28:	f10d 020e 	add.w	r2, sp, #14
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	f44f 7092 	mov.w	r0, #292	; 0x124
 8001e32:	f7ff fda1 	bl	8001978 <mpu_write_mem>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d0a8      	beq.n	8001d8c <dmp_set_tap_thresh+0x80>
 8001e3a:	e76e      	b.n	8001d1a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8001e3c:	aa03      	add	r2, sp, #12
 8001e3e:	2102      	movs	r1, #2
 8001e40:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8001e44:	f7ff fd98 	bl	8001978 <mpu_write_mem>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	f47f af66 	bne.w	8001d1a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8001e4e:	f10d 020e 	add.w	r2, sp, #14
 8001e52:	2102      	movs	r1, #2
 8001e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e58:	f7ff fd8e 	bl	8001978 <mpu_write_mem>
 8001e5c:	3000      	adds	r0, #0
 8001e5e:	bf18      	it	ne
 8001e60:	2001      	movne	r0, #1
 8001e62:	4240      	negs	r0, r0
 8001e64:	e7a8      	b.n	8001db8 <dmp_set_tap_thresh+0xac>
 8001e66:	bf00      	nop
 8001e68:	43480000 	.word	0x43480000
 8001e6c:	46800000 	.word	0x46800000
 8001e70:	46400000 	.word	0x46400000
 8001e74:	45000000 	.word	0x45000000
 8001e78:	44c00000 	.word	0x44c00000
 8001e7c:	46000000 	.word	0x46000000
 8001e80:	45c00000 	.word	0x45c00000
 8001e84:	45800000 	.word	0x45800000
 8001e88:	45400000 	.word	0x45400000

08001e8c <dmp_set_tap_axes>:
{
 8001e8c:	b507      	push	{r0, r1, r2, lr}
    if (axis & TAP_X)
 8001e8e:	f010 0301 	ands.w	r3, r0, #1
        tmp |= 0x30;
 8001e92:	bf18      	it	ne
 8001e94:	2330      	movne	r3, #48	; 0x30
 8001e96:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_Y)
 8001e9a:	0782      	lsls	r2, r0, #30
        tmp |= 0x0C;
 8001e9c:	bf42      	ittt	mi
 8001e9e:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
 8001ea2:	f043 030c 	orrmi.w	r3, r3, #12
 8001ea6:	f88d 3007 	strbmi.w	r3, [sp, #7]
    if (axis & TAP_Z)
 8001eaa:	0743      	lsls	r3, r0, #29
        tmp |= 0x03;
 8001eac:	bf48      	it	mi
 8001eae:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8001eb2:	f10d 0207 	add.w	r2, sp, #7
        tmp |= 0x03;
 8001eb6:	bf48      	it	mi
 8001eb8:	f043 0303 	orrmi.w	r3, r3, #3
    return mpu_write_mem(D_1_72, 1, &tmp);
 8001ebc:	f04f 0101 	mov.w	r1, #1
 8001ec0:	f44f 70a4 	mov.w	r0, #328	; 0x148
        tmp |= 0x03;
 8001ec4:	bf48      	it	mi
 8001ec6:	f88d 3007 	strbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8001eca:	f7ff fd55 	bl	8001978 <mpu_write_mem>
}
 8001ece:	b003      	add	sp, #12
 8001ed0:	f85d fb04 	ldr.w	pc, [sp], #4

08001ed4 <dmp_set_tap_count>:
{
 8001ed4:	b507      	push	{r0, r1, r2, lr}
    if (min_taps < 1)
 8001ed6:	b170      	cbz	r0, 8001ef6 <dmp_set_tap_count+0x22>
 8001ed8:	2804      	cmp	r0, #4
 8001eda:	bf28      	it	cs
 8001edc:	2004      	movcs	r0, #4
    tmp = min_taps - 1;
 8001ede:	aa02      	add	r2, sp, #8
 8001ee0:	3801      	subs	r0, #1
 8001ee2:	f802 0d01 	strb.w	r0, [r2, #-1]!
    return mpu_write_mem(D_1_79, 1, &tmp);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	f240 104f 	movw	r0, #335	; 0x14f
 8001eec:	f7ff fd44 	bl	8001978 <mpu_write_mem>
}
 8001ef0:	b003      	add	sp, #12
 8001ef2:	f85d fb04 	ldr.w	pc, [sp], #4
        min_taps = 1;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e7f1      	b.n	8001ede <dmp_set_tap_count+0xa>

08001efa <dmp_set_tap_time>:
{
 8001efa:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8001efc:	2305      	movs	r3, #5
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8001efe:	aa01      	add	r2, sp, #4
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8001f00:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8001f04:	2102      	movs	r1, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8001f06:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8001f08:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8001f0c:	f44f 70ef 	mov.w	r0, #478	; 0x1de
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8001f10:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8001f14:	f7ff fd30 	bl	8001978 <mpu_write_mem>
}
 8001f18:	b003      	add	sp, #12
 8001f1a:	f85d fb04 	ldr.w	pc, [sp], #4

08001f1e <dmp_set_tap_time_multi>:
{
 8001f1e:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8001f20:	2305      	movs	r3, #5
    return mpu_write_mem(D_1_218, 2, tmp);
 8001f22:	aa01      	add	r2, sp, #4
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8001f24:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_218, 2, tmp);
 8001f28:	2102      	movs	r1, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8001f2a:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8001f2c:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_218, 2, tmp);
 8001f30:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8001f34:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_218, 2, tmp);
 8001f38:	f7ff fd1e 	bl	8001978 <mpu_write_mem>
}
 8001f3c:	b003      	add	sp, #12
 8001f3e:	f85d fb04 	ldr.w	pc, [sp], #4

08001f42 <dmp_set_shake_reject_thresh>:
{
 8001f42:	b507      	push	{r0, r1, r2, lr}
    long thresh_scaled = sf / 1000 * thresh;
 8001f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f48:	fb90 f0f3 	sdiv	r0, r0, r3
 8001f4c:	4341      	muls	r1, r0
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8001f4e:	160b      	asrs	r3, r1, #24
 8001f50:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8001f54:	140b      	asrs	r3, r1, #16
 8001f56:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8001f5a:	f88d 1007 	strb.w	r1, [sp, #7]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8001f5e:	120b      	asrs	r3, r1, #8
    return mpu_write_mem(D_1_92, 4, tmp);
 8001f60:	aa01      	add	r2, sp, #4
 8001f62:	2104      	movs	r1, #4
 8001f64:	f44f 70ae 	mov.w	r0, #348	; 0x15c
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8001f68:	f88d 3006 	strb.w	r3, [sp, #6]
    return mpu_write_mem(D_1_92, 4, tmp);
 8001f6c:	f7ff fd04 	bl	8001978 <mpu_write_mem>
}
 8001f70:	b003      	add	sp, #12
 8001f72:	f85d fb04 	ldr.w	pc, [sp], #4

08001f76 <dmp_set_shake_reject_time>:
{
 8001f76:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 8001f78:	2305      	movs	r3, #5
    return mpu_write_mem(D_1_90,2,tmp);
 8001f7a:	aa01      	add	r2, sp, #4
    time /= (1000 / DMP_SAMPLE_RATE);
 8001f7c:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_90,2,tmp);
 8001f80:	2102      	movs	r1, #2
    tmp[0] = time >> 8;
 8001f82:	0a03      	lsrs	r3, r0, #8
    tmp[1] = time & 0xFF;
 8001f84:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_90,2,tmp);
 8001f88:	f44f 70ad 	mov.w	r0, #346	; 0x15a
    tmp[0] = time >> 8;
 8001f8c:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_90,2,tmp);
 8001f90:	f7ff fcf2 	bl	8001978 <mpu_write_mem>
}
 8001f94:	b003      	add	sp, #12
 8001f96:	f85d fb04 	ldr.w	pc, [sp], #4

08001f9a <dmp_set_shake_reject_timeout>:
{
 8001f9a:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 8001f9c:	2305      	movs	r3, #5
    return mpu_write_mem(D_1_88,2,tmp);
 8001f9e:	aa01      	add	r2, sp, #4
    time /= (1000 / DMP_SAMPLE_RATE);
 8001fa0:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_88,2,tmp);
 8001fa4:	2102      	movs	r1, #2
    tmp[0] = time >> 8;
 8001fa6:	0a03      	lsrs	r3, r0, #8
    tmp[1] = time & 0xFF;
 8001fa8:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_88,2,tmp);
 8001fac:	f44f 70ac 	mov.w	r0, #344	; 0x158
    tmp[0] = time >> 8;
 8001fb0:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_88,2,tmp);
 8001fb4:	f7ff fce0 	bl	8001978 <mpu_write_mem>
}
 8001fb8:	b003      	add	sp, #12
 8001fba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001fc0 <dmp_enable_gyro_cal>:
{
 8001fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 8001fc2:	b120      	cbz	r0, 8001fce <dmp_enable_gyro_cal+0xe>
 8001fc4:	f7ff fdc6 	bl	8001b54 <dmp_enable_gyro_cal.part.0>
}
 8001fc8:	b005      	add	sp, #20
 8001fca:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <dmp_enable_gyro_cal+0x2c>)
 8001fd0:	6810      	ldr	r0, [r2, #0]
 8001fd2:	6851      	ldr	r1, [r2, #4]
 8001fd4:	7a12      	ldrb	r2, [r2, #8]
 8001fd6:	ab01      	add	r3, sp, #4
 8001fd8:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001fda:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001fdc:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001fde:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001fe2:	aa01      	add	r2, sp, #4
 8001fe4:	f7ff fcc8 	bl	8001978 <mpu_write_mem>
 8001fe8:	e7ee      	b.n	8001fc8 <dmp_enable_gyro_cal+0x8>
 8001fea:	bf00      	nop
 8001fec:	0800e055 	.word	0x0800e055

08001ff0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8001ff0:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001ff2:	b1b0      	cbz	r0, 8002022 <dmp_enable_lp_quat+0x32>
        regs[0] = DINBC0;
 8001ff4:	23c0      	movs	r3, #192	; 0xc0
 8001ff6:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINBC2;
 8001ffa:	23c2      	movs	r3, #194	; 0xc2
 8001ffc:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINBC4;
 8002000:	23c4      	movs	r3, #196	; 0xc4
 8002002:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINBC6;
 8002006:	23c6      	movs	r3, #198	; 0xc6
 8002008:	f88d 3007 	strb.w	r3, [sp, #7]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800200c:	aa01      	add	r2, sp, #4
 800200e:	2104      	movs	r1, #4
 8002010:	f640 2098 	movw	r0, #2712	; 0xa98
 8002014:	f7ff fcb0 	bl	8001978 <mpu_write_mem>

    return mpu_reset_fifo();
 8002018:	f7fe ffc4 	bl	8000fa4 <mpu_reset_fifo>
}
 800201c:	b003      	add	sp, #12
 800201e:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8002022:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	e7f0      	b.n	800200c <dmp_enable_lp_quat+0x1c>

0800202a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800202a:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 800202c:	b1b0      	cbz	r0, 800205c <dmp_enable_6x_lp_quat+0x32>
        regs[0] = DINA20;
 800202e:	2320      	movs	r3, #32
 8002030:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINA28;
 8002034:	2328      	movs	r3, #40	; 0x28
 8002036:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINA30;
 800203a:	2330      	movs	r3, #48	; 0x30
 800203c:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINA38;
 8002040:	2338      	movs	r3, #56	; 0x38
 8002042:	f88d 3007 	strb.w	r3, [sp, #7]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8002046:	aa01      	add	r2, sp, #4
 8002048:	2104      	movs	r1, #4
 800204a:	f640 209e 	movw	r0, #2718	; 0xa9e
 800204e:	f7ff fc93 	bl	8001978 <mpu_write_mem>

    return mpu_reset_fifo();
 8002052:	f7fe ffa7 	bl	8000fa4 <mpu_reset_fifo>
}
 8002056:	b003      	add	sp, #12
 8002058:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 800205c:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	e7f0      	b.n	8002046 <dmp_enable_6x_lp_quat+0x1c>

08002064 <dmp_enable_feature>:
{
 8002064:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8002068:	2302      	movs	r3, #2
 800206a:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800206e:	23ca      	movs	r3, #202	; 0xca
 8002070:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8002074:	23e3      	movs	r3, #227	; 0xe3
{
 8002076:	4604      	mov	r4, r0
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8002078:	f88d 3006 	strb.w	r3, [sp, #6]
    mpu_write_mem(D_0_104, 4, tmp);
 800207c:	aa01      	add	r2, sp, #4
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800207e:	2309      	movs	r3, #9
    mpu_write_mem(D_0_104, 4, tmp);
 8002080:	2104      	movs	r1, #4
 8002082:	2068      	movs	r0, #104	; 0x68
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8002084:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(D_0_104, 4, tmp);
 8002088:	f7ff fc76 	bl	8001978 <mpu_write_mem>
    tmp[0] = 0xA3;
 800208c:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800208e:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8002092:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8002096:	bf1f      	itttt	ne
 8002098:	23c0      	movne	r3, #192	; 0xc0
 800209a:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 800209e:	23c8      	movne	r3, #200	; 0xc8
 80020a0:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[1] = 0xA3;
 80020a4:	bf0a      	itet	eq
 80020a6:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[3] = 0xC2;
 80020aa:	23c2      	movne	r3, #194	; 0xc2
        tmp[2] = 0xA3;
 80020ac:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80020b0:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 80020b4:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 80020b8:	bf1d      	ittte	ne
 80020ba:	23c4      	movne	r3, #196	; 0xc4
 80020bc:	f88d 3008 	strbne.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 80020c0:	23cc      	movne	r3, #204	; 0xcc
        tmp[4] = 0xA3;
 80020c2:	23a3      	moveq	r3, #163	; 0xa3
        tmp[5] = 0xCC;
 80020c4:	bf19      	ittee	ne
 80020c6:	f88d 3009 	strbne.w	r3, [sp, #9]
        tmp[6] = 0xC6;
 80020ca:	23c6      	movne	r3, #198	; 0xc6
        tmp[4] = 0xA3;
 80020cc:	f88d 3008 	strbeq.w	r3, [sp, #8]
        tmp[5] = 0xA3;
 80020d0:	f88d 3009 	strbeq.w	r3, [sp, #9]
        tmp[6] = 0xA3;
 80020d4:	f88d 300a 	strb.w	r3, [sp, #10]
    mpu_write_mem(CFG_15,10,tmp);
 80020d8:	aa01      	add	r2, sp, #4
    tmp[7] = 0xA3;
 80020da:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 80020dc:	210a      	movs	r1, #10
 80020de:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 80020e2:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 80020e6:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 80020ea:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 80020ee:	f7ff fc43 	bl	8001978 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80020f2:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 80020f6:	bf14      	ite	ne
 80020f8:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 80020fa:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 80020fc:	aa01      	add	r2, sp, #4
 80020fe:	2101      	movs	r1, #1
 8002100:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8002104:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8002108:	f7ff fc36 	bl	8001978 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 800210c:	f014 0020 	ands.w	r0, r4, #32
 8002110:	d073      	beq.n	80021fa <dmp_enable_feature+0x196>
 8002112:	f7ff fd1f 	bl	8001b54 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8002116:	f1b8 0f00 	cmp.w	r8, #0
 800211a:	d013      	beq.n	8002144 <dmp_enable_feature+0xe0>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800211c:	05e1      	lsls	r1, r4, #23
 800211e:	d56f      	bpl.n	8002200 <dmp_enable_feature+0x19c>
            tmp[0] = 0xB2;
 8002120:	23b2      	movs	r3, #178	; 0xb2
 8002122:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = 0x8B;
 8002126:	238b      	movs	r3, #139	; 0x8b
 8002128:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = 0xB6;
 800212c:	23b6      	movs	r3, #182	; 0xb6
 800212e:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = 0x9B;
 8002132:	239b      	movs	r3, #155	; 0x9b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8002134:	aa01      	add	r2, sp, #4
 8002136:	2104      	movs	r1, #4
 8002138:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[3] = DINA90;
 800213c:	f88d 3007 	strb.w	r3, [sp, #7]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8002140:	f7ff fc1a 	bl	8001978 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
 8002144:	07e2      	lsls	r2, r4, #31
 8002146:	d566      	bpl.n	8002216 <dmp_enable_feature+0x1b2>
        tmp[0] = 0xF8;
 8002148:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
 800214a:	aa01      	add	r2, sp, #4
 800214c:	2101      	movs	r1, #1
 800214e:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
        tmp[0] = 0xF8;
 8002152:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 8002156:	f7ff fc0f 	bl	8001978 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800215a:	21fa      	movs	r1, #250	; 0xfa
 800215c:	2007      	movs	r0, #7
 800215e:	f7ff fdd5 	bl	8001d0c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8002162:	2007      	movs	r0, #7
 8002164:	f7ff fe92 	bl	8001e8c <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff feb3 	bl	8001ed4 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800216e:	2064      	movs	r0, #100	; 0x64
 8002170:	f7ff fec3 	bl	8001efa <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8002174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002178:	f7ff fed1 	bl	8001f1e <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800217c:	21c8      	movs	r1, #200	; 0xc8
 800217e:	482c      	ldr	r0, [pc, #176]	; (8002230 <dmp_enable_feature+0x1cc>)
 8002180:	f7ff fedf 	bl	8001f42 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8002184:	2028      	movs	r0, #40	; 0x28
 8002186:	f7ff fef6 	bl	8001f76 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800218a:	200a      	movs	r0, #10
 800218c:	f7ff ff05 	bl	8001f9a <dmp_set_shake_reject_timeout>
    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8002190:	07a3      	lsls	r3, r4, #30
        tmp[0] = 0xD9;
 8002192:	bf4c      	ite	mi
 8002194:	23d9      	movmi	r3, #217	; 0xd9
        tmp[0] = 0xD8;
 8002196:	23d8      	movpl	r3, #216	; 0xd8
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8002198:	aa01      	add	r2, sp, #4
 800219a:	2101      	movs	r1, #1
 800219c:	f240 703d 	movw	r0, #1853	; 0x73d
        tmp[0] = 0xD8;
 80021a0:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80021a4:	f7ff fbe8 	bl	8001978 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 80021a8:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 80021ac:	bf18      	it	ne
 80021ae:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 80021b0:	f7ff ff1e 	bl	8001ff0 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 80021b4:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 80021b8:	bf18      	it	ne
 80021ba:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80021bc:	4d1d      	ldr	r5, [pc, #116]	; (8002234 <dmp_enable_feature+0x1d0>)
        dmp_enable_6x_lp_quat(0);
 80021be:	f7ff ff34 	bl	800202a <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80021c2:	f044 0308 	orr.w	r3, r4, #8
 80021c6:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 80021c8:	f7fe feec 	bl	8000fa4 <mpu_reset_fifo>
 80021cc:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 80021ce:	bb67      	cbnz	r7, 800222a <dmp_enable_feature+0x1c6>
    dmp.packet_length = 0;
 80021d0:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80021d2:	f1b8 0f00 	cmp.w	r8, #0
 80021d6:	d002      	beq.n	80021de <dmp_enable_feature+0x17a>
        dmp.packet_length += 6;
 80021d8:	7b9a      	ldrb	r2, [r3, #14]
 80021da:	3206      	adds	r2, #6
 80021dc:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80021de:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 80021e2:	bf1e      	ittt	ne
 80021e4:	7b9a      	ldrbne	r2, [r3, #14]
 80021e6:	3210      	addne	r2, #16
 80021e8:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80021ea:	b116      	cbz	r6, 80021f2 <dmp_enable_feature+0x18e>
        dmp.packet_length += 4;
 80021ec:	7b9a      	ldrb	r2, [r3, #14]
 80021ee:	3204      	adds	r2, #4
 80021f0:	739a      	strb	r2, [r3, #14]
}
 80021f2:	2000      	movs	r0, #0
 80021f4:	b004      	add	sp, #16
 80021f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 80021fa:	f7ff fee1 	bl	8001fc0 <dmp_enable_gyro_cal>
 80021fe:	e78a      	b.n	8002116 <dmp_enable_feature+0xb2>
            tmp[0] = DINAC0;
 8002200:	23b0      	movs	r3, #176	; 0xb0
 8002202:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = DINA80;
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = DINAC2;
 800220c:	23b4      	movs	r3, #180	; 0xb4
 800220e:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = DINA90;
 8002212:	2390      	movs	r3, #144	; 0x90
 8002214:	e78e      	b.n	8002134 <dmp_enable_feature+0xd0>
        tmp[0] = 0xD8;
 8002216:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
 8002218:	aa01      	add	r2, sp, #4
 800221a:	2101      	movs	r1, #1
 800221c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
        tmp[0] = 0xD8;
 8002220:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 8002224:	f7ff fba8 	bl	8001978 <mpu_write_mem>
 8002228:	e7b2      	b.n	8002190 <dmp_enable_feature+0x12c>
        dmp.packet_length += 6;
 800222a:	2206      	movs	r2, #6
 800222c:	73aa      	strb	r2, [r5, #14]
 800222e:	e7d0      	b.n	80021d2 <dmp_enable_feature+0x16e>
 8002230:	02cae309 	.word	0x02cae309
 8002234:	200004cc 	.word	0x200004cc

08002238 <dmp_register_tap_cb>:
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
    dmp.tap_cb = func;
 8002238:	4b01      	ldr	r3, [pc, #4]	; (8002240 <dmp_register_tap_cb+0x8>)
 800223a:	6018      	str	r0, [r3, #0]
    return 0;
}
 800223c:	2000      	movs	r0, #0
 800223e:	4770      	bx	lr
 8002240:	200004cc 	.word	0x200004cc

08002244 <dmp_register_android_orient_cb>:
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_android_orient_cb(void (*func)(unsigned char))
{
    dmp.android_orient_cb = func;
 8002244:	4b01      	ldr	r3, [pc, #4]	; (800224c <dmp_register_android_orient_cb+0x8>)
 8002246:	6058      	str	r0, [r3, #4]
    return 0;
}
 8002248:	2000      	movs	r0, #0
 800224a:	4770      	bx	lr
 800224c:	200004cc 	.word	0x200004cc

08002250 <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 8002250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002254:	4d11      	ldr	r5, [pc, #68]	; (800229c <systick_app_timer_tickAndProcess+0x4c>)
 8002256:	2400      	movs	r4, #0
 8002258:	462e      	mov	r6, r5
								appTimer.channel[i].timer->timerAlarmCallback();
								appTimer.channel[i].timer->value = 0;
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
								appTimer.channel[i].active = false;
 800225a:	4627      	mov	r7, r4
			if (appTimer.channel[i].timer != 0) {
 800225c:	686b      	ldr	r3, [r5, #4]
 800225e:	b1b3      	cbz	r3, 800228e <systick_app_timer_tickAndProcess+0x3e>
				if (appTimer.channel[i].active) {
 8002260:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
 8002264:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002268:	b18a      	cbz	r2, 800228e <systick_app_timer_tickAndProcess+0x3e>
					appTimer.channel[i].timer->value++;
 800226a:	685a      	ldr	r2, [r3, #4]
					if (appTimer.channel[i].timer->alarm > 0) {
 800226c:	68d9      	ldr	r1, [r3, #12]
					appTimer.channel[i].timer->value++;
 800226e:	3201      	adds	r2, #1
 8002270:	605a      	str	r2, [r3, #4]
					if (appTimer.channel[i].timer->alarm > 0) {
 8002272:	b161      	cbz	r1, 800228e <systick_app_timer_tickAndProcess+0x3e>
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 8002274:	428a      	cmp	r2, r1
 8002276:	d30a      	bcc.n	800228e <systick_app_timer_tickAndProcess+0x3e>
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	b113      	cbz	r3, 8002282 <systick_app_timer_tickAndProcess+0x32>
								appTimer.channel[i].timer->timerAlarmCallback();
 800227c:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 800227e:	686b      	ldr	r3, [r5, #4]
 8002280:	605f      	str	r7, [r3, #4]
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 8002282:	686b      	ldr	r3, [r5, #4]
 8002284:	7a1b      	ldrb	r3, [r3, #8]
 8002286:	2b01      	cmp	r3, #1
								appTimer.channel[i].active = false;
 8002288:	bf08      	it	eq
 800228a:	f806 7008 	strbeq.w	r7, [r6, r8]
 800228e:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8002290:	2c0a      	cmp	r4, #10
 8002292:	f105 0508 	add.w	r5, r5, #8
 8002296:	d1e1      	bne.n	800225c <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 8002298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800229c:	200004dc 	.word	0x200004dc

080022a0 <systick_app_timer_channel_start>:

	return 1; // channel not found
}

uint32_t systick_app_timer_channel_start(uint8_t channel){
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 80022a0:	2809      	cmp	r0, #9
 80022a2:	d809      	bhi.n	80022b8 <systick_app_timer_channel_start+0x18>
		return 2; // channel number out of bounds
	}

	if (appTimer.channel[channel].timer) {
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <systick_app_timer_channel_start+0x20>)
 80022a6:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	2301      	movs	r3, #1
 80022ae:	b129      	cbz	r1, 80022bc <systick_app_timer_channel_start+0x1c>
		appTimer.channel[channel].active = true;
 80022b0:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
 80022b4:	2000      	movs	r0, #0
 80022b6:	4770      	bx	lr
		return 2; // channel number out of bounds
 80022b8:	2002      	movs	r0, #2
 80022ba:	4770      	bx	lr
	}

	return 1; // channel not found
 80022bc:	4618      	mov	r0, r3
}
 80022be:	4770      	bx	lr
 80022c0:	200004dc 	.word	0x200004dc

080022c4 <systick_app_timer_channel_create>:
/*
 * Register a channel. The channel pointer should be declared
 * in memory by the requesting module. It is only pointed at by
 * the app timer module.
 */
uint32_t systick_app_timer_channel_create(systick_app_timer_t * timer){
 80022c4:	b570      	push	{r4, r5, r6, lr}
	if (appTimer.count >= APP_TIMER_MAX_CHANNELS) {
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <systick_app_timer_channel_create+0x34>)
 80022c8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80022cc:	2909      	cmp	r1, #9
 80022ce:	d810      	bhi.n	80022f2 <systick_app_timer_channel_create+0x2e>
 80022d0:	2200      	movs	r2, #0
	}

	uint8_t i;
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
		// take the first available slot
		if (appTimer.channel[i].timer == 0) {
 80022d2:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 80022d6:	b2d5      	uxtb	r5, r2
 80022d8:	6866      	ldr	r6, [r4, #4]
 80022da:	b936      	cbnz	r6, 80022ea <systick_app_timer_channel_create+0x26>
			appTimer.channel[i].timer = timer;
 80022dc:	6060      	str	r0, [r4, #4]
			appTimer.channel[i].timer->channel = i;
 80022de:	7005      	strb	r5, [r0, #0]
			break;
		}
	}

	appTimer.count++;
 80022e0:	3101      	adds	r1, #1
 80022e2:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50

	return 0;
 80022e6:	2000      	movs	r0, #0
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
 80022ea:	3201      	adds	r2, #1
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 80022ec:	2a0a      	cmp	r2, #10
 80022ee:	d1f0      	bne.n	80022d2 <systick_app_timer_channel_create+0xe>
 80022f0:	e7f6      	b.n	80022e0 <systick_app_timer_channel_create+0x1c>
		return 2; // timer module is full
 80022f2:	2002      	movs	r0, #2
}
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	bf00      	nop
 80022f8:	200004dc 	.word	0x200004dc

080022fc <systick_app_timer_module_init>:

void systick_app_timer_module_init() {

	memset(&appTimer, 0, sizeof(appTimer));
 80022fc:	2254      	movs	r2, #84	; 0x54
 80022fe:	2100      	movs	r1, #0
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <systick_app_timer_module_init+0xc>)
 8002302:	f00a ba97 	b.w	800c834 <memset>
 8002306:	bf00      	nop
 8002308:	200004dc 	.word	0x200004dc

0800230c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800230c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800230e:	4c06      	ldr	r4, [pc, #24]	; (8002328 <SD_initialize+0x1c>)
 8002310:	2301      	movs	r3, #1
 8002312:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8002314:	f006 fb44 	bl	80089a0 <BSP_SD_Init>
 8002318:	4623      	mov	r3, r4
 800231a:	b918      	cbnz	r0, 8002324 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 800231c:	7822      	ldrb	r2, [r4, #0]
 800231e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002322:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8002324:	7818      	ldrb	r0, [r3, #0]
}
 8002326:	bd10      	pop	{r4, pc}
 8002328:	20000038 	.word	0x20000038

0800232c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800232c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800232e:	4c06      	ldr	r4, [pc, #24]	; (8002348 <SD_status+0x1c>)
 8002330:	2301      	movs	r3, #1
 8002332:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8002334:	f006 fa9e 	bl	8008874 <BSP_SD_GetStatus>
 8002338:	4623      	mov	r3, r4
 800233a:	b918      	cbnz	r0, 8002344 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 800233c:	7822      	ldrb	r2, [r4, #0]
 800233e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002342:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8002344:	7818      	ldrb	r0, [r3, #0]
}
 8002346:	bd10      	pop	{r4, pc}
 8002348:	20000038 	.word	0x20000038

0800234c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800234c:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	0252      	lsls	r2, r2, #9
 8002358:	2300      	movs	r3, #0
 800235a:	4608      	mov	r0, r1
 800235c:	f006 fac8 	bl	80088f0 <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8002360:	3000      	adds	r0, #0
 8002362:	bf18      	it	ne
 8002364:	2001      	movne	r0, #1
 8002366:	b003      	add	sp, #12
 8002368:	f85d fb04 	ldr.w	pc, [sp], #4

0800236c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800236c:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	0252      	lsls	r2, r2, #9
 8002378:	2300      	movs	r3, #0
 800237a:	4608      	mov	r0, r1
 800237c:	f006 fb92 	bl	8008aa4 <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8002380:	3000      	adds	r0, #0
 8002382:	bf18      	it	ne
 8002384:	2001      	movne	r0, #1
 8002386:	b003      	add	sp, #12
 8002388:	f85d fb04 	ldr.w	pc, [sp], #4

0800238c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800238c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <SD_ioctl+0x4c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	07db      	lsls	r3, r3, #31
{
 8002394:	b096      	sub	sp, #88	; 0x58
 8002396:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002398:	d41c      	bmi.n	80023d4 <SD_ioctl+0x48>
  
  switch (cmd)
 800239a:	2903      	cmp	r1, #3
 800239c:	d803      	bhi.n	80023a6 <SD_ioctl+0x1a>
 800239e:	e8df f001 	tbb	[pc, r1]
 80023a2:	050e      	.short	0x050e
 80023a4:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 80023a6:	2004      	movs	r0, #4
  }
  
  return res;
}
 80023a8:	b016      	add	sp, #88	; 0x58
 80023aa:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80023ac:	4668      	mov	r0, sp
 80023ae:	f006 fa67 	bl	8008880 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 80023b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80023b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80023b6:	0a5b      	lsrs	r3, r3, #9
 80023b8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80023bc:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 80023be:	2000      	movs	r0, #0
 80023c0:	e7f2      	b.n	80023a8 <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 80023c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c6:	8013      	strh	r3, [r2, #0]
 80023c8:	e7f9      	b.n	80023be <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 80023ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ce:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 80023d0:	2001      	movs	r0, #1
    break;
 80023d2:	e7e9      	b.n	80023a8 <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80023d4:	2003      	movs	r0, #3
 80023d6:	e7e7      	b.n	80023a8 <SD_ioctl+0x1c>
 80023d8:	20000038 	.word	0x20000038

080023dc <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <disk_status+0x10>)
 80023de:	181a      	adds	r2, r3, r0
 80023e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80023e4:	7a10      	ldrb	r0, [r2, #8]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4718      	bx	r3
 80023ec:	20000550 	.word	0x20000550

080023f0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <disk_initialize+0x1c>)
 80023f2:	5c1a      	ldrb	r2, [r3, r0]
 80023f4:	b942      	cbnz	r2, 8002408 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80023f6:	2201      	movs	r2, #1
 80023f8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80023fa:	181a      	adds	r2, r3, r0
 80023fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002400:	7a10      	ldrb	r0, [r2, #8]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4718      	bx	r3
  }
  return stat;
}
 8002408:	2000      	movs	r0, #0
 800240a:	4770      	bx	lr
 800240c:	20000550 	.word	0x20000550

08002410 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002410:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002412:	4c05      	ldr	r4, [pc, #20]	; (8002428 <disk_read+0x18>)
 8002414:	1825      	adds	r5, r4, r0
 8002416:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800241a:	6860      	ldr	r0, [r4, #4]
 800241c:	6884      	ldr	r4, [r0, #8]
 800241e:	7a28      	ldrb	r0, [r5, #8]
 8002420:	46a4      	mov	ip, r4
  return res;
}
 8002422:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002424:	4760      	bx	ip
 8002426:	bf00      	nop
 8002428:	20000550 	.word	0x20000550

0800242c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800242c:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800242e:	4c05      	ldr	r4, [pc, #20]	; (8002444 <disk_write+0x18>)
 8002430:	1825      	adds	r5, r4, r0
 8002432:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002436:	6860      	ldr	r0, [r4, #4]
 8002438:	68c4      	ldr	r4, [r0, #12]
 800243a:	7a28      	ldrb	r0, [r5, #8]
 800243c:	46a4      	mov	ip, r4
  return res;
}
 800243e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002440:	4760      	bx	ip
 8002442:	bf00      	nop
 8002444:	20000550 	.word	0x20000550

08002448 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <disk_ioctl+0x18>)
{
 800244a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800244c:	181c      	adds	r4, r3, r0
 800244e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002452:	7a20      	ldrb	r0, [r4, #8]
 8002454:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8002456:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	4718      	bx	r3
 800245e:	bf00      	nop
 8002460:	20000550 	.word	0x20000550

08002464 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002464:	3801      	subs	r0, #1
 8002466:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002468:	4291      	cmp	r1, r2
 800246a:	d100      	bne.n	800246e <mem_cpy+0xa>
		*d++ = *s++;
}
 800246c:	4770      	bx	lr
		*d++ = *s++;
 800246e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002472:	f800 3f01 	strb.w	r3, [r0, #1]!
 8002476:	e7f7      	b.n	8002468 <mem_cpy+0x4>

08002478 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002478:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800247a:	4290      	cmp	r0, r2
 800247c:	d100      	bne.n	8002480 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 800247e:	4770      	bx	lr
		*d++ = (BYTE)val;
 8002480:	f800 1b01 	strb.w	r1, [r0], #1
 8002484:	e7f9      	b.n	800247a <mem_set+0x2>
	...

08002488 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002488:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <chk_lock+0x60>)
 800248a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800248c:	2400      	movs	r4, #0
 800248e:	4623      	mov	r3, r4
 8002490:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8002492:	6815      	ldr	r5, [r2, #0]
 8002494:	b1c5      	cbz	r5, 80024c8 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002496:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 800249a:	42bd      	cmp	r5, r7
 800249c:	d115      	bne.n	80024ca <chk_lock+0x42>
 800249e:	6857      	ldr	r7, [r2, #4]
 80024a0:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80024a4:	42af      	cmp	r7, r5
 80024a6:	d110      	bne.n	80024ca <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 80024a8:	8917      	ldrh	r7, [r2, #8]
 80024aa:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80024ae:	42af      	cmp	r7, r5
 80024b0:	d10b      	bne.n	80024ca <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80024b2:	b9b9      	cbnz	r1, 80024e4 <chk_lock+0x5c>
 80024b4:	220c      	movs	r2, #12
 80024b6:	fb02 6303 	mla	r3, r2, r3, r6
 80024ba:	895b      	ldrh	r3, [r3, #10]
 80024bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c0:	bf14      	ite	ne
 80024c2:	2000      	movne	r0, #0
 80024c4:	2010      	moveq	r0, #16
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80024c8:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80024ca:	3301      	adds	r3, #1
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f102 020c 	add.w	r2, r2, #12
 80024d2:	d1de      	bne.n	8002492 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80024d4:	b10c      	cbz	r4, 80024da <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80024d6:	2000      	movs	r0, #0
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80024da:	2902      	cmp	r1, #2
 80024dc:	bf0c      	ite	eq
 80024de:	2000      	moveq	r0, #0
 80024e0:	2012      	movne	r0, #18
 80024e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80024e4:	2010      	movs	r0, #16
 80024e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e8:	20000534 	.word	0x20000534

080024ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	4c20      	ldr	r4, [pc, #128]	; (8002570 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80024f0:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80024f4:	2300      	movs	r3, #0
 80024f6:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 80024f8:	6825      	ldr	r5, [r4, #0]
 80024fa:	42b5      	cmp	r5, r6
 80024fc:	d109      	bne.n	8002512 <inc_lock+0x26>
 80024fe:	6867      	ldr	r7, [r4, #4]
 8002500:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8002504:	42af      	cmp	r7, r5
 8002506:	d104      	bne.n	8002512 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8002508:	8927      	ldrh	r7, [r4, #8]
 800250a:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 800250e:	42af      	cmp	r7, r5
 8002510:	d022      	beq.n	8002558 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002512:	3301      	adds	r3, #1
 8002514:	2b02      	cmp	r3, #2
 8002516:	f104 040c 	add.w	r4, r4, #12
 800251a:	d1ed      	bne.n	80024f8 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800251c:	6813      	ldr	r3, [r2, #0]
 800251e:	b113      	cbz	r3, 8002526 <inc_lock+0x3a>
 8002520:	68d3      	ldr	r3, [r2, #12]
 8002522:	bb1b      	cbnz	r3, 800256c <inc_lock+0x80>
 8002524:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8002526:	240c      	movs	r4, #12
 8002528:	435c      	muls	r4, r3
 800252a:	1915      	adds	r5, r2, r4
 800252c:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 800252e:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8002532:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8002536:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8002538:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 800253a:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 800253c:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800253e:	b991      	cbnz	r1, 8002566 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002540:	210c      	movs	r1, #12
 8002542:	fb01 2103 	mla	r1, r1, r3, r2
 8002546:	8949      	ldrh	r1, [r1, #10]
 8002548:	3101      	adds	r1, #1
 800254a:	b289      	uxth	r1, r1
 800254c:	200c      	movs	r0, #12
 800254e:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8002552:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002554:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8002556:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002558:	2900      	cmp	r1, #0
 800255a:	d0f1      	beq.n	8002540 <inc_lock+0x54>
 800255c:	210c      	movs	r1, #12
 800255e:	fb01 2103 	mla	r1, r1, r3, r2
 8002562:	8949      	ldrh	r1, [r1, #10]
 8002564:	b911      	cbnz	r1, 800256c <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800256a:	e7ef      	b.n	800254c <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800256c:	2000      	movs	r0, #0
 800256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002570:	20000534 	.word	0x20000534

08002574 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002574:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002576:	1e45      	subs	r5, r0, #1
 8002578:	2d01      	cmp	r5, #1
 800257a:	d811      	bhi.n	80025a0 <dec_lock+0x2c>
		n = Files[i].ctr;
 800257c:	490a      	ldr	r1, [pc, #40]	; (80025a8 <dec_lock+0x34>)
 800257e:	220c      	movs	r2, #12
 8002580:	fb02 1305 	mla	r3, r2, r5, r1
 8002584:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8002586:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 800258a:	b298      	uxth	r0, r3
 800258c:	b108      	cbz	r0, 8002592 <dec_lock+0x1e>
 800258e:	3c01      	subs	r4, #1
 8002590:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8002592:	fb02 f305 	mul.w	r3, r2, r5
 8002596:	18ca      	adds	r2, r1, r3
 8002598:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800259a:	b918      	cbnz	r0, 80025a4 <dec_lock+0x30>
 800259c:	50c8      	str	r0, [r1, r3]
 800259e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80025a0:	2002      	movs	r0, #2
 80025a2:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 80025a4:	2000      	movs	r0, #0
	}
	return res;
}
 80025a6:	bd30      	pop	{r4, r5, pc}
 80025a8:	20000534 	.word	0x20000534

080025ac <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80025ac:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80025b0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80025b4:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80025b6:	0a49      	lsrs	r1, r1, #9
 80025b8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80025bc:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80025c0:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80025c2:	b130      	cbz	r0, 80025d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80025c4:	4281      	cmp	r1, r0
 80025c6:	d302      	bcc.n	80025ce <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80025c8:	1a09      	subs	r1, r1, r0
 80025ca:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80025cc:	e7f8      	b.n	80025c0 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80025ce:	6858      	ldr	r0, [r3, #4]
 80025d0:	4408      	add	r0, r1
}
 80025d2:	4770      	bx	lr

080025d4 <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 80025d4:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 80025d8:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 80025da:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 80025de:	b322      	cbz	r2, 800262a <get_fileinfo+0x56>
		dir = dp->dir;
 80025e0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 80025e4:	2400      	movs	r4, #0
 80025e6:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80025e8:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 80025ea:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 80025ee:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 80025f0:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 80025f4:	d009      	beq.n	800260a <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80025f6:	2805      	cmp	r0, #5
 80025f8:	bf08      	it	eq
 80025fa:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80025fc:	2c09      	cmp	r4, #9
 80025fe:	bf04      	itt	eq
 8002600:	701e      	strbeq	r6, [r3, #0]
 8002602:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8002604:	3301      	adds	r3, #1
 8002606:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 800260a:	2c0b      	cmp	r4, #11
 800260c:	d1ed      	bne.n	80025ea <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800260e:	7ad0      	ldrb	r0, [r2, #11]
 8002610:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8002612:	69d0      	ldr	r0, [r2, #28]
 8002614:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8002616:	7e54      	ldrb	r4, [r2, #25]
 8002618:	7e10      	ldrb	r0, [r2, #24]
 800261a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800261e:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8002620:	7dd0      	ldrb	r0, [r2, #23]
 8002622:	7d92      	ldrb	r2, [r2, #22]
 8002624:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002628:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	bd70      	pop	{r4, r5, r6, pc}

08002630 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002630:	6802      	ldr	r2, [r0, #0]
{
 8002632:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8002634:	b152      	cbz	r2, 800264c <get_ldnumber+0x1c>
 8002636:	4611      	mov	r1, r2
 8002638:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800263a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800263e:	2c20      	cmp	r4, #32
 8002640:	d90c      	bls.n	800265c <get_ldnumber+0x2c>
 8002642:	2c3a      	cmp	r4, #58	; 0x3a
 8002644:	d1f8      	bne.n	8002638 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8002646:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002648:	428b      	cmp	r3, r1
 800264a:	d002      	beq.n	8002652 <get_ldnumber+0x22>
	int vol = -1;
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8002650:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	2a30      	cmp	r2, #48	; 0x30
 8002656:	d1f9      	bne.n	800264c <get_ldnumber+0x1c>
					*path = ++tt;
 8002658:	3301      	adds	r3, #1
 800265a:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 800265c:	2000      	movs	r0, #0
 800265e:	bd10      	pop	{r4, pc}

08002660 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002660:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002662:	b190      	cbz	r0, 800268a <validate+0x2a>
 8002664:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8002668:	b17b      	cbz	r3, 800268a <validate+0x2a>
 800266a:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 800266e:	b162      	cbz	r2, 800268a <validate+0x2a>
 8002670:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8002674:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8002678:	4291      	cmp	r1, r2
 800267a:	d106      	bne.n	800268a <validate+0x2a>
 800267c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002680:	f7ff feac 	bl	80023dc <disk_status>
 8002684:	f010 0001 	ands.w	r0, r0, #1
 8002688:	d000      	beq.n	800268c <validate+0x2c>
		return FR_INVALID_OBJECT;
 800268a:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 800268c:	bd08      	pop	{r3, pc}

0800268e <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 800268e:	7eca      	ldrb	r2, [r1, #27]
 8002690:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8002692:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002698:	bf01      	itttt	eq
 800269a:	7d48      	ldrbeq	r0, [r1, #21]
 800269c:	7d0a      	ldrbeq	r2, [r1, #20]
 800269e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80026a2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	4770      	bx	lr

080026aa <sync_window.part.2>:
FRESULT sync_window (
 80026aa:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 80026ac:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 80026b0:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80026b2:	4601      	mov	r1, r0
 80026b4:	2301      	movs	r3, #1
 80026b6:	462a      	mov	r2, r5
 80026b8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80026bc:	f7ff feb6 	bl	800242c <disk_write>
 80026c0:	b9d0      	cbnz	r0, 80026f8 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80026c2:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 80026c6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 80026ca:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80026ce:	1aeb      	subs	r3, r5, r3
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d301      	bcc.n	80026d8 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 80026d4:	2000      	movs	r0, #0
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80026d8:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 80026dc:	2e01      	cmp	r6, #1
 80026de:	d9f9      	bls.n	80026d4 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 80026e0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80026e4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 80026e8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80026ea:	462a      	mov	r2, r5
 80026ec:	2301      	movs	r3, #1
 80026ee:	4621      	mov	r1, r4
 80026f0:	f7ff fe9c 	bl	800242c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80026f4:	3e01      	subs	r6, #1
 80026f6:	e7f1      	b.n	80026dc <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 80026f8:	2001      	movs	r0, #1
}
 80026fa:	bd70      	pop	{r4, r5, r6, pc}

080026fc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80026fc:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8002700:	b10b      	cbz	r3, 8002706 <sync_window+0xa>
 8002702:	f7ff bfd2 	b.w	80026aa <sync_window.part.2>
}
 8002706:	4618      	mov	r0, r3
 8002708:	4770      	bx	lr

0800270a <sync_fs>:
{
 800270a:	b538      	push	{r3, r4, r5, lr}
 800270c:	4604      	mov	r4, r0
	res = sync_window(fs);
 800270e:	f7ff fff5 	bl	80026fc <sync_window>
 8002712:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002714:	2800      	cmp	r0, #0
 8002716:	d154      	bne.n	80027c2 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002718:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800271c:	2b03      	cmp	r3, #3
 800271e:	d147      	bne.n	80027b0 <sync_fs+0xa6>
 8002720:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8002724:	2b01      	cmp	r3, #1
 8002726:	d143      	bne.n	80027b0 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8002728:	4601      	mov	r1, r0
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fea2 	bl	8002478 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002734:	2255      	movs	r2, #85	; 0x55
 8002736:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 800273a:	22aa      	movs	r2, #170	; 0xaa
 800273c:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002740:	2252      	movs	r2, #82	; 0x52
 8002742:	7022      	strb	r2, [r4, #0]
 8002744:	7062      	strb	r2, [r4, #1]
 8002746:	2261      	movs	r2, #97	; 0x61
 8002748:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800274a:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800274e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8002752:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002756:	2141      	movs	r1, #65	; 0x41
 8002758:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800275a:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800275e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002762:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8002766:	0c11      	lsrs	r1, r2, #16
 8002768:	0e12      	lsrs	r2, r2, #24
 800276a:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800276e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8002772:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8002776:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800277a:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 800277e:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8002782:	0c11      	lsrs	r1, r2, #16
 8002784:	0e12      	lsrs	r2, r2, #24
 8002786:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 800278a:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800278e:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002792:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8002794:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002796:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 800279a:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 800279e:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80027a2:	4621      	mov	r1, r4
 80027a4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80027a8:	f7ff fe40 	bl	800242c <disk_write>
			fs->fsi_flag = 0;
 80027ac:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80027b0:	2200      	movs	r2, #0
 80027b2:	4611      	mov	r1, r2
 80027b4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80027b8:	f7ff fe46 	bl	8002448 <disk_ioctl>
 80027bc:	3000      	adds	r0, #0
 80027be:	bf18      	it	ne
 80027c0:	2001      	movne	r0, #1
}
 80027c2:	bd38      	pop	{r3, r4, r5, pc}

080027c4 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80027c4:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80027c8:	428b      	cmp	r3, r1
{
 80027ca:	b570      	push	{r4, r5, r6, lr}
 80027cc:	4606      	mov	r6, r0
 80027ce:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80027d0:	d013      	beq.n	80027fa <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 80027d2:	f7ff ff93 	bl	80026fc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80027d6:	4604      	mov	r4, r0
 80027d8:	b968      	cbnz	r0, 80027f6 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80027da:	462a      	mov	r2, r5
 80027dc:	2301      	movs	r3, #1
 80027de:	4631      	mov	r1, r6
 80027e0:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 80027e4:	f7ff fe14 	bl	8002410 <disk_read>
 80027e8:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80027ea:	bf1c      	itt	ne
 80027ec:	f04f 35ff 	movne.w	r5, #4294967295
 80027f0:	2401      	movne	r4, #1
			fs->winsect = sector;
 80027f2:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 80027f6:	4620      	mov	r0, r4
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80027fa:	2400      	movs	r4, #0
 80027fc:	e7fb      	b.n	80027f6 <move_window+0x32>
	...

08002800 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002800:	2300      	movs	r3, #0
{
 8002802:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002804:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8002810:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002812:	f7ff ffd7 	bl	80027c4 <move_window>
 8002816:	b9c0      	cbnz	r0, 800284a <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002818:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800281c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8002820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002824:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002828:	4293      	cmp	r3, r2
 800282a:	d110      	bne.n	800284e <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800282c:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8002830:	4a08      	ldr	r2, [pc, #32]	; (8002854 <check_fs+0x54>)
 8002832:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002836:	4293      	cmp	r3, r2
 8002838:	d00a      	beq.n	8002850 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800283a:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 800283e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8002842:	1a80      	subs	r0, r0, r2
 8002844:	bf18      	it	ne
 8002846:	2001      	movne	r0, #1
 8002848:	bd10      	pop	{r4, pc}
 800284a:	2003      	movs	r0, #3
 800284c:	bd10      	pop	{r4, pc}
		return 2;
 800284e:	2002      	movs	r0, #2
}
 8002850:	bd10      	pop	{r4, pc}
 8002852:	bf00      	nop
 8002854:	00544146 	.word	0x00544146

08002858 <find_volume>:
{
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	6003      	str	r3, [r0, #0]
{
 800285e:	b085      	sub	sp, #20
 8002860:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8002862:	4608      	mov	r0, r1
{
 8002864:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8002866:	f7ff fee3 	bl	8002630 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800286a:	1e06      	subs	r6, r0, #0
 800286c:	f2c0 8123 	blt.w	8002ab6 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002870:	4b95      	ldr	r3, [pc, #596]	; (8002ac8 <find_volume+0x270>)
 8002872:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002876:	2c00      	cmp	r4, #0
 8002878:	f000 811f 	beq.w	8002aba <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 800287c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800287e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002882:	b173      	cbz	r3, 80028a2 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8002884:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8002888:	f7ff fda8 	bl	80023dc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800288c:	07c7      	lsls	r7, r0, #31
 800288e:	d408      	bmi.n	80028a2 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002890:	2d00      	cmp	r5, #0
 8002892:	f000 8114 	beq.w	8002abe <find_volume+0x266>
 8002896:	f010 0004 	ands.w	r0, r0, #4
 800289a:	d000      	beq.n	800289e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800289c:	200a      	movs	r0, #10
}
 800289e:	b005      	add	sp, #20
 80028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80028a2:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80028a4:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80028a6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80028aa:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80028ae:	f7ff fd9f 	bl	80023f0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80028b2:	07c1      	lsls	r1, r0, #31
 80028b4:	f100 8105 	bmi.w	8002ac2 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80028b8:	b10d      	cbz	r5, 80028be <find_volume+0x66>
 80028ba:	0742      	lsls	r2, r0, #29
 80028bc:	d4ee      	bmi.n	800289c <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80028be:	2100      	movs	r1, #0
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff ff9d 	bl	8002800 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80028c6:	2801      	cmp	r0, #1
 80028c8:	f040 80dc 	bne.w	8002a84 <find_volume+0x22c>
 80028cc:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 80028d0:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80028d2:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80028d6:	b103      	cbz	r3, 80028da <find_volume+0x82>
 80028d8:	680b      	ldr	r3, [r1, #0]
 80028da:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80028de:	3201      	adds	r2, #1
 80028e0:	2a04      	cmp	r2, #4
 80028e2:	f101 0110 	add.w	r1, r1, #16
 80028e6:	d1f4      	bne.n	80028d2 <find_volume+0x7a>
 80028e8:	2600      	movs	r6, #0
			bsect = br[i];
 80028ea:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80028ee:	2d00      	cmp	r5, #0
 80028f0:	f000 80bf 	beq.w	8002a72 <find_volume+0x21a>
 80028f4:	4629      	mov	r1, r5
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff ff82 	bl	8002800 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f040 80b9 	bne.w	8002a74 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002902:	7b22      	ldrb	r2, [r4, #12]
 8002904:	7ae3      	ldrb	r3, [r4, #11]
 8002906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800290a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290e:	f040 80bc 	bne.w	8002a8a <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002912:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002914:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002916:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002918:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800291c:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002920:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002924:	bf08      	it	eq
 8002926:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8002928:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800292c:	2b01      	cmp	r3, #1
 800292e:	f200 80ac 	bhi.w	8002a8a <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002932:	7b66      	ldrb	r6, [r4, #13]
 8002934:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002938:	2e00      	cmp	r6, #0
 800293a:	f000 80a6 	beq.w	8002a8a <find_volume+0x232>
 800293e:	1e73      	subs	r3, r6, #1
 8002940:	4233      	tst	r3, r6
 8002942:	f040 80a2 	bne.w	8002a8a <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002946:	7ca3      	ldrb	r3, [r4, #18]
 8002948:	7c67      	ldrb	r7, [r4, #17]
 800294a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800294e:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002950:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002954:	f040 8099 	bne.w	8002a8a <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002958:	7d22      	ldrb	r2, [r4, #20]
 800295a:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800295c:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002960:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002964:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002966:	bf08      	it	eq
 8002968:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800296a:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800296e:	f000 808c 	beq.w	8002a8a <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002972:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002976:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 800297a:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800297c:	4283      	cmp	r3, r0
 800297e:	f0c0 8084 	bcc.w	8002a8a <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002982:	1a1b      	subs	r3, r3, r0
 8002984:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002988:	2b00      	cmp	r3, #0
 800298a:	d07e      	beq.n	8002a8a <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800298c:	f640 76f5 	movw	r6, #4085	; 0xff5
 8002990:	42b3      	cmp	r3, r6
 8002992:	d97e      	bls.n	8002a92 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002994:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8002998:	42b3      	cmp	r3, r6
 800299a:	bf94      	ite	ls
 800299c:	2602      	movls	r6, #2
 800299e:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80029a0:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80029a2:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 80029a4:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 80029a6:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80029a8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80029ac:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80029b0:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80029b4:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80029b8:	d16d      	bne.n	8002a96 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80029ba:	2f00      	cmp	r7, #0
 80029bc:	d165      	bne.n	8002a8a <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80029be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029c0:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80029c4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80029c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029ca:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80029ce:	d35c      	bcc.n	8002a8a <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80029d8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80029dc:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 80029de:	f04f 0380 	mov.w	r3, #128	; 0x80
 80029e2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80029e6:	d12d      	bne.n	8002a44 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80029e8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80029ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80029f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d125      	bne.n	8002a44 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 80029f8:	1c69      	adds	r1, r5, #1
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7ff fee2 	bl	80027c4 <move_window>
 8002a00:	bb00      	cbnz	r0, 8002a44 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002a02:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8002a06:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8002a0a:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a12:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d114      	bne.n	8002a44 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <find_volume+0x274>)
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d110      	bne.n	8002a44 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002a22:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8002a26:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8002a2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a2e:	3320      	adds	r3, #32
 8002a30:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8002a32:	bf01      	itttt	eq
 8002a34:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8002a38:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002a3c:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8002a40:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8002a46:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8002a4a:	8813      	ldrh	r3, [r2, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]
 8002a52:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <find_volume+0x27c>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4294      	cmp	r4, r2
 8002a5c:	bf04      	itt	eq
 8002a5e:	2200      	moveq	r2, #0
 8002a60:	601a      	streq	r2, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4294      	cmp	r4, r2
 8002a66:	f04f 0000 	mov.w	r0, #0
 8002a6a:	f47f af18 	bne.w	800289e <find_volume+0x46>
 8002a6e:	60d8      	str	r0, [r3, #12]
 8002a70:	e715      	b.n	800289e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002a72:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002a74:	3601      	adds	r6, #1
 8002a76:	2e04      	cmp	r6, #4
 8002a78:	f47f af37 	bne.w	80028ea <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002a7c:	2803      	cmp	r0, #3
 8002a7e:	d104      	bne.n	8002a8a <find_volume+0x232>
 8002a80:	2001      	movs	r0, #1
 8002a82:	e70c      	b.n	800289e <find_volume+0x46>
 8002a84:	2803      	cmp	r0, #3
 8002a86:	d0fb      	beq.n	8002a80 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002a88:	b108      	cbz	r0, 8002a8e <find_volume+0x236>
 8002a8a:	200d      	movs	r0, #13
 8002a8c:	e707      	b.n	800289e <find_volume+0x46>
	bsect = 0;
 8002a8e:	4605      	mov	r5, r0
 8002a90:	e737      	b.n	8002902 <find_volume+0xaa>
	fmt = FS_FAT12;
 8002a92:	2601      	movs	r6, #1
 8002a94:	e784      	b.n	80029a0 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002a96:	2f00      	cmp	r7, #0
 8002a98:	d0f7      	beq.n	8002a8a <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002a9a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002a9c:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002a9e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8002aa2:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002aa6:	bf1b      	ittet	ne
 8002aa8:	18d2      	addne	r2, r2, r3
 8002aaa:	f003 0301 	andne.w	r3, r3, #1
 8002aae:	4613      	moveq	r3, r2
 8002ab0:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8002ab4:	e787      	b.n	80029c6 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002ab6:	200b      	movs	r0, #11
 8002ab8:	e6f1      	b.n	800289e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002aba:	200c      	movs	r0, #12
 8002abc:	e6ef      	b.n	800289e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8002abe:	4628      	mov	r0, r5
 8002ac0:	e6ed      	b.n	800289e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	e6eb      	b.n	800289e <find_volume+0x46>
 8002ac6:	bf00      	nop
 8002ac8:	20000530 	.word	0x20000530
 8002acc:	41615252 	.word	0x41615252
 8002ad0:	2000054c 	.word	0x2000054c
 8002ad4:	20000534 	.word	0x20000534

08002ad8 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002ad8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8002adc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002ade:	3b02      	subs	r3, #2
 8002ae0:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8002ae2:	bf3d      	ittte	cc
 8002ae4:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8002ae8:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8002aec:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002af0:	2000      	movcs	r0, #0
}
 8002af2:	4770      	bx	lr

08002af4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002af4:	2901      	cmp	r1, #1
{
 8002af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af8:	4606      	mov	r6, r0
 8002afa:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002afc:	d959      	bls.n	8002bb2 <get_fat+0xbe>
 8002afe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b02:	4299      	cmp	r1, r3
 8002b04:	d255      	bcs.n	8002bb2 <get_fat+0xbe>
		switch (fs->fs_type) {
 8002b06:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d027      	beq.n	8002b5e <get_fat+0x6a>
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d036      	beq.n	8002b80 <get_fat+0x8c>
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d14d      	bne.n	8002bb2 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8002b16:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b1a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8002b1e:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8002b22:	f7ff fe4f 	bl	80027c4 <move_window>
 8002b26:	b110      	cbz	r0, 8002b2e <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b2e:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8002b32:	1c67      	adds	r7, r4, #1
 8002b34:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b38:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8002b3c:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8002b3e:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b40:	f7ff fe40 	bl	80027c4 <move_window>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1ef      	bne.n	8002b28 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002b48:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002b4c:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002b4e:	5df0      	ldrb	r0, [r6, r7]
 8002b50:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002b54:	bf4c      	ite	mi
 8002b56:	0900      	lsrmi	r0, r0, #4
 8002b58:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002b5e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8002b62:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8002b66:	f7ff fe2d 	bl	80027c4 <move_window>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d1dc      	bne.n	8002b28 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002b6e:	006d      	lsls	r5, r5, #1
 8002b70:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8002b74:	1973      	adds	r3, r6, r5
 8002b76:	5d70      	ldrb	r0, [r6, r5]
 8002b78:	785b      	ldrb	r3, [r3, #1]
 8002b7a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002b80:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8002b84:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8002b88:	f7ff fe1c 	bl	80027c4 <move_window>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d1cb      	bne.n	8002b28 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002b90:	00ad      	lsls	r5, r5, #2
 8002b92:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8002b96:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002b98:	7898      	ldrb	r0, [r3, #2]
 8002b9a:	78da      	ldrb	r2, [r3, #3]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	0400      	lsls	r0, r0, #16
 8002ba0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002ba4:	5d72      	ldrb	r2, [r6, r5]
 8002ba6:	4310      	orrs	r0, r2
 8002ba8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002bac:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8002bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8002bb2:	2001      	movs	r0, #1
}
 8002bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bb6 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002bb6:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8002bba:	b570      	push	{r4, r5, r6, lr}
 8002bbc:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002bbe:	2a01      	cmp	r2, #1
{
 8002bc0:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8002bc2:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002bc6:	d101      	bne.n	8002bcc <dir_sdi+0x16>
		return FR_INT_ERR;
 8002bc8:	2002      	movs	r0, #2
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002bcc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8002bd0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8002bd4:	428a      	cmp	r2, r1
 8002bd6:	d2f7      	bcs.n	8002bc8 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002bd8:	b9f2      	cbnz	r2, 8002c18 <dir_sdi+0x62>
 8002bda:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8002bde:	2903      	cmp	r1, #3
 8002be0:	d102      	bne.n	8002be8 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8002be2:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002be6:	b9c1      	cbnz	r1, 8002c1a <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002be8:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8002bec:	428d      	cmp	r5, r1
 8002bee:	d2eb      	bcs.n	8002bc8 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8002bf0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8002bf4:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d0e5      	beq.n	8002bc8 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002bfc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002c00:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002c04:	f005 050f 	and.w	r5, r5, #15
 8002c08:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002c0c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002c10:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8002c14:	2000      	movs	r0, #0
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002c1a:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8002c1e:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002c20:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8002c22:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002c24:	4611      	mov	r1, r2
 8002c26:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8002c2a:	d202      	bcs.n	8002c32 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8002c2c:	f7ff ff54 	bl	8002ad8 <clust2sect>
 8002c30:	e7e0      	b.n	8002bf4 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002c32:	f7ff ff5f 	bl	8002af4 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c36:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002c38:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c3a:	d009      	beq.n	8002c50 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002c3c:	2801      	cmp	r0, #1
 8002c3e:	d9c3      	bls.n	8002bc8 <dir_sdi+0x12>
 8002c40:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8002c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c48:	4298      	cmp	r0, r3
 8002c4a:	d2bd      	bcs.n	8002bc8 <dir_sdi+0x12>
			idx -= ic;
 8002c4c:	1bad      	subs	r5, r5, r6
 8002c4e:	e7e8      	b.n	8002c22 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c50:	2001      	movs	r0, #1
}
 8002c52:	bd70      	pop	{r4, r5, r6, pc}

08002c54 <dir_remove>:
{
 8002c54:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 8002c56:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 8002c5a:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 8002c5c:	f7ff ffab 	bl	8002bb6 <dir_sdi>
	if (res == FR_OK) {
 8002c60:	4603      	mov	r3, r0
 8002c62:	b9b0      	cbnz	r0, 8002c92 <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 8002c64:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8002c68:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002c6c:	f7ff fdaa 	bl	80027c4 <move_window>
		if (res == FR_OK) {
 8002c70:	4603      	mov	r3, r0
 8002c72:	b970      	cbnz	r0, 8002c92 <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8002c74:	4601      	mov	r1, r0
 8002c76:	2220      	movs	r2, #32
 8002c78:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8002c7c:	f7ff fbfc 	bl	8002478 <mem_set>
			*dp->dir = DDEM;
 8002c80:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8002c84:	21e5      	movs	r1, #229	; 0xe5
 8002c86:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 8002c88:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd10      	pop	{r4, pc}

08002c96 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002c96:	2901      	cmp	r1, #1
{
 8002c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002ca2:	d96f      	bls.n	8002d84 <put_fat+0xee>
 8002ca4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ca8:	4299      	cmp	r1, r3
 8002caa:	d26b      	bcs.n	8002d84 <put_fat+0xee>
		switch (fs->fs_type) {
 8002cac:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d03d      	beq.n	8002d30 <put_fat+0x9a>
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d04b      	beq.n	8002d50 <put_fat+0xba>
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d163      	bne.n	8002d84 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 8002cbc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002cc0:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8002cc4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8002cc8:	f7ff fd7c 	bl	80027c4 <move_window>
			if (res != FR_OK) break;
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d15a      	bne.n	8002d86 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 8002cd0:	f107 0801 	add.w	r8, r7, #1
 8002cd4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002cd8:	f014 0401 	ands.w	r4, r4, #1
 8002cdc:	bf1f      	itttt	ne
 8002cde:	5deb      	ldrbne	r3, [r5, r7]
 8002ce0:	f003 020f 	andne.w	r2, r3, #15
 8002ce4:	0133      	lslne	r3, r6, #4
 8002ce6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8002cea:	bf14      	ite	ne
 8002cec:	4313      	orrne	r3, r2
 8002cee:	b2f3      	uxtbeq	r3, r6
 8002cf0:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002cf2:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002cfc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8002d00:	4628      	mov	r0, r5
 8002d02:	f7ff fd5f 	bl	80027c4 <move_window>
			if (res != FR_OK) break;
 8002d06:	bbf0      	cbnz	r0, 8002d86 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8002d08:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002d0c:	b144      	cbz	r4, 8002d20 <put_fat+0x8a>
 8002d0e:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8002d12:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8002d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002d20:	f815 2008 	ldrb.w	r2, [r5, r8]
 8002d24:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8002d28:	f022 020f 	bic.w	r2, r2, #15
 8002d2c:	4332      	orrs	r2, r6
 8002d2e:	e7f0      	b.n	8002d12 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002d30:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8002d34:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002d38:	f7ff fd44 	bl	80027c4 <move_window>
			if (res != FR_OK) break;
 8002d3c:	bb18      	cbnz	r0, 8002d86 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002d3e:	0064      	lsls	r4, r4, #1
 8002d40:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8002d44:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002d48:	552e      	strb	r6, [r5, r4]
 8002d4a:	442c      	add	r4, r5
 8002d4c:	7062      	strb	r2, [r4, #1]
 8002d4e:	e7e2      	b.n	8002d16 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002d50:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8002d54:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002d58:	f7ff fd34 	bl	80027c4 <move_window>
			if (res != FR_OK) break;
 8002d5c:	b998      	cbnz	r0, 8002d86 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002d5e:	00a4      	lsls	r4, r4, #2
 8002d60:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8002d64:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8002d66:	78cb      	ldrb	r3, [r1, #3]
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d6e:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8002d72:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002d76:	552a      	strb	r2, [r5, r4]
 8002d78:	704b      	strb	r3, [r1, #1]
 8002d7a:	0c13      	lsrs	r3, r2, #16
 8002d7c:	0e12      	lsrs	r2, r2, #24
 8002d7e:	708b      	strb	r3, [r1, #2]
 8002d80:	70ca      	strb	r2, [r1, #3]
 8002d82:	e7c8      	b.n	8002d16 <put_fat+0x80>
			res = FR_INT_ERR;
 8002d84:	2002      	movs	r0, #2
}
 8002d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d8a <create_chain>:
{
 8002d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8002d8e:	460f      	mov	r7, r1
 8002d90:	b989      	cbnz	r1, 8002db6 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8002d92:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002d96:	b1fe      	cbz	r6, 8002dd8 <create_chain+0x4e>
 8002d98:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d9c:	429e      	cmp	r6, r3
 8002d9e:	bf28      	it	cs
 8002da0:	2601      	movcs	r6, #1
 8002da2:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002da4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8002da8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002daa:	429c      	cmp	r4, r3
 8002dac:	d317      	bcc.n	8002dde <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 8002dae:	2e01      	cmp	r6, #1
 8002db0:	d814      	bhi.n	8002ddc <create_chain+0x52>
 8002db2:	2400      	movs	r4, #0
 8002db4:	e008      	b.n	8002dc8 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002db6:	f7ff fe9d 	bl	8002af4 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8002dba:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002dbc:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8002dbe:	d93b      	bls.n	8002e38 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d103      	bne.n	8002dcc <create_chain+0x42>
			ncl = 2;
 8002dc4:	f04f 34ff 	mov.w	r4, #4294967295
}
 8002dc8:	4620      	mov	r0, r4
 8002dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002dcc:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	d3f9      	bcc.n	8002dc8 <create_chain+0x3e>
 8002dd4:	463e      	mov	r6, r7
 8002dd6:	e7e4      	b.n	8002da2 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002dd8:	2601      	movs	r6, #1
 8002dda:	e7e2      	b.n	8002da2 <create_chain+0x18>
			ncl = 2;
 8002ddc:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f7ff fe87 	bl	8002af4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8002de6:	b130      	cbz	r0, 8002df6 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8002de8:	1c41      	adds	r1, r0, #1
 8002dea:	d0eb      	beq.n	8002dc4 <create_chain+0x3a>
 8002dec:	2801      	cmp	r0, #1
 8002dee:	d023      	beq.n	8002e38 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8002df0:	42b4      	cmp	r4, r6
 8002df2:	d1d7      	bne.n	8002da4 <create_chain+0x1a>
 8002df4:	e7dd      	b.n	8002db2 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8002df6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f7ff ff4a 	bl	8002c96 <put_fat>
	if (res == FR_OK && clst != 0) {
 8002e02:	b9b8      	cbnz	r0, 8002e34 <create_chain+0xaa>
 8002e04:	b97f      	cbnz	r7, 8002e26 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8002e06:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8002e0a:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	d0da      	beq.n	8002dc8 <create_chain+0x3e>
			fs->free_clust--;
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8002e18:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8002e24:	e7d0      	b.n	8002dc8 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8002e26:	4622      	mov	r2, r4
 8002e28:	4639      	mov	r1, r7
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f7ff ff33 	bl	8002c96 <put_fat>
	if (res == FR_OK) {
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d0e8      	beq.n	8002e06 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8002e34:	2801      	cmp	r0, #1
 8002e36:	d0c5      	beq.n	8002dc4 <create_chain+0x3a>
 8002e38:	2401      	movs	r4, #1
 8002e3a:	e7c5      	b.n	8002dc8 <create_chain+0x3e>

08002e3c <dir_next>:
{
 8002e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8002e40:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8002e44:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002e46:	b2b3      	uxth	r3, r6
{
 8002e48:	4604      	mov	r4, r0
 8002e4a:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002e4c:	b913      	cbnz	r3, 8002e54 <dir_next+0x18>
		return FR_NO_FILE;
 8002e4e:	2004      	movs	r0, #4
 8002e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002e54:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f8      	beq.n	8002e4e <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002e5c:	f016 080f 	ands.w	r8, r6, #15
 8002e60:	d10b      	bne.n	8002e7a <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8002e62:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8002e66:	3301      	adds	r3, #1
 8002e68:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8002e6c:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8002e70:	b971      	cbnz	r1, 8002e90 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8002e72:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8002e76:	429e      	cmp	r6, r3
 8002e78:	d2e9      	bcs.n	8002e4e <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002e7a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 8002e7e:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002e82:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8002e86:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002e90:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8002e94:	3f01      	subs	r7, #1
 8002e96:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8002e9a:	d1ee      	bne.n	8002e7a <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002e9c:	f7ff fe2a 	bl	8002af4 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8002ea0:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002ea2:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8002ea4:	d802      	bhi.n	8002eac <dir_next+0x70>
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002eac:	1c42      	adds	r2, r0, #1
 8002eae:	d102      	bne.n	8002eb6 <dir_next+0x7a>
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8002eb6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002eba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ebe:	429d      	cmp	r5, r3
 8002ec0:	d32f      	bcc.n	8002f22 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8002ec2:	f1b9 0f00 	cmp.w	r9, #0
 8002ec6:	d0c2      	beq.n	8002e4e <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8002ec8:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8002ecc:	f7ff ff5d 	bl	8002d8a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d03e      	beq.n	8002f54 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8002ed6:	2801      	cmp	r0, #1
 8002ed8:	d0e5      	beq.n	8002ea6 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002eda:	1c43      	adds	r3, r0, #1
 8002edc:	d0e8      	beq.n	8002eb0 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002ede:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002ee2:	f7ff fc0b 	bl	80026fc <sync_window>
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d1e1      	bne.n	8002eb0 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002ef4:	f7ff fac0 	bl	8002478 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002ef8:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8002efc:	4629      	mov	r1, r5
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7ff fdea 	bl	8002ad8 <clust2sect>
						dp->fs->wflag = 1;
 8002f04:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002f08:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f0c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002f10:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8002f14:	429f      	cmp	r7, r3
 8002f16:	d30e      	bcc.n	8002f36 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002f18:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8002f1c:	1bdf      	subs	r7, r3, r7
 8002f1e:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8002f22:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8002f26:	4629      	mov	r1, r5
 8002f28:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002f2c:	f7ff fdd4 	bl	8002ad8 <clust2sect>
 8002f30:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8002f34:	e7a1      	b.n	8002e7a <dir_next+0x3e>
						dp->fs->wflag = 1;
 8002f36:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8002f3a:	f7ff fbb6 	bl	80026aa <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d1b6      	bne.n	8002eb0 <dir_next+0x74>
						dp->fs->winsect++;
 8002f42:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8002f46:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f50:	3701      	adds	r7, #1
 8002f52:	e7db      	b.n	8002f0c <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002f54:	2007      	movs	r0, #7
}
 8002f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002f5c <follow_path>:
{
 8002f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002f60:	780b      	ldrb	r3, [r1, #0]
 8002f62:	2b2f      	cmp	r3, #47	; 0x2f
{
 8002f64:	4604      	mov	r4, r0
 8002f66:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002f68:	d001      	beq.n	8002f6e <follow_path+0x12>
 8002f6a:	2b5c      	cmp	r3, #92	; 0x5c
 8002f6c:	d100      	bne.n	8002f70 <follow_path+0x14>
		path++;
 8002f6e:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8002f70:	2600      	movs	r6, #0
 8002f72:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002f76:	782b      	ldrb	r3, [r5, #0]
 8002f78:	2b1f      	cmp	r3, #31
 8002f7a:	d936      	bls.n	8002fea <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002f7c:	4e5f      	ldr	r6, [pc, #380]	; (80030fc <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002f7e:	782b      	ldrb	r3, [r5, #0]
 8002f80:	2b2f      	cmp	r3, #47	; 0x2f
 8002f82:	46a8      	mov	r8, r5
 8002f84:	f105 0501 	add.w	r5, r5, #1
 8002f88:	d0f9      	beq.n	8002f7e <follow_path+0x22>
 8002f8a:	2b5c      	cmp	r3, #92	; 0x5c
 8002f8c:	d0f7      	beq.n	8002f7e <follow_path+0x22>
	sfn = dp->fn;
 8002f8e:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8002f92:	220b      	movs	r2, #11
 8002f94:	2120      	movs	r1, #32
 8002f96:	4638      	mov	r0, r7
 8002f98:	f7ff fa6e 	bl	8002478 <mem_set>
	si = i = b = 0; ni = 8;
 8002f9c:	f04f 0e00 	mov.w	lr, #0
 8002fa0:	f108 39ff 	add.w	r9, r8, #4294967295
 8002fa4:	46f4      	mov	ip, lr
 8002fa6:	2108      	movs	r1, #8
 8002fa8:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8002faa:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8002fae:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8002fb0:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8002fb4:	d928      	bls.n	8003008 <follow_path+0xac>
 8002fb6:	2b2f      	cmp	r3, #47	; 0x2f
 8002fb8:	d026      	beq.n	8003008 <follow_path+0xac>
 8002fba:	2b5c      	cmp	r3, #92	; 0x5c
 8002fbc:	d024      	beq.n	8003008 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 8002fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002fc0:	f000 8085 	beq.w	80030ce <follow_path+0x172>
 8002fc4:	4571      	cmp	r1, lr
 8002fc6:	d90d      	bls.n	8002fe4 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8002fc8:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002fca:	bf48      	it	mi
 8002fcc:	3b80      	submi	r3, #128	; 0x80
 8002fce:	4d4c      	ldr	r5, [pc, #304]	; (8003100 <follow_path+0x1a4>)
 8002fd0:	bf44      	itt	mi
 8002fd2:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 8002fd4:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8002fd8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d07d      	beq.n	80030dc <follow_path+0x180>
 8002fe0:	4283      	cmp	r3, r0
 8002fe2:	d1f9      	bne.n	8002fd8 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8002fe4:	2006      	movs	r0, #6
	return res;
 8002fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8002fea:	4631      	mov	r1, r6
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fde2 	bl	8002bb6 <dir_sdi>
		dp->dir = 0;
 8002ff2:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8002ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8002ffa:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8002ffe:	f807 300e 	strb.w	r3, [r7, lr]
 8003002:	f10e 0e01 	add.w	lr, lr, #1
 8003006:	e7d0      	b.n	8002faa <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003008:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 800300a:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800300e:	bf34      	ite	cc
 8003010:	2304      	movcc	r3, #4
 8003012:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8003014:	f1be 0f00 	cmp.w	lr, #0
 8003018:	d0e4      	beq.n	8002fe4 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800301a:	7838      	ldrb	r0, [r7, #0]
 800301c:	28e5      	cmp	r0, #229	; 0xe5
 800301e:	bf04      	itt	eq
 8003020:	2005      	moveq	r0, #5
 8003022:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8003024:	2908      	cmp	r1, #8
 8003026:	bf04      	itt	eq
 8003028:	0092      	lsleq	r2, r2, #2
 800302a:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800302c:	f002 0103 	and.w	r1, r2, #3
 8003030:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8003032:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8003036:	bf08      	it	eq
 8003038:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800303c:	2a04      	cmp	r2, #4
 800303e:	bf08      	it	eq
 8003040:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8003044:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003046:	2100      	movs	r1, #0
 8003048:	4620      	mov	r0, r4
 800304a:	f7ff fdb4 	bl	8002bb6 <dir_sdi>
	if (res != FR_OK) return res;
 800304e:	b9f8      	cbnz	r0, 8003090 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8003050:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8003054:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003058:	f7ff fbb4 	bl	80027c4 <move_window>
		if (res != FR_OK) break;
 800305c:	b9c0      	cbnz	r0, 8003090 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800305e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003062:	7813      	ldrb	r3, [r2, #0]
 8003064:	b19b      	cbz	r3, 800308e <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8003066:	7ad3      	ldrb	r3, [r2, #11]
 8003068:	0719      	lsls	r1, r3, #28
 800306a:	d40b      	bmi.n	8003084 <follow_path+0x128>
 800306c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003070:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003074:	4573      	cmp	r3, lr
 8003076:	d00b      	beq.n	8003090 <follow_path+0x134>
 8003078:	f812 7b01 	ldrb.w	r7, [r2], #1
 800307c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003080:	428f      	cmp	r7, r1
 8003082:	d0f7      	beq.n	8003074 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8003084:	2100      	movs	r1, #0
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff fed8 	bl	8002e3c <dir_next>
 800308c:	e7df      	b.n	800304e <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800308e:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8003090:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003094:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003096:	b138      	cbz	r0, 80030a8 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003098:	2804      	cmp	r0, #4
 800309a:	d12c      	bne.n	80030f6 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800309c:	f013 0f04 	tst.w	r3, #4
 80030a0:	bf08      	it	eq
 80030a2:	2005      	moveq	r0, #5
 80030a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80030a8:	075a      	lsls	r2, r3, #29
 80030aa:	d424      	bmi.n	80030f6 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 80030ac:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80030b0:	7acb      	ldrb	r3, [r1, #11]
 80030b2:	06db      	lsls	r3, r3, #27
 80030b4:	d508      	bpl.n	80030c8 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 80030b6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80030ba:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80030be:	f7ff fae6 	bl	800268e <ld_clust.isra.0>
 80030c2:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80030c6:	e75a      	b.n	8002f7e <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80030c8:	2005      	movs	r0, #5
 80030ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80030ce:	2908      	cmp	r1, #8
 80030d0:	d188      	bne.n	8002fe4 <follow_path+0x88>
			b <<= 2; continue;
 80030d2:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 80030d4:	468e      	mov	lr, r1
			b <<= 2; continue;
 80030d6:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 80030d8:	210b      	movs	r1, #11
 80030da:	e766      	b.n	8002faa <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80030dc:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80030e0:	2819      	cmp	r0, #25
 80030e2:	d98a      	bls.n	8002ffa <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 80030e4:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 80030e8:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 80030ea:	bf9e      	ittt	ls
 80030ec:	3b20      	subls	r3, #32
 80030ee:	f042 0201 	orrls.w	r2, r2, #1
 80030f2:	b2db      	uxtbls	r3, r3
 80030f4:	e783      	b.n	8002ffe <follow_path+0xa2>
}
 80030f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030fa:	bf00      	nop
 80030fc:	0800ed00 	.word	0x0800ed00
 8003100:	0800ed7f 	.word	0x0800ed7f

08003104 <dir_read.constprop.13>:
FRESULT dir_read (
 8003104:	b510      	push	{r4, lr}
 8003106:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8003108:	2004      	movs	r0, #4
	while (dp->sect) {
 800310a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800310e:	b909      	cbnz	r1, 8003114 <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 8003110:	b1b0      	cbz	r0, 8003140 <dir_read.constprop.13+0x3c>
 8003112:	e01d      	b.n	8003150 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 8003114:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003118:	f7ff fb54 	bl	80027c4 <move_window>
		if (res != FR_OK) break;
 800311c:	b9c0      	cbnz	r0, 8003150 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800311e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8003122:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003124:	b1c3      	cbz	r3, 8003158 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8003126:	2be5      	cmp	r3, #229	; 0xe5
 8003128:	d00c      	beq.n	8003144 <dir_read.constprop.13+0x40>
 800312a:	2b2e      	cmp	r3, #46	; 0x2e
 800312c:	d00a      	beq.n	8003144 <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 800312e:	7ad3      	ldrb	r3, [r2, #11]
 8003130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8003134:	2b0f      	cmp	r3, #15
 8003136:	d005      	beq.n	8003144 <dir_read.constprop.13+0x40>
 8003138:	f023 0320 	bic.w	r3, r3, #32
 800313c:	2b08      	cmp	r3, #8
 800313e:	d001      	beq.n	8003144 <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003140:	2000      	movs	r0, #0
 8003142:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8003144:	2100      	movs	r1, #0
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff fe78 	bl	8002e3c <dir_next>
		if (res != FR_OK) break;
 800314c:	2800      	cmp	r0, #0
 800314e:	d0dc      	beq.n	800310a <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 8003156:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003158:	2004      	movs	r0, #4
 800315a:	e7f9      	b.n	8003150 <dir_read.constprop.13+0x4c>

0800315c <dir_register>:
{
 800315c:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800315e:	2100      	movs	r1, #0
{
 8003160:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8003162:	f7ff fd28 	bl	8002bb6 <dir_sdi>
	if (res == FR_OK) {
 8003166:	4604      	mov	r4, r0
 8003168:	bb78      	cbnz	r0, 80031ca <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 800316a:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800316e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8003172:	f7ff fb27 	bl	80027c4 <move_window>
			if (res != FR_OK) break;
 8003176:	4604      	mov	r4, r0
 8003178:	bb38      	cbnz	r0, 80031ca <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800317a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2be5      	cmp	r3, #229	; 0xe5
 8003182:	d11b      	bne.n	80031bc <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8003184:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8003188:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800318c:	f7ff fb1a 	bl	80027c4 <move_window>
		if (res == FR_OK) {
 8003190:	4604      	mov	r4, r0
 8003192:	b988      	cbnz	r0, 80031b8 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003194:	4601      	mov	r1, r0
 8003196:	2220      	movs	r2, #32
 8003198:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800319c:	f7ff f96c 	bl	8002478 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80031a0:	220b      	movs	r2, #11
 80031a2:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 80031a6:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 80031aa:	f7ff f95b 	bl	8002464 <mem_cpy>
			dp->fs->wflag = 1;
 80031ae:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0e1      	beq.n	8003184 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80031c0:	2101      	movs	r1, #1
 80031c2:	4628      	mov	r0, r5
 80031c4:	f7ff fe3a 	bl	8002e3c <dir_next>
 80031c8:	e7cd      	b.n	8003166 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80031ca:	2c04      	cmp	r4, #4
 80031cc:	bf08      	it	eq
 80031ce:	2407      	moveq	r4, #7
 80031d0:	e7f2      	b.n	80031b8 <dir_register+0x5c>

080031d2 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80031d2:	2901      	cmp	r1, #1
{
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4604      	mov	r4, r0
 80031d8:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80031da:	d801      	bhi.n	80031e0 <remove_chain+0xe>
		res = FR_INT_ERR;
 80031dc:	2002      	movs	r0, #2
 80031de:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80031e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031e4:	4299      	cmp	r1, r3
 80031e6:	d2f9      	bcs.n	80031dc <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80031e8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80031ec:	429d      	cmp	r5, r3
 80031ee:	d205      	bcs.n	80031fc <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80031f0:	4629      	mov	r1, r5
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fc7e 	bl	8002af4 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80031f8:	4606      	mov	r6, r0
 80031fa:	b908      	cbnz	r0, 8003200 <remove_chain+0x2e>
		res = FR_INT_ERR;
 80031fc:	2000      	movs	r0, #0
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003200:	2801      	cmp	r0, #1
 8003202:	d0eb      	beq.n	80031dc <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003204:	1c41      	adds	r1, r0, #1
 8003206:	d014      	beq.n	8003232 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003208:	2200      	movs	r2, #0
 800320a:	4629      	mov	r1, r5
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff fd42 	bl	8002c96 <put_fat>
			if (res != FR_OK) break;
 8003212:	b978      	cbnz	r0, 8003234 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003214:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	d008      	beq.n	800322e <remove_chain+0x5c>
				fs->free_clust++;
 800321c:	3301      	adds	r3, #1
 800321e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8003222:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800322e:	4635      	mov	r5, r6
 8003230:	e7da      	b.n	80031e8 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003232:	2001      	movs	r0, #1
}
 8003234:	bd70      	pop	{r4, r5, r6, pc}
	...

08003238 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800323a:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800323c:	a804      	add	r0, sp, #16
{
 800323e:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003240:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003244:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8003246:	f7ff f9f3 	bl	8002630 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800324a:	1e05      	subs	r5, r0, #0
 800324c:	db21      	blt.n	8003292 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800324e:	4913      	ldr	r1, [pc, #76]	; (800329c <f_mount+0x64>)
 8003250:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8003254:	b164      	cbz	r4, 8003270 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <f_mount+0x68>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4294      	cmp	r4, r2
 800325c:	bf04      	itt	eq
 800325e:	2200      	moveq	r2, #0
 8003260:	601a      	streq	r2, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	2000      	movs	r0, #0
 8003266:	4294      	cmp	r4, r2
 8003268:	bf08      	it	eq
 800326a:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800326c:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 8003270:	9801      	ldr	r0, [sp, #4]
 8003272:	b110      	cbz	r0, 800327a <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8003274:	2300      	movs	r3, #0
 8003276:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800327a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800327e:	b130      	cbz	r0, 800328e <f_mount+0x56>
 8003280:	2e01      	cmp	r6, #1
 8003282:	d108      	bne.n	8003296 <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8003284:	2200      	movs	r2, #0
 8003286:	4669      	mov	r1, sp
 8003288:	a801      	add	r0, sp, #4
 800328a:	f7ff fae5 	bl	8002858 <find_volume>
	LEAVE_FF(fs, res);
}
 800328e:	b004      	add	sp, #16
 8003290:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003292:	200b      	movs	r0, #11
 8003294:	e7fb      	b.n	800328e <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003296:	2000      	movs	r0, #0
 8003298:	e7f9      	b.n	800328e <f_mount+0x56>
 800329a:	bf00      	nop
 800329c:	20000530 	.word	0x20000530
 80032a0:	20000534 	.word	0x20000534

080032a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80032a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032a8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80032ac:	4690      	mov	r8, r2
 80032ae:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80032b0:	4605      	mov	r5, r0
 80032b2:	2800      	cmp	r0, #0
 80032b4:	f000 80a6 	beq.w	8003404 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80032be:	f002 021e 	and.w	r2, r2, #30
 80032c2:	a901      	add	r1, sp, #4
 80032c4:	a886      	add	r0, sp, #536	; 0x218
 80032c6:	f7ff fac7 	bl	8002858 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80032ca:	4606      	mov	r6, r0
 80032cc:	2800      	cmp	r0, #0
 80032ce:	f040 8094 	bne.w	80033fa <f_open+0x156>
		INIT_BUF(dj);
 80032d2:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 80032d4:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 80032d6:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 80032d8:	a806      	add	r0, sp, #24
 80032da:	f7ff fe3f 	bl	8002f5c <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80032de:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 80032e2:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80032e4:	b948      	cbnz	r0, 80032fa <f_open+0x56>
			if (!dir)	/* Default directory itself */
 80032e6:	2c00      	cmp	r4, #0
 80032e8:	d05b      	beq.n	80033a2 <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80032ea:	f017 0f1e 	tst.w	r7, #30
 80032ee:	bf14      	ite	ne
 80032f0:	2101      	movne	r1, #1
 80032f2:	2100      	moveq	r1, #0
 80032f4:	a806      	add	r0, sp, #24
 80032f6:	f7ff f8c7 	bl	8002488 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80032fa:	f018 0f1c 	tst.w	r8, #28
 80032fe:	d05b      	beq.n	80033b8 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8003300:	2800      	cmp	r0, #0
 8003302:	d050      	beq.n	80033a6 <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8003304:	2804      	cmp	r0, #4
 8003306:	d14a      	bne.n	800339e <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003308:	4b51      	ldr	r3, [pc, #324]	; (8003450 <f_open+0x1ac>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	b11a      	cbz	r2, 8003316 <f_open+0x72>
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f040 809b 	bne.w	800344c <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003316:	a806      	add	r0, sp, #24
 8003318:	f7ff ff20 	bl	800315c <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800331c:	2800      	cmp	r0, #0
 800331e:	d13e      	bne.n	800339e <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8003320:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003322:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003326:	073b      	lsls	r3, r7, #28
 8003328:	d550      	bpl.n	80033cc <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800332a:	f005 fc69 	bl	8008c00 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800332e:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003332:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003336:	73a0      	strb	r0, [r4, #14]
 8003338:	73e3      	strb	r3, [r4, #15]
 800333a:	0c03      	lsrs	r3, r0, #16
 800333c:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800333e:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8003342:	f884 801c 	strb.w	r8, [r4, #28]
 8003346:	f884 801d 	strb.w	r8, [r4, #29]
 800334a:	f884 801e 	strb.w	r8, [r4, #30]
 800334e:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003352:	7423      	strb	r3, [r4, #16]
 8003354:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003356:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8003358:	4621      	mov	r1, r4
 800335a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800335e:	f7ff f996 	bl	800268e <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003362:	f884 801a 	strb.w	r8, [r4, #26]
 8003366:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800336a:	f884 8014 	strb.w	r8, [r4, #20]
 800336e:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8003372:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800337a:	4680      	mov	r8, r0
 800337c:	b330      	cbz	r0, 80033cc <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800337e:	4601      	mov	r1, r0
 8003380:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8003382:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8003386:	f7ff ff24 	bl	80031d2 <remove_chain>
					if (res == FR_OK) {
 800338a:	b940      	cbnz	r0, 800339e <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800338c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800338e:	f108 33ff 	add.w	r3, r8, #4294967295
 8003392:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8003396:	4649      	mov	r1, r9
 8003398:	f7ff fa14 	bl	80027c4 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800339c:	b1b0      	cbz	r0, 80033cc <f_open+0x128>
					res = FR_DENIED;
 800339e:	4606      	mov	r6, r0
 80033a0:	e02b      	b.n	80033fa <f_open+0x156>
				res = FR_INVALID_NAME;
 80033a2:	2006      	movs	r0, #6
 80033a4:	e7a9      	b.n	80032fa <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80033a6:	7ae3      	ldrb	r3, [r4, #11]
 80033a8:	f013 0f11 	tst.w	r3, #17
 80033ac:	d12e      	bne.n	800340c <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80033ae:	f018 0f04 	tst.w	r8, #4
 80033b2:	d0b8      	beq.n	8003326 <f_open+0x82>
						res = FR_EXIST;
 80033b4:	2608      	movs	r6, #8
 80033b6:	e020      	b.n	80033fa <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d1f0      	bne.n	800339e <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80033bc:	7ae3      	ldrb	r3, [r4, #11]
 80033be:	06d8      	lsls	r0, r3, #27
 80033c0:	d422      	bmi.n	8003408 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80033c2:	f018 0f02 	tst.w	r8, #2
 80033c6:	d001      	beq.n	80033cc <f_open+0x128>
 80033c8:	07da      	lsls	r2, r3, #31
 80033ca:	d41f      	bmi.n	800340c <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80033cc:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033ce:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 80033d0:	bf48      	it	mi
 80033d2:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80033da:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80033de:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 80033e2:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80033e6:	bf14      	ite	ne
 80033e8:	2101      	movne	r1, #1
 80033ea:	2100      	moveq	r1, #0
 80033ec:	a806      	add	r0, sp, #24
 80033ee:	f7ff f87d 	bl	80024ec <inc_lock>
 80033f2:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80033f6:	b958      	cbnz	r0, 8003410 <f_open+0x16c>
 80033f8:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80033fa:	4630      	mov	r0, r6
 80033fc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8003400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8003404:	2609      	movs	r6, #9
 8003406:	e7f8      	b.n	80033fa <f_open+0x156>
					res = FR_NO_FILE;
 8003408:	2604      	movs	r6, #4
 800340a:	e7f6      	b.n	80033fa <f_open+0x156>
					res = FR_DENIED;
 800340c:	2607      	movs	r6, #7
 800340e:	e7f4      	b.n	80033fa <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8003410:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003414:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8003418:	2700      	movs	r7, #0
 800341a:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800341e:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8003422:	4621      	mov	r1, r4
 8003424:	f7ff f933 	bl	800268e <ld_clust.isra.0>
 8003428:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800342c:	69e3      	ldr	r3, [r4, #28]
 800342e:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8003432:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8003436:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 800343a:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800343e:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8003442:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8003446:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800344a:	e7d6      	b.n	80033fa <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800344c:	2012      	movs	r0, #18
 800344e:	e7a6      	b.n	800339e <f_open+0xfa>
 8003450:	20000534 	.word	0x20000534

08003454 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003458:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800345a:	2300      	movs	r3, #0
 800345c:	f8cb 3000 	str.w	r3, [fp]
{
 8003460:	4604      	mov	r4, r0
 8003462:	4689      	mov	r9, r1
 8003464:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8003466:	f7ff f8fb 	bl	8002660 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800346a:	4606      	mov	r6, r0
 800346c:	bb50      	cbnz	r0, 80034c4 <f_write+0x70>
	if (fp->err)							/* Check error */
 800346e:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 80d9 	bne.w	800362a <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8003478:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800347c:	0799      	lsls	r1, r3, #30
 800347e:	f140 80d6 	bpl.w	800362e <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8003482:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8003486:	42df      	cmn	r7, r3
 8003488:	f0c0 8083 	bcc.w	8003592 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800348c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8003490:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8003494:	4293      	cmp	r3, r2
 8003496:	f200 80c5 	bhi.w	8003624 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800349a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800349e:	f043 0320 	orr.w	r3, r3, #32
 80034a2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80034a6:	e00d      	b.n	80034c4 <f_write+0x70>
					if (fp->cltbl)
 80034a8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80034ac:	b173      	cbz	r3, 80034cc <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff f87c 	bl	80025ac <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80034b4:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d0e8      	beq.n	800348c <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80034ba:	2901      	cmp	r1, #1
 80034bc:	d109      	bne.n	80034d2 <f_write+0x7e>
 80034be:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80034c0:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 80034c4:	4630      	mov	r0, r6
 80034c6:	b003      	add	sp, #12
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80034cc:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80034d0:	e07a      	b.n	80035c8 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80034d2:	1c4a      	adds	r2, r1, #1
 80034d4:	d101      	bne.n	80034da <f_write+0x86>
 80034d6:	2601      	movs	r6, #1
 80034d8:	e7f2      	b.n	80034c0 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80034da:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 80034de:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80034e2:	b90b      	cbnz	r3, 80034e8 <f_write+0x94>
 80034e4:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80034e8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80034ec:	065b      	lsls	r3, r3, #25
 80034ee:	d511      	bpl.n	8003514 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80034f0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80034f4:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80034f8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80034fc:	2301      	movs	r3, #1
 80034fe:	4621      	mov	r1, r4
 8003500:	f7fe ff94 	bl	800242c <disk_write>
 8003504:	2800      	cmp	r0, #0
 8003506:	d1e6      	bne.n	80034d6 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8003508:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800350c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003510:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8003514:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8003518:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800351c:	4650      	mov	r0, sl
 800351e:	f7ff fadb 	bl	8002ad8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003522:	2800      	cmp	r0, #0
 8003524:	d0cb      	beq.n	80034be <f_write+0x6a>
			sect += csect;
 8003526:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003528:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800352a:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800352e:	d04e      	beq.n	80035ce <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8003530:	9a01      	ldr	r2, [sp, #4]
 8003532:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8003536:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800353a:	442a      	add	r2, r5
 800353c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800353e:	bf84      	itt	hi
 8003540:	9a01      	ldrhi	r2, [sp, #4]
 8003542:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8003544:	462b      	mov	r3, r5
 8003546:	4642      	mov	r2, r8
 8003548:	4649      	mov	r1, r9
 800354a:	f7fe ff6f 	bl	800242c <disk_write>
 800354e:	2800      	cmp	r0, #0
 8003550:	d1c1      	bne.n	80034d6 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003552:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8003556:	eba1 0108 	sub.w	r1, r1, r8
 800355a:	428d      	cmp	r5, r1
 800355c:	d90c      	bls.n	8003578 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8003566:	4620      	mov	r0, r4
 8003568:	f7fe ff7c 	bl	8002464 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800356c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8003570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003574:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8003578:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800357a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800357e:	442b      	add	r3, r5
 8003580:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8003584:	f8db 3000 	ldr.w	r3, [fp]
 8003588:	442b      	add	r3, r5
 800358a:	44a9      	add	r9, r5
 800358c:	f8cb 3000 	str.w	r3, [fp]
 8003590:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8003592:	2f00      	cmp	r7, #0
 8003594:	f43f af7a 	beq.w	800348c <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003598:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800359c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80035a0:	bb5b      	cbnz	r3, 80035fa <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80035a2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80035a6:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80035aa:	3b01      	subs	r3, #1
 80035ac:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80035b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	d197      	bne.n	80034e8 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80035b8:	2900      	cmp	r1, #0
 80035ba:	f47f af75 	bne.w	80034a8 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 80035be:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 80035c2:	2900      	cmp	r1, #0
 80035c4:	f47f af79 	bne.w	80034ba <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80035c8:	f7ff fbdf 	bl	8002d8a <create_chain>
 80035cc:	e772      	b.n	80034b4 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80035ce:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80035d2:	4598      	cmp	r8, r3
 80035d4:	d00f      	beq.n	80035f6 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 80035d6:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 80035da:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d209      	bcs.n	80035f6 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80035e2:	2301      	movs	r3, #1
 80035e4:	4642      	mov	r2, r8
 80035e6:	4621      	mov	r1, r4
 80035e8:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 80035ec:	f7fe ff10 	bl	8002410 <disk_read>
				if (fp->fptr < fp->fsize &&
 80035f0:	2800      	cmp	r0, #0
 80035f2:	f47f af70 	bne.w	80034d6 <f_write+0x82>
			fp->dsect = sect;
 80035f6:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80035fa:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 80035fe:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003602:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8003606:	42bd      	cmp	r5, r7
 8003608:	bf28      	it	cs
 800360a:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800360c:	462a      	mov	r2, r5
 800360e:	4649      	mov	r1, r9
 8003610:	4420      	add	r0, r4
 8003612:	f7fe ff27 	bl	8002464 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8003616:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800361a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8003622:	e7aa      	b.n	800357a <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8003624:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8003628:	e737      	b.n	800349a <f_write+0x46>
 800362a:	461e      	mov	r6, r3
 800362c:	e74a      	b.n	80034c4 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800362e:	2607      	movs	r6, #7
 8003630:	e748      	b.n	80034c4 <f_write+0x70>

08003632 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003632:	b570      	push	{r4, r5, r6, lr}
 8003634:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8003636:	f7ff f813 	bl	8002660 <validate>
	if (res == FR_OK) {
 800363a:	2800      	cmp	r0, #0
 800363c:	d158      	bne.n	80036f0 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800363e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8003642:	069a      	lsls	r2, r3, #26
 8003644:	d554      	bpl.n	80036f0 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8003646:	065b      	lsls	r3, r3, #25
 8003648:	d511      	bpl.n	800366e <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800364a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800364e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8003652:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003656:	2301      	movs	r3, #1
 8003658:	4621      	mov	r1, r4
 800365a:	f7fe fee7 	bl	800242c <disk_write>
 800365e:	2800      	cmp	r0, #0
 8003660:	d145      	bne.n	80036ee <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8003662:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800366e:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8003672:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003676:	f7ff f8a5 	bl	80027c4 <move_window>
 800367a:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800367c:	bbc0      	cbnz	r0, 80036f0 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800367e:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8003682:	7aeb      	ldrb	r3, [r5, #11]
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800368a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800368e:	772b      	strb	r3, [r5, #28]
 8003690:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	776b      	strb	r3, [r5, #29]
 8003698:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800369c:	77ab      	strb	r3, [r5, #30]
 800369e:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 80036a2:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80036a4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 80036a8:	76ab      	strb	r3, [r5, #26]
 80036aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	752b      	strb	r3, [r5, #20]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80036b6:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 80036b8:	f005 faa2 	bl	8008c00 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 80036bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80036c0:	75a8      	strb	r0, [r5, #22]
 80036c2:	75eb      	strb	r3, [r5, #23]
 80036c4:	0c03      	lsrs	r3, r0, #16
 80036c6:	0e00      	lsrs	r0, r0, #24
 80036c8:	762b      	strb	r3, [r5, #24]
 80036ca:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80036cc:	74ae      	strb	r6, [r5, #18]
 80036ce:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80036d0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80036d4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 80036d8:	f023 0320 	bic.w	r3, r3, #32
 80036dc:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80036e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80036ea:	f7ff b80e 	b.w	800270a <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80036ee:	2001      	movs	r0, #1
}
 80036f0:	bd70      	pop	{r4, r5, r6, pc}

080036f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80036f2:	b510      	push	{r4, lr}
 80036f4:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80036f6:	f7ff ff9c 	bl	8003632 <f_sync>
	if (res == FR_OK)
 80036fa:	b950      	cbnz	r0, 8003712 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7fe ffaf 	bl	8002660 <validate>
		if (res == FR_OK) {
 8003702:	b930      	cbnz	r0, 8003712 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8003704:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8003708:	f7fe ff34 	bl	8002574 <dec_lock>
			if (res == FR_OK)
 800370c:	b908      	cbnz	r0, 8003712 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800370e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8003712:	bd10      	pop	{r4, pc}

08003714 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8003714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	4604      	mov	r4, r0
 800371a:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800371c:	f7fe ffa0 	bl	8002660 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003720:	4606      	mov	r6, r0
 8003722:	bb10      	cbnz	r0, 800376a <f_lseek+0x56>
	if (fp->err)						/* Check error */
 8003724:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 813e 	bne.w	80039aa <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800372e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8087 	beq.w	8003846 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003738:	1c6a      	adds	r2, r5, #1
 800373a:	d13d      	bne.n	80037b8 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800373c:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003740:	f8d3 b000 	ldr.w	fp, [r3]
 8003744:	f103 0a04 	add.w	sl, r3, #4
 8003748:	2502      	movs	r5, #2
			if (cl) {
 800374a:	b35f      	cbz	r7, 80037a4 <f_lseek+0x90>
 800374c:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800374e:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 8003752:	4641      	mov	r1, r8
 8003754:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003758:	f7ff f9cc 	bl	8002af4 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800375c:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800375e:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8003762:	d807      	bhi.n	8003774 <f_lseek+0x60>
 8003764:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003766:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800376a:	4630      	mov	r0, r6
 800376c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003770:	4607      	mov	r7, r0
 8003772:	e7eb      	b.n	800374c <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d101      	bne.n	800377c <f_lseek+0x68>
 8003778:	2601      	movs	r6, #1
 800377a:	e7f4      	b.n	8003766 <f_lseek+0x52>
					} while (cl == pcl + 1);
 800377c:	f108 0301 	add.w	r3, r8, #1
 8003780:	4298      	cmp	r0, r3
 8003782:	4680      	mov	r8, r0
 8003784:	d0e5      	beq.n	8003752 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003786:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8003788:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800378a:	bf21      	itttt	cs
 800378c:	4653      	movcs	r3, sl
 800378e:	f843 9b08 	strcs.w	r9, [r3], #8
 8003792:	f8ca 7004 	strcs.w	r7, [sl, #4]
 8003796:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8003798:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800379c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80037a0:	4298      	cmp	r0, r3
 80037a2:	d3e5      	bcc.n	8003770 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 80037a4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 80037a8:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 80037aa:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 80037ac:	f200 80ff 	bhi.w	80039ae <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8ca 3000 	str.w	r3, [sl]
 80037b6:	e7d8      	b.n	800376a <f_lseek+0x56>
 80037b8:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 80037bc:	4285      	cmp	r5, r0
 80037be:	bf28      	it	cs
 80037c0:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 80037c2:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 80037c6:	2d00      	cmp	r5, #0
 80037c8:	d0cf      	beq.n	800376a <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 80037ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80037ce:	4641      	mov	r1, r8
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7fe feeb 	bl	80025ac <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 80037d6:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 80037da:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 80037de:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 80037e0:	4638      	mov	r0, r7
 80037e2:	f7ff f979 	bl	8002ad8 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d0bc      	beq.n	8003764 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80037ea:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	d0bb      	beq.n	800376a <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80037f2:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80037f6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80037fa:	3d01      	subs	r5, #1
 80037fc:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8003800:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8003802:	4295      	cmp	r5, r2
 8003804:	d0b1      	beq.n	800376a <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8003806:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800380a:	0659      	lsls	r1, r3, #25
 800380c:	d50d      	bpl.n	800382a <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800380e:	2301      	movs	r3, #1
 8003810:	4621      	mov	r1, r4
 8003812:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8003816:	f7fe fe09 	bl	800242c <disk_write>
 800381a:	2800      	cmp	r0, #0
 800381c:	d1ac      	bne.n	8003778 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800381e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8003822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003826:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800382a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800382e:	2301      	movs	r3, #1
 8003830:	462a      	mov	r2, r5
 8003832:	4621      	mov	r1, r4
 8003834:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003838:	f7fe fdea 	bl	8002410 <disk_read>
 800383c:	2800      	cmp	r0, #0
 800383e:	d19b      	bne.n	8003778 <f_lseek+0x64>
					fp->dsect = dsc;
 8003840:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8003844:	e791      	b.n	800376a <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8003846:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800384a:	429d      	cmp	r5, r3
 800384c:	d905      	bls.n	800385a <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800384e:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8003852:	f012 0f02 	tst.w	r2, #2
 8003856:	bf08      	it	eq
 8003858:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800385a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800385c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 8003860:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8003864:	2d00      	cmp	r5, #0
 8003866:	d13e      	bne.n	80038e6 <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8003868:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800386c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8003870:	4293      	cmp	r3, r2
 8003872:	f67f af7a 	bls.w	800376a <f_lseek+0x56>
			fp->fsize = fp->fptr;
 8003876:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800387a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800387e:	f043 0320 	orr.w	r3, r3, #32
 8003882:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8003886:	e770      	b.n	800376a <f_lseek+0x56>
		fp->fptr = nsect = 0;
 8003888:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800388a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0e8      	beq.n	8003868 <f_lseek+0x154>
 8003896:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800389a:	4295      	cmp	r5, r2
 800389c:	d0e4      	beq.n	8003868 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800389e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80038a2:	065b      	lsls	r3, r3, #25
 80038a4:	d510      	bpl.n	80038c8 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80038a6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80038aa:	2301      	movs	r3, #1
 80038ac:	4621      	mov	r1, r4
 80038ae:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80038b2:	f7fe fdbb 	bl	800242c <disk_write>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	f47f af5e 	bne.w	8003778 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 80038bc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80038c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80038c8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80038cc:	2301      	movs	r3, #1
 80038ce:	462a      	mov	r2, r5
 80038d0:	4621      	mov	r1, r4
 80038d2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80038d6:	f7fe fd9b 	bl	8002410 <disk_read>
 80038da:	2800      	cmp	r0, #0
 80038dc:	f47f af4c 	bne.w	8003778 <f_lseek+0x64>
			fp->dsect = nsect;
 80038e0:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80038e4:	e7c0      	b.n	8003868 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80038e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80038ea:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80038ee:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80038f0:	b32b      	cbz	r3, 800393e <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80038f2:	3b01      	subs	r3, #1
 80038f4:	1e6a      	subs	r2, r5, #1
 80038f6:	fbb3 f1f7 	udiv	r1, r3, r7
 80038fa:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80038fe:	428a      	cmp	r2, r1
 8003900:	d31d      	bcc.n	800393e <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8003902:	427a      	negs	r2, r7
 8003904:	4013      	ands	r3, r2
				clst = fp->clust;
 8003906:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800390a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800390e:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8003910:	2900      	cmp	r1, #0
 8003912:	d0b9      	beq.n	8003888 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 8003914:	42bd      	cmp	r5, r7
 8003916:	d823      	bhi.n	8003960 <f_lseek+0x24c>
				fp->fptr += ofs;
 8003918:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800391c:	442b      	add	r3, r5
 800391e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8003922:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ae      	beq.n	8003888 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800392a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800392e:	f7ff f8d3 	bl	8002ad8 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8003932:	2800      	cmp	r0, #0
 8003934:	f43f af16 	beq.w	8003764 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8003938:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800393c:	e7a5      	b.n	800388a <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800393e:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003942:	b951      	cbnz	r1, 800395a <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 8003944:	f7ff fa21 	bl	8002d8a <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003948:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800394a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800394c:	f43f af0a 	beq.w	8003764 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003950:	1c42      	adds	r2, r0, #1
 8003952:	f43f af11 	beq.w	8003778 <f_lseek+0x64>
					fp->sclust = clst;
 8003956:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800395a:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800395e:	e7d7      	b.n	8003910 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003960:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8003964:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003968:	079b      	lsls	r3, r3, #30
 800396a:	d505      	bpl.n	8003978 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800396c:	f7ff fa0d 	bl	8002d8a <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8003970:	4601      	mov	r1, r0
 8003972:	b920      	cbnz	r0, 800397e <f_lseek+0x26a>
 8003974:	463d      	mov	r5, r7
 8003976:	e7cf      	b.n	8003918 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8003978:	f7ff f8bc 	bl	8002af4 <get_fat>
 800397c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800397e:	1c4a      	adds	r2, r1, #1
 8003980:	f43f aefa 	beq.w	8003778 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8003984:	2901      	cmp	r1, #1
 8003986:	f67f aeed 	bls.w	8003764 <f_lseek+0x50>
 800398a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800398e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003992:	4299      	cmp	r1, r3
 8003994:	f4bf aee6 	bcs.w	8003764 <f_lseek+0x50>
					fp->fptr += bcs;
 8003998:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800399c:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 80039a0:	443b      	add	r3, r7
 80039a2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 80039a6:	1bed      	subs	r5, r5, r7
 80039a8:	e7b4      	b.n	8003914 <f_lseek+0x200>
 80039aa:	461e      	mov	r6, r3
 80039ac:	e6dd      	b.n	800376a <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80039ae:	2611      	movs	r6, #17
 80039b0:	e6db      	b.n	800376a <f_lseek+0x56>

080039b2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80039b2:	b530      	push	{r4, r5, lr}
 80039b4:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 80039b6:	4605      	mov	r5, r0
{
 80039b8:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d045      	beq.n	8003a4a <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	a901      	add	r1, sp, #4
 80039c2:	a802      	add	r0, sp, #8
 80039c4:	f7fe ff48 	bl	8002858 <find_volume>
	if (res == FR_OK) {
 80039c8:	4604      	mov	r4, r0
 80039ca:	bb30      	cbnz	r0, 8003a1a <f_opendir+0x68>
		dp->fs = fs;
 80039cc:	9b02      	ldr	r3, [sp, #8]
 80039ce:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 80039d2:	ab03      	add	r3, sp, #12
 80039d4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80039d8:	9901      	ldr	r1, [sp, #4]
 80039da:	4628      	mov	r0, r5
 80039dc:	f7ff fabe 	bl	8002f5c <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80039e0:	4604      	mov	r4, r0
 80039e2:	b9b8      	cbnz	r0, 8003a14 <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 80039e4:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 80039e8:	b149      	cbz	r1, 80039fe <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80039ea:	7acb      	ldrb	r3, [r1, #11]
 80039ec:	06db      	lsls	r3, r3, #27
 80039ee:	d528      	bpl.n	8003a42 <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 80039f0:	9b02      	ldr	r3, [sp, #8]
 80039f2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80039f6:	f7fe fe4a 	bl	800268e <ld_clust.isra.0>
 80039fa:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 80039fe:	9b02      	ldr	r3, [sp, #8]
 8003a00:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8003a04:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff f8d3 	bl	8002bb6 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 8003a10:	4604      	mov	r4, r0
 8003a12:	b130      	cbz	r0, 8003a22 <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003a14:	2c04      	cmp	r4, #4
 8003a16:	bf08      	it	eq
 8003a18:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 8003a20:	e009      	b.n	8003a36 <f_opendir+0x84>
					if (dp->sclust) {
 8003a22:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8003a26:	b14b      	cbz	r3, 8003a3c <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7fe fd5e 	bl	80024ec <inc_lock>
 8003a30:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 8003a34:	b138      	cbz	r0, 8003a46 <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 8003a36:	4620      	mov	r0, r4
 8003a38:	b007      	add	sp, #28
 8003a3a:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 8003a3c:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 8003a40:	e7f9      	b.n	8003a36 <f_opendir+0x84>
					res = FR_NO_PATH;
 8003a42:	2405      	movs	r4, #5
 8003a44:	e7e9      	b.n	8003a1a <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 8003a46:	2412      	movs	r4, #18
 8003a48:	e7e7      	b.n	8003a1a <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 8003a4a:	2409      	movs	r4, #9
 8003a4c:	e7f3      	b.n	8003a36 <f_opendir+0x84>

08003a4e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003a4e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a50:	4605      	mov	r5, r0
 8003a52:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8003a54:	f7fe fe04 	bl	8002660 <validate>
	if (res == FR_OK) {
 8003a58:	4604      	mov	r4, r0
 8003a5a:	b9e8      	cbnz	r0, 8003a98 <f_readdir+0x4a>
		if (!fno) {
 8003a5c:	b92e      	cbnz	r6, 8003a6a <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8003a5e:	4601      	mov	r1, r0
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7ff f8a8 	bl	8002bb6 <dir_sdi>
 8003a66:	4604      	mov	r4, r0
 8003a68:	e016      	b.n	8003a98 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 8003a6a:	ab01      	add	r3, sp, #4
 8003a6c:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7ff fb47 	bl	8003104 <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8003a76:	2804      	cmp	r0, #4
 8003a78:	d111      	bne.n	8003a9e <f_readdir+0x50>
				dp->sect = 0;
 8003a7a:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7fe fda7 	bl	80025d4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8003a86:	2100      	movs	r1, #0
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f7ff f9d7 	bl	8002e3c <dir_next>
				if (res == FR_NO_FILE) {
 8003a8e:	2804      	cmp	r0, #4
 8003a90:	d1e9      	bne.n	8003a66 <f_readdir+0x18>
					dp->sect = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 8003a98:	4620      	mov	r0, r4
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d1e1      	bne.n	8003a66 <f_readdir+0x18>
 8003aa2:	e7ec      	b.n	8003a7e <f_readdir+0x30>

08003aa4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8003aa4:	b530      	push	{r4, r5, lr}
 8003aa6:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8003aaa:	2201      	movs	r2, #1
{
 8003aac:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 8003aae:	a901      	add	r1, sp, #4
 8003ab0:	a886      	add	r0, sp, #536	; 0x218
 8003ab2:	f7fe fed1 	bl	8002858 <find_volume>
	if (res == FR_OK) {
 8003ab6:	b988      	cbnz	r0, 8003adc <f_unlink+0x38>
		INIT_BUF(dj);
 8003ab8:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 8003aba:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8003abc:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 8003abe:	a806      	add	r0, sp, #24
 8003ac0:	f7ff fa4c 	bl	8002f5c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 8003ac4:	b950      	cbnz	r0, 8003adc <f_unlink+0x38>
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	a806      	add	r0, sp, #24
 8003aca:	f7fe fcdd 	bl	8002488 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8003ace:	b928      	cbnz	r0, 8003adc <f_unlink+0x38>
			dir = dj.dir;
 8003ad0:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 8003ad2:	b169      	cbz	r1, 8003af0 <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 8003ad4:	7acd      	ldrb	r5, [r1, #11]
 8003ad6:	07ea      	lsls	r2, r5, #31
 8003ad8:	d50c      	bpl.n	8003af4 <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8003ada:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 8003adc:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 8003ae0:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	9886      	ldr	r0, [sp, #536]	; 0x218
 8003ae6:	f7ff fb74 	bl	80031d2 <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1f6      	bne.n	8003adc <f_unlink+0x38>
 8003aee:	e026      	b.n	8003b3e <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8003af0:	2006      	movs	r0, #6
 8003af2:	e7f3      	b.n	8003adc <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 8003af4:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8003af6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8003afa:	f7fe fdc8 	bl	800268e <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8003afe:	4604      	mov	r4, r0
 8003b00:	b1b0      	cbz	r0, 8003b30 <f_unlink+0x8c>
 8003b02:	06eb      	lsls	r3, r5, #27
 8003b04:	d514      	bpl.n	8003b30 <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 8003b06:	a906      	add	r1, sp, #24
 8003b08:	a88e      	add	r0, sp, #568	; 0x238
 8003b0a:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003b0e:	f7fe fca9 	bl	8002464 <mem_cpy>
						res = dir_sdi(&sdj, 2);
 8003b12:	2102      	movs	r1, #2
 8003b14:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 8003b16:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 8003b1a:	f7ff f84c 	bl	8002bb6 <dir_sdi>
						if (res == FR_OK) {
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d1dc      	bne.n	8003adc <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8003b22:	a88e      	add	r0, sp, #568	; 0x238
 8003b24:	f7ff faee 	bl	8003104 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d0d6      	beq.n	8003ada <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8003b2c:	2804      	cmp	r0, #4
 8003b2e:	d1d5      	bne.n	8003adc <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8003b30:	a806      	add	r0, sp, #24
 8003b32:	f7ff f88f 	bl	8002c54 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d1d0      	bne.n	8003adc <f_unlink+0x38>
 8003b3a:	2c00      	cmp	r4, #0
 8003b3c:	d1d1      	bne.n	8003ae2 <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 8003b3e:	9886      	ldr	r0, [sp, #536]	; 0x218
 8003b40:	f7fe fde3 	bl	800270a <sync_fs>
 8003b44:	e7ca      	b.n	8003adc <f_unlink+0x38>

08003b46 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 8003b46:	b510      	push	{r4, lr}
 8003b48:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8003b50:	2201      	movs	r2, #1
 8003b52:	a901      	add	r1, sp, #4
 8003b54:	a886      	add	r0, sp, #536	; 0x218
 8003b56:	f7fe fe7f 	bl	8002858 <find_volume>
	if (res == FR_OK) {
 8003b5a:	b9c0      	cbnz	r0, 8003b8e <f_utime+0x48>
		INIT_BUF(dj);
 8003b5c:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8003b5e:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8003b60:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8003b62:	a806      	add	r0, sp, #24
 8003b64:	f7ff f9fa 	bl	8002f5c <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 8003b68:	b988      	cbnz	r0, 8003b8e <f_utime+0x48>
			dir = dj.dir;
 8003b6a:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 8003b6c:	b193      	cbz	r3, 8003b94 <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 8003b6e:	88e2      	ldrh	r2, [r4, #6]
 8003b70:	759a      	strb	r2, [r3, #22]
 8003b72:	88e2      	ldrh	r2, [r4, #6]
 8003b74:	0a12      	lsrs	r2, r2, #8
 8003b76:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 8003b78:	88a2      	ldrh	r2, [r4, #4]
 8003b7a:	761a      	strb	r2, [r3, #24]
 8003b7c:	88a2      	ldrh	r2, [r4, #4]
 8003b7e:	0a12      	lsrs	r2, r2, #8
 8003b80:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 8003b82:	9886      	ldr	r0, [sp, #536]	; 0x218
 8003b84:	2301      	movs	r3, #1
 8003b86:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 8003b8a:	f7fe fdbe 	bl	800270a <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003b8e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8003b92:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 8003b94:	2006      	movs	r0, #6
 8003b96:	e7fa      	b.n	8003b8e <f_utime+0x48>

08003b98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003b98:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <FATFS_LinkDriverEx+0x40>)
 8003b9c:	7a5c      	ldrb	r4, [r3, #9]
 8003b9e:	2c01      	cmp	r4, #1
 8003ba0:	d818      	bhi.n	8003bd4 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003ba2:	7a5d      	ldrb	r5, [r3, #9]
 8003ba4:	b2ed      	uxtb	r5, r5
 8003ba6:	2400      	movs	r4, #0
 8003ba8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8003baa:	7a5d      	ldrb	r5, [r3, #9]
 8003bac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003bb0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8003bb2:	7a58      	ldrb	r0, [r3, #9]
 8003bb4:	4418      	add	r0, r3
 8003bb6:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8003bb8:	7a5a      	ldrb	r2, [r3, #9]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	1c50      	adds	r0, r2, #1
 8003bbe:	b2c0      	uxtb	r0, r0
 8003bc0:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003bc2:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003bc4:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003bc6:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003bc8:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8003bca:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003bcc:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003bce:	70cc      	strb	r4, [r1, #3]
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003bd4:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8003bd6:	bd30      	pop	{r4, r5, pc}
 8003bd8:	20000550 	.word	0x20000550

08003bdc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f7ff bfdb 	b.w	8003b98 <FATFS_LinkDriverEx>
	...

08003be4 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <FATFS_UnLinkDriverEx+0x2c>)
 8003be6:	7a53      	ldrb	r3, [r2, #9]
 8003be8:	b17b      	cbz	r3, 8003c0a <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 8003bea:	7803      	ldrb	r3, [r0, #0]
 8003bec:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003bf4:	6848      	ldr	r0, [r1, #4]
 8003bf6:	b140      	cbz	r0, 8003c0a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8003bf8:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8003bfa:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8003bfc:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8003bfe:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8003c00:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	7253      	strb	r3, [r2, #9]
 8003c08:	4770      	bx	lr
  uint8_t ret = 1;
 8003c0a:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000550 	.word	0x20000550

08003c14 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 8003c14:	2100      	movs	r1, #0
 8003c16:	f7ff bfe5 	b.w	8003be4 <FATFS_UnLinkDriverEx>

08003c1a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003c1a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003c1c:	b180      	cbz	r0, 8003c40 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003c1e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c22:	b113      	cbz	r3, 8003c2a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003c2a:	b109      	cbz	r1, 8003c30 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003c2c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003c36:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003c38:	f007 ff56 	bl	800bae8 <USBD_LL_Init>

  return USBD_OK;
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003c40:	2002      	movs	r0, #2
}
 8003c42:	bd08      	pop	{r3, pc}

08003c44 <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8003c44:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c48:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 8003c4a:	bf14      	ite	ne
 8003c4c:	2002      	movne	r0, #2
 8003c4e:	2000      	moveq	r0, #0
 8003c50:	4770      	bx	lr

08003c52 <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003c52:	2301      	movs	r3, #1
{
 8003c54:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003c56:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003c5a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c5e:	7901      	ldrb	r1, [r0, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
{
 8003c62:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003c64:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8003c66:	4620      	mov	r0, r4
 8003c68:	f007 ff7a 	bl	800bb60 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f007 ff69 	bl	800bb44 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 8003c72:	2000      	movs	r0, #0
 8003c74:	bd10      	pop	{r4, pc}

08003c76 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003c76:	b119      	cbz	r1, 8003c80 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003c78:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003c80:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003c82:	4770      	bx	lr

08003c84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003c84:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003c86:	f007 ff64 	bl	800bb52 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	bd08      	pop	{r3, pc}

08003c8e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8003c8e:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003c90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c94:	7901      	ldrb	r1, [r0, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
{
 8003c98:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003c9a:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f007 ff5f 	bl	800bb60 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	bd10      	pop	{r4, pc}

08003ca6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003ca6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003ca8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003cac:	b90b      	cbnz	r3, 8003cb2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003cae:	2002      	movs	r0, #2
 8003cb0:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4798      	blx	r3
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1f9      	bne.n	8003cae <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003cba:	bd08      	pop	{r3, pc}

08003cbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003cbc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003cbe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4798      	blx	r3
  return USBD_OK;
}
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	bd08      	pop	{r3, pc}

08003cca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003cca:	b538      	push	{r3, r4, r5, lr}
 8003ccc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003cce:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 fa75 	bl	80041c2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003cd8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003cda:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003cde:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003ce2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003ce6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003cea:	f001 031f 	and.w	r3, r1, #31
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d00e      	beq.n	8003d10 <USBD_LL_SetupStage+0x46>
 8003cf2:	d307      	bcc.n	8003d04 <USBD_LL_SetupStage+0x3a>
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d010      	beq.n	8003d1a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003cf8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f007 ff4e 	bl	800bb9e <USBD_LL_StallEP>
    break;
 8003d02:	e003      	b.n	8003d0c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003d04:	4629      	mov	r1, r5
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 f8e6 	bl	8003ed8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003d10:	4629      	mov	r1, r5
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 f9da 	bl	80040cc <USBD_StdItfReq>
    break;
 8003d18:	e7f8      	b.n	8003d0c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f000 f9ed 	bl	80040fc <USBD_StdEPReq>
    break;
 8003d22:	e7f3      	b.n	8003d0c <USBD_LL_SetupStage+0x42>

08003d24 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4604      	mov	r4, r0
 8003d28:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003d2a:	bb11      	cbnz	r1, 8003d72 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003d2c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d10f      	bne.n	8003d54 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003d34:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003d38:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d90b      	bls.n	8003d58 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003d40:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003d42:	429a      	cmp	r2, r3
 8003d44:	bf28      	it	cs
 8003d46:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003d48:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003d4c:	b292      	uxth	r2, r2
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f000 fa96 	bl	8004280 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003d54:	2000      	movs	r0, #0
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003d58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	b123      	cbz	r3, 8003d6a <USBD_LL_DataOutStage+0x46>
 8003d60:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003d64:	2a03      	cmp	r2, #3
 8003d66:	d100      	bne.n	8003d6a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003d68:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f000 fa90 	bl	8004290 <USBD_CtlSendStatus>
 8003d70:	e7f0      	b.n	8003d54 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003d72:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0eb      	beq.n	8003d54 <USBD_LL_DataOutStage+0x30>
 8003d7c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003d80:	2a03      	cmp	r2, #3
 8003d82:	d1e7      	bne.n	8003d54 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003d84:	4798      	blx	r3
 8003d86:	e7e5      	b.n	8003d54 <USBD_LL_DataOutStage+0x30>

08003d88 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003d8e:	460e      	mov	r6, r1
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d13d      	bne.n	8003e10 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003d94:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003d98:	2a02      	cmp	r2, #2
 8003d9a:	d10f      	bne.n	8003dbc <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003d9c:	69c5      	ldr	r5, [r0, #28]
 8003d9e:	6a02      	ldr	r2, [r0, #32]
 8003da0:	4295      	cmp	r5, r2
 8003da2:	d914      	bls.n	8003dce <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003da4:	1aaa      	subs	r2, r5, r2
 8003da6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003da8:	4619      	mov	r1, r3
 8003daa:	b292      	uxth	r2, r2
 8003dac:	f000 fa51 	bl	8004252 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003db0:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003db2:	461a      	mov	r2, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	4620      	mov	r0, r4
 8003db8:	f007 ff20 	bl	800bbfc <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003dbc:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d102      	bne.n	8003dca <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003dca:	2000      	movs	r0, #0
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8003dce:	6983      	ldr	r3, [r0, #24]
 8003dd0:	fbb3 f5f2 	udiv	r5, r3, r2
 8003dd4:	fb02 3515 	mls	r5, r2, r5, r3
 8003dd8:	b965      	cbnz	r5, 8003df4 <USBD_LL_DataInStage+0x6c>
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d80a      	bhi.n	8003df4 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8003dde:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d206      	bcs.n	8003df4 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003de6:	462a      	mov	r2, r5
 8003de8:	f000 fa33 	bl	8004252 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003dec:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003df0:	462b      	mov	r3, r5
 8003df2:	e7de      	b.n	8003db2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003df4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	b12b      	cbz	r3, 8003e08 <USBD_LL_DataInStage+0x80>
 8003dfc:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003e00:	2a03      	cmp	r2, #3
 8003e02:	d101      	bne.n	8003e08 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003e04:	4620      	mov	r0, r4
 8003e06:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 fa4c 	bl	80042a6 <USBD_CtlReceiveStatus>
 8003e0e:	e7d5      	b.n	8003dbc <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003e10:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0d7      	beq.n	8003dca <USBD_LL_DataInStage+0x42>
 8003e1a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003e1e:	2a03      	cmp	r2, #3
 8003e20:	d1d3      	bne.n	8003dca <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003e22:	4798      	blx	r3
 8003e24:	e7d1      	b.n	8003dca <USBD_LL_DataInStage+0x42>

08003e26 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003e26:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003e28:	2200      	movs	r2, #0
{
 8003e2a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003e2c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e2e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	f007 fe9c 	bl	800bb6e <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003e36:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e38:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	4620      	mov	r0, r4
 8003e42:	f007 fe94 	bl	800bb6e <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003e4c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e50:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8003e52:	b12b      	cbz	r3, 8003e60 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003e54:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003e58:	7921      	ldrb	r1, [r4, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003e60:	2000      	movs	r0, #0
 8003e62:	bd38      	pop	{r3, r4, r5, pc}

08003e64 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003e64:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	4770      	bx	lr

08003e6a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003e6a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003e6e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003e72:	2304      	movs	r3, #4
 8003e74:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003e78:	2000      	movs	r0, #0
 8003e7a:	4770      	bx	lr

08003e7c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003e7c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003e80:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003e84:	2000      	movs	r0, #0
 8003e86:	4770      	bx	lr

08003e88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003e88:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e8a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003e8e:	2a03      	cmp	r2, #3
 8003e90:	d104      	bne.n	8003e9c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003e92:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	b103      	cbz	r3, 8003e9c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003e9a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	bd08      	pop	{r3, pc}

08003ea0 <USBD_LL_IsoINIncomplete>:
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	4770      	bx	lr

08003ea4 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	4770      	bx	lr

08003ea8 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	4770      	bx	lr

08003eac <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003eac:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003eb4:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8003eb8:	7901      	ldrb	r1, [r0, #4]
 8003eba:	6852      	ldr	r2, [r2, #4]
 8003ebc:	4790      	blx	r2
   
  return USBD_OK;
}
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	bd08      	pop	{r3, pc}

08003ec2 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003ec2:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003ec4:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003ec6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003ec8:	f007 fe69 	bl	800bb9e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003ecc:	4620      	mov	r0, r4
 8003ece:	2100      	movs	r1, #0
}
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003ed4:	f007 be63 	b.w	800bb9e <USBD_LL_StallEP>

08003ed8 <USBD_StdDevReq>:
{
 8003ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003eda:	784b      	ldrb	r3, [r1, #1]
{
 8003edc:	4604      	mov	r4, r0
 8003ede:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8003ee0:	2b09      	cmp	r3, #9
 8003ee2:	d879      	bhi.n	8003fd8 <USBD_StdDevReq+0x100>
 8003ee4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ee8:	00e500c9 	.word	0x00e500c9
 8003eec:	00d90078 	.word	0x00d90078
 8003ef0:	006d0078 	.word	0x006d0078
 8003ef4:	0078000a 	.word	0x0078000a
 8003ef8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003efc:	884b      	ldrh	r3, [r1, #2]
 8003efe:	0a1a      	lsrs	r2, r3, #8
 8003f00:	3a01      	subs	r2, #1
 8003f02:	2a06      	cmp	r2, #6
 8003f04:	d868      	bhi.n	8003fd8 <USBD_StdDevReq+0x100>
 8003f06:	e8df f002 	tbb	[pc, r2]
 8003f0a:	1c04      	.short	0x1c04
 8003f0c:	49676729 	.word	0x49676729
 8003f10:	52          	.byte	0x52
 8003f11:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003f12:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f16:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003f18:	7c20      	ldrb	r0, [r4, #16]
 8003f1a:	f10d 0106 	add.w	r1, sp, #6
 8003f1e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003f20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d067      	beq.n	8003ff8 <USBD_StdDevReq+0x120>
 8003f28:	88eb      	ldrh	r3, [r5, #6]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d064      	beq.n	8003ff8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	bf28      	it	cs
 8003f32:	461a      	movcs	r2, r3
 8003f34:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003f38:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 f97c 	bl	8004238 <USBD_CtlSendData>
 8003f40:	e05a      	b.n	8003ff8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003f42:	7c02      	ldrb	r2, [r0, #16]
 8003f44:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f48:	b932      	cbnz	r2, 8003f58 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003f4c:	f10d 0006 	add.w	r0, sp, #6
 8003f50:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003f52:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003f54:	7043      	strb	r3, [r0, #1]
 8003f56:	e7e3      	b.n	8003f20 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	e7f7      	b.n	8003f4c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d83a      	bhi.n	8003fd8 <USBD_StdDevReq+0x100>
 8003f62:	e8df f003 	tbb	[pc, r3]
 8003f66:	0703      	.short	0x0703
 8003f68:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003f6c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	e7d1      	b.n	8003f18 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003f74:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	e7cd      	b.n	8003f18 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003f7c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	e7c9      	b.n	8003f18 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003f84:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	e7c5      	b.n	8003f18 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003f8c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	e7c1      	b.n	8003f18 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003f94:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	e7bd      	b.n	8003f18 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003f9c:	7c03      	ldrb	r3, [r0, #16]
 8003f9e:	b9db      	cbnz	r3, 8003fd8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003fa0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003fa4:	f10d 0006 	add.w	r0, sp, #6
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	4798      	blx	r3
 8003fac:	e7b8      	b.n	8003f20 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003fae:	7c03      	ldrb	r3, [r0, #16]
 8003fb0:	b993      	cbnz	r3, 8003fd8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003fb2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003fb6:	f10d 0006 	add.w	r0, sp, #6
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	e7c8      	b.n	8003f54 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003fc2:	888b      	ldrh	r3, [r1, #4]
 8003fc4:	b943      	cbnz	r3, 8003fd8 <USBD_StdDevReq+0x100>
 8003fc6:	88cb      	ldrh	r3, [r1, #6]
 8003fc8:	b933      	cbnz	r3, 8003fd8 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003fca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003fce:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003fd0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003fd2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003fd6:	d103      	bne.n	8003fe0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7ff ff72 	bl	8003ec2 <USBD_CtlError.constprop.0>
    break;
 8003fde:	e00b      	b.n	8003ff8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8003fe0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f007 fdfb 	bl	800bbe0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003fea:	4620      	mov	r0, r4
 8003fec:	f000 f950 	bl	8004290 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003ff0:	b12d      	cbz	r5, 8003ffe <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003ff2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003ff4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	b003      	add	sp, #12
 8003ffc:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003ffe:	2301      	movs	r3, #1
 8004000:	e7f8      	b.n	8003ff4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8004002:	7889      	ldrb	r1, [r1, #2]
 8004004:	4d30      	ldr	r5, [pc, #192]	; (80040c8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004006:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8004008:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800400a:	d8e5      	bhi.n	8003fd8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800400c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004010:	2b02      	cmp	r3, #2
 8004012:	d00c      	beq.n	800402e <USBD_StdDevReq+0x156>
 8004014:	2b03      	cmp	r3, #3
 8004016:	d1df      	bne.n	8003fd8 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8004018:	b9b1      	cbnz	r1, 8004048 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800401a:	2302      	movs	r3, #2
 800401c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004020:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004022:	f7ff fe4b 	bl	8003cbc <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8004026:	4620      	mov	r0, r4
 8004028:	f000 f932 	bl	8004290 <USBD_CtlSendStatus>
 800402c:	e7e4      	b.n	8003ff8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800402e:	2900      	cmp	r1, #0
 8004030:	d0f9      	beq.n	8004026 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8004032:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004034:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8004036:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004038:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff fe32 	bl	8003ca6 <USBD_SetClassConfig>
 8004042:	2802      	cmp	r0, #2
 8004044:	d1ef      	bne.n	8004026 <USBD_StdDevReq+0x14e>
 8004046:	e7c7      	b.n	8003fd8 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8004048:	6841      	ldr	r1, [r0, #4]
 800404a:	2901      	cmp	r1, #1
 800404c:	d0eb      	beq.n	8004026 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800404e:	b2c9      	uxtb	r1, r1
 8004050:	f7ff fe34 	bl	8003cbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004054:	7829      	ldrb	r1, [r5, #0]
 8004056:	6061      	str	r1, [r4, #4]
 8004058:	e7f0      	b.n	800403c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800405a:	88ca      	ldrh	r2, [r1, #6]
 800405c:	2a01      	cmp	r2, #1
 800405e:	d1bb      	bne.n	8003fd8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8004060:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004064:	2b02      	cmp	r3, #2
 8004066:	d003      	beq.n	8004070 <USBD_StdDevReq+0x198>
 8004068:	2b03      	cmp	r3, #3
 800406a:	d1b5      	bne.n	8003fd8 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800406c:	1d01      	adds	r1, r0, #4
 800406e:	e764      	b.n	8003f3a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8004070:	4601      	mov	r1, r0
 8004072:	2300      	movs	r3, #0
 8004074:	f841 3f08 	str.w	r3, [r1, #8]!
 8004078:	e75f      	b.n	8003f3a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800407a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800407e:	3b02      	subs	r3, #2
 8004080:	2b01      	cmp	r3, #1
 8004082:	d8a9      	bhi.n	8003fd8 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004084:	2301      	movs	r3, #1
 8004086:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8004088:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800408c:	b10b      	cbz	r3, 8004092 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800408e:	2303      	movs	r3, #3
 8004090:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8004092:	2202      	movs	r2, #2
 8004094:	f104 010c 	add.w	r1, r4, #12
 8004098:	e74f      	b.n	8003f3a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800409a:	884b      	ldrh	r3, [r1, #2]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d1ab      	bne.n	8003ff8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80040a0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80040a4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80040a8:	4629      	mov	r1, r5
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4620      	mov	r0, r4
 80040ae:	4798      	blx	r3
 80040b0:	e7b9      	b.n	8004026 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80040b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80040b6:	3b02      	subs	r3, #2
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d88d      	bhi.n	8003fd8 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80040bc:	884b      	ldrh	r3, [r1, #2]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d19a      	bne.n	8003ff8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80040c2:	2300      	movs	r3, #0
 80040c4:	e7ec      	b.n	80040a0 <USBD_StdDevReq+0x1c8>
 80040c6:	bf00      	nop
 80040c8:	2000055c 	.word	0x2000055c

080040cc <USBD_StdItfReq>:
{
 80040cc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80040ce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80040d2:	2b03      	cmp	r3, #3
{
 80040d4:	4604      	mov	r4, r0
 80040d6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80040d8:	d10d      	bne.n	80040f6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80040da:	790b      	ldrb	r3, [r1, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d80a      	bhi.n	80040f6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80040e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80040e8:	88eb      	ldrh	r3, [r5, #6]
 80040ea:	b913      	cbnz	r3, 80040f2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80040ec:	4620      	mov	r0, r4
 80040ee:	f000 f8cf 	bl	8004290 <USBD_CtlSendStatus>
}
 80040f2:	2000      	movs	r0, #0
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80040f6:	f7ff fee4 	bl	8003ec2 <USBD_CtlError.constprop.0>
    break;
 80040fa:	e7fa      	b.n	80040f2 <USBD_StdItfReq+0x26>

080040fc <USBD_StdEPReq>:
{
 80040fc:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80040fe:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8004100:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8004102:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004106:	2a20      	cmp	r2, #32
{
 8004108:	4604      	mov	r4, r0
 800410a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800410c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800410e:	d105      	bne.n	800411c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8004110:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4798      	blx	r3
}
 8004118:	2000      	movs	r0, #0
 800411a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800411c:	784a      	ldrb	r2, [r1, #1]
 800411e:	2a01      	cmp	r2, #1
 8004120:	d01c      	beq.n	800415c <USBD_StdEPReq+0x60>
 8004122:	d32a      	bcc.n	800417a <USBD_StdEPReq+0x7e>
 8004124:	2a03      	cmp	r2, #3
 8004126:	d1f7      	bne.n	8004118 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8004128:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800412c:	2a02      	cmp	r2, #2
 800412e:	d040      	beq.n	80041b2 <USBD_StdEPReq+0xb6>
 8004130:	2a03      	cmp	r2, #3
 8004132:	d002      	beq.n	800413a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8004134:	f7ff fec5 	bl	8003ec2 <USBD_CtlError.constprop.0>
      break;
 8004138:	e7ee      	b.n	8004118 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800413a:	884a      	ldrh	r2, [r1, #2]
 800413c:	b922      	cbnz	r2, 8004148 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800413e:	065e      	lsls	r6, r3, #25
 8004140:	d002      	beq.n	8004148 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8004142:	4619      	mov	r1, r3
 8004144:	f007 fd2b 	bl	800bb9e <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8004148:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800414c:	4629      	mov	r1, r5
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4620      	mov	r0, r4
 8004152:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004154:	4620      	mov	r0, r4
 8004156:	f000 f89b 	bl	8004290 <USBD_CtlSendStatus>
 800415a:	e7dd      	b.n	8004118 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800415c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004160:	2a02      	cmp	r2, #2
 8004162:	d026      	beq.n	80041b2 <USBD_StdEPReq+0xb6>
 8004164:	2a03      	cmp	r2, #3
 8004166:	d1e5      	bne.n	8004134 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004168:	884a      	ldrh	r2, [r1, #2]
 800416a:	2a00      	cmp	r2, #0
 800416c:	d1d4      	bne.n	8004118 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800416e:	0659      	lsls	r1, r3, #25
 8004170:	d0f0      	beq.n	8004154 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004172:	4619      	mov	r1, r3
 8004174:	f007 fd1a 	bl	800bbac <USBD_LL_ClearStallEP>
 8004178:	e7e6      	b.n	8004148 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800417a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800417e:	2a02      	cmp	r2, #2
 8004180:	d017      	beq.n	80041b2 <USBD_StdEPReq+0xb6>
 8004182:	2a03      	cmp	r2, #3
 8004184:	d1d6      	bne.n	8004134 <USBD_StdEPReq+0x38>
 8004186:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800418a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800418e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004192:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004194:	bf14      	ite	ne
 8004196:	3514      	addne	r5, #20
 8004198:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800419c:	f007 fd0d 	bl	800bbba <USBD_LL_IsStallEP>
 80041a0:	b168      	cbz	r0, 80041be <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80041a2:	2301      	movs	r3, #1
 80041a4:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80041a6:	2202      	movs	r2, #2
 80041a8:	4629      	mov	r1, r5
 80041aa:	4620      	mov	r0, r4
 80041ac:	f000 f844 	bl	8004238 <USBD_CtlSendData>
      break;
 80041b0:	e7b2      	b.n	8004118 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80041b2:	065a      	lsls	r2, r3, #25
 80041b4:	d0b0      	beq.n	8004118 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80041b6:	4619      	mov	r1, r3
 80041b8:	f007 fcf1 	bl	800bb9e <USBD_LL_StallEP>
 80041bc:	e7ac      	b.n	8004118 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80041be:	6028      	str	r0, [r5, #0]
 80041c0:	e7f1      	b.n	80041a6 <USBD_StdEPReq+0xaa>

080041c2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80041c2:	780b      	ldrb	r3, [r1, #0]
 80041c4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80041c6:	784b      	ldrb	r3, [r1, #1]
 80041c8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80041ca:	78ca      	ldrb	r2, [r1, #3]
 80041cc:	788b      	ldrb	r3, [r1, #2]
 80041ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041d2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80041d4:	794a      	ldrb	r2, [r1, #5]
 80041d6:	790b      	ldrb	r3, [r1, #4]
 80041d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041dc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80041de:	79ca      	ldrb	r2, [r1, #7]
 80041e0:	798b      	ldrb	r3, [r1, #6]
 80041e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041e6:	80c3      	strh	r3, [r0, #6]
 80041e8:	4770      	bx	lr

080041ea <USBD_CtlError>:
{
 80041ea:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80041ec:	2180      	movs	r1, #128	; 0x80
{
 80041ee:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80041f0:	f007 fcd5 	bl	800bb9e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80041f4:	4620      	mov	r0, r4
 80041f6:	2100      	movs	r1, #0
}
 80041f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80041fc:	f007 bccf 	b.w	800bb9e <USBD_LL_StallEP>

08004200 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004200:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004202:	b188      	cbz	r0, 8004228 <USBD_GetString+0x28>
 8004204:	4605      	mov	r5, r0
 8004206:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004208:	f815 4b01 	ldrb.w	r4, [r5], #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2c00      	cmp	r4, #0
 8004210:	d1f9      	bne.n	8004206 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	3302      	adds	r3, #2
 8004216:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8004218:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800421a:	2303      	movs	r3, #3
 800421c:	704b      	strb	r3, [r1, #1]
 800421e:	3801      	subs	r0, #1
 8004220:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8004222:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004226:	b905      	cbnz	r5, 800422a <USBD_GetString+0x2a>
 8004228:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8004230:	3302      	adds	r3, #2
 8004232:	b2db      	uxtb	r3, r3
 8004234:	548c      	strb	r4, [r1, r2]
 8004236:	e7f4      	b.n	8004222 <USBD_GetString+0x22>

08004238 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004238:	b510      	push	{r4, lr}
 800423a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800423c:	2202      	movs	r2, #2
 800423e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004242:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004244:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8004246:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004248:	2100      	movs	r1, #0
 800424a:	f007 fcd0 	bl	800bbee <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800424e:	2000      	movs	r0, #0
 8004250:	bd10      	pop	{r4, pc}

08004252 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004252:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004254:	4613      	mov	r3, r2
 8004256:	460a      	mov	r2, r1
 8004258:	2100      	movs	r1, #0
 800425a:	f007 fcc8 	bl	800bbee <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800425e:	2000      	movs	r0, #0
 8004260:	bd08      	pop	{r3, pc}

08004262 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004262:	b510      	push	{r4, lr}
 8004264:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004266:	2203      	movs	r2, #3
 8004268:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800426c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004270:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004272:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8004276:	2100      	movs	r1, #0
 8004278:	f007 fcc0 	bl	800bbfc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800427c:	2000      	movs	r0, #0
 800427e:	bd10      	pop	{r4, pc}

08004280 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004280:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8004282:	4613      	mov	r3, r2
 8004284:	460a      	mov	r2, r1
 8004286:	2100      	movs	r1, #0
 8004288:	f007 fcb8 	bl	800bbfc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800428c:	2000      	movs	r0, #0
 800428e:	bd08      	pop	{r3, pc}

08004290 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004290:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004292:	2304      	movs	r3, #4
 8004294:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004298:	2300      	movs	r3, #0
 800429a:	461a      	mov	r2, r3
 800429c:	4619      	mov	r1, r3
 800429e:	f007 fca6 	bl	800bbee <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80042a2:	2000      	movs	r0, #0
 80042a4:	bd08      	pop	{r3, pc}

080042a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80042a6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80042a8:	2305      	movs	r3, #5
 80042aa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80042ae:	2300      	movs	r3, #0
 80042b0:	461a      	mov	r2, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	f007 fca2 	bl	800bbfc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80042b8:	2000      	movs	r0, #0
 80042ba:	bd08      	pop	{r3, pc}

080042bc <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 80042bc:	2320      	movs	r3, #32
 80042be:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 80042c0:	4800      	ldr	r0, [pc, #0]	; (80042c4 <USBD_MSC_GetHSCfgDesc+0x8>)
 80042c2:	4770      	bx	lr
 80042c4:	20000094 	.word	0x20000094

080042c8 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 80042c8:	2320      	movs	r3, #32
 80042ca:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 80042cc:	4800      	ldr	r0, [pc, #0]	; (80042d0 <USBD_MSC_GetFSCfgDesc+0x8>)
 80042ce:	4770      	bx	lr
 80042d0:	20000074 	.word	0x20000074

080042d4 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 80042d4:	2320      	movs	r3, #32
 80042d6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 80042d8:	4800      	ldr	r0, [pc, #0]	; (80042dc <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 80042da:	4770      	bx	lr
 80042dc:	200000c0 	.word	0x200000c0

080042e0 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 80042e0:	230a      	movs	r3, #10
 80042e2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 80042e4:	4800      	ldr	r0, [pc, #0]	; (80042e8 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 80042e6:	4770      	bx	lr
 80042e8:	200000b4 	.word	0x200000b4

080042ec <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80042ec:	7c03      	ldrb	r3, [r0, #16]
{
 80042ee:	b510      	push	{r4, lr}
 80042f0:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80042f2:	b9c3      	cbnz	r3, 8004326 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 80042f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f8:	2202      	movs	r2, #2
 80042fa:	2101      	movs	r1, #1
 80042fc:	f007 fc37 	bl	800bb6e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004300:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8004304:	2202      	movs	r2, #2
 8004306:	2181      	movs	r1, #129	; 0x81
 8004308:	4620      	mov	r0, r4
 800430a:	f007 fc30 	bl	800bb6e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800430e:	f242 006c 	movw	r0, #8300	; 0x206c
 8004312:	f008 fa65 	bl	800c7e0 <malloc>
 8004316:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800431a:	b158      	cbz	r0, 8004334 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 800431c:	4620      	mov	r0, r4
 800431e:	f000 f8be 	bl	800449e <MSC_BOT_Init>
    ret = 0;
 8004322:	2000      	movs	r0, #0
 8004324:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	2202      	movs	r2, #2
 800432a:	2101      	movs	r1, #1
 800432c:	f007 fc1f 	bl	800bb6e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004330:	2340      	movs	r3, #64	; 0x40
 8004332:	e7e7      	b.n	8004304 <USBD_MSC_Init+0x18>
    ret = 1; 
 8004334:	2001      	movs	r0, #1
}
 8004336:	bd10      	pop	{r4, pc}

08004338 <USBD_MSC_DeInit>:
{
 8004338:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800433a:	2101      	movs	r1, #1
{
 800433c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800433e:	f007 fc20 	bl	800bb82 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8004342:	2181      	movs	r1, #129	; 0x81
 8004344:	4620      	mov	r0, r4
 8004346:	f007 fc1c 	bl	800bb82 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 800434a:	4620      	mov	r0, r4
 800434c:	f000 f8d6 	bl	80044fc <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8004350:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004354:	b120      	cbz	r0, 8004360 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8004356:	f008 fa4b 	bl	800c7f0 <free>
    pdev->pClassData  = NULL; 
 800435a:	2300      	movs	r3, #0
 800435c:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8004360:	2000      	movs	r0, #0
 8004362:	bd10      	pop	{r4, pc}

08004364 <USBD_MSC_Setup>:
{
 8004364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004368:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800436a:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800436e:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8004372:	4606      	mov	r6, r0
 8004374:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004376:	d02d      	beq.n	80043d4 <USBD_MSC_Setup+0x70>
 8004378:	2c20      	cmp	r4, #32
 800437a:	d14a      	bne.n	8004412 <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 800437c:	784a      	ldrb	r2, [r1, #1]
 800437e:	2afe      	cmp	r2, #254	; 0xfe
 8004380:	d005      	beq.n	800438e <USBD_MSC_Setup+0x2a>
 8004382:	2aff      	cmp	r2, #255	; 0xff
 8004384:	d019      	beq.n	80043ba <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8004386:	f7ff ff30 	bl	80041ea <USBD_CtlError>
       return USBD_FAIL; 
 800438a:	2402      	movs	r4, #2
 800438c:	e01f      	b.n	80043ce <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 800438e:	884c      	ldrh	r4, [r1, #2]
 8004390:	b984      	cbnz	r4, 80043b4 <USBD_MSC_Setup+0x50>
 8004392:	88cf      	ldrh	r7, [r1, #6]
 8004394:	2f01      	cmp	r7, #1
 8004396:	d10d      	bne.n	80043b4 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8004398:	061a      	lsls	r2, r3, #24
 800439a:	d50b      	bpl.n	80043b4 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800439c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 80043a4:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80043a6:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 80043aa:	4641      	mov	r1, r8
 80043ac:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 80043ae:	f7ff ff43 	bl	8004238 <USBD_CtlSendData>
      break;
 80043b2:	e00c      	b.n	80043ce <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 80043b4:	4629      	mov	r1, r5
 80043b6:	4630      	mov	r0, r6
 80043b8:	e7e5      	b.n	8004386 <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 80043ba:	884a      	ldrh	r2, [r1, #2]
 80043bc:	2a00      	cmp	r2, #0
 80043be:	d1f9      	bne.n	80043b4 <USBD_MSC_Setup+0x50>
 80043c0:	88cc      	ldrh	r4, [r1, #6]
 80043c2:	2c00      	cmp	r4, #0
 80043c4:	d1f6      	bne.n	80043b4 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	d4f4      	bmi.n	80043b4 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 80043ca:	f000 f88b 	bl	80044e4 <MSC_BOT_Reset>
}
 80043ce:	4620      	mov	r0, r4
 80043d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 80043d4:	784f      	ldrb	r7, [r1, #1]
 80043d6:	2f0a      	cmp	r7, #10
 80043d8:	d01d      	beq.n	8004416 <USBD_MSC_Setup+0xb2>
 80043da:	2f0b      	cmp	r7, #11
 80043dc:	d01f      	beq.n	800441e <USBD_MSC_Setup+0xba>
 80043de:	2f01      	cmp	r7, #1
 80043e0:	d1f5      	bne.n	80043ce <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80043e2:	7909      	ldrb	r1, [r1, #4]
 80043e4:	f007 fbd4 	bl	800bb90 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 80043e8:	7929      	ldrb	r1, [r5, #4]
 80043ea:	4630      	mov	r0, r6
 80043ec:	f007 fbc9 	bl	800bb82 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 80043f0:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	7c33      	ldrb	r3, [r6, #16]
 80043f8:	da17      	bge.n	800442a <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80043fa:	b9a3      	cbnz	r3, 8004426 <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 80043fc:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8004400:	2202      	movs	r2, #2
 8004402:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8004404:	4630      	mov	r0, r6
 8004406:	f007 fbb2 	bl	800bb6e <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800440a:	7929      	ldrb	r1, [r5, #4]
 800440c:	4630      	mov	r0, r6
 800440e:	f000 f931 	bl	8004674 <MSC_BOT_CplClrFeature>
  return 0;
 8004412:	2400      	movs	r4, #0
 8004414:	e7db      	b.n	80043ce <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8004416:	2201      	movs	r2, #1
 8004418:	f108 0104 	add.w	r1, r8, #4
 800441c:	e7c7      	b.n	80043ae <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 800441e:	788b      	ldrb	r3, [r1, #2]
 8004420:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8004424:	e7d3      	b.n	80043ce <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8004426:	2340      	movs	r3, #64	; 0x40
 8004428:	e7ea      	b.n	8004400 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800442a:	b923      	cbnz	r3, 8004436 <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 800442c:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8004430:	2202      	movs	r2, #2
 8004432:	4639      	mov	r1, r7
 8004434:	e7e6      	b.n	8004404 <USBD_MSC_Setup+0xa0>
 8004436:	2340      	movs	r3, #64	; 0x40
 8004438:	e7fa      	b.n	8004430 <USBD_MSC_Setup+0xcc>

0800443a <USBD_MSC_DataIn>:
{
 800443a:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 800443c:	f000 f882 	bl	8004544 <MSC_BOT_DataIn>
}
 8004440:	2000      	movs	r0, #0
 8004442:	bd08      	pop	{r3, pc}

08004444 <USBD_MSC_DataOut>:
{
 8004444:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8004446:	f000 f89b 	bl	8004580 <MSC_BOT_DataOut>
}
 800444a:	2000      	movs	r0, #0
 800444c:	bd08      	pop	{r3, pc}

0800444e <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 800444e:	b109      	cbz	r1, 8004454 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8004450:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8004454:	2000      	movs	r0, #0
 8004456:	4770      	bx	lr

08004458 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8004458:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 800445a:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800445e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8004462:	5ce3      	ldrb	r3, [r4, r3]
{
 8004464:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8004466:	b943      	cbnz	r3, 800447a <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8004468:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 800446c:	58e3      	ldr	r3, [r4, r3]
 800446e:	b123      	cbz	r3, 800447a <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8004470:	7a63      	ldrb	r3, [r4, #9]
 8004472:	b913      	cbnz	r3, 800447a <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8004474:	2101      	movs	r1, #1
 8004476:	f007 fb92 	bl	800bb9e <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800447a:	2181      	movs	r1, #129	; 0x81
 800447c:	4628      	mov	r0, r5
 800447e:	f007 fb8e 	bl	800bb9e <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8004482:	7a63      	ldrb	r3, [r4, #9]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d109      	bne.n	800449c <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8004488:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 800448c:	4628      	mov	r0, r5
 800448e:	231f      	movs	r3, #31
 8004490:	320c      	adds	r2, #12
 8004492:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8004494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8004498:	f007 bbb0 	b.w	800bbfc <USBD_LL_PrepareReceive>
 800449c:	bd70      	pop	{r4, r5, r6, pc}

0800449e <MSC_BOT_Init>:
{
 800449e:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 80044a0:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80044a4:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 80044a8:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 80044aa:	2000      	movs	r0, #0
 80044ac:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80044ae:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 80044b0:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 80044b2:	f242 035c 	movw	r3, #8284	; 0x205c
 80044b6:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 80044b8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80044c0:	2101      	movs	r1, #1
 80044c2:	4620      	mov	r0, r4
 80044c4:	f007 fb64 	bl	800bb90 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80044c8:	2181      	movs	r1, #129	; 0x81
 80044ca:	4620      	mov	r0, r4
 80044cc:	f007 fb60 	bl	800bb90 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 80044d0:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 80044d4:	4620      	mov	r0, r4
 80044d6:	231f      	movs	r3, #31
 80044d8:	320c      	adds	r2, #12
 80044da:	2101      	movs	r1, #1
}
 80044dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 80044e0:	f007 bb8c 	b.w	800bbfc <USBD_LL_PrepareReceive>

080044e4 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80044e4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 80044e8:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 80044ea:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 80044ec:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 80044ee:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 80044f0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80044f4:	231f      	movs	r3, #31
 80044f6:	320c      	adds	r2, #12
 80044f8:	f007 bb80 	b.w	800bbfc <USBD_LL_PrepareReceive>

080044fc <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 80044fc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8004500:	2200      	movs	r2, #0
 8004502:	721a      	strb	r2, [r3, #8]
 8004504:	4770      	bx	lr
	...

08004508 <MSC_BOT_SendCSW>:
{
 8004508:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800450a:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800450e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <MSC_BOT_SendCSW+0x38>)
 8004514:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 8004516:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 800451a:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 800451c:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 800451e:	2300      	movs	r3, #0
 8004520:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8004522:	2181      	movs	r1, #129	; 0x81
 8004524:	230d      	movs	r3, #13
{
 8004526:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 8004528:	f007 fb61 	bl	800bbee <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 800452c:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8004530:	4628      	mov	r0, r5
 8004532:	231f      	movs	r3, #31
 8004534:	320c      	adds	r2, #12
 8004536:	2101      	movs	r1, #1
}
 8004538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 800453c:	f007 bb5e 	b.w	800bbfc <USBD_LL_PrepareReceive>
 8004540:	53425355 	.word	0x53425355

08004544 <MSC_BOT_DataIn>:
{
 8004544:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8004546:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 800454a:	7a1a      	ldrb	r2, [r3, #8]
 800454c:	2a02      	cmp	r2, #2
{
 800454e:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8004550:	d003      	beq.n	800455a <MSC_BOT_DataIn+0x16>
 8004552:	d314      	bcc.n	800457e <MSC_BOT_DataIn+0x3a>
 8004554:	2a04      	cmp	r2, #4
 8004556:	d910      	bls.n	800457a <MSC_BOT_DataIn+0x36>
 8004558:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 800455a:	f242 0119 	movw	r1, #8217	; 0x2019
 800455e:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8004562:	321b      	adds	r2, #27
 8004564:	5c59      	ldrb	r1, [r3, r1]
 8004566:	f000 f8b3 	bl	80046d0 <SCSI_ProcessCmd>
 800456a:	2800      	cmp	r0, #0
 800456c:	da07      	bge.n	800457e <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800456e:	2101      	movs	r1, #1
 8004570:	4620      	mov	r0, r4
}
 8004572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8004576:	f7ff bfc7 	b.w	8004508 <MSC_BOT_SendCSW>
 800457a:	2100      	movs	r1, #0
 800457c:	e7f9      	b.n	8004572 <MSC_BOT_DataIn+0x2e>
 800457e:	bd10      	pop	{r4, pc}

08004580 <MSC_BOT_DataOut>:
{
 8004580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004584:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8004588:	7a26      	ldrb	r6, [r4, #8]
{
 800458a:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 800458c:	b11e      	cbz	r6, 8004596 <MSC_BOT_DataOut+0x16>
 800458e:	2e01      	cmp	r6, #1
 8004590:	d062      	beq.n	8004658 <MSC_BOT_DataOut+0xd8>
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004596:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800459a:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800459e:	58e2      	ldr	r2, [r4, r3]
 80045a0:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80045a4:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 80045a8:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80045aa:	f854 3008 	ldr.w	r3, [r4, r8]
 80045ae:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80045b0:	2101      	movs	r1, #1
 80045b2:	f007 fb2a 	bl	800bc0a <USBD_LL_GetRxDataSize>
 80045b6:	281f      	cmp	r0, #31
 80045b8:	d110      	bne.n	80045dc <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80045ba:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80045be:	58e2      	ldr	r2, [r4, r3]
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <MSC_BOT_DataOut+0xf0>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10a      	bne.n	80045dc <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 80045c6:	f242 0319 	movw	r3, #8217	; 0x2019
 80045ca:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80045cc:	2901      	cmp	r1, #1
 80045ce:	d805      	bhi.n	80045dc <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 80045d0:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 80045d4:	5ce3      	ldrb	r3, [r4, r3]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d90e      	bls.n	80045fa <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 80045dc:	f242 0119 	movw	r1, #8217	; 0x2019
 80045e0:	2320      	movs	r3, #32
 80045e2:	2205      	movs	r2, #5
 80045e4:	5c61      	ldrb	r1, [r4, r1]
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fac2 	bl	8004b70 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 80045ec:	2302      	movs	r3, #2
 80045ee:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 80045f0:	4628      	mov	r0, r5
}
 80045f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 80045f6:	f7ff bf2f 	b.w	8004458 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 80045fa:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80045fe:	321b      	adds	r2, #27
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f865 	bl	80046d0 <SCSI_ProcessCmd>
 8004606:	2800      	cmp	r0, #0
 8004608:	7a23      	ldrb	r3, [r4, #8]
 800460a:	da07      	bge.n	800461c <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800460c:	2b05      	cmp	r3, #5
 800460e:	d1ef      	bne.n	80045f0 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8004610:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8004612:	4628      	mov	r0, r5
}
 8004614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 8004618:	f7ff bf76 	b.w	8004508 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800461c:	3b01      	subs	r3, #1
 800461e:	2b02      	cmp	r3, #2
 8004620:	d924      	bls.n	800466c <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8004622:	8961      	ldrh	r1, [r4, #10]
 8004624:	2900      	cmp	r1, #0
 8004626:	d0f4      	beq.n	8004612 <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004628:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 800462c:	f852 3008 	ldr.w	r3, [r2, r8]
 8004630:	4299      	cmp	r1, r3
 8004632:	bf28      	it	cs
 8004634:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8004636:	59d3      	ldr	r3, [r2, r7]
 8004638:	1a5b      	subs	r3, r3, r1
 800463a:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800463c:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8004640:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004642:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004644:	2304      	movs	r3, #4
 8004646:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8004648:	b28b      	uxth	r3, r1
 800464a:	f104 020c 	add.w	r2, r4, #12
 800464e:	2181      	movs	r1, #129	; 0x81
}
 8004650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8004654:	f007 bacb 	b.w	800bbee <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8004658:	f242 0319 	movw	r3, #8217	; 0x2019
 800465c:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8004660:	321b      	adds	r2, #27
 8004662:	5ce1      	ldrb	r1, [r4, r3]
 8004664:	f000 f834 	bl	80046d0 <SCSI_ProcessCmd>
 8004668:	2800      	cmp	r0, #0
 800466a:	dbd1      	blt.n	8004610 <MSC_BOT_DataOut+0x90>
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	43425355 	.word	0x43425355

08004674 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004674:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004676:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 800467a:	7a63      	ldrb	r3, [r4, #9]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d105      	bne.n	800468c <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004680:	2181      	movs	r1, #129	; 0x81
 8004682:	f007 fa8c 	bl	800bb9e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8004686:	2300      	movs	r3, #0
 8004688:	7263      	strb	r3, [r4, #9]
 800468a:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800468c:	060a      	lsls	r2, r1, #24
 800468e:	d506      	bpl.n	800469e <MSC_BOT_CplClrFeature+0x2a>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d004      	beq.n	800469e <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8004694:	2101      	movs	r1, #1
  }
  
}
 8004696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800469a:	f7ff bf35 	b.w	8004508 <MSC_BOT_SendCSW>
 800469e:	bd10      	pop	{r4, pc}

080046a0 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 80046a0:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80046a2:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80046a6:	f242 055d 	movw	r5, #8285	; 0x205d
 80046aa:	f242 063c 	movw	r6, #8252	; 0x203c
 80046ae:	5d43      	ldrb	r3, [r0, r5]
 80046b0:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 80046b4:	3301      	adds	r3, #1
 80046b6:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80046b8:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80046ba:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80046bc:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 80046c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 80046c4:	bf08      	it	eq
 80046c6:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80046c8:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 80046ca:	5543      	strb	r3, [r0, r5]
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080046d0 <SCSI_ProcessCmd>:
{
 80046d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 80046d4:	7813      	ldrb	r3, [r2, #0]
 80046d6:	2b1e      	cmp	r3, #30
{
 80046d8:	4605      	mov	r5, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	4617      	mov	r7, r2
  switch (params[0])
 80046de:	d00f      	beq.n	8004700 <SCSI_ProcessCmd+0x30>
 80046e0:	d813      	bhi.n	800470a <SCSI_ProcessCmd+0x3a>
 80046e2:	2b12      	cmp	r3, #18
 80046e4:	f000 80b4 	beq.w	8004850 <SCSI_ProcessCmd+0x180>
 80046e8:	d805      	bhi.n	80046f6 <SCSI_ProcessCmd+0x26>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d060      	beq.n	80047b0 <SCSI_ProcessCmd+0xe0>
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d07b      	beq.n	80047ea <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 80046f2:	2220      	movs	r2, #32
 80046f4:	e14a      	b.n	800498c <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 80046f6:	2b1a      	cmp	r3, #26
 80046f8:	f000 80c8 	beq.w	800488c <SCSI_ProcessCmd+0x1bc>
 80046fc:	2b1b      	cmp	r3, #27
 80046fe:	d1f8      	bne.n	80046f2 <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8004700:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8004704:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8004706:	815c      	strh	r4, [r3, #10]
 8004708:	e06b      	b.n	80047e2 <SCSI_ProcessCmd+0x112>
  switch (params[0])
 800470a:	2b28      	cmp	r3, #40	; 0x28
 800470c:	f000 810b 	beq.w	8004926 <SCSI_ProcessCmd+0x256>
 8004710:	d828      	bhi.n	8004764 <SCSI_ProcessCmd+0x94>
 8004712:	2b23      	cmp	r3, #35	; 0x23
 8004714:	f000 80d8 	beq.w	80048c8 <SCSI_ProcessCmd+0x1f8>
 8004718:	2b25      	cmp	r3, #37	; 0x25
 800471a:	d1ea      	bne.n	80046f2 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800471c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8004720:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8004724:	f242 075e 	movw	r7, #8286	; 0x205e
 8004728:	f242 0860 	movw	r8, #8288	; 0x2060
 800472c:	4620      	mov	r0, r4
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	19f2      	adds	r2, r6, r7
 8004732:	eb06 0108 	add.w	r1, r6, r8
 8004736:	4798      	blx	r3
 8004738:	4604      	mov	r4, r0
 800473a:	2800      	cmp	r0, #0
 800473c:	f040 80d9 	bne.w	80048f2 <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8004740:	f856 3008 	ldr.w	r3, [r6, r8]
 8004744:	3b01      	subs	r3, #1
 8004746:	0e1a      	lsrs	r2, r3, #24
 8004748:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 800474a:	0c1a      	lsrs	r2, r3, #16
 800474c:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 800474e:	0a1a      	lsrs	r2, r3, #8
 8004750:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8004752:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004754:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004756:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004758:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800475a:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800475c:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800475e:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8004760:	2308      	movs	r3, #8
 8004762:	e0de      	b.n	8004922 <SCSI_ProcessCmd+0x252>
  switch (params[0])
 8004764:	2b2f      	cmp	r3, #47	; 0x2f
 8004766:	f000 81ac 	beq.w	8004ac2 <SCSI_ProcessCmd+0x3f2>
 800476a:	2b5a      	cmp	r3, #90	; 0x5a
 800476c:	f000 809d 	beq.w	80048aa <SCSI_ProcessCmd+0x1da>
 8004770:	2b2a      	cmp	r3, #42	; 0x2a
 8004772:	d1be      	bne.n	80046f2 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8004774:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8004778:	7a33      	ldrb	r3, [r6, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 815e 	bne.w	8004a3c <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8004780:	f242 0318 	movw	r3, #8216	; 0x2018
 8004784:	56f3      	ldrsb	r3, [r6, r3]
 8004786:	2b00      	cmp	r3, #0
 8004788:	dbb3      	blt.n	80046f2 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800478a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800478e:	4608      	mov	r0, r1
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4798      	blx	r3
 8004794:	2800      	cmp	r0, #0
 8004796:	f040 80ac 	bne.w	80048f2 <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 800479a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800479e:	4620      	mov	r0, r4
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4798      	blx	r3
 80047a4:	4604      	mov	r4, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	f000 810d 	beq.w	80049c6 <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 80047ac:	2227      	movs	r2, #39	; 0x27
 80047ae:	e0a1      	b.n	80048f4 <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80047b0:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 80047b4:	f242 0314 	movw	r3, #8212	; 0x2014
 80047b8:	58f3      	ldr	r3, [r6, r3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d199      	bne.n	80046f2 <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80047be:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80047c2:	4608      	mov	r0, r1
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	4798      	blx	r3
 80047c8:	4604      	mov	r4, r0
 80047ca:	b148      	cbz	r0, 80047e0 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 80047cc:	223a      	movs	r2, #58	; 0x3a
 80047ce:	2102      	movs	r1, #2
 80047d0:	4628      	mov	r0, r5
 80047d2:	f7ff ff65 	bl	80046a0 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80047d6:	2305      	movs	r3, #5
 80047d8:	7233      	strb	r3, [r6, #8]
    return -1;
 80047da:	f04f 34ff 	mov.w	r4, #4294967295
 80047de:	e000      	b.n	80047e2 <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 80047e0:	8170      	strh	r0, [r6, #10]
}
 80047e2:	4620      	mov	r0, r4
 80047e4:	b003      	add	sp, #12
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 80047ee:	2400      	movs	r4, #0
 80047f0:	f103 020c 	add.w	r2, r3, #12
 80047f4:	f103 011e 	add.w	r1, r3, #30
 80047f8:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80047fc:	428a      	cmp	r2, r1
 80047fe:	d1fb      	bne.n	80047f8 <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 8004800:	2270      	movs	r2, #112	; 0x70
 8004802:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8004804:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8004808:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800480a:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 800480e:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8004810:	5c1a      	ldrb	r2, [r3, r0]
 8004812:	5c59      	ldrb	r1, [r3, r1]
 8004814:	4291      	cmp	r1, r2
 8004816:	d013      	beq.n	8004840 <SCSI_ProcessCmd+0x170>
 8004818:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 800481c:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 8004820:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8004822:	5d4d      	ldrb	r5, [r1, r5]
 8004824:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8004826:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 800482a:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800482c:	5d4d      	ldrb	r5, [r1, r5]
 800482e:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8004830:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8004834:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8004836:	7809      	ldrb	r1, [r1, #0]
 8004838:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 800483a:	bf14      	ite	ne
 800483c:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 800483e:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8004840:	2212      	movs	r2, #18
 8004842:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8004844:	793a      	ldrb	r2, [r7, #4]
 8004846:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8004848:	bf98      	it	ls
 800484a:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 800484c:	2400      	movs	r4, #0
 800484e:	e7c8      	b.n	80047e2 <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 8004850:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004852:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 8004856:	07db      	lsls	r3, r3, #31
 8004858:	d415      	bmi.n	8004886 <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800485a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8004864:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004868:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 800486a:	7923      	ldrb	r3, [r4, #4]
 800486c:	3305      	adds	r3, #5
 800486e:	428b      	cmp	r3, r1
 8004870:	bf28      	it	cs
 8004872:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 8004874:	8153      	strh	r3, [r2, #10]
  while (len) 
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0e8      	beq.n	800484c <SCSI_ProcessCmd+0x17c>
    len--;
 800487a:	3b01      	subs	r3, #1
 800487c:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 800487e:	18d1      	adds	r1, r2, r3
 8004880:	5ce0      	ldrb	r0, [r4, r3]
 8004882:	7308      	strb	r0, [r1, #12]
 8004884:	e7f7      	b.n	8004876 <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 8004886:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8004888:	4cb6      	ldr	r4, [pc, #728]	; (8004b64 <SCSI_ProcessCmd+0x494>)
 800488a:	e7f3      	b.n	8004874 <SCSI_ProcessCmd+0x1a4>
 800488c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8004890:	49b5      	ldr	r1, [pc, #724]	; (8004b68 <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 8004892:	2208      	movs	r2, #8
 8004894:	815a      	strh	r2, [r3, #10]
 8004896:	f103 0213 	add.w	r2, r3, #19
 800489a:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800489c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80048a0:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d1f9      	bne.n	800489c <SCSI_ProcessCmd+0x1cc>
 80048a8:	e7d0      	b.n	800484c <SCSI_ProcessCmd+0x17c>
 80048aa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80048ae:	49af      	ldr	r1, [pc, #700]	; (8004b6c <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 80048b0:	2208      	movs	r2, #8
 80048b2:	815a      	strh	r2, [r3, #10]
 80048b4:	f103 0213 	add.w	r2, r3, #19
 80048b8:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80048ba:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80048be:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d1f9      	bne.n	80048ba <SCSI_ProcessCmd+0x1ea>
 80048c6:	e7c1      	b.n	800484c <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80048c8:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 80048cc:	2100      	movs	r1, #0
 80048ce:	f106 030c 	add.w	r3, r6, #12
 80048d2:	f106 0218 	add.w	r2, r6, #24
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 80048da:	429a      	cmp	r2, r3
 80048dc:	d1fb      	bne.n	80048d6 <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80048de:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80048e2:	4620      	mov	r0, r4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f10d 0202 	add.w	r2, sp, #2
 80048ea:	a901      	add	r1, sp, #4
 80048ec:	4798      	blx	r3
 80048ee:	4604      	mov	r4, r0
 80048f0:	b118      	cbz	r0, 80048fa <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 80048f2:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 80048f4:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 80048f6:	4628      	mov	r0, r5
 80048f8:	e0eb      	b.n	8004ad2 <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 80048fa:	2308      	movs	r3, #8
 80048fc:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80048fe:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8004900:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8004902:	3b01      	subs	r3, #1
 8004904:	0e1a      	lsrs	r2, r3, #24
 8004906:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8004908:	0c1a      	lsrs	r2, r3, #16
 800490a:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 800490c:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800490e:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8004910:	2302      	movs	r3, #2
 8004912:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8004914:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8004918:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800491a:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800491c:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800491e:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 8004920:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 8004922:	8173      	strh	r3, [r6, #10]
 8004924:	e75d      	b.n	80047e2 <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8004926:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800492a:	7a33      	ldrb	r3, [r6, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 80f1 	bne.w	8004b14 <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8004932:	f242 0318 	movw	r3, #8216	; 0x2018
 8004936:	56f3      	ldrsb	r3, [r6, r3]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f6bf aeda 	bge.w	80046f2 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800493e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8004942:	4608      	mov	r0, r1
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4798      	blx	r3
 8004948:	2800      	cmp	r0, #0
 800494a:	d1d2      	bne.n	80048f2 <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 800494c:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800494e:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 8004950:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8004952:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 8004956:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 8004958:	4313      	orrs	r3, r2
 800495a:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800495c:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 8004960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8004964:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8004968:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 800496a:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800496c:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8004970:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8004974:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8004978:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800497c:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8004980:	185f      	adds	r7, r3, r1
 8004982:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8004984:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8004986:	f240 80b5 	bls.w	8004af4 <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 800498a:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 800498c:	2105      	movs	r1, #5
 800498e:	e7b2      	b.n	80048f6 <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 8004990:	b2bb      	uxth	r3, r7
 8004992:	4652      	mov	r2, sl
 8004994:	2181      	movs	r1, #129	; 0x81
 8004996:	4628      	mov	r0, r5
 8004998:	f007 f929 	bl	800bbee <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 800499c:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 80049a0:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 80049a4:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 80049a8:	443b      	add	r3, r7
 80049aa:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 80049ae:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 80049b0:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 80049b2:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 80049b4:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 80049b8:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	f47f af46 	bne.w	800484c <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80049c0:	2303      	movs	r3, #3
 80049c2:	7233      	strb	r3, [r6, #8]
 80049c4:	e70d      	b.n	80047e2 <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 80049c6:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80049c8:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 80049ca:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80049cc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 80049d0:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 80049d2:	431a      	orrs	r2, r3
 80049d4:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80049d6:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80049da:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80049de:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 80049e2:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80049e4:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80049e6:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80049ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80049ee:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80049f2:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80049f6:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80049fa:	1857      	adds	r7, r2, r1
 80049fc:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80049fe:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8004a00:	d8c3      	bhi.n	800498a <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8004a02:	f242 035e 	movw	r3, #8286	; 0x205e
 8004a06:	5af3      	ldrh	r3, [r6, r3]
 8004a08:	435a      	muls	r2, r3
 8004a0a:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8004a0e:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8004a12:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8004a14:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8004a16:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	f47f ae6a 	bne.w	80046f2 <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8004a22:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8004a26:	bf28      	it	cs
 8004a28:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8004a2c:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f106 020c 	add.w	r2, r6, #12
 8004a34:	4628      	mov	r0, r5
 8004a36:	f007 f8e1 	bl	800bbfc <USBD_LL_PrepareReceive>
 8004a3a:	e6d2      	b.n	80047e2 <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004a3c:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8004a40:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004a44:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8004a48:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8004a4c:	f242 035e 	movw	r3, #8286	; 0x205e
 8004a50:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004a54:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 8004a58:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004a5c:	bf28      	it	cs
 8004a5e:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8004a62:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8004a64:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 8004a68:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	fbb1 f2f2 	udiv	r2, r1, r2
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4641      	mov	r1, r8
 8004a76:	47d8      	blx	fp
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	da01      	bge.n	8004a80 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	e06e      	b.n	8004b5e <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 8004a80:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8004a84:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 8004a88:	443b      	add	r3, r7
 8004a8a:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8004a8e:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 8004a90:	f856 3009 	ldr.w	r3, [r6, r9]
 8004a94:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 8004a96:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8004a98:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8004a9c:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 8004a9e:	b923      	cbnz	r3, 8004aaa <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7ff fd30 	bl	8004508 <MSC_BOT_SendCSW>
 8004aa8:	e6d0      	b.n	800484c <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aae:	bf28      	it	cs
 8004ab0:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4628      	mov	r0, r5
 8004abc:	f007 f89e 	bl	800bbfc <USBD_LL_PrepareReceive>
 8004ac0:	e6c4      	b.n	800484c <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 8004ac2:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8004ac4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8004ac8:	f014 0402 	ands.w	r4, r4, #2
 8004acc:	d004      	beq.n	8004ad8 <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 8004ace:	2224      	movs	r2, #36	; 0x24
 8004ad0:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 8004ad2:	f7ff fde5 	bl	80046a0 <SCSI_SenseCode.constprop.8>
 8004ad6:	e680      	b.n	80047da <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8004ad8:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 8004adc:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8004ae0:	5a9a      	ldrh	r2, [r3, r2]
 8004ae2:	5859      	ldr	r1, [r3, r1]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f242 0160 	movw	r1, #8288	; 0x2060
 8004aea:	5859      	ldr	r1, [r3, r1]
 8004aec:	428a      	cmp	r2, r1
 8004aee:	f67f ae0a 	bls.w	8004706 <SCSI_ProcessCmd+0x36>
 8004af2:	e74a      	b.n	800498a <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8004af4:	2202      	movs	r2, #2
 8004af6:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8004af8:	f242 025e 	movw	r2, #8286	; 0x205e
 8004afc:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8004afe:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8004b00:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8004b02:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8004b06:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8004b0a:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8004b0c:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8004b0e:	4291      	cmp	r1, r2
 8004b10:	f47f adef 	bne.w	80046f2 <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8004b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b18:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004b1a:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8004b1e:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8004b22:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004b26:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8004b2a:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8004b2e:	429f      	cmp	r7, r3
 8004b30:	bf28      	it	cs
 8004b32:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8004b34:	f242 0964 	movw	r9, #8292	; 0x2064
 8004b38:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 8004b3c:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8004b40:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8004b42:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 8004b46:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	fbb1 f2f2 	udiv	r2, r1, r2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4651      	mov	r1, sl
 8004b54:	47d8      	blx	fp
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f6bf af1a 	bge.w	8004990 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 8004b5c:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 8004b5e:	2104      	movs	r1, #4
 8004b60:	e6c9      	b.n	80048f6 <SCSI_ProcessCmd+0x226>
 8004b62:	bf00      	nop
 8004b64:	0800ed9f 	.word	0x0800ed9f
 8004b68:	0800ed9f 	.word	0x0800ed9f
 8004b6c:	0800ed97 	.word	0x0800ed97

08004b70 <SCSI_SenseCode>:
{
 8004b70:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004b72:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8004b76:	f242 055d 	movw	r5, #8285	; 0x205d
 8004b7a:	f242 063c 	movw	r6, #8252	; 0x203c
 8004b7e:	5d41      	ldrb	r1, [r0, r5]
 8004b80:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 8004b84:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8004b86:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 8004b88:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8004b8a:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8004b8e:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8004b90:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8004b92:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8004b94:	bf0a      	itet	eq
 8004b96:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 8004b98:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 8004b9a:	5543      	strbeq	r3, [r0, r5]
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ba0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_InitTick+0x24>)
{
 8004ba4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bac:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bb0:	f000 f892 	bl	8004cd8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	f000 f84c 	bl	8004c58 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	bd10      	pop	{r4, pc}
 8004bc4:	200000ec 	.word	0x200000ec

08004bc8 <HAL_Init>:
{
 8004bc8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bca:	2003      	movs	r0, #3
 8004bcc:	f000 f832 	bl	8004c34 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f7ff ffe5 	bl	8004ba0 <HAL_InitTick>
  HAL_MspInit();
 8004bd6:	f006 fd49 	bl	800b66c <HAL_MspInit>
}
 8004bda:	2000      	movs	r0, #0
 8004bdc:	bd08      	pop	{r3, pc}
	...

08004be0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004be0:	4a02      	ldr	r2, [pc, #8]	; (8004bec <HAL_IncTick+0xc>)
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	3301      	adds	r3, #1
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	2000897c 	.word	0x2000897c

08004bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bf0:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <HAL_GetTick+0x8>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	2000897c 	.word	0x2000897c

08004bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8004c00:	f7ff fff6 	bl	8004bf0 <HAL_GetTick>
 8004c04:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004c06:	f7ff fff3 	bl	8004bf0 <HAL_GetTick>
 8004c0a:	1b40      	subs	r0, r0, r5
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d3fa      	bcc.n	8004c06 <HAL_Delay+0xa>
  {
  }
}
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
	...

08004c14 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004c14:	4a02      	ldr	r2, [pc, #8]	; (8004c20 <HAL_SuspendTick+0xc>)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	f023 0302 	bic.w	r3, r3, #2
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4770      	bx	lr
 8004c20:	e000e010 	.word	0xe000e010

08004c24 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004c24:	4a02      	ldr	r2, [pc, #8]	; (8004c30 <HAL_ResumeTick+0xc>)
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4770      	bx	lr
 8004c30:	e000e010 	.word	0xe000e010

08004c34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c34:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004c44:	0200      	lsls	r0, r0, #8
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004c4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004c50:	60d3      	str	r3, [r2, #12]
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5a:	b530      	push	{r4, r5, lr}
 8004c5c:	68dc      	ldr	r4, [r3, #12]
 8004c5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c62:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c66:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	bf28      	it	cs
 8004c6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	f04f 0501 	mov.w	r5, #1
 8004c74:	fa05 f303 	lsl.w	r3, r5, r3
 8004c78:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7c:	bf8c      	ite	hi
 8004c7e:	3c03      	subhi	r4, #3
 8004c80:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c82:	4019      	ands	r1, r3
 8004c84:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c86:	fa05 f404 	lsl.w	r4, r5, r4
 8004c8a:	3c01      	subs	r4, #1
 8004c8c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8004c8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	ea42 0201 	orr.w	r2, r2, r1
 8004c94:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c98:	bfaf      	iteee	ge
 8004c9a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9e:	f000 000f 	andlt.w	r0, r0, #15
 8004ca2:	4b06      	ldrlt	r3, [pc, #24]	; (8004cbc <HAL_NVIC_SetPriority+0x64>)
 8004ca4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca6:	bfa5      	ittet	ge
 8004ca8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8004cac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004cb4:	bd30      	pop	{r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000ed00 	.word	0xe000ed00
 8004cbc:	e000ed14 	.word	0xe000ed14

08004cc0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004cc0:	0942      	lsrs	r2, r0, #5
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f000 001f 	and.w	r0, r0, #31
 8004cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8004ccc:	4b01      	ldr	r3, [pc, #4]	; (8004cd4 <HAL_NVIC_EnableIRQ+0x14>)
 8004cce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100

08004cd8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd8:	3801      	subs	r0, #1
 8004cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004cde:	d20a      	bcs.n	8004cf6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce2:	4a07      	ldr	r2, [pc, #28]	; (8004d00 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce6:	21f0      	movs	r1, #240	; 0xf0
 8004ce8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004cf6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	e000e010 	.word	0xe000e010
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004d04:	4770      	bx	lr

08004d06 <HAL_SYSTICK_IRQHandler>:
{
 8004d06:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004d08:	f7ff fffc 	bl	8004d04 <HAL_SYSTICK_Callback>
 8004d0c:	bd08      	pop	{r3, pc}
	...

08004d10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d10:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d05b      	beq.n	8004dce <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d16:	6801      	ldr	r1, [r0, #0]
 8004d18:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_DMA_Init+0xc4>)
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	f04f 0414 	mov.w	r4, #20
 8004d20:	d841      	bhi.n	8004da6 <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d22:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <HAL_DMA_Init+0xc8>)
 8004d24:	440a      	add	r2, r1
 8004d26:	fbb2 f2f4 	udiv	r2, r2, r4
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d2e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8004d32:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d34:	2302      	movs	r3, #2
 8004d36:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d3a:	6884      	ldr	r4, [r0, #8]
 8004d3c:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8004d40:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8004d42:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d44:	432b      	orrs	r3, r5
 8004d46:	6945      	ldr	r5, [r0, #20]
 8004d48:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4a:	6985      	ldr	r5, [r0, #24]
 8004d4c:	432b      	orrs	r3, r5
 8004d4e:	69c5      	ldr	r5, [r0, #28]
 8004d50:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d52:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d54:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8004d58:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d5c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8004d5e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004d60:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8004d64:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004d66:	d011      	beq.n	8004d8c <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <HAL_DMA_Init+0xcc>)
 8004d6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d6c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	f04f 030f 	mov.w	r3, #15
 8004d74:	d11f      	bne.n	8004db6 <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8004d76:	491a      	ldr	r1, [pc, #104]	; (8004de0 <HAL_DMA_Init+0xd0>)
 8004d78:	680a      	ldr	r2, [r1, #0]
 8004d7a:	40a3      	lsls	r3, r4
 8004d7c:	ea22 0303 	bic.w	r3, r2, r3
 8004d80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004d82:	6842      	ldr	r2, [r0, #4]
 8004d84:	680b      	ldr	r3, [r1, #0]
 8004d86:	40a2      	lsls	r2, r4
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004d8c:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d8e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d90:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8004d92:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004d94:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004d96:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004d98:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 8004d9a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_DMA_Init+0xd4>)
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb3 f3f4 	udiv	r3, r3, r4
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <HAL_DMA_Init+0xd8>)
 8004db4:	e7bd      	b.n	8004d32 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8004db6:	490d      	ldr	r1, [pc, #52]	; (8004dec <HAL_DMA_Init+0xdc>)
 8004db8:	680a      	ldr	r2, [r1, #0]
 8004dba:	40a3      	lsls	r3, r4
 8004dbc:	ea22 0303 	bic.w	r3, r2, r3
 8004dc0:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004dc2:	6843      	ldr	r3, [r0, #4]
 8004dc4:	680a      	ldr	r2, [r1, #0]
 8004dc6:	40a3      	lsls	r3, r4
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]
 8004dcc:	e7de      	b.n	8004d8c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004dce:	2001      	movs	r0, #1
}
 8004dd0:	bd30      	pop	{r4, r5, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40020407 	.word	0x40020407
 8004dd8:	bffdfff8 	.word	0xbffdfff8
 8004ddc:	40020000 	.word	0x40020000
 8004de0:	400200a8 	.word	0x400200a8
 8004de4:	bffdfbf8 	.word	0xbffdfbf8
 8004de8:	40020400 	.word	0x40020400
 8004dec:	400204a8 	.word	0x400204a8

08004df0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004df0:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d034      	beq.n	8004e60 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004df6:	6801      	ldr	r1, [r0, #0]
 8004df8:	680b      	ldr	r3, [r1, #0]
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e04:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <HAL_DMA_DeInit+0x74>)
 8004e06:	4299      	cmp	r1, r3
 8004e08:	f04f 0414 	mov.w	r4, #20
 8004e0c:	d820      	bhi.n	8004e50 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_DMA_DeInit+0x78>)
 8004e10:	440a      	add	r2, r1
 8004e12:	fbb2 f2f4 	udiv	r2, r2, r4
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e1a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8004e1e:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004e22:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e24:	2301      	movs	r3, #1
 8004e26:	408b      	lsls	r3, r1
 8004e28:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_DMA_DeInit+0x7c>)
 8004e2c:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8004e2e:	bf0c      	ite	eq
 8004e30:	4c0f      	ldreq	r4, [pc, #60]	; (8004e70 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8004e32:	4c10      	ldrne	r4, [pc, #64]	; (8004e74 <HAL_DMA_DeInit+0x84>)
 8004e34:	230f      	movs	r3, #15
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	408b      	lsls	r3, r1
 8004e3a:	ea22 0303 	bic.w	r3, r2, r3
 8004e3e:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e44:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8004e48:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_DMA_DeInit+0x88>)
 8004e52:	440b      	add	r3, r1
 8004e54:	fbb3 f3f4 	udiv	r3, r3, r4
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <HAL_DMA_DeInit+0x8c>)
 8004e5e:	e7de      	b.n	8004e1e <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
}
 8004e62:	bd10      	pop	{r4, pc}
 8004e64:	40020407 	.word	0x40020407
 8004e68:	bffdfff8 	.word	0xbffdfff8
 8004e6c:	40020000 	.word	0x40020000
 8004e70:	400200a8 	.word	0x400200a8
 8004e74:	400204a8 	.word	0x400204a8
 8004e78:	bffdfbf8 	.word	0xbffdfbf8
 8004e7c:	40020400 	.word	0x40020400

08004e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e80:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e82:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004e86:	2c01      	cmp	r4, #1
 8004e88:	d036      	beq.n	8004ef8 <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e8a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8004e8e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e90:	b2ed      	uxtb	r5, r5
 8004e92:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8004e94:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8004e98:	f04f 0600 	mov.w	r6, #0
 8004e9c:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ea0:	d128      	bne.n	8004ef4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ea2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ea6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004eaa:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004eac:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004eae:	f026 0601 	bic.w	r6, r6, #1
 8004eb2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004eb4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004eb6:	40bd      	lsls	r5, r7
 8004eb8:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004eba:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ebc:	6883      	ldr	r3, [r0, #8]
 8004ebe:	6805      	ldr	r5, [r0, #0]
 8004ec0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004ec2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ec4:	bf0b      	itete	eq
 8004ec6:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004ec8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004eca:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004ecc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004ece:	b14b      	cbz	r3, 8004ee4 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ed6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f043 030a 	orr.w	r3, r3, #10
 8004ef2:	e7f0      	b.n	8004ed6 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8004ef4:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8004ef8:	2002      	movs	r0, #2
}
 8004efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004efc <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004efc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d003      	beq.n	8004f0c <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f04:	2304      	movs	r3, #4
 8004f06:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004f08:	2001      	movs	r0, #1
 8004f0a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f0c:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f0e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f022 020e 	bic.w	r2, r2, #14
 8004f16:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f22:	2201      	movs	r2, #1
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 8004f2a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004f2c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 8004f30:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	4618      	mov	r0, r3
}
 8004f36:	4770      	bx	lr

08004f38 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f38:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8004f3c:	6803      	ldr	r3, [r0, #0]
{
 8004f3e:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f40:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004f42:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f44:	2404      	movs	r4, #4
 8004f46:	4094      	lsls	r4, r2
 8004f48:	4226      	tst	r6, r4
 8004f4a:	d00e      	beq.n	8004f6a <HAL_DMA_IRQHandler+0x32>
 8004f4c:	f015 0f04 	tst.w	r5, #4
 8004f50:	d00b      	beq.n	8004f6a <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f56:	bf5e      	ittt	pl
 8004f58:	681a      	ldrpl	r2, [r3, #0]
 8004f5a:	f022 0204 	bicpl.w	r2, r2, #4
 8004f5e:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004f60:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8004f62:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8004f64:	b373      	cbz	r3, 8004fc4 <HAL_DMA_IRQHandler+0x8c>
}
 8004f66:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004f68:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004f6a:	2402      	movs	r4, #2
 8004f6c:	4094      	lsls	r4, r2
 8004f6e:	4226      	tst	r6, r4
 8004f70:	d012      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x60>
 8004f72:	f015 0f02 	tst.w	r5, #2
 8004f76:	d00f      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	0695      	lsls	r5, r2, #26
 8004f7c:	d406      	bmi.n	8004f8c <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	f022 020a 	bic.w	r2, r2, #10
 8004f84:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004f8c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8004f8e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004f90:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8004f94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f96:	e7e5      	b.n	8004f64 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f98:	2408      	movs	r4, #8
 8004f9a:	4094      	lsls	r4, r2
 8004f9c:	4234      	tst	r4, r6
 8004f9e:	d011      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x8c>
 8004fa0:	072c      	lsls	r4, r5, #28
 8004fa2:	d50f      	bpl.n	8004fc4 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa4:	681c      	ldr	r4, [r3, #0]
 8004fa6:	f024 040e 	bic.w	r4, r4, #14
 8004faa:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fac:	2301      	movs	r3, #1
 8004fae:	fa03 f202 	lsl.w	r2, r3, r2
 8004fb2:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004fc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004fc2:	e7cf      	b.n	8004f64 <HAL_DMA_IRQHandler+0x2c>
}
 8004fc4:	bc70      	pop	{r4, r5, r6}
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004fce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800517c <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fd4:	4c67      	ldr	r4, [pc, #412]	; (8005174 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004fd6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8004fd8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004fda:	9a01      	ldr	r2, [sp, #4]
 8004fdc:	40da      	lsrs	r2, r3
 8004fde:	d102      	bne.n	8004fe6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8004fe0:	b005      	add	sp, #20
 8004fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004fe6:	2601      	movs	r6, #1
    if(iocurrent)
 8004fe8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004fea:	409e      	lsls	r6, r3
    if(iocurrent)
 8004fec:	ea12 0e06 	ands.w	lr, r2, r6
 8004ff0:	f000 80b1 	beq.w	8005156 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff4:	684a      	ldr	r2, [r1, #4]
 8004ff6:	f022 0710 	bic.w	r7, r2, #16
 8004ffa:	2f02      	cmp	r7, #2
 8004ffc:	d116      	bne.n	800502c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8004ffe:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8005002:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005006:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800500a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800500e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005012:	f04f 0c0f 	mov.w	ip, #15
 8005016:	fa0c fc0a 	lsl.w	ip, ip, sl
 800501a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800501e:	690d      	ldr	r5, [r1, #16]
 8005020:	fa05 f50a 	lsl.w	r5, r5, sl
 8005024:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8005028:	f8c9 5020 	str.w	r5, [r9, #32]
 800502c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005030:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8005032:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005036:	fa05 f50c 	lsl.w	r5, r5, ip
 800503a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800503c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005040:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005044:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005048:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800504a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800504e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8005050:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005054:	d811      	bhi.n	800507a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8005056:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8005058:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800505c:	68cf      	ldr	r7, [r1, #12]
 800505e:	fa07 f70c 	lsl.w	r7, r7, ip
 8005062:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8005066:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005068:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800506a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800506e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8005072:	409f      	lsls	r7, r3
 8005074:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8005078:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800507a:	f1ba 0f03 	cmp.w	sl, #3
 800507e:	d107      	bne.n	8005090 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8005080:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005082:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005086:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800508a:	409f      	lsls	r7, r3
 800508c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800508e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8005090:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8005092:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005094:	688e      	ldr	r6, [r1, #8]
 8005096:	fa06 f60c 	lsl.w	r6, r6, ip
 800509a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800509c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800509e:	00d5      	lsls	r5, r2, #3
 80050a0:	d559      	bpl.n	8005156 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80050a6:	f045 0501 	orr.w	r5, r5, #1
 80050aa:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80050ae:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80050b2:	f023 0603 	bic.w	r6, r3, #3
 80050b6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80050ba:	f005 0501 	and.w	r5, r5, #1
 80050be:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80050c2:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050c4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80050ca:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80050d0:	270f      	movs	r7, #15
 80050d2:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80050d6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050da:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80050de:	d03c      	beq.n	800515a <HAL_GPIO_Init+0x192>
 80050e0:	4d25      	ldr	r5, [pc, #148]	; (8005178 <HAL_GPIO_Init+0x1b0>)
 80050e2:	42a8      	cmp	r0, r5
 80050e4:	d03b      	beq.n	800515e <HAL_GPIO_Init+0x196>
 80050e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050ea:	42a8      	cmp	r0, r5
 80050ec:	d039      	beq.n	8005162 <HAL_GPIO_Init+0x19a>
 80050ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050f2:	42a8      	cmp	r0, r5
 80050f4:	d037      	beq.n	8005166 <HAL_GPIO_Init+0x19e>
 80050f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050fa:	42a8      	cmp	r0, r5
 80050fc:	d035      	beq.n	800516a <HAL_GPIO_Init+0x1a2>
 80050fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005102:	42a8      	cmp	r0, r5
 8005104:	d033      	beq.n	800516e <HAL_GPIO_Init+0x1a6>
 8005106:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800510a:	42a8      	cmp	r0, r5
 800510c:	bf14      	ite	ne
 800510e:	2507      	movne	r5, #7
 8005110:	2506      	moveq	r5, #6
 8005112:	fa05 f50c 	lsl.w	r5, r5, ip
 8005116:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8005118:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800511a:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800511c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005120:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8005122:	bf54      	ite	pl
 8005124:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005126:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800512a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800512c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800512e:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8005130:	bf54      	ite	pl
 8005132:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005134:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8005138:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800513a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800513c:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 800513e:	bf54      	ite	pl
 8005140:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005142:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8005146:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8005148:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800514a:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 800514c:	bf54      	ite	pl
 800514e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005150:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8005154:	60e5      	str	r5, [r4, #12]
    position++;
 8005156:	3301      	adds	r3, #1
 8005158:	e73f      	b.n	8004fda <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800515a:	2500      	movs	r5, #0
 800515c:	e7d9      	b.n	8005112 <HAL_GPIO_Init+0x14a>
 800515e:	2501      	movs	r5, #1
 8005160:	e7d7      	b.n	8005112 <HAL_GPIO_Init+0x14a>
 8005162:	2502      	movs	r5, #2
 8005164:	e7d5      	b.n	8005112 <HAL_GPIO_Init+0x14a>
 8005166:	2503      	movs	r5, #3
 8005168:	e7d3      	b.n	8005112 <HAL_GPIO_Init+0x14a>
 800516a:	2504      	movs	r5, #4
 800516c:	e7d1      	b.n	8005112 <HAL_GPIO_Init+0x14a>
 800516e:	2505      	movs	r5, #5
 8005170:	e7cf      	b.n	8005112 <HAL_GPIO_Init+0x14a>
 8005172:	bf00      	nop
 8005174:	40010400 	.word	0x40010400
 8005178:	48000400 	.word	0x48000400
 800517c:	40021000 	.word	0x40021000

08005180 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005184:	4604      	mov	r4, r0
{
 8005186:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8005188:	2800      	cmp	r0, #0
 800518a:	d07c      	beq.n	8005286 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 800518c:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8005190:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005194:	b91b      	cbnz	r3, 800519e <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005196:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800519a:	f006 fc1b 	bl	800b9d4 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800519e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80051a0:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80051a2:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80051a6:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 80051aa:	f002 fda6 	bl	8007cfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80051ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051b0:	466e      	mov	r6, sp
 80051b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80051b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80051b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80051bc:	e886 0003 	stmia.w	r6, {r0, r1}
 80051c0:	f104 0804 	add.w	r8, r4, #4
 80051c4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	f002 fd7c 	bl	8007cc6 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80051ce:	2100      	movs	r1, #0
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	f002 fd98 	bl	8007d06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80051d6:	2200      	movs	r2, #0
 80051d8:	6860      	ldr	r0, [r4, #4]
 80051da:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80051de:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80051e2:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80051e4:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80051e6:	4282      	cmp	r2, r0
 80051e8:	f103 031c 	add.w	r3, r3, #28
 80051ec:	d13b      	bne.n	8005266 <HAL_PCD_Init+0xe6>
 80051ee:	2200      	movs	r2, #0
 80051f0:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80051f2:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80051f4:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 80051f8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 80051fc:	3201      	adds	r2, #1
 80051fe:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8005200:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8005204:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8005208:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 800520c:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8005210:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8005214:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8005218:	d1ec      	bne.n	80051f4 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800521a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800521c:	466e      	mov	r6, sp
 800521e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005222:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005224:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005228:	e886 0003 	stmia.w	r6, {r0, r1}
 800522c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	f002 fd7f 	bl	8007d34 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8005236:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8005238:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 800523c:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8005240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8005246:	4620      	mov	r0, r4
 8005248:	f000 fcb3 	bl	8005bb2 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 800524c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800524e:	2b01      	cmp	r3, #1
 8005250:	d102      	bne.n	8005258 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8005252:	4620      	mov	r0, r4
 8005254:	f000 fcc0 	bl	8005bd8 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	f003 f84b 	bl	80082f4 <USB_DevDisconnect>
  return HAL_OK;
 800525e:	2000      	movs	r0, #0
}
 8005260:	b00a      	add	sp, #40	; 0x28
 8005262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8005266:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800526a:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 800526e:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8005272:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8005276:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 800527a:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 800527e:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005282:	3201      	adds	r2, #1
 8005284:	e7af      	b.n	80051e6 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8005286:	2001      	movs	r0, #1
 8005288:	e7ea      	b.n	8005260 <HAL_PCD_Init+0xe0>

0800528a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 800528a:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800528e:	2b01      	cmp	r3, #1
{ 
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005294:	d00c      	beq.n	80052b0 <HAL_PCD_Start+0x26>
 8005296:	2301      	movs	r3, #1
 8005298:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f003 f81d 	bl	80082dc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	f002 fd23 	bl	8007cee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80052a8:	2000      	movs	r0, #0
 80052aa:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80052ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80052b0:	2002      	movs	r0, #2
}
 80052b2:	bd10      	pop	{r4, pc}

080052b4 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80052b4:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80052b8:	2b01      	cmp	r3, #1
{ 
 80052ba:	b510      	push	{r4, lr}
 80052bc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80052be:	d00f      	beq.n	80052e0 <HAL_PCD_Stop+0x2c>
 80052c0:	2301      	movs	r3, #1
 80052c2:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 80052c6:	6800      	ldr	r0, [r0, #0]
 80052c8:	f002 fd17 	bl	8007cfa <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80052cc:	6820      	ldr	r0, [r4, #0]
 80052ce:	f002 ffd4 	bl	800827a <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	f003 f80e 	bl	80082f4 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80052d8:	2000      	movs	r0, #0
 80052da:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 80052de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80052e0:	2002      	movs	r0, #2
  return HAL_OK;
}
 80052e2:	bd10      	pop	{r4, pc}

080052e4 <HAL_PCD_DeInit>:
{
 80052e4:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 80052e6:	4604      	mov	r4, r0
 80052e8:	b158      	cbz	r0, 8005302 <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80052ea:	2303      	movs	r3, #3
 80052ec:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 80052f0:	f7ff ffe0 	bl	80052b4 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 80052f4:	4620      	mov	r0, r4
 80052f6:	f006 fbab 	bl	800ba50 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 80052fa:	2000      	movs	r0, #0
 80052fc:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 8005300:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005302:	2001      	movs	r0, #1
}
 8005304:	bd10      	pop	{r4, pc}
	...

08005308 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800530c:	6807      	ldr	r7, [r0, #0]
{
 800530e:	b087      	sub	sp, #28
 8005310:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005312:	4638      	mov	r0, r7
 8005314:	f003 f828 	bl	8008368 <USB_GetMode>
 8005318:	9002      	str	r0, [sp, #8]
 800531a:	2800      	cmp	r0, #0
 800531c:	f040 8155 	bne.w	80055ca <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	f002 fff3 	bl	800830c <USB_ReadInterrupts>
 8005326:	2800      	cmp	r0, #0
 8005328:	f000 814f 	beq.w	80055ca <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	f002 ffed 	bl	800830c <USB_ReadInterrupts>
 8005332:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005334:	bf48      	it	mi
 8005336:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005338:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800533a:	bf42      	ittt	mi
 800533c:	6953      	ldrmi	r3, [r2, #20]
 800533e:	f003 0302 	andmi.w	r3, r3, #2
 8005342:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005344:	f002 ffe2 	bl	800830c <USB_ReadInterrupts>
 8005348:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 800534c:	d00c      	beq.n	8005368 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	f002 ffe0 	bl	8008314 <USB_ReadDevAllOutEpInterrupt>
 8005354:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8005358:	4680      	mov	r8, r0
 800535a:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 800535c:	464e      	mov	r6, r9
      epnum = 0;
 800535e:	2500      	movs	r5, #0
      while ( ep_intr )
 8005360:	f1b8 0f00 	cmp.w	r8, #0
 8005364:	f040 8134 	bne.w	80055d0 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	f002 ffcf 	bl	800830c <USB_ReadInterrupts>
 800536e:	0342      	lsls	r2, r0, #13
 8005370:	d50b      	bpl.n	800538a <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	f002 ffd6 	bl	8008324 <USB_ReadDevAllInEpInterrupt>
 8005378:	4626      	mov	r6, r4
 800537a:	4683      	mov	fp, r0
 800537c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8005380:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8005382:	f1bb 0f00 	cmp.w	fp, #0
 8005386:	f040 81a1 	bne.w	80056cc <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	f002 ffbe 	bl	800830c <USB_ReadInterrupts>
 8005390:	2800      	cmp	r0, #0
 8005392:	da15      	bge.n	80053c0 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005394:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 80053a0:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 822c 	bne.w	8005802 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 80053aa:	2100      	movs	r1, #0
 80053ac:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fc1b 	bl	8005bec <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	6953      	ldr	r3, [r2, #20]
 80053ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053be:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80053c0:	6820      	ldr	r0, [r4, #0]
 80053c2:	f002 ffa3 	bl	800830c <USB_ReadInterrupts>
 80053c6:	0503      	lsls	r3, r0, #20
 80053c8:	d50b      	bpl.n	80053e2 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80053ca:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80053ce:	07de      	lsls	r6, r3, #31
 80053d0:	d502      	bpl.n	80053d8 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80053d2:	4620      	mov	r0, r4
 80053d4:	f006 fb70 	bl	800bab8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	6953      	ldr	r3, [r2, #20]
 80053dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	f002 ff92 	bl	800830c <USB_ReadInterrupts>
 80053e8:	0100      	lsls	r0, r0, #4
 80053ea:	d514      	bpl.n	8005416 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80053f4:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 80053f6:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	f040 8205 	bne.w	800580a <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8005402:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005404:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8005408:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 800540c:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005410:	4620      	mov	r0, r4
 8005412:	f000 fbeb 	bl	8005bec <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	f002 ff78 	bl	800830c <USB_ReadInterrupts>
 800541c:	04c1      	lsls	r1, r0, #19
 800541e:	d537      	bpl.n	8005490 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005420:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8005424:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005426:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 800542e:	2100      	movs	r1, #0
 8005430:	f002 fd18 	bl	8007e64 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800543a:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800543c:	9802      	ldr	r0, [sp, #8]
 800543e:	4288      	cmp	r0, r1
 8005440:	f040 81e7 	bne.w	8005812 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005444:	f04f 33ff 	mov.w	r3, #4294967295
 8005448:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 800544a:	69f3      	ldr	r3, [r6, #28]
 800544c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005450:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8005452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 81e4 	beq.w	8005822 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800545a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800545e:	f043 030b 	orr.w	r3, r3, #11
 8005462:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8005466:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005468:	f043 030b 	orr.w	r3, r3, #11
 800546c:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800546e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005472:	7c21      	ldrb	r1, [r4, #16]
 8005474:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005476:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800547a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800547e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005482:	f002 ff90 	bl	80083a6 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	6953      	ldr	r3, [r2, #20]
 800548a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	f002 ff3b 	bl	800830c <USB_ReadInterrupts>
 8005496:	0482      	lsls	r2, r0, #18
 8005498:	d520      	bpl.n	80054dc <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 800549a:	6820      	ldr	r0, [r4, #0]
 800549c:	f002 ff68 	bl	8008370 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	68d3      	ldr	r3, [r2, #12]
 80054a4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80054a8:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80054aa:	2303      	movs	r3, #3
 80054ac:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80054ae:	2340      	movs	r3, #64	; 0x40
 80054b0:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80054b2:	f000 febb 	bl	800622c <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80054b6:	4b82      	ldr	r3, [pc, #520]	; (80056c0 <HAL_PCD_IRQHandler+0x3b8>)
 80054b8:	4a82      	ldr	r2, [pc, #520]	; (80056c4 <HAL_PCD_IRQHandler+0x3bc>)
 80054ba:	4403      	add	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f200 81b8 	bhi.w	8005834 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80054ca:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 80054cc:	4620      	mov	r0, r4
 80054ce:	f006 fae6 	bl	800ba9e <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	6953      	ldr	r3, [r2, #20]
 80054d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054da:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	f002 ff15 	bl	800830c <USB_ReadInterrupts>
 80054e2:	06c3      	lsls	r3, r0, #27
 80054e4:	d52b      	bpl.n	800553e <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	6993      	ldr	r3, [r2, #24]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 80054f0:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054f2:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80054f6:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80054f8:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054fc:	f040 81ea 	bne.w	80058d4 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8005500:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005504:	421e      	tst	r6, r3
 8005506:	d015      	beq.n	8005534 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8005508:	f04f 081c 	mov.w	r8, #28
 800550c:	fb08 4809 	mla	r8, r8, r9, r4
 8005510:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005514:	4632      	mov	r2, r6
 8005516:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 800551a:	4638      	mov	r0, r7
 800551c:	f002 fe65 	bl	80081ea <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005520:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8005524:	4433      	add	r3, r6
 8005526:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800552a:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 800552e:	441e      	add	r6, r3
 8005530:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	6993      	ldr	r3, [r2, #24]
 8005538:	f043 0310 	orr.w	r3, r3, #16
 800553c:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800553e:	6820      	ldr	r0, [r4, #0]
 8005540:	f002 fee4 	bl	800830c <USB_ReadInterrupts>
 8005544:	0707      	lsls	r7, r0, #28
 8005546:	d507      	bpl.n	8005558 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8005548:	4620      	mov	r0, r4
 800554a:	f006 faa4 	bl	800ba96 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	6953      	ldr	r3, [r2, #20]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	f002 fed7 	bl	800830c <USB_ReadInterrupts>
 800555e:	02c6      	lsls	r6, r0, #11
 8005560:	d508      	bpl.n	8005574 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8005562:	b2e9      	uxtb	r1, r5
 8005564:	4620      	mov	r0, r4
 8005566:	f006 fab3 	bl	800bad0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	6953      	ldr	r3, [r2, #20]
 800556e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005572:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	f002 fec9 	bl	800830c <USB_ReadInterrupts>
 800557a:	0280      	lsls	r0, r0, #10
 800557c:	d508      	bpl.n	8005590 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800557e:	b2e9      	uxtb	r1, r5
 8005580:	4620      	mov	r0, r4
 8005582:	f006 faa1 	bl	800bac8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	6953      	ldr	r3, [r2, #20]
 800558a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	f002 febb 	bl	800830c <USB_ReadInterrupts>
 8005596:	0041      	lsls	r1, r0, #1
 8005598:	d507      	bpl.n	80055aa <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800559a:	4620      	mov	r0, r4
 800559c:	f006 fa9c 	bl	800bad8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	6953      	ldr	r3, [r2, #20]
 80055a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055a8:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055aa:	6820      	ldr	r0, [r4, #0]
 80055ac:	f002 feae 	bl	800830c <USB_ReadInterrupts>
 80055b0:	0742      	lsls	r2, r0, #29
 80055b2:	d50a      	bpl.n	80055ca <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055b8:	076b      	lsls	r3, r5, #29
 80055ba:	d502      	bpl.n	80055c2 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80055bc:	4620      	mov	r0, r4
 80055be:	f006 fa8f 	bl	800bae0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4315      	orrs	r5, r2
 80055c8:	605d      	str	r5, [r3, #4]
    }
  }
}
 80055ca:	b007      	add	sp, #28
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 80055d0:	f018 0f01 	tst.w	r8, #1
 80055d4:	d049      	beq.n	800566a <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80055d6:	b2ea      	uxtb	r2, r5
 80055d8:	4611      	mov	r1, r2
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	9203      	str	r2, [sp, #12]
 80055de:	f002 fea9 	bl	8008334 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055e2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80055e6:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055e8:	d032      	beq.n	8005650 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055ea:	2101      	movs	r1, #1
 80055ec:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 80055ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <HAL_PCD_IRQHandler+0x3c0>)
 80055f2:	9a03      	ldr	r2, [sp, #12]
 80055f4:	4299      	cmp	r1, r3
 80055f6:	d13f      	bne.n	8005678 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 80055f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80055fc:	0409      	lsls	r1, r1, #16
 80055fe:	d41f      	bmi.n	8005640 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8005600:	6921      	ldr	r1, [r4, #16]
 8005602:	2901      	cmp	r1, #1
 8005604:	d10c      	bne.n	8005620 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005606:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005608:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800560c:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005610:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8005612:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8005616:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 800561a:	4408      	add	r0, r1
 800561c:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005620:	4611      	mov	r1, r2
 8005622:	4620      	mov	r0, r4
 8005624:	f006 fa26 	bl	800ba74 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005628:	6921      	ldr	r1, [r4, #16]
 800562a:	2901      	cmp	r1, #1
 800562c:	d108      	bne.n	8005640 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 800562e:	b93d      	cbnz	r5, 8005640 <HAL_PCD_IRQHandler+0x338>
 8005630:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005634:	b922      	cbnz	r2, 8005640 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005636:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	f002 feb3 	bl	80083a6 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8005640:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005648:	f042 0220 	orr.w	r2, r2, #32
 800564c:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005650:	f01a 0f08 	tst.w	sl, #8
 8005654:	d004      	beq.n	8005660 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8005656:	4620      	mov	r0, r4
 8005658:	f006 fa06 	bl	800ba68 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800565c:	2308      	movs	r3, #8
 800565e:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005660:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005664:	bf1c      	itt	ne
 8005666:	2310      	movne	r3, #16
 8005668:	60b3      	strne	r3, [r6, #8]
        epnum++;
 800566a:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800566c:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8005670:	3620      	adds	r6, #32
 8005672:	f10b 0b1c 	add.w	fp, fp, #28
 8005676:	e673      	b.n	8005360 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8005678:	6921      	ldr	r1, [r4, #16]
 800567a:	2901      	cmp	r1, #1
 800567c:	d10c      	bne.n	8005698 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800567e:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005680:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005684:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005688:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 800568a:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 800568e:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005692:	4408      	add	r0, r1
 8005694:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005698:	4611      	mov	r1, r2
 800569a:	4620      	mov	r0, r4
 800569c:	f006 f9ea 	bl	800ba74 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 80056a0:	6921      	ldr	r1, [r4, #16]
 80056a2:	2901      	cmp	r1, #1
 80056a4:	d1d4      	bne.n	8005650 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	d1d2      	bne.n	8005650 <HAL_PCD_IRQHandler+0x348>
 80056aa:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	d1ce      	bne.n	8005650 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80056b2:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	f002 fe75 	bl	80083a6 <USB_EP0_OutStart>
 80056bc:	e7c8      	b.n	8005650 <HAL_PCD_IRQHandler+0x348>
 80056be:	bf00      	nop
 80056c0:	ff275340 	.word	0xff275340
 80056c4:	000c34ff 	.word	0x000c34ff
 80056c8:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 80056cc:	f01b 0f01 	tst.w	fp, #1
 80056d0:	d074      	beq.n	80057bc <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80056d2:	fa5f fa85 	uxtb.w	sl, r5
 80056d6:	4651      	mov	r1, sl
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	f002 fe35 	bl	8008348 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056de:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80056e2:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056e4:	d020      	beq.n	8005728 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056e6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 80056ea:	2101      	movs	r1, #1
 80056ec:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056ee:	ea23 0301 	bic.w	r3, r3, r1
 80056f2:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056f6:	2301      	movs	r3, #1
 80056f8:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8005700:	bf01      	itttt	eq
 8005702:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8005704:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8005706:	189b      	addeq	r3, r3, r2
 8005708:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800570a:	4651      	mov	r1, sl
 800570c:	4620      	mov	r0, r4
 800570e:	f006 f9ba 	bl	800ba86 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8005712:	6921      	ldr	r1, [r4, #16]
 8005714:	2901      	cmp	r1, #1
 8005716:	d107      	bne.n	8005728 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8005718:	b935      	cbnz	r5, 8005728 <HAL_PCD_IRQHandler+0x420>
 800571a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800571c:	b923      	cbnz	r3, 8005728 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800571e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	f002 fe3f 	bl	80083a6 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005728:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800572c:	bf1c      	itt	ne
 800572e:	2308      	movne	r3, #8
 8005730:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005734:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005738:	bf1c      	itt	ne
 800573a:	2310      	movne	r3, #16
 800573c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005740:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005744:	bf1c      	itt	ne
 8005746:	2340      	movne	r3, #64	; 0x40
 8005748:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800574c:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005750:	bf1c      	itt	ne
 8005752:	2302      	movne	r3, #2
 8005754:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005758:	f018 0f80 	tst.w	r8, #128	; 0x80
 800575c:	d02e      	beq.n	80057bc <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8005762:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005764:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8005766:	eba3 0802 	sub.w	r8, r3, r2
 800576a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800576c:	4598      	cmp	r8, r3
 800576e:	bf28      	it	cs
 8005770:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8005772:	f108 0303 	add.w	r3, r8, #3
 8005776:	2204      	movs	r2, #4
 8005778:	fb93 f3f2 	sdiv	r3, r3, r2
 800577c:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8005788:	9305      	str	r3, [sp, #20]
 800578a:	9b05      	ldr	r3, [sp, #20]
 800578c:	9a04      	ldr	r2, [sp, #16]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	b29b      	uxth	r3, r3
 8005792:	4293      	cmp	r3, r2
 8005794:	d904      	bls.n	80057a0 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005796:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005798:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800579a:	4293      	cmp	r3, r2
 800579c:	d900      	bls.n	80057a0 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 800579e:	b9a3      	cbnz	r3, 80057ca <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 80057a0:	f1b8 0f00 	cmp.w	r8, #0
 80057a4:	dc0a      	bgt.n	80057bc <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057a6:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 80057a8:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057aa:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80057ae:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 80057b2:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057b4:	ea23 0302 	bic.w	r3, r3, r2
 80057b8:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 80057bc:	3501      	adds	r5, #1
        ep_intr >>= 1;
 80057be:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80057c2:	361c      	adds	r6, #28
 80057c4:	f109 0920 	add.w	r9, r9, #32
 80057c8:	e5db      	b.n	8005382 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 80057ca:	eba3 0802 	sub.w	r8, r3, r2
 80057ce:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80057d0:	9803      	ldr	r0, [sp, #12]
 80057d2:	4598      	cmp	r8, r3
 80057d4:	bf28      	it	cs
 80057d6:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 80057d8:	2204      	movs	r2, #4
 80057da:	f108 0303 	add.w	r3, r8, #3
 80057de:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e2:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80057e4:	7c23      	ldrb	r3, [r4, #16]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4652      	mov	r2, sl
 80057ea:	fa1f f388 	uxth.w	r3, r8
 80057ee:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80057f0:	f002 fcea 	bl	80081c8 <USB_WritePacket>
    ep->xfer_buff  += len;
 80057f4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80057f6:	4443      	add	r3, r8
 80057f8:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80057fa:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80057fc:	4443      	add	r3, r8
 80057fe:	6573      	str	r3, [r6, #84]	; 0x54
 8005800:	e7c3      	b.n	800578a <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8005802:	4620      	mov	r0, r4
 8005804:	f006 f95c 	bl	800bac0 <HAL_PCD_ResumeCallback>
 8005808:	e5d5      	b.n	80053b6 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 800580a:	4620      	mov	r0, r4
 800580c:	f006 f954 	bl	800bab8 <HAL_PCD_SuspendCallback>
 8005810:	e601      	b.n	8005416 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005812:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8005814:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005816:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8005818:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800581c:	9002      	str	r0, [sp, #8]
 800581e:	3320      	adds	r3, #32
 8005820:	e60c      	b.n	800543c <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8005822:	6973      	ldr	r3, [r6, #20]
 8005824:	f043 030b 	orr.w	r3, r3, #11
 8005828:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800582a:	6933      	ldr	r3, [r6, #16]
 800582c:	f043 030b 	orr.w	r3, r3, #11
 8005830:	6133      	str	r3, [r6, #16]
 8005832:	e61c      	b.n	800546e <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8005834:	4a2f      	ldr	r2, [pc, #188]	; (80058f4 <HAL_PCD_IRQHandler+0x5ec>)
 8005836:	4930      	ldr	r1, [pc, #192]	; (80058f8 <HAL_PCD_IRQHandler+0x5f0>)
 8005838:	4402      	add	r2, r0
 800583a:	428a      	cmp	r2, r1
 800583c:	d803      	bhi.n	8005846 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8005844:	e641      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8005846:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800584a:	492c      	ldr	r1, [pc, #176]	; (80058fc <HAL_PCD_IRQHandler+0x5f4>)
 800584c:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8005850:	428a      	cmp	r2, r1
 8005852:	d803      	bhi.n	800585c <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800585a:	e636      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 800585c:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8005860:	4927      	ldr	r1, [pc, #156]	; (8005900 <HAL_PCD_IRQHandler+0x5f8>)
 8005862:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8005866:	428a      	cmp	r2, r1
 8005868:	d803      	bhi.n	8005872 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005870:	e62b      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8005872:	4a24      	ldr	r2, [pc, #144]	; (8005904 <HAL_PCD_IRQHandler+0x5fc>)
 8005874:	4924      	ldr	r1, [pc, #144]	; (8005908 <HAL_PCD_IRQHandler+0x600>)
 8005876:	4402      	add	r2, r0
 8005878:	428a      	cmp	r2, r1
 800587a:	d803      	bhi.n	8005884 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8005882:	e622      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <HAL_PCD_IRQHandler+0x604>)
 8005886:	4922      	ldr	r1, [pc, #136]	; (8005910 <HAL_PCD_IRQHandler+0x608>)
 8005888:	4402      	add	r2, r0
 800588a:	428a      	cmp	r2, r1
 800588c:	d803      	bhi.n	8005896 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8005894:	e619      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_PCD_IRQHandler+0x60c>)
 8005898:	491f      	ldr	r1, [pc, #124]	; (8005918 <HAL_PCD_IRQHandler+0x610>)
 800589a:	4402      	add	r2, r0
 800589c:	428a      	cmp	r2, r1
 800589e:	d803      	bhi.n	80058a8 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80058a6:	e610      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 80058a8:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80058ac:	491b      	ldr	r1, [pc, #108]	; (800591c <HAL_PCD_IRQHandler+0x614>)
 80058ae:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80058b2:	428a      	cmp	r2, r1
 80058b4:	d803      	bhi.n	80058be <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058bc:	e605      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_PCD_IRQHandler+0x618>)
 80058c0:	4918      	ldr	r1, [pc, #96]	; (8005924 <HAL_PCD_IRQHandler+0x61c>)
 80058c2:	4402      	add	r2, r0
 80058c4:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	bf94      	ite	ls
 80058ca:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80058ce:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80058d2:	e5fa      	b.n	80054ca <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	f47f ae2d 	bne.w	8005534 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80058da:	2208      	movs	r2, #8
 80058dc:	f504 7162 	add.w	r1, r4, #904	; 0x388
 80058e0:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058e2:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80058e6:	f002 fc80 	bl	80081ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058ea:	fb08 4809 	mla	r8, r8, r9, r4
 80058ee:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80058f2:	e61a      	b.n	800552a <HAL_PCD_IRQHandler+0x222>
 80058f4:	ff1b1e40 	.word	0xff1b1e40
 80058f8:	000f423f 	.word	0x000f423f
 80058fc:	00124f7f 	.word	0x00124f7f
 8005900:	0013d61f 	.word	0x0013d61f
 8005904:	fee5b660 	.word	0xfee5b660
 8005908:	0016e35f 	.word	0x0016e35f
 800590c:	feced300 	.word	0xfeced300
 8005910:	001b773f 	.word	0x001b773f
 8005914:	feb35bc0 	.word	0xfeb35bc0
 8005918:	002191bf 	.word	0x002191bf
 800591c:	0038751f 	.word	0x0038751f
 8005920:	fe5954e0 	.word	0xfe5954e0
 8005924:	00419cdf 	.word	0x00419cdf

08005928 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8005928:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 800592c:	2a01      	cmp	r2, #1
{
 800592e:	b510      	push	{r4, lr}
 8005930:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005932:	d00b      	beq.n	800594c <HAL_PCD_SetAddress+0x24>
 8005934:	2201      	movs	r2, #1
 8005936:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 800593a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 800593e:	6800      	ldr	r0, [r0, #0]
 8005940:	f002 fcbc 	bl	80082bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8005944:	2000      	movs	r0, #0
 8005946:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800594a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800594c:	2002      	movs	r0, #2
}
 800594e:	bd10      	pop	{r4, pc}

08005950 <HAL_PCD_EP_Open>:
{
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8005954:	b248      	sxtb	r0, r1
 8005956:	2800      	cmp	r0, #0
 8005958:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 800595c:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005960:	bfb5      	itete	lt
 8005962:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005966:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800596a:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800596c:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8005970:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8005972:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8005974:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8005976:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8005978:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 800597c:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 800597e:	2b01      	cmp	r3, #1
 8005980:	d009      	beq.n	8005996 <HAL_PCD_EP_Open+0x46>
 8005982:	2301      	movs	r3, #1
 8005984:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	f002 fa94 	bl	8007eb6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800598e:	2000      	movs	r0, #0
 8005990:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8005994:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8005996:	2002      	movs	r0, #2
}
 8005998:	bd70      	pop	{r4, r5, r6, pc}

0800599a <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 800599a:	b24b      	sxtb	r3, r1
 800599c:	2b00      	cmp	r3, #0
{  
 800599e:	b510      	push	{r4, lr}
 80059a0:	f04f 021c 	mov.w	r2, #28
 80059a4:	4604      	mov	r4, r0
 80059a6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80059aa:	bfb5      	itete	lt
 80059ac:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80059b0:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80059b4:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80059b6:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 80059ba:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80059bc:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80059be:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80059c0:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d009      	beq.n	80059dc <HAL_PCD_EP_Close+0x42>
 80059c8:	2301      	movs	r3, #1
 80059ca:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	f002 fab0 	bl	8007f34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80059d4:	2000      	movs	r0, #0
 80059d6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80059da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80059dc:	2002      	movs	r0, #2
}
 80059de:	bd10      	pop	{r4, pc}

080059e0 <HAL_PCD_EP_Receive>:
{
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4604      	mov	r4, r0
 80059e4:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80059e8:	201c      	movs	r0, #28
 80059ea:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 80059ee:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 80059f8:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 80059fc:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 8005a00:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 8005a04:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 8005a06:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 8005a0a:	d011      	beq.n	8005a30 <HAL_PCD_EP_Receive+0x50>
 8005a0c:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8005a0e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005a10:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005a12:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 8005a16:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8005a1a:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8005a1c:	b92e      	cbnz	r6, 8005a2a <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8005a1e:	f002 fb6f 	bl	8008100 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8005a22:	2000      	movs	r0, #0
 8005a24:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8005a2a:	f002 fab1 	bl	8007f90 <USB_EPStartXfer>
 8005a2e:	e7f8      	b.n	8005a22 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 8005a30:	2002      	movs	r0, #2
}
 8005a32:	bd70      	pop	{r4, r5, r6, pc}

08005a34 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8005a34:	231c      	movs	r3, #28
 8005a36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005a3a:	fb03 0101 	mla	r1, r3, r1, r0
}
 8005a3e:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 8005a42:	4770      	bx	lr

08005a44 <HAL_PCD_EP_Transmit>:
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4604      	mov	r4, r0
 8005a48:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8005a4c:	201c      	movs	r0, #28
 8005a4e:	fb00 4506 	mla	r5, r0, r6, r4
 8005a52:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8005a54:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 8005a56:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 8005a5a:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 8005a62:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8005a64:	429a      	cmp	r2, r3
  ep->is_in = 1;
 8005a66:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 8005a6a:	d010      	beq.n	8005a8e <HAL_PCD_EP_Transmit+0x4a>
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005a72:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 8005a7a:	b92e      	cbnz	r6, 8005a88 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8005a7c:	f002 fb40 	bl	8008100 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8005a80:	2000      	movs	r0, #0
 8005a82:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8005a88:	f002 fa82 	bl	8007f90 <USB_EPStartXfer>
 8005a8c:	e7f8      	b.n	8005a80 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 8005a8e:	2002      	movs	r0, #2
}
 8005a90:	bd70      	pop	{r4, r5, r6, pc}

08005a92 <HAL_PCD_EP_SetStall>:
{
 8005a92:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8005a94:	b24b      	sxtb	r3, r1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005a9c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005aa0:	bfb5      	itete	lt
 8005aa2:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005aa6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005aaa:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8005aac:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8005ab0:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005ab2:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8005ab4:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8005ab6:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8005ab8:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005aba:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8005abc:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005ac0:	4293      	cmp	r3, r2
{
 8005ac2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005ac4:	d00f      	beq.n	8005ae6 <HAL_PCD_EP_SetStall+0x54>
 8005ac6:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	f002 fb9d 	bl	800820a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8005ad0:	b92d      	cbnz	r5, 8005ade <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ad2:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005ad6:	7c21      	ldrb	r1, [r4, #16]
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	f002 fc64 	bl	80083a6 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005ae4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005ae6:	2002      	movs	r0, #2
}
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}

08005aea <HAL_PCD_EP_ClrStall>:
{
 8005aea:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8005aec:	b24b      	sxtb	r3, r1
 8005aee:	2b00      	cmp	r3, #0
{
 8005af0:	4605      	mov	r5, r0
 8005af2:	f04f 021c 	mov.w	r2, #28
 8005af6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005afa:	bfb5      	itete	lt
 8005afc:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8005b00:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005b04:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8005b06:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005b0a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8005b0c:	2400      	movs	r4, #0
 8005b0e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8005b10:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005b12:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8005b14:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d009      	beq.n	8005b30 <HAL_PCD_EP_ClrStall+0x46>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 8005b22:	6828      	ldr	r0, [r5, #0]
 8005b24:	f002 fb90 	bl	8008248 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8005b28:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8005b30:	2002      	movs	r0, #2
}
 8005b32:	bd38      	pop	{r3, r4, r5, pc}

08005b34 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8005b34:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005b38:	2b01      	cmp	r3, #1
{
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005b3e:	d011      	beq.n	8005b64 <HAL_PCD_EP_Flush+0x30>
 8005b40:	2301      	movs	r3, #1
 8005b42:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 8005b46:	060b      	lsls	r3, r1, #24
 8005b48:	d508      	bpl.n	8005b5c <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8005b4a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005b4e:	6800      	ldr	r0, [r0, #0]
 8005b50:	f002 f988 	bl	8007e64 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8005b54:	2000      	movs	r0, #0
 8005b56:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005b5a:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8005b5c:	6800      	ldr	r0, [r0, #0]
 8005b5e:	f002 f993 	bl	8007e88 <USB_FlushRxFifo>
 8005b62:	e7f7      	b.n	8005b54 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8005b64:	2002      	movs	r0, #2
}
 8005b66:	bd10      	pop	{r4, pc}

08005b68 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b68:	6800      	ldr	r0, [r0, #0]
{
 8005b6a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8005b6e:	b921      	cbnz	r1, 8005b7a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8005b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b74:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 8005b76:	2000      	movs	r0, #0
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 8005b7c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 8005b82:	1e4e      	subs	r6, r1, #1
 8005b84:	b2ec      	uxtb	r4, r5
 8005b86:	42b4      	cmp	r4, r6
 8005b88:	f105 0501 	add.w	r5, r5, #1
 8005b8c:	db06      	blt.n	8005b9c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 8005b8e:	313f      	adds	r1, #63	; 0x3f
 8005b90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b98:	6043      	str	r3, [r0, #4]
 8005b9a:	e7ec      	b.n	8005b76 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 8005b9c:	3440      	adds	r4, #64	; 0x40
 8005b9e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005ba2:	6864      	ldr	r4, [r4, #4]
 8005ba4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ba8:	e7ec      	b.n	8005b84 <HAL_PCDEx_SetTxFiFo+0x1c>

08005baa <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005baa:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8005bac:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8005bae:	6259      	str	r1, [r3, #36]	; 0x24
}
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005bb2:	6802      	ldr	r2, [r0, #0]
{
 8005bb4:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005bc2:	6993      	ldr	r3, [r2, #24]
 8005bc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bc8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	f043 0303 	orr.w	r3, r3, #3
 8005bd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005bd8:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8005be0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be6:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8005be8:	2000      	movs	r0, #0
 8005bea:	4770      	bx	lr

08005bec <HAL_PCDEx_LPM_Callback>:
 8005bec:	4770      	bx	lr
	...

08005bf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005bf0:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <HAL_PWREx_GetVoltageRange+0xc>)
 8005bf2:	6818      	ldr	r0, [r3, #0]
}
 8005bf4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40007000 	.word	0x40007000

08005c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c02:	4d1e      	ldr	r5, [pc, #120]	; (8005c7c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8005c04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005c06:	00da      	lsls	r2, r3, #3
{
 8005c08:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c0a:	d518      	bpl.n	8005c3e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005c14:	d123      	bne.n	8005c5e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c16:	2c80      	cmp	r4, #128	; 0x80
 8005c18:	d929      	bls.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c1a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c1c:	bf8c      	ite	hi
 8005c1e:	2002      	movhi	r0, #2
 8005c20:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8005c22:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8005c24:	6813      	ldr	r3, [r2, #0]
 8005c26:	f023 0307 	bic.w	r3, r3, #7
 8005c2a:	4303      	orrs	r3, r0
 8005c2c:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8005c34:	1a18      	subs	r0, r3, r0
 8005c36:	bf18      	it	ne
 8005c38:	2001      	movne	r0, #1
 8005c3a:	b003      	add	sp, #12
 8005c3c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	65ab      	str	r3, [r5, #88]	; 0x58
 8005c46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005c50:	f7ff ffce 	bl	8005bf0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8005c5c:	e7d8      	b.n	8005c10 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8005c5e:	2c80      	cmp	r4, #128	; 0x80
 8005c60:	d807      	bhi.n	8005c72 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8005c62:	d008      	beq.n	8005c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8005c64:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8005c68:	4258      	negs	r0, r3
 8005c6a:	4158      	adcs	r0, r3
 8005c6c:	e7d9      	b.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e7d7      	b.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c72:	2003      	movs	r0, #3
 8005c74:	e7d5      	b.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c76:	2002      	movs	r0, #2
 8005c78:	e7d3      	b.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	40022000 	.word	0x40022000

08005c84 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005c84:	4b46      	ldr	r3, [pc, #280]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x11c>)
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	f012 0f0c 	tst.w	r2, #12
{
 8005c8c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005c8e:	d009      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005c96:	2a0c      	cmp	r2, #12
 8005c98:	d148      	bne.n	8005d2c <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	f002 0203 	and.w	r2, r2, #3
 8005ca0:	2a01      	cmp	r2, #1
 8005ca2:	d143      	bne.n	8005d2c <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	0712      	lsls	r2, r2, #28
 8005ca8:	d437      	bmi.n	8005d1a <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8005caa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005cb2:	fa91 f1a1 	rbit	r1, r1
 8005cb6:	fab1 f181 	clz	r1, r1
 8005cba:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8005cbe:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 8005cc0:	4938      	ldr	r1, [pc, #224]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x120>)
 8005cc2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005cc6:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 8005cc8:	f012 0f0c 	tst.w	r2, #12
 8005ccc:	bf0c      	ite	eq
 8005cce:	4620      	moveq	r0, r4
 8005cd0:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	f002 020c 	and.w	r2, r2, #12
 8005cd8:	2a0c      	cmp	r2, #12
 8005cda:	d154      	bne.n	8005d86 <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005cdc:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8005cde:	68d8      	ldr	r0, [r3, #12]
 8005ce0:	2170      	movs	r1, #112	; 0x70
 8005ce2:	fa91 f1a1 	rbit	r1, r1
 8005ce6:	fab1 f181 	clz	r1, r1
 8005cea:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8005cee:	40c8      	lsrs	r0, r1
 8005cf0:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005cf2:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 8005cf6:	2802      	cmp	r0, #2
 8005cf8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8005cfc:	d028      	beq.n	8005d50 <HAL_RCC_GetSysClockFreq+0xcc>
 8005cfe:	2803      	cmp	r0, #3
 8005d00:	d042      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005d02:	68d8      	ldr	r0, [r3, #12]
 8005d04:	fa92 f2a2 	rbit	r2, r2
 8005d08:	fab2 f282 	clz	r2, r2
 8005d0c:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005d10:	40d0      	lsrs	r0, r2
 8005d12:	fbb4 f1f1 	udiv	r1, r4, r1
 8005d16:	4348      	muls	r0, r1
      break;
 8005d18:	e027      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	21f0      	movs	r1, #240	; 0xf0
 8005d1e:	fa91 f1a1 	rbit	r1, r1
 8005d22:	fab1 f181 	clz	r1, r1
 8005d26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005d2a:	e7c8      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	f002 020c 	and.w	r2, r2, #12
 8005d32:	2a04      	cmp	r2, #4
 8005d34:	d007      	beq.n	8005d46 <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	f002 020c 	and.w	r2, r2, #12
 8005d3c:	2a08      	cmp	r2, #8
 8005d3e:	d104      	bne.n	8005d4a <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8005d40:	4819      	ldr	r0, [pc, #100]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005d42:	2400      	movs	r4, #0
 8005d44:	e7c5      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8005d46:	4819      	ldr	r0, [pc, #100]	; (8005dac <HAL_RCC_GetSysClockFreq+0x128>)
 8005d48:	e7fb      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 8005d4a:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e7c0      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005d50:	68d8      	ldr	r0, [r3, #12]
 8005d52:	fa92 f2a2 	rbit	r2, r2
 8005d56:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005d5a:	fab2 f282 	clz	r2, r2
 8005d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8005d62:	4812      	ldr	r0, [pc, #72]	; (8005dac <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005d64:	fbb0 f0f1 	udiv	r0, r0, r1
 8005d68:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005d70:	fa92 f2a2 	rbit	r2, r2
 8005d74:	fab2 f282 	clz	r2, r2
 8005d78:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005d7c:	40d3      	lsrs	r3, r2
 8005d7e:	3301      	adds	r3, #1
 8005d80:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005d82:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005d86:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005d88:	68d8      	ldr	r0, [r3, #12]
 8005d8a:	fa92 f2a2 	rbit	r2, r2
 8005d8e:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005d92:	fab2 f282 	clz	r2, r2
 8005d96:	fa20 f202 	lsr.w	r2, r0, r2
 8005d9a:	4803      	ldr	r0, [pc, #12]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x124>)
 8005d9c:	e7e2      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0xe0>
 8005d9e:	bf00      	nop
 8005da0:	40021000 	.word	0x40021000
 8005da4:	0800ee08 	.word	0x0800ee08
 8005da8:	007a1200 	.word	0x007a1200
 8005dac:	00f42400 	.word	0x00f42400

08005db0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005db0:	6803      	ldr	r3, [r0, #0]
{
 8005db2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005db6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005db8:	06d8      	lsls	r0, r3, #27
 8005dba:	d541      	bpl.n	8005e40 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8005dbc:	4ca5      	ldr	r4, [pc, #660]	; (8006054 <HAL_RCC_OscConfig+0x2a4>)
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	f013 0f0c 	tst.w	r3, #12
 8005dc4:	d166      	bne.n	8005e94 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	0799      	lsls	r1, r3, #30
 8005dca:	d505      	bpl.n	8005dd8 <HAL_RCC_OscConfig+0x28>
 8005dcc:	69ab      	ldr	r3, [r5, #24]
 8005dce:	b91b      	cbnz	r3, 8005dd8 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8005dd0:	2001      	movs	r0, #1
}
 8005dd2:	b002      	add	sp, #8
 8005dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	6a28      	ldr	r0, [r5, #32]
 8005ddc:	071a      	lsls	r2, r3, #28
 8005dde:	bf56      	itet	pl
 8005de0:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8005de4:	6823      	ldrmi	r3, [r4, #0]
 8005de6:	091b      	lsrpl	r3, r3, #4
 8005de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dec:	4283      	cmp	r3, r0
 8005dee:	d23c      	bcs.n	8005e6a <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005df0:	f7ff ff06 	bl	8005c00 <RCC_SetFlashLatencyFromMSIRange>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d1eb      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	f043 0308 	orr.w	r3, r3, #8
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	6a2a      	ldr	r2, [r5, #32]
 8005e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	69ea      	ldr	r2, [r5, #28]
 8005e10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e18:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005e1a:	f7ff ff33 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8005e1e:	68a3      	ldr	r3, [r4, #8]
 8005e20:	22f0      	movs	r2, #240	; 0xf0
 8005e22:	fa92 f2a2 	rbit	r2, r2
 8005e26:	fab2 f282 	clz	r2, r2
 8005e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2e:	40d3      	lsrs	r3, r2
 8005e30:	4a89      	ldr	r2, [pc, #548]	; (8006058 <HAL_RCC_OscConfig+0x2a8>)
 8005e32:	5cd3      	ldrb	r3, [r2, r3]
 8005e34:	40d8      	lsrs	r0, r3
 8005e36:	4b89      	ldr	r3, [pc, #548]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f7fe feb0 	bl	8004ba0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	07de      	lsls	r6, r3, #31
 8005e44:	d45b      	bmi.n	8005efe <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e46:	682b      	ldr	r3, [r5, #0]
 8005e48:	079c      	lsls	r4, r3, #30
 8005e4a:	f100 80a3 	bmi.w	8005f94 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e4e:	682b      	ldr	r3, [r5, #0]
 8005e50:	0719      	lsls	r1, r3, #28
 8005e52:	f100 80e7 	bmi.w	8006024 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	075a      	lsls	r2, r3, #29
 8005e5a:	f100 8115 	bmi.w	8006088 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	f040 817c 	bne.w	800615e <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8005e66:	2000      	movs	r0, #0
 8005e68:	e7b3      	b.n	8005dd2 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f043 0308 	orr.w	r3, r3, #8
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e78:	4303      	orrs	r3, r0
 8005e7a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	69ea      	ldr	r2, [r5, #28]
 8005e80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e88:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e8a:	f7ff feb9 	bl	8005c00 <RCC_SetFlashLatencyFromMSIRange>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d0c3      	beq.n	8005e1a <HAL_RCC_OscConfig+0x6a>
 8005e92:	e79d      	b.n	8005dd0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e94:	69ab      	ldr	r3, [r5, #24]
 8005e96:	b313      	cbz	r3, 8005ede <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005ea0:	f7fe fea6 	bl	8004bf0 <HAL_GetTick>
 8005ea4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	079b      	lsls	r3, r3, #30
 8005eaa:	d511      	bpl.n	8005ed0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	f043 0308 	orr.w	r3, r3, #8
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	6a2a      	ldr	r2, [r5, #32]
 8005eb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	69ea      	ldr	r2, [r5, #28]
 8005ec4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ecc:	6063      	str	r3, [r4, #4]
 8005ece:	e7b7      	b.n	8005e40 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ed0:	f7fe fe8e 	bl	8004bf0 <HAL_GetTick>
 8005ed4:	1b80      	subs	r0, r0, r6
 8005ed6:	2802      	cmp	r0, #2
 8005ed8:	d9e5      	bls.n	8005ea6 <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 8005eda:	2003      	movs	r0, #3
 8005edc:	e779      	b.n	8005dd2 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005ee6:	f7fe fe83 	bl	8004bf0 <HAL_GetTick>
 8005eea:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	079f      	lsls	r7, r3, #30
 8005ef0:	d5a6      	bpl.n	8005e40 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ef2:	f7fe fe7d 	bl	8004bf0 <HAL_GetTick>
 8005ef6:	1b80      	subs	r0, r0, r6
 8005ef8:	2802      	cmp	r0, #2
 8005efa:	d9f7      	bls.n	8005eec <HAL_RCC_OscConfig+0x13c>
 8005efc:	e7ed      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8005efe:	4c55      	ldr	r4, [pc, #340]	; (8006054 <HAL_RCC_OscConfig+0x2a4>)
 8005f00:	68a3      	ldr	r3, [r4, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8005f10:	2b0c      	cmp	r3, #12
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f14:	68e3      	ldr	r3, [r4, #12]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d106      	bne.n	8005f2c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	0398      	lsls	r0, r3, #14
 8005f22:	d590      	bpl.n	8005e46 <HAL_RCC_OscConfig+0x96>
 8005f24:	686b      	ldr	r3, [r5, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d18d      	bne.n	8005e46 <HAL_RCC_OscConfig+0x96>
 8005f2a:	e751      	b.n	8005dd0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	686b      	ldr	r3, [r5, #4]
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f32:	d110      	bne.n	8005f56 <HAL_RCC_OscConfig+0x1a6>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005f3c:	f7fe fe58 	bl	8004bf0 <HAL_GetTick>
 8005f40:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	0399      	lsls	r1, r3, #14
 8005f46:	f53f af7e 	bmi.w	8005e46 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f4a:	f7fe fe51 	bl	8004bf0 <HAL_GetTick>
 8005f4e:	1b80      	subs	r0, r0, r6
 8005f50:	2864      	cmp	r0, #100	; 0x64
 8005f52:	d9f6      	bls.n	8005f42 <HAL_RCC_OscConfig+0x192>
 8005f54:	e7c1      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f5a:	d104      	bne.n	8005f66 <HAL_RCC_OscConfig+0x1b6>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	e7e6      	b.n	8005f34 <HAL_RCC_OscConfig+0x184>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f74:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8005f7a:	f7fe fe39 	bl	8004bf0 <HAL_GetTick>
 8005f7e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	039a      	lsls	r2, r3, #14
 8005f84:	f57f af5f 	bpl.w	8005e46 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fe fe32 	bl	8004bf0 <HAL_GetTick>
 8005f8c:	1b80      	subs	r0, r0, r6
 8005f8e:	2864      	cmp	r0, #100	; 0x64
 8005f90:	d9f6      	bls.n	8005f80 <HAL_RCC_OscConfig+0x1d0>
 8005f92:	e7a2      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8005f94:	4c2f      	ldr	r4, [pc, #188]	; (8006054 <HAL_RCC_OscConfig+0x2a4>)
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	f003 030c 	and.w	r3, r3, #12
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d009      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fa0:	68a3      	ldr	r3, [r4, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	d119      	bne.n	8005fde <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005faa:	68e3      	ldr	r3, [r4, #12]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d114      	bne.n	8005fde <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	055b      	lsls	r3, r3, #21
 8005fb8:	d503      	bpl.n	8005fc2 <HAL_RCC_OscConfig+0x212>
 8005fba:	68eb      	ldr	r3, [r5, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f43f af07 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc2:	6861      	ldr	r1, [r4, #4]
 8005fc4:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8005fc8:	fa93 f3a3 	rbit	r3, r3
 8005fcc:	fab3 f283 	clz	r2, r3
 8005fd0:	692b      	ldr	r3, [r5, #16]
 8005fd2:	4093      	lsls	r3, r2
 8005fd4:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	e737      	b.n	8005e4e <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fde:	68eb      	ldr	r3, [r5, #12]
 8005fe0:	b17b      	cbz	r3, 8006002 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005fea:	f7fe fe01 	bl	8004bf0 <HAL_GetTick>
 8005fee:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	055f      	lsls	r7, r3, #21
 8005ff4:	d4e5      	bmi.n	8005fc2 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff6:	f7fe fdfb 	bl	8004bf0 <HAL_GetTick>
 8005ffa:	1b80      	subs	r0, r0, r6
 8005ffc:	2802      	cmp	r0, #2
 8005ffe:	d9f7      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x240>
 8006000:	e76b      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006008:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800600a:	f7fe fdf1 	bl	8004bf0 <HAL_GetTick>
 800600e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	0558      	lsls	r0, r3, #21
 8006014:	f57f af1b 	bpl.w	8005e4e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006018:	f7fe fdea 	bl	8004bf0 <HAL_GetTick>
 800601c:	1b80      	subs	r0, r0, r6
 800601e:	2802      	cmp	r0, #2
 8006020:	d9f6      	bls.n	8006010 <HAL_RCC_OscConfig+0x260>
 8006022:	e75a      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006024:	696b      	ldr	r3, [r5, #20]
 8006026:	4c0b      	ldr	r4, [pc, #44]	; (8006054 <HAL_RCC_OscConfig+0x2a4>)
 8006028:	b1d3      	cbz	r3, 8006060 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 800602a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006036:	f7fe fddb 	bl	8004bf0 <HAL_GetTick>
 800603a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800603c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006040:	079b      	lsls	r3, r3, #30
 8006042:	f53f af08 	bmi.w	8005e56 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006046:	f7fe fdd3 	bl	8004bf0 <HAL_GetTick>
 800604a:	1b80      	subs	r0, r0, r6
 800604c:	2802      	cmp	r0, #2
 800604e:	d9f5      	bls.n	800603c <HAL_RCC_OscConfig+0x28c>
 8006050:	e743      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000
 8006058:	0800edf0 	.word	0x0800edf0
 800605c:	200000ec 	.word	0x200000ec
      __HAL_RCC_LSI_DISABLE();
 8006060:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800606c:	f7fe fdc0 	bl	8004bf0 <HAL_GetTick>
 8006070:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8006072:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006076:	079f      	lsls	r7, r3, #30
 8006078:	f57f aeed 	bpl.w	8005e56 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800607c:	f7fe fdb8 	bl	8004bf0 <HAL_GetTick>
 8006080:	1b80      	subs	r0, r0, r6
 8006082:	2802      	cmp	r0, #2
 8006084:	d9f5      	bls.n	8006072 <HAL_RCC_OscConfig+0x2c2>
 8006086:	e728      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006088:	4c66      	ldr	r4, [pc, #408]	; (8006224 <HAL_RCC_OscConfig+0x474>)
 800608a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800608c:	00de      	lsls	r6, r3, #3
 800608e:	d427      	bmi.n	80060e0 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006096:	65a3      	str	r3, [r4, #88]	; 0x58
 8006098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80060a2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a4:	4e60      	ldr	r6, [pc, #384]	; (8006228 <HAL_RCC_OscConfig+0x478>)
 80060a6:	6833      	ldr	r3, [r6, #0]
 80060a8:	05d8      	lsls	r0, r3, #23
 80060aa:	d51b      	bpl.n	80060e4 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ac:	68ab      	ldr	r3, [r5, #8]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d129      	bne.n	8006106 <HAL_RCC_OscConfig+0x356>
 80060b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80060be:	f7fe fd97 	bl	8004bf0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80060c6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80060c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80060cc:	079a      	lsls	r2, r3, #30
 80060ce:	d540      	bpl.n	8006152 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	f43f aec4 	beq.w	8005e5e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80060de:	e6be      	b.n	8005e5e <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 80060e0:	2700      	movs	r7, #0
 80060e2:	e7df      	b.n	80060a4 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80060ec:	f7fe fd80 	bl	8004bf0 <HAL_GetTick>
 80060f0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060f2:	6833      	ldr	r3, [r6, #0]
 80060f4:	05d9      	lsls	r1, r3, #23
 80060f6:	d4d9      	bmi.n	80060ac <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f8:	f7fe fd7a 	bl	8004bf0 <HAL_GetTick>
 80060fc:	eba0 0008 	sub.w	r0, r0, r8
 8006100:	2802      	cmp	r0, #2
 8006102:	d9f6      	bls.n	80060f2 <HAL_RCC_OscConfig+0x342>
 8006104:	e6e9      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006106:	2b05      	cmp	r3, #5
 8006108:	d106      	bne.n	8006118 <HAL_RCC_OscConfig+0x368>
 800610a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006116:	e7cc      	b.n	80060b2 <HAL_RCC_OscConfig+0x302>
 8006118:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006124:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006128:	f022 0204 	bic.w	r2, r2, #4
 800612c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1c4      	bne.n	80060be <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8006134:	f7fe fd5c 	bl	8004bf0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800613c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800613e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006142:	079b      	lsls	r3, r3, #30
 8006144:	d5c4      	bpl.n	80060d0 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fe fd53 	bl	8004bf0 <HAL_GetTick>
 800614a:	1b80      	subs	r0, r0, r6
 800614c:	4540      	cmp	r0, r8
 800614e:	d9f6      	bls.n	800613e <HAL_RCC_OscConfig+0x38e>
 8006150:	e6c3      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006152:	f7fe fd4d 	bl	8004bf0 <HAL_GetTick>
 8006156:	1b80      	subs	r0, r0, r6
 8006158:	4540      	cmp	r0, r8
 800615a:	d9b5      	bls.n	80060c8 <HAL_RCC_OscConfig+0x318>
 800615c:	e6bd      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800615e:	4c31      	ldr	r4, [pc, #196]	; (8006224 <HAL_RCC_OscConfig+0x474>)
 8006160:	68a3      	ldr	r3, [r4, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b0c      	cmp	r3, #12
 8006168:	f43f ae32 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 800616c:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800616e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006174:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006176:	d137      	bne.n	80061e8 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8006178:	f7fe fd3a 	bl	8004bf0 <HAL_GetTick>
 800617c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	019f      	lsls	r7, r3, #6
 8006182:	d42b      	bmi.n	80061dc <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006184:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006186:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006188:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800618c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800618e:	3a01      	subs	r2, #1
 8006190:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006194:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006196:	0912      	lsrs	r2, r2, #4
 8006198:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800619c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800619e:	0852      	lsrs	r2, r2, #1
 80061a0:	3a01      	subs	r2, #1
 80061a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80061a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80061a8:	0852      	lsrs	r2, r2, #1
 80061aa:	3a01      	subs	r2, #1
 80061ac:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80061b0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061b8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80061c2:	f7fe fd15 	bl	8004bf0 <HAL_GetTick>
 80061c6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	0198      	lsls	r0, r3, #6
 80061cc:	f53f ae4b 	bmi.w	8005e66 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d0:	f7fe fd0e 	bl	8004bf0 <HAL_GetTick>
 80061d4:	1b40      	subs	r0, r0, r5
 80061d6:	2802      	cmp	r0, #2
 80061d8:	d9f6      	bls.n	80061c8 <HAL_RCC_OscConfig+0x418>
 80061da:	e67e      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fe fd08 	bl	8004bf0 <HAL_GetTick>
 80061e0:	1b80      	subs	r0, r0, r6
 80061e2:	2802      	cmp	r0, #2
 80061e4:	d9cb      	bls.n	800617e <HAL_RCC_OscConfig+0x3ce>
 80061e6:	e678      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	0119      	lsls	r1, r3, #4
 80061ec:	d406      	bmi.n	80061fc <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80061ee:	6823      	ldr	r3, [r4, #0]
           && 
 80061f0:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80061f2:	bf5e      	ittt	pl
 80061f4:	68e3      	ldrpl	r3, [r4, #12]
 80061f6:	f023 0303 	bicpl.w	r3, r3, #3
 80061fa:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80061fc:	68e3      	ldr	r3, [r4, #12]
 80061fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006206:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8006208:	f7fe fcf2 	bl	8004bf0 <HAL_GetTick>
 800620c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	f57f ae28 	bpl.w	8005e66 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006216:	f7fe fceb 	bl	8004bf0 <HAL_GetTick>
 800621a:	1b40      	subs	r0, r0, r5
 800621c:	2802      	cmp	r0, #2
 800621e:	d9f6      	bls.n	800620e <HAL_RCC_OscConfig+0x45e>
 8006220:	e65b      	b.n	8005eda <HAL_RCC_OscConfig+0x12a>
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000
 8006228:	40007000 	.word	0x40007000

0800622c <HAL_RCC_GetHCLKFreq>:
}
 800622c:	4b01      	ldr	r3, [pc, #4]	; (8006234 <HAL_RCC_GetHCLKFreq+0x8>)
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200000ec 	.word	0x200000ec

08006238 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800623a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	fa92 f2a2 	rbit	r2, r2
 8006244:	fab2 f282 	clz	r2, r2
 8006248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624c:	40d3      	lsrs	r3, r2
 800624e:	4a04      	ldr	r2, [pc, #16]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006250:	5cd3      	ldrb	r3, [r2, r3]
 8006252:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006254:	6810      	ldr	r0, [r2, #0]
}
 8006256:	40d8      	lsrs	r0, r3
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40021000 	.word	0x40021000
 8006260:	0800ee00 	.word	0x0800ee00
 8006264:	200000ec 	.word	0x200000ec

08006268 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_RCC_GetPCLK2Freq+0x24>)
 800626a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	fa92 f2a2 	rbit	r2, r2
 8006274:	fab2 f282 	clz	r2, r2
 8006278:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800627c:	40d3      	lsrs	r3, r2
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006284:	6810      	ldr	r0, [r2, #0]
}
 8006286:	40d8      	lsrs	r0, r3
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40021000 	.word	0x40021000
 8006290:	0800ee00 	.word	0x0800ee00
 8006294:	200000ec 	.word	0x200000ec

08006298 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006298:	4a02      	ldr	r2, [pc, #8]	; (80062a4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	f043 0304 	orr.w	r3, r3, #4
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	4770      	bx	lr
 80062a4:	40021000 	.word	0x40021000

080062a8 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80062a8:	6803      	ldr	r3, [r0, #0]
 80062aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ac:	f012 0f45 	tst.w	r2, #69	; 0x45
 80062b0:	d0fb      	beq.n	80062aa <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80062b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b4:	0752      	lsls	r2, r2, #29
 80062b6:	d503      	bpl.n	80062c0 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80062b8:	2204      	movs	r2, #4
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80062bc:	2003      	movs	r0, #3
 80062be:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80062c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062c2:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80062c6:	bf15      	itete	ne
 80062c8:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ca:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80062ce:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d0:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 80062d2:	4770      	bx	lr

080062d4 <SD_CmdResp1Error>:
{
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80062d8:	6800      	ldr	r0, [r0, #0]
{
 80062da:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80062dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80062de:	f013 0f45 	tst.w	r3, #69	; 0x45
 80062e2:	d0fb      	beq.n	80062dc <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80062e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80062e6:	075b      	lsls	r3, r3, #29
 80062e8:	d503      	bpl.n	80062f2 <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80062ea:	2304      	movs	r3, #4
 80062ec:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80062ee:	2003      	movs	r0, #3
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80062f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80062f4:	f014 0401 	ands.w	r4, r4, #1
 80062f8:	d003      	beq.n	8006302 <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80062fa:	2301      	movs	r3, #1
 80062fc:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 80062fe:	4618      	mov	r0, r3
 8006300:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006302:	f001 fc94 	bl	8007c2e <SDMMC_GetCommandResponse>
 8006306:	42b0      	cmp	r0, r6
 8006308:	d001      	beq.n	800630e <SD_CmdResp1Error+0x3a>
    return errorstate;
 800630a:	2010      	movs	r0, #16
 800630c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800630e:	6828      	ldr	r0, [r5, #0]
 8006310:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006314:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006316:	4621      	mov	r1, r4
 8006318:	f001 fc8c 	bl	8007c34 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 800631c:	4b27      	ldr	r3, [pc, #156]	; (80063bc <SD_CmdResp1Error+0xe8>)
 800631e:	4003      	ands	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ec      	beq.n	80062fe <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8006324:	2800      	cmp	r0, #0
 8006326:	db27      	blt.n	8006378 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8006328:	0045      	lsls	r5, r0, #1
 800632a:	d427      	bmi.n	800637c <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800632c:	0084      	lsls	r4, r0, #2
 800632e:	d427      	bmi.n	8006380 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8006330:	00c1      	lsls	r1, r0, #3
 8006332:	d427      	bmi.n	8006384 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8006334:	0102      	lsls	r2, r0, #4
 8006336:	d427      	bmi.n	8006388 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8006338:	0143      	lsls	r3, r0, #5
 800633a:	d427      	bmi.n	800638c <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 800633c:	01c6      	lsls	r6, r0, #7
 800633e:	d427      	bmi.n	8006390 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8006340:	0205      	lsls	r5, r0, #8
 8006342:	d427      	bmi.n	8006394 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8006344:	0244      	lsls	r4, r0, #9
 8006346:	d4e0      	bmi.n	800630a <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8006348:	0281      	lsls	r1, r0, #10
 800634a:	d425      	bmi.n	8006398 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 800634c:	02c2      	lsls	r2, r0, #11
 800634e:	d425      	bmi.n	800639c <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8006350:	0303      	lsls	r3, r0, #12
 8006352:	d425      	bmi.n	80063a0 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8006354:	0346      	lsls	r6, r0, #13
 8006356:	d425      	bmi.n	80063a4 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8006358:	0385      	lsls	r5, r0, #14
 800635a:	d425      	bmi.n	80063a8 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 800635c:	03c4      	lsls	r4, r0, #15
 800635e:	d425      	bmi.n	80063ac <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8006360:	0401      	lsls	r1, r0, #16
 8006362:	d425      	bmi.n	80063b0 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8006364:	0442      	lsls	r2, r0, #17
 8006366:	d425      	bmi.n	80063b4 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8006368:	0483      	lsls	r3, r0, #18
 800636a:	d425      	bmi.n	80063b8 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 800636c:	f010 0f08 	tst.w	r0, #8
 8006370:	bf0c      	ite	eq
 8006372:	2000      	moveq	r0, #0
 8006374:	201a      	movne	r0, #26
 8006376:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8006378:	201c      	movs	r0, #28
 800637a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 800637c:	2009      	movs	r0, #9
 800637e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8006380:	200a      	movs	r0, #10
 8006382:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8006384:	200b      	movs	r0, #11
 8006386:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8006388:	200c      	movs	r0, #12
 800638a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 800638c:	200d      	movs	r0, #13
 800638e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8006390:	200e      	movs	r0, #14
 8006392:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8006394:	200f      	movs	r0, #15
 8006396:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8006398:	2011      	movs	r0, #17
 800639a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 800639c:	2012      	movs	r0, #18
 800639e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 80063a0:	2013      	movs	r0, #19
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 80063a4:	2014      	movs	r0, #20
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 80063a8:	2015      	movs	r0, #21
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 80063ac:	2016      	movs	r0, #22
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 80063b0:	2017      	movs	r0, #23
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 80063b4:	2018      	movs	r0, #24
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 80063b8:	2019      	movs	r0, #25
}
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	fdffe008 	.word	0xfdffe008

080063c0 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 80063c6:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80063c8:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063ca:	2240      	movs	r2, #64	; 0x40
{
 80063cc:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80063d2:	9306      	str	r3, [sp, #24]
{
 80063d4:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063da:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 80063dc:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063de:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80063e0:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063e2:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063e4:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 80063e6:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063e8:	f001 fc0f 	bl	8007c0a <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80063ec:	4621      	mov	r1, r4
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff ff70 	bl	80062d4 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 80063f4:	4604      	mov	r4, r0
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d138      	bne.n	800646c <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 80063fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063fc:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 80063fe:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006400:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006402:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006404:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006406:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006408:	f001 fbff 	bl	8007c0a <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800640c:	4621      	mov	r1, r4
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff ff60 	bl	80062d4 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006414:	4604      	mov	r4, r0
 8006416:	bb48      	cbnz	r0, 800646c <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800641e:	2330      	movs	r3, #48	; 0x30
 8006420:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006422:	2302      	movs	r3, #2
 8006424:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006426:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006428:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800642a:	a908      	add	r1, sp, #32
 800642c:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800642e:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8006430:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006432:	f001 fc09 	bl	8007c48 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8006436:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006438:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800643a:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800643c:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800643e:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006440:	f001 fbe3 	bl	8007c0a <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8006444:	4621      	mov	r1, r4
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ff44 	bl	80062d4 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 800644c:	4604      	mov	r4, r0
 800644e:	b968      	cbnz	r0, 800646c <SD_FindSCR+0xac>
 8006450:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006452:	f240 482a 	movw	r8, #1066	; 0x42a
 8006456:	6830      	ldr	r0, [r6, #0]
 8006458:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800645a:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800645e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006460:	d008      	beq.n	8006474 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006462:	0719      	lsls	r1, r3, #28
 8006464:	d50d      	bpl.n	8006482 <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006466:	2308      	movs	r3, #8
 8006468:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 800646a:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 800646c:	4620      	mov	r0, r4
 800646e:	b00e      	add	sp, #56	; 0x38
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	d5ef      	bpl.n	8006458 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006478:	f001 fbbc 	bl	8007bf4 <SDMMC_ReadFIFO>
 800647c:	f847 0f04 	str.w	r0, [r7, #4]!
 8006480:	e7e9      	b.n	8006456 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006482:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006484:	079a      	lsls	r2, r3, #30
 8006486:	d502      	bpl.n	800648e <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006488:	2402      	movs	r4, #2
 800648a:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 800648c:	e7ee      	b.n	800646c <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800648e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006490:	069b      	lsls	r3, r3, #26
 8006492:	d503      	bpl.n	800649c <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006494:	2320      	movs	r3, #32
 8006496:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006498:	2406      	movs	r4, #6
 800649a:	e7e7      	b.n	800646c <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800649c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80064a0:	6383      	str	r3, [r0, #56]	; 0x38
 80064a2:	9b01      	ldr	r3, [sp, #4]
 80064a4:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80064a6:	606b      	str	r3, [r5, #4]
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80064ac:	602b      	str	r3, [r5, #0]
  return errorstate;
 80064ae:	e7dd      	b.n	800646c <SD_FindSCR+0xac>

080064b0 <HAL_SD_ReadBlocks_DMA>:
{
 80064b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b4:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 80064b6:	6806      	ldr	r6, [r0, #0]
{
 80064b8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80064ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 80064bc:	2f01      	cmp	r7, #1
{
 80064be:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 80064c6:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 80064c8:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 80064ca:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 80064cc:	bf88      	it	hi
 80064ce:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 80064d0:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 80064d2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80064d4:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 80064d8:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 80064da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 80064dc:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 80064de:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 80064e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 80064e4:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 80064e6:	4b2d      	ldr	r3, [pc, #180]	; (800659c <HAL_SD_ReadBlocks_DMA+0xec>)
 80064e8:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80064ea:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 80064ec:	4b2c      	ldr	r3, [pc, #176]	; (80065a0 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 80064ee:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 80064f0:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064f2:	2300      	movs	r3, #0
 80064f4:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	f023 0310 	bic.w	r3, r3, #16
 80064fc:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 80064fe:	fb05 f307 	mul.w	r3, r5, r7
 8006502:	460a      	mov	r2, r1
 8006504:	089b      	lsrs	r3, r3, #2
 8006506:	f106 0180 	add.w	r1, r6, #128	; 0x80
 800650a:	f7fe fcb9 	bl	8004e80 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800650e:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006510:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006512:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006514:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006518:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800651a:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 800651e:	bf04      	itt	eq
 8006520:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8006524:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006528:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800652c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800652e:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006530:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8006534:	bf08      	it	eq
 8006536:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800653a:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800653c:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800653e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006540:	f001 fb63 	bl	8007c0a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006544:	4631      	mov	r1, r6
 8006546:	4620      	mov	r0, r4
 8006548:	f7ff fec4 	bl	80062d4 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 800654c:	bb10      	cbnz	r0, 8006594 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800654e:	f04f 32ff 	mov.w	r2, #4294967295
 8006552:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006554:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006556:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006558:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800655a:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800655c:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800655e:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006560:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006562:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006564:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006566:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006568:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800656a:	f001 fb6d 	bl	8007c48 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 800656e:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006570:	bf8c      	ite	hi
 8006572:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006574:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006576:	a901      	add	r1, sp, #4
 8006578:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 800657a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 800657c:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006580:	f001 fb43 	bl	8007c0a <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006584:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006586:	bf8c      	ite	hi
 8006588:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 800658a:	2111      	movls	r1, #17
 800658c:	4620      	mov	r0, r4
 800658e:	f7ff fea1 	bl	80062d4 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8006592:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8006594:	b00d      	add	sp, #52	; 0x34
 8006596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800659a:	bf00      	nop
 800659c:	08006713 	.word	0x08006713
 80065a0:	0800672f 	.word	0x0800672f

080065a4 <HAL_SD_WriteBlocks_DMA>:
{
 80065a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a8:	b08c      	sub	sp, #48	; 0x30
 80065aa:	4617      	mov	r7, r2
 80065ac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 80065ae:	6802      	ldr	r2, [r0, #0]
{
 80065b0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 80065b4:	2e01      	cmp	r6, #1
{
 80065b6:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 80065be:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 80065c0:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 80065c2:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 80065c4:	bf8c      	ite	hi
 80065c6:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 80065c8:	2302      	movls	r3, #2
 80065ca:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 80065cc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 80065ce:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 80065d0:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 80065d4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 80065d6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 80065d8:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 80065da:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 80065de:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 80065e0:	4b2e      	ldr	r3, [pc, #184]	; (800669c <HAL_SD_WriteBlocks_DMA+0xf8>)
 80065e2:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065e4:	2310      	movs	r3, #16
 80065e6:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 80065e8:	f8de 3000 	ldr.w	r3, [lr]
 80065ec:	f043 0310 	orr.w	r3, r3, #16
 80065f0:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 80065f4:	fb08 f306 	mul.w	r3, r8, r6
 80065f8:	3280      	adds	r2, #128	; 0x80
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	f7fe fc40 	bl	8004e80 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006604:	f043 0308 	orr.w	r3, r3, #8
 8006608:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800660a:	6a23      	ldr	r3, [r4, #32]
 800660c:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800660e:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8006612:	bf08      	it	eq
 8006614:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006616:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006618:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 800661c:	bf04      	itt	eq
 800661e:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8006622:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006626:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006628:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800662a:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800662c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006630:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006632:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006634:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006638:	f001 fae7 	bl	8007c0a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800663c:	4629      	mov	r1, r5
 800663e:	4620      	mov	r0, r4
 8006640:	f7ff fe48 	bl	80062d4 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006644:	4605      	mov	r5, r0
 8006646:	bb18      	cbnz	r0, 8006690 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8006648:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 800664a:	bf94      	ite	ls
 800664c:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 800664e:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006650:	a901      	add	r1, sp, #4
 8006652:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006654:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006656:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006658:	f001 fad7 	bl	8007c0a <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 800665c:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 800665e:	bf8c      	ite	hi
 8006660:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006662:	2118      	movls	r1, #24
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff fe35 	bl	80062d4 <SD_CmdResp1Error>
 800666a:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 800666c:	b980      	cbnz	r0, 8006690 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800666e:	f04f 33ff 	mov.w	r3, #4294967295
 8006672:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006674:	2390      	movs	r3, #144	; 0x90
 8006676:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006678:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800667a:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800667c:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 800667e:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006682:	a906      	add	r1, sp, #24
 8006684:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006686:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006688:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800668a:	f001 fadd 	bl	8007c48 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 800668e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8006690:	4628      	mov	r0, r5
 8006692:	b00c      	add	sp, #48	; 0x30
 8006694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006698:	0800673d 	.word	0x0800673d
 800669c:	08006759 	.word	0x08006759

080066a0 <HAL_SD_XferCpltCallback>:
 80066a0:	4770      	bx	lr

080066a2 <HAL_SD_XferErrorCallback>:
 80066a2:	4770      	bx	lr

080066a4 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 80066a4:	6803      	ldr	r3, [r0, #0]
 80066a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a8:	05d2      	lsls	r2, r2, #23
{  
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 80066ae:	d510      	bpl.n	80066d2 <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 80066b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 80066b6:	2301      	movs	r3, #1
 80066b8:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 80066be:	f7ff ffef 	bl	80066a0 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80066c6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80066ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80066ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80066d0:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 80066d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d4:	0791      	lsls	r1, r2, #30
 80066d6:	d505      	bpl.n	80066e4 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066d8:	2202      	movs	r2, #2
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 80066dc:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 80066de:	f7ff ffe0 	bl	80066a2 <HAL_SD_XferErrorCallback>
 80066e2:	e7ee      	b.n	80066c2 <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 80066e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e6:	0712      	lsls	r2, r2, #28
 80066e8:	d504      	bpl.n	80066f4 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80066ea:	2208      	movs	r2, #8
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 80066ee:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 80066f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80066f2:	e7f4      	b.n	80066de <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 80066f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f6:	0691      	lsls	r1, r2, #26
 80066f8:	d503      	bpl.n	8006702 <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066fa:	2220      	movs	r2, #32
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 80066fe:	2306      	movs	r3, #6
 8006700:	e7f6      	b.n	80066f0 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8006702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006704:	06d2      	lsls	r2, r2, #27
 8006706:	d5dc      	bpl.n	80066c2 <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8006708:	2210      	movs	r2, #16
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 800670c:	2305      	movs	r3, #5
 800670e:	e7ef      	b.n	80066f0 <HAL_SD_IRQHandler+0x4c>

08006710 <HAL_SD_DMA_RxCpltCallback>:
 8006710:	4770      	bx	lr

08006712 <SD_DMA_RxCplt>:
{
 8006712:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006714:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006716:	2301      	movs	r3, #1
 8006718:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 800671a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0fc      	beq.n	800671a <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006720:	f7fe fbec 	bl	8004efc <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8006724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006726:	f7ff fff3 	bl	8006710 <HAL_SD_DMA_RxCpltCallback>
 800672a:	bd10      	pop	{r4, pc}

0800672c <HAL_SD_DMA_RxErrorCallback>:
 800672c:	4770      	bx	lr

0800672e <SD_DMA_RxError>:
{
 800672e:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8006730:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006732:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006734:	f7ff fffa 	bl	800672c <HAL_SD_DMA_RxErrorCallback>
 8006738:	bd08      	pop	{r3, pc}

0800673a <HAL_SD_DMA_TxCpltCallback>:
 800673a:	4770      	bx	lr

0800673c <SD_DMA_TxCplt>:
{
 800673c:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800673e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006740:	2301      	movs	r3, #1
 8006742:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006744:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0fc      	beq.n	8006744 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 800674a:	f7fe fbd7 	bl	8004efc <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 800674e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006750:	f7ff fff3 	bl	800673a <HAL_SD_DMA_TxCpltCallback>
 8006754:	bd10      	pop	{r4, pc}

08006756 <HAL_SD_DMA_TxErrorCallback>:
{
 8006756:	4770      	bx	lr

08006758 <SD_DMA_TxError>:
{
 8006758:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 800675a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800675c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800675e:	f7ff fffa 	bl	8006756 <HAL_SD_DMA_TxErrorCallback>
 8006762:	bd08      	pop	{r3, pc}

08006764 <HAL_SD_Get_CardInfo>:
{
 8006764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006768:	6a05      	ldr	r5, [r0, #32]
 800676a:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800676e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006770:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006774:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006776:	0f9a      	lsrs	r2, r3, #30
 8006778:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800677a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800677e:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006780:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006784:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8006786:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800678a:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800678c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006790:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006792:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006794:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8006796:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006798:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800679e:	88cb      	ldrh	r3, [r1, #6]
{
 80067a0:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f3c2 5003 	ubfx	r0, r2, #20, #4
 80067a8:	4303      	orrs	r3, r0
 80067aa:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80067ac:	f3c2 4303 	ubfx	r3, r2, #16, #4
 80067b0:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 80067b2:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80067b6:	09d8      	lsrs	r0, r3, #7
 80067b8:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80067ba:	f3c3 1080 	ubfx	r0, r3, #6, #1
 80067be:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80067c0:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80067c4:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80067c6:	f3c3 1000 	ubfx	r0, r3, #4, #1
 80067ca:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 80067cc:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 80067ce:	f04f 0000 	mov.w	r0, #0
 80067d2:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 80067d4:	f200 80dc 	bhi.w	8006990 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067de:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 80067e0:	690b      	ldr	r3, [r1, #16]
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 80067e8:	431a      	orrs	r2, r3
 80067ea:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80067ec:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80067ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80067f0:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80067f4:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80067f6:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80067fa:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80067fc:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8006800:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006802:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8006806:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006808:	f3c2 4382 	ubfx	r3, r2, #18, #3
 800680c:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 800680e:	0bd3      	lsrs	r3, r2, #15
 8006810:	f003 0306 	and.w	r3, r3, #6
 8006814:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8006816:	7e0d      	ldrb	r5, [r1, #24]
 8006818:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800681c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006820:	432a      	orrs	r2, r5
 8006822:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006824:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006826:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006828:	7a0a      	ldrb	r2, [r1, #8]
 800682a:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 800682c:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 800682e:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006832:	40be      	lsls	r6, r7
 8006834:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006838:	fba6 6702 	umull	r6, r7, r6, r2
 800683c:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006840:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006842:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006844:	fba6 8902 	umull	r8, r9, r6, r2
 8006848:	fb02 9907 	mla	r9, r2, r7, r9
 800684c:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006850:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800685a:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 800685c:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800685e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006860:	7e8a      	ldrb	r2, [r1, #26]
 8006862:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8006866:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800686c:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800686e:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8006870:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006872:	0fda      	lsrs	r2, r3, #31
 8006874:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8006876:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800687a:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800687c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006880:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006882:	0d9a      	lsrs	r2, r3, #22
 8006884:	f002 020c 	and.w	r2, r2, #12
 8006888:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800688a:	7fca      	ldrb	r2, [r1, #31]
 800688c:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8006890:	432a      	orrs	r2, r5
 8006892:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006894:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006898:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800689c:	2200      	movs	r2, #0
 800689e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80068a2:	f3c3 4200 	ubfx	r2, r3, #16, #1
 80068a6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80068aa:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80068ae:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 80068b2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80068b6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 80068ba:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80068be:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 80068c2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80068c6:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 80068ca:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80068ce:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 80068d2:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80068d4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80068d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80068dc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80068e0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 80068e4:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 80068e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068ea:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80068ec:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 80068f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80068f4:	0212      	lsls	r2, r2, #8
 80068f6:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80068f8:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80068fa:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80068fe:	b292      	uxth	r2, r2
 8006900:	4332      	orrs	r2, r6
 8006902:	061b      	lsls	r3, r3, #24
 8006904:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8006906:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800690a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 800690c:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800690e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006912:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8006914:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006916:	0a1a      	lsrs	r2, r3, #8
 8006918:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800691c:	4332      	orrs	r2, r6
 800691e:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8006920:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006922:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006926:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 8006928:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800692a:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 800692c:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 8006930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006932:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8006934:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8006938:	0c1a      	lsrs	r2, r3, #16
 800693a:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 800693c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800693e:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006940:	021a      	lsls	r2, r3, #8
 8006942:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8006946:	4332      	orrs	r2, r6
 8006948:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800694a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8006954:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8006956:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8006958:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800695c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800695e:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8006962:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8006966:	4322      	orrs	r2, r4
 8006968:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800696c:	0a1a      	lsrs	r2, r3, #8
 800696e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006972:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006974:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8006976:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800697a:	b292      	uxth	r2, r2
 800697c:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800697e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006982:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8006984:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8006988:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 800698c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006990:	2d02      	cmp	r5, #2
 8006992:	d11f      	bne.n	80069d4 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8006994:	0412      	lsls	r2, r2, #16
 8006996:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800699a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 800699c:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800699e:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80069a0:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 80069a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80069a6:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 80069a8:	690d      	ldr	r5, [r1, #16]
 80069aa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80069ae:	432a      	orrs	r2, r5
 80069b0:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 80069b2:	690e      	ldr	r6, [r1, #16]
 80069b4:	2700      	movs	r7, #0
 80069b6:	3601      	adds	r6, #1
 80069b8:	f147 0700 	adc.w	r7, r7, #0
 80069bc:	04fa      	lsls	r2, r7, #19
 80069be:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 80069c2:	64ca      	str	r2, [r1, #76]	; 0x4c
 80069c4:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 80069c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 80069ce:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 80069d0:	650a      	str	r2, [r1, #80]	; 0x50
 80069d2:	e73d      	b.n	8006850 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 80069d4:	2029      	movs	r0, #41	; 0x29
 80069d6:	e73b      	b.n	8006850 <HAL_SD_Get_CardInfo+0xec>

080069d8 <HAL_SD_Init>:
{ 
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80069de:	2500      	movs	r5, #0
{ 
 80069e0:	4604      	mov	r4, r0
 80069e2:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80069e4:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 80069e8:	f004 fe86 	bl	800b6f8 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80069ec:	2376      	movs	r3, #118	; 0x76
 80069ee:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 80069f0:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80069f2:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 80069f4:	ab10      	add	r3, sp, #64	; 0x40
 80069f6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80069fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80069fe:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006a00:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006a02:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 8006a04:	ab0a      	add	r3, sp, #40	; 0x28
 8006a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	f001 f8d7 	bl	8007bbc <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8006a0e:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 8006a10:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8006a14:	6843      	ldr	r3, [r0, #4]
 8006a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a1a:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8006a1c:	f001 f8ed 	bl	8007bfa <SDMMC_PowerState_ON>
  HAL_Delay(1);
 8006a20:	2001      	movs	r0, #1
 8006a22:	f7fe f8eb 	bl	8004bfc <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	6843      	ldr	r3, [r0, #4]
 8006a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2e:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a30:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 8006a38:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8006a3a:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 8006a3c:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a3e:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a40:	f001 f8e3 	bl	8007c0a <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8006a50:	b123      	cbz	r3, 8006a5c <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a52:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006a56:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e005      	b.n	8006a68 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006a5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 8006a5e:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006a60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8006a64:	d1f4      	bne.n	8006a50 <HAL_SD_Init+0x78>
    return errorstate;
 8006a66:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 8006a68:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8006a6c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a70:	b18b      	cbz	r3, 8006a96 <HAL_SD_Init+0xbe>
  return errorstate;
 8006a72:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a76:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8006a78:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8006a7c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006a80:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80b1 	beq.w	8006bec <HAL_SD_Init+0x214>
  return errorstate;
 8006a8a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8006a8e:	b2c0      	uxtb	r0, r0
}
 8006a90:	b011      	add	sp, #68	; 0x44
 8006a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8006a96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a9a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aa0:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aa6:	f001 f8b0 	bl	8007c0a <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8006aaa:	6820      	ldr	r0, [r4, #0]
 8006aac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006aae:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8006ab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 8006abc:	b90b      	cbnz	r3, 8006ac2 <HAL_SD_Init+0xea>
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d17c      	bne.n	8006bbc <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8006ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8006ac4:	b112      	cbz	r2, 8006acc <HAL_SD_Init+0xf4>
 8006ac6:	f013 0304 	ands.w	r3, r3, #4
 8006aca:	d07f      	beq.n	8006bcc <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006acc:	2304      	movs	r3, #4
 8006ace:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006ad0:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8006ad2:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 8006ad6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8006ada:	2300      	movs	r3, #0
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d17c      	bne.n	8006bda <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8006ae4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006ae8:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aea:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 8006aec:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006aee:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006af0:	f001 f88b 	bl	8007c0a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006af4:	4629      	mov	r1, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff fbec 	bl	80062d4 <SD_CmdResp1Error>
 8006afc:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 8006b00:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006b04:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1b2      	bne.n	8006a72 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006b0c:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 8006b10:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006b12:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006b16:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b1a:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006b1c:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006b20:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b24:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 8006b26:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006b2a:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006b2e:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b32:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006b36:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b3a:	f001 f866 	bl	8007c0a <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006b3e:	4659      	mov	r1, fp
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff fbc7 	bl	80062d4 <SD_CmdResp1Error>
 8006b46:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 8006b4a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006b4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d18d      	bne.n	8006a72 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8006b56:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b58:	a905      	add	r1, sp, #20
 8006b5a:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006b5c:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8006b5e:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006b60:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b64:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006b66:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b6a:	f001 f84e 	bl	8007c0a <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b72:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006b76:	d0fb      	beq.n	8006b70 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006b78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b7a:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006b7e:	bf1b      	ittet	ne
 8006b80:	2304      	movne	r3, #4
 8006b82:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b84:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 8006b88:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b8a:	bf08      	it	eq
 8006b8c:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 8006b8e:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 8006b92:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006b96:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f47f af69 	bne.w	8006a72 <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ba0:	f001 f848 	bl	8007c34 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006ba4:	2800      	cmp	r0, #0
      count++;
 8006ba6:	f105 0501 	add.w	r5, r5, #1
 8006baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006bae:	db16      	blt.n	8006bde <HAL_SD_Init+0x206>
 8006bb0:	429d      	cmp	r5, r3
 8006bb2:	d1b0      	bne.n	8006b16 <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 8006bb4:	231b      	movs	r3, #27
 8006bb6:	f88d 3013 	strb.w	r3, [sp, #19]
 8006bba:	e75a      	b.n	8006a72 <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8006bbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006bbe:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
    timeout--;
 8006bc8:	3a01      	subs	r2, #1
 8006bca:	e777      	b.n	8006abc <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 8006bcc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006bce:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8006bd0:	bf46      	itte	mi
 8006bd2:	2240      	movmi	r2, #64	; 0x40
 8006bd4:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 8006bd6:	2329      	movpl	r3, #41	; 0x29
 8006bd8:	e77b      	b.n	8006ad2 <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 8006bda:	461f      	mov	r7, r3
 8006bdc:	e784      	b.n	8006ae8 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 8006bde:	429d      	cmp	r5, r3
 8006be0:	d0e8      	beq.n	8006bb4 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006be2:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8006be4:	bf44      	itt	mi
 8006be6:	2302      	movmi	r3, #2
 8006be8:	6223      	strmi	r3, [r4, #32]
 8006bea:	e742      	b.n	8006a72 <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	f001 f808 	bl	8007c02 <SDMMC_GetPowerState>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f000 80c2 	beq.w	8006d7c <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006bf8:	6a23      	ldr	r3, [r4, #32]
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d026      	beq.n	8006c4c <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006c02:	23c0      	movs	r3, #192	; 0xc0
 8006c04:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c06:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c0c:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 8006c0e:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c10:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c12:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c14:	f000 fff9 	bl	8007c0a <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7ff fb45 	bl	80062a8 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006c1e:	4605      	mov	r5, r0
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d155      	bne.n	8006cd0 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c24:	4601      	mov	r1, r0
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	f001 f804 	bl	8007c34 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c2c:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c2e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	f000 ffff 	bl	8007c34 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c36:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c38:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	f000 fffa 	bl	8007c34 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c40:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c42:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	f000 fff5 	bl	8007c34 <SDMMC_GetResponse>
 8006c4a:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006c4c:	6a23      	ldr	r3, [r4, #32]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d92b      	bls.n	8006caa <HAL_SD_Init+0x2d2>
 8006c52:	2b06      	cmp	r3, #6
 8006c54:	d029      	beq.n	8006caa <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 8006c56:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006c58:	6a23      	ldr	r3, [r4, #32]
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	f000 8092 	beq.w	8006d84 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 8006c60:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006c62:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006c64:	0400      	lsls	r0, r0, #16
 8006c66:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006c68:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c6a:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006c6c:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c6e:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006c70:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c72:	f000 ffca 	bl	8007c0a <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7ff fb16 	bl	80062a8 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	bb38      	cbnz	r0, 8006cd0 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c80:	4601      	mov	r1, r0
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	f000 ffd6 	bl	8007c34 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c88:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c8a:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	f000 ffd1 	bl	8007c34 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c92:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c94:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	f000 ffcc 	bl	8007c34 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c9c:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c9e:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ca0:	6820      	ldr	r0, [r4, #0]
 8006ca2:	f000 ffc7 	bl	8007c34 <SDMMC_GetResponse>
 8006ca6:	6360      	str	r0, [r4, #52]	; 0x34
 8006ca8:	e012      	b.n	8006cd0 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 8006caa:	2303      	movs	r3, #3
 8006cac:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cae:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cb0:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cb2:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cb4:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cb6:	f000 ffa8 	bl	8007c0a <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cbe:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006cc2:	d0fb      	beq.n	8006cbc <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006cc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cc6:	075d      	lsls	r5, r3, #29
 8006cc8:	d536      	bpl.n	8006d38 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006cca:	2304      	movs	r3, #4
 8006ccc:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006cce:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 8006cd0:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8006cd4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f aed6 	bne.w	8006a8a <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7ff fd3f 	bl	8006764 <HAL_SD_Get_CardInfo>
 8006ce6:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 8006cea:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006cee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006cf2:	b9ab      	cbnz	r3, 8006d20 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006cf4:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cf8:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cfa:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006cfc:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 8006cfe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d00:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8006d02:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d04:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d06:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0c:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8006d0e:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d10:	f000 ff7b 	bl	8007c0a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8006d14:	4629      	mov	r1, r5
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff fadc 	bl	80062d4 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006d1c:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 8006d20:	f104 0310 	add.w	r3, r4, #16
 8006d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006d2c:	1d23      	adds	r3, r4, #4
 8006d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	f000 ff43 	bl	8007bbc <SDMMC_Init>
 8006d36:	e6a8      	b.n	8006a8a <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006d38:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006d3a:	f015 0501 	ands.w	r5, r5, #1
 8006d3e:	d002      	beq.n	8006d46 <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006d40:	2501      	movs	r5, #1
 8006d42:	6385      	str	r5, [r0, #56]	; 0x38
 8006d44:	e7c4      	b.n	8006cd0 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006d46:	f000 ff72 	bl	8007c2e <SDMMC_GetCommandResponse>
 8006d4a:	2803      	cmp	r0, #3
 8006d4c:	d001      	beq.n	8006d52 <HAL_SD_Init+0x37a>
    return errorstate;
 8006d4e:	2510      	movs	r5, #16
 8006d50:	e7be      	b.n	8006cd0 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d52:	6820      	ldr	r0, [r4, #0]
 8006d54:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006d58:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	f000 ff6a 	bl	8007c34 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8006d60:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8006d64:	d101      	bne.n	8006d6a <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006d66:	0c00      	lsrs	r0, r0, #16
 8006d68:	e776      	b.n	8006c58 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8006d6a:	0481      	lsls	r1, r0, #18
 8006d6c:	d408      	bmi.n	8006d80 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8006d6e:	0442      	lsls	r2, r0, #17
 8006d70:	d4ed      	bmi.n	8006d4e <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8006d72:	0403      	lsls	r3, r0, #16
 8006d74:	f57f af6f 	bpl.w	8006c56 <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 8006d78:	250f      	movs	r5, #15
 8006d7a:	e7a9      	b.n	8006cd0 <HAL_SD_Init+0x2f8>
    return errorstate;
 8006d7c:	2525      	movs	r5, #37	; 0x25
 8006d7e:	e7a7      	b.n	8006cd0 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006d80:	2513      	movs	r5, #19
 8006d82:	e7a5      	b.n	8006cd0 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006d84:	2500      	movs	r5, #0
 8006d86:	e7a3      	b.n	8006cd0 <HAL_SD_Init+0x2f8>

08006d88 <HAL_SD_WideBusOperation_Config>:
{
 8006d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006d8a:	6a03      	ldr	r3, [r0, #32]
 8006d8c:	2b03      	cmp	r3, #3
{
 8006d8e:	b08d      	sub	sp, #52	; 0x34
 8006d90:	4605      	mov	r5, r0
 8006d92:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006d94:	f000 8088 	beq.w	8006ea8 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	f200 8083 	bhi.w	8006ea4 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006d9e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006da2:	f000 8081 	beq.w	8006ea8 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006da6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006daa:	d14c      	bne.n	8006e46 <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 8006dac:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006dae:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006db0:	9104      	str	r1, [sp, #16]
 8006db2:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006db4:	f000 ff3e 	bl	8007c34 <SDMMC_GetResponse>
 8006db8:	0180      	lsls	r0, r0, #6
 8006dba:	d46d      	bmi.n	8006e98 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8006dbc:	a904      	add	r1, sp, #16
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7ff fafe 	bl	80063c0 <SD_FindSCR>
  if(errorstate != SD_OK)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d167      	bne.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	0359      	lsls	r1, r3, #13
 8006dce:	d567      	bpl.n	8006ea0 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006dd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dd2:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006dd8:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006dda:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ddc:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006dde:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006de4:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006de6:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006de8:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006dea:	f000 ff0e 	bl	8007c0a <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006dee:	4639      	mov	r1, r7
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff fa6f 	bl	80062d4 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006df6:	4604      	mov	r4, r0
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d14e      	bne.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006e00:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e02:	a906      	add	r1, sp, #24
 8006e04:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006e06:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e08:	f000 feff 	bl	8007c0a <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f7ff fa60 	bl	80062d4 <SD_CmdResp1Error>
 8006e14:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d13f      	bne.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8006e1a:	686b      	ldr	r3, [r5, #4]
 8006e1c:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8006e1e:	68ab      	ldr	r3, [r5, #8]
 8006e20:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e22:	68eb      	ldr	r3, [r5, #12]
 8006e24:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e26:	696b      	ldr	r3, [r5, #20]
 8006e28:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8006e2a:	69ab      	ldr	r3, [r5, #24]
 8006e2c:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 8006e2e:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 8006e30:	ab0c      	add	r3, sp, #48	; 0x30
 8006e32:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006e36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006e3a:	ab06      	add	r3, sp, #24
 8006e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e3e:	6828      	ldr	r0, [r5, #0]
 8006e40:	f000 febc 	bl	8007bbc <SDMMC_Init>
 8006e44:	e029      	b.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006e46:	2900      	cmp	r1, #0
 8006e48:	d130      	bne.n	8006eac <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006e4a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006e4c:	9104      	str	r1, [sp, #16]
 8006e4e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006e50:	f000 fef0 	bl	8007c34 <SDMMC_GetResponse>
 8006e54:	0182      	lsls	r2, r0, #6
 8006e56:	d41f      	bmi.n	8006e98 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8006e58:	a904      	add	r1, sp, #16
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7ff fab0 	bl	80063c0 <SD_FindSCR>
  if(errorstate != SD_OK)
 8006e60:	4604      	mov	r4, r0
 8006e62:	b9d0      	cbnz	r0, 8006e9a <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	03db      	lsls	r3, r3, #15
 8006e68:	d51a      	bpl.n	8006ea0 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e6c:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006e6e:	041b      	lsls	r3, r3, #16
 8006e70:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006e72:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006e74:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006e76:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e78:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e7e:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006e80:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006e82:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e84:	f000 fec1 	bl	8007c0a <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f7ff fa22 	bl	80062d4 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006e90:	4604      	mov	r4, r0
 8006e92:	b910      	cbnz	r0, 8006e9a <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 8006e94:	9006      	str	r0, [sp, #24]
 8006e96:	e7b3      	b.n	8006e00 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 8006e98:	240e      	movs	r4, #14
}
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	b00d      	add	sp, #52	; 0x34
 8006e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 8006ea0:	2425      	movs	r4, #37	; 0x25
 8006ea2:	e7fa      	b.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	e7f8      	b.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 8006ea8:	2427      	movs	r4, #39	; 0x27
 8006eaa:	e7f6      	b.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 8006eac:	2426      	movs	r4, #38	; 0x26
 8006eae:	e7f4      	b.n	8006e9a <HAL_SD_WideBusOperation_Config+0x112>

08006eb0 <HAL_SD_StopTransfer>:
{
 8006eb0:	b530      	push	{r4, r5, lr}
 8006eb2:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 8006eb4:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006eb6:	2240      	movs	r2, #64	; 0x40
{
 8006eb8:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 8006eba:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006ebc:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ebe:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ec0:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ec6:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ec8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006eca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006ecc:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ece:	f000 fe9c 	bl	8007c0a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff f9fd 	bl	80062d4 <SD_CmdResp1Error>
}
 8006eda:	b007      	add	sp, #28
 8006edc:	bd30      	pop	{r4, r5, pc}

08006ede <HAL_SD_CheckReadOperation>:
{
 8006ede:	b538      	push	{r3, r4, r5, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006ee4:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006ee6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006ee8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8006eea:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006eec:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006eee:	4208      	tst	r0, r1
 8006ef0:	d100      	bne.n	8006ef4 <HAL_SD_CheckReadOperation+0x16>
 8006ef2:	b1b3      	cbz	r3, 8006f22 <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef8:	0492      	lsls	r2, r2, #18
 8006efa:	d500      	bpl.n	8006efe <HAL_SD_CheckReadOperation+0x20>
 8006efc:	b9cd      	cbnz	r5, 8006f32 <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 8006efe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d118      	bne.n	8006f36 <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff ffd3 	bl	8006eb0 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006f0a:	b90d      	cbnz	r5, 8006f10 <HAL_SD_CheckReadOperation+0x32>
 8006f0c:	b900      	cbnz	r0, 8006f10 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 8006f0e:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006f18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006f1a:	b183      	cbz	r3, 8006f3e <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8006f1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f1e:	b2c0      	uxtb	r0, r0
 8006f20:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	d0e6      	beq.n	8006ef4 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006f26:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006f28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8006f2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8006f2c:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	e7dd      	b.n	8006eee <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 8006f32:	3d01      	subs	r5, #1
 8006f34:	e7df      	b.n	8006ef6 <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	d0e9      	beq.n	8006f0e <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e7e8      	b.n	8006f10 <HAL_SD_CheckReadOperation+0x32>
}
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}

08006f40 <HAL_SD_GetStatus>:
{
 8006f40:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006f42:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006f44:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006f4a:	2340      	movs	r3, #64	; 0x40
 8006f4c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f4e:	2300      	movs	r3, #0
{
 8006f50:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006f52:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f54:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f56:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f5c:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f5e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006f60:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f62:	f000 fe52 	bl	8007c0a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8006f66:	4629      	mov	r1, r5
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff f9b3 	bl	80062d4 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	b948      	cbnz	r0, 8006f86 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	f000 fe5e 	bl	8007c34 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8006f78:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8006f7c:	3804      	subs	r0, #4
 8006f7e:	bf18      	it	ne
 8006f80:	2001      	movne	r0, #1
}
 8006f82:	b007      	add	sp, #28
 8006f84:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8006f86:	2002      	movs	r0, #2
 8006f88:	e7fb      	b.n	8006f82 <HAL_SD_GetStatus+0x42>

08006f8a <HAL_SD_CheckWriteOperation>:
{
 8006f8a:	b570      	push	{r4, r5, r6, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006f90:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006f92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006f94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8006f96:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006f98:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006f9a:	4208      	tst	r0, r1
 8006f9c:	d100      	bne.n	8006fa0 <HAL_SD_CheckWriteOperation+0x16>
 8006f9e:	b1c3      	cbz	r3, 8006fd2 <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa4:	04d2      	lsls	r2, r2, #19
 8006fa6:	d500      	bpl.n	8006faa <HAL_SD_CheckWriteOperation+0x20>
 8006fa8:	b9de      	cbnz	r6, 8006fe2 <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8006faa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d120      	bne.n	8006ff2 <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7ff ff7d 	bl	8006eb0 <HAL_SD_StopTransfer>
 8006fb6:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 8006fb8:	b90e      	cbnz	r6, 8006fbe <HAL_SD_CheckWriteOperation+0x34>
 8006fba:	b900      	cbnz	r0, 8006fbe <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 8006fbc:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006fc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006fc8:	b16b      	cbz	r3, 8006fe6 <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8006fca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006fcc:	b2ed      	uxtb	r5, r5
}
 8006fce:	4628      	mov	r0, r5
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006fd2:	2a00      	cmp	r2, #0
 8006fd4:	d0e4      	beq.n	8006fa0 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006fd6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006fd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006fda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8006fdc:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	e7db      	b.n	8006f9a <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 8006fe2:	3e01      	subs	r6, #1
 8006fe4:	e7dd      	b.n	8006fa2 <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7ff ffaa 	bl	8006f40 <HAL_SD_GetStatus>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d1fa      	bne.n	8006fe6 <HAL_SD_CheckWriteOperation+0x5c>
 8006ff0:	e7ed      	b.n	8006fce <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	d0e2      	beq.n	8006fbc <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	e7e1      	b.n	8006fbe <HAL_SD_CheckWriteOperation+0x34>

08006ffa <HAL_TIM_Base_MspInit>:
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ffc:	6803      	ldr	r3, [r0, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800700e:	2000      	movs	r0, #0
 8007010:	4770      	bx	lr
	...

08007014 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007014:	4a2e      	ldr	r2, [pc, #184]	; (80070d0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8007016:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007018:	4290      	cmp	r0, r2
 800701a:	d012      	beq.n	8007042 <TIM_Base_SetConfig+0x2e>
 800701c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007020:	d00f      	beq.n	8007042 <TIM_Base_SetConfig+0x2e>
 8007022:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007026:	4290      	cmp	r0, r2
 8007028:	d00b      	beq.n	8007042 <TIM_Base_SetConfig+0x2e>
 800702a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800702e:	4290      	cmp	r0, r2
 8007030:	d007      	beq.n	8007042 <TIM_Base_SetConfig+0x2e>
 8007032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007036:	4290      	cmp	r0, r2
 8007038:	d003      	beq.n	8007042 <TIM_Base_SetConfig+0x2e>
 800703a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800703e:	4290      	cmp	r0, r2
 8007040:	d119      	bne.n	8007076 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007042:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007048:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704a:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <TIM_Base_SetConfig+0xbc>)
 800704c:	4290      	cmp	r0, r2
 800704e:	d01d      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 8007050:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007054:	d01a      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 8007056:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800705a:	4290      	cmp	r0, r2
 800705c:	d016      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 800705e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007062:	4290      	cmp	r0, r2
 8007064:	d012      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 8007066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800706a:	4290      	cmp	r0, r2
 800706c:	d00e      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 800706e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007072:	4290      	cmp	r0, r2
 8007074:	d00a      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 8007076:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <TIM_Base_SetConfig+0xc0>)
 8007078:	4290      	cmp	r0, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 800707c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007080:	4290      	cmp	r0, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0x78>
 8007084:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007088:	4290      	cmp	r0, r2
 800708a:	d103      	bne.n	8007094 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800708e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007092:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8007094:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007096:	688b      	ldr	r3, [r1, #8]
 8007098:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800709a:	680b      	ldr	r3, [r1, #0]
 800709c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <TIM_Base_SetConfig+0xbc>)
 80070a0:	4298      	cmp	r0, r3
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0xb0>
 80070a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a8:	4298      	cmp	r0, r3
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0xb0>
 80070ac:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80070b0:	4298      	cmp	r0, r3
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0xb0>
 80070b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b8:	4298      	cmp	r0, r3
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0xb0>
 80070bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c0:	4298      	cmp	r0, r3
 80070c2:	d101      	bne.n	80070c8 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c4:	690b      	ldr	r3, [r1, #16]
 80070c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c8:	2301      	movs	r3, #1
 80070ca:	6143      	str	r3, [r0, #20]
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40014000 	.word	0x40014000

080070d8 <HAL_TIM_Base_Init>:
{
 80070d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80070da:	4604      	mov	r4, r0
 80070dc:	b1a0      	cbz	r0, 8007108 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80070de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80070e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070e6:	b91b      	cbnz	r3, 80070f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80070e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80070ec:	f7ff ff85 	bl	8006ffa <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80070f0:	2302      	movs	r3, #2
 80070f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	1d21      	adds	r1, r4, #4
 80070fa:	f7ff ff8b 	bl	8007014 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80070fe:	2301      	movs	r3, #1
 8007100:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8007104:	2000      	movs	r0, #0
 8007106:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007108:	2001      	movs	r0, #1
}
 800710a:	bd10      	pop	{r4, pc}

0800710c <HAL_UART_MspInit>:
 800710c:	4770      	bx	lr

0800710e <HAL_UART_MspDeInit>:
 800710e:	4770      	bx	lr

08007110 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007110:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007112:	4605      	mov	r5, r0
 8007114:	b1a0      	cbz	r0, 8007140 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 8007116:	2302      	movs	r3, #2
 8007118:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800711c:	6803      	ldr	r3, [r0, #0]
 800711e:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8007120:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8007128:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 800712a:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 800712c:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800712e:	f7ff ffee 	bl	800710e <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007132:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007134:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8007138:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 800713c:	4620      	mov	r0, r4
 800713e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007140:	2001      	movs	r0, #1
}
 8007142:	bd38      	pop	{r3, r4, r5, pc}

08007144 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8007144:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007148:	2b01      	cmp	r3, #1
 800714a:	d003      	beq.n	8007154 <HAL_UART_Receive_IT+0x10>
 800714c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007150:	2b12      	cmp	r3, #18
 8007152:	d147      	bne.n	80071e4 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8007154:	2900      	cmp	r1, #0
 8007156:	d043      	beq.n	80071e0 <HAL_UART_Receive_IT+0x9c>
 8007158:	2a00      	cmp	r2, #0
 800715a:	d041      	beq.n	80071e0 <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800715c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8007160:	2b01      	cmp	r3, #1
 8007162:	d03f      	beq.n	80071e4 <HAL_UART_Receive_IT+0xa0>
 8007164:	2301      	movs	r3, #1
 8007166:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800716a:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 800716c:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8007172:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8007176:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800717a:	d123      	bne.n	80071c4 <HAL_UART_Receive_IT+0x80>
 800717c:	6903      	ldr	r3, [r0, #16]
 800717e:	b9fb      	cbnz	r3, 80071c0 <HAL_UART_Receive_IT+0x7c>
 8007180:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007184:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007188:	2300      	movs	r3, #0
 800718a:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800718c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007190:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8007192:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8007194:	bf0c      	ite	eq
 8007196:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8007198:	2322      	movne	r3, #34	; 0x22
 800719a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071a6:	6893      	ldr	r3, [r2, #8]
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071ae:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 80071b0:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071b2:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 80071b6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071ba:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 80071bc:	4618      	mov	r0, r3
 80071be:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80071c0:	23ff      	movs	r3, #255	; 0xff
 80071c2:	e7df      	b.n	8007184 <HAL_UART_Receive_IT+0x40>
 80071c4:	b923      	cbnz	r3, 80071d0 <HAL_UART_Receive_IT+0x8c>
 80071c6:	6903      	ldr	r3, [r0, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f9      	beq.n	80071c0 <HAL_UART_Receive_IT+0x7c>
 80071cc:	237f      	movs	r3, #127	; 0x7f
 80071ce:	e7d9      	b.n	8007184 <HAL_UART_Receive_IT+0x40>
 80071d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d4:	d1d8      	bne.n	8007188 <HAL_UART_Receive_IT+0x44>
 80071d6:	6903      	ldr	r3, [r0, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f7      	beq.n	80071cc <HAL_UART_Receive_IT+0x88>
 80071dc:	233f      	movs	r3, #63	; 0x3f
 80071de:	e7d1      	b.n	8007184 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 80071e0:	2001      	movs	r0, #1
 80071e2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80071e4:	2002      	movs	r0, #2
  }
}
 80071e6:	4770      	bx	lr

080071e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80071ec:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ee:	6921      	ldr	r1, [r4, #16]
 80071f0:	68a3      	ldr	r3, [r4, #8]
 80071f2:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80071f4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071f6:	430b      	orrs	r3, r1
 80071f8:	6961      	ldr	r1, [r4, #20]
 80071fa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80071fc:	49b0      	ldr	r1, [pc, #704]	; (80074c0 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071fe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007200:	4001      	ands	r1, r0
 8007202:	430b      	orrs	r3, r1
 8007204:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007206:	686b      	ldr	r3, [r5, #4]
 8007208:	68e1      	ldr	r1, [r4, #12]
 800720a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800720e:	430b      	orrs	r3, r1
 8007210:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007212:	4bac      	ldr	r3, [pc, #688]	; (80074c4 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007214:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007216:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007218:	bf1c      	itt	ne
 800721a:	6a23      	ldrne	r3, [r4, #32]
 800721c:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800721e:	68ab      	ldr	r3, [r5, #8]
 8007220:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007224:	430b      	orrs	r3, r1
 8007226:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007228:	4ba7      	ldr	r3, [pc, #668]	; (80074c8 <UART_SetConfig+0x2e0>)
 800722a:	429d      	cmp	r5, r3
 800722c:	d118      	bne.n	8007260 <UART_SetConfig+0x78>
 800722e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007232:	49a6      	ldr	r1, [pc, #664]	; (80074cc <UART_SetConfig+0x2e4>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800723c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007240:	5ccb      	ldrb	r3, [r1, r3]
 8007242:	f040 80c6 	bne.w	80073d2 <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8007246:	2b08      	cmp	r3, #8
 8007248:	d828      	bhi.n	800729c <UART_SetConfig+0xb4>
 800724a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800724e:	011a      	.short	0x011a
 8007250:	012f00bf 	.word	0x012f00bf
 8007254:	01140027 	.word	0x01140027
 8007258:	00270027 	.word	0x00270027
 800725c:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007260:	4b9b      	ldr	r3, [pc, #620]	; (80074d0 <UART_SetConfig+0x2e8>)
 8007262:	429d      	cmp	r5, r3
 8007264:	d107      	bne.n	8007276 <UART_SetConfig+0x8e>
 8007266:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800726a:	499a      	ldr	r1, [pc, #616]	; (80074d4 <UART_SetConfig+0x2ec>)
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007270:	f003 030c 	and.w	r3, r3, #12
 8007274:	e7e2      	b.n	800723c <UART_SetConfig+0x54>
 8007276:	4b98      	ldr	r3, [pc, #608]	; (80074d8 <UART_SetConfig+0x2f0>)
 8007278:	429d      	cmp	r5, r3
 800727a:	d120      	bne.n	80072be <UART_SetConfig+0xd6>
 800727c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007288:	2b10      	cmp	r3, #16
 800728a:	f000 80f1 	beq.w	8007470 <UART_SetConfig+0x288>
 800728e:	d808      	bhi.n	80072a2 <UART_SetConfig+0xba>
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80f3 	beq.w	800747c <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007296:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800729a:	d134      	bne.n	8007306 <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800729c:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 800729e:	2300      	movs	r3, #0
 80072a0:	e0f9      	b.n	8007496 <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	f000 80ff 	beq.w	80074a6 <UART_SetConfig+0x2be>
 80072a8:	2b30      	cmp	r3, #48	; 0x30
 80072aa:	d1f4      	bne.n	8007296 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80072b0:	f040 80c1 	bne.w	8007436 <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80072b4:	6860      	ldr	r0, [r4, #4]
 80072b6:	0843      	lsrs	r3, r0, #1
 80072b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80072bc:	e0fc      	b.n	80074b8 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072be:	4b87      	ldr	r3, [pc, #540]	; (80074dc <UART_SetConfig+0x2f4>)
 80072c0:	429d      	cmp	r5, r3
 80072c2:	d122      	bne.n	800730a <UART_SetConfig+0x122>
 80072c4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	f000 80c0 	beq.w	8007456 <UART_SetConfig+0x26e>
 80072d6:	d806      	bhi.n	80072e6 <UART_SetConfig+0xfe>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 80b1 	beq.w	8007440 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 80072de:	4b79      	ldr	r3, [pc, #484]	; (80074c4 <UART_SetConfig+0x2dc>)
 80072e0:	429d      	cmp	r5, r3
 80072e2:	d1d8      	bne.n	8007296 <UART_SetConfig+0xae>
 80072e4:	e00f      	b.n	8007306 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072e6:	2b80      	cmp	r3, #128	; 0x80
 80072e8:	f000 80bc 	beq.w	8007464 <UART_SetConfig+0x27c>
 80072ec:	2bc0      	cmp	r3, #192	; 0xc0
 80072ee:	d1f6      	bne.n	80072de <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 80072f0:	4b74      	ldr	r3, [pc, #464]	; (80074c4 <UART_SetConfig+0x2dc>)
 80072f2:	429d      	cmp	r5, r3
 80072f4:	d1da      	bne.n	80072ac <UART_SetConfig+0xc4>
 80072f6:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 80072f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80072fc:	6862      	ldr	r2, [r4, #4]
 80072fe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8007302:	4281      	cmp	r1, r0
 8007304:	d92b      	bls.n	800735e <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007306:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8007308:	e04b      	b.n	80073a2 <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800730a:	4b75      	ldr	r3, [pc, #468]	; (80074e0 <UART_SetConfig+0x2f8>)
 800730c:	429d      	cmp	r5, r3
 800730e:	d111      	bne.n	8007334 <UART_SetConfig+0x14c>
 8007310:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007320:	f000 8099 	beq.w	8007456 <UART_SetConfig+0x26e>
 8007324:	d9d8      	bls.n	80072d8 <UART_SetConfig+0xf0>
 8007326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800732a:	f000 809b 	beq.w	8007464 <UART_SetConfig+0x27c>
 800732e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007332:	e7dc      	b.n	80072ee <UART_SetConfig+0x106>
 8007334:	4b63      	ldr	r3, [pc, #396]	; (80074c4 <UART_SetConfig+0x2dc>)
 8007336:	429d      	cmp	r5, r3
 8007338:	d1ad      	bne.n	8007296 <UART_SetConfig+0xae>
 800733a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734a:	f000 8084 	beq.w	8007456 <UART_SetConfig+0x26e>
 800734e:	d9c3      	bls.n	80072d8 <UART_SetConfig+0xf0>
 8007350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007354:	f000 8086 	beq.w	8007464 <UART_SetConfig+0x27c>
 8007358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800735c:	e7c7      	b.n	80072ee <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800735e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8007362:	d8d0      	bhi.n	8007306 <UART_SetConfig+0x11e>
        switch (clocksource)
 8007364:	2b08      	cmp	r3, #8
 8007366:	d82f      	bhi.n	80073c8 <UART_SetConfig+0x1e0>
 8007368:	e8df f003 	tbb	[pc, r3]
 800736c:	2e1d2e05 	.word	0x2e1d2e05
 8007370:	2e2e2e25 	.word	0x2e2e2e25
 8007374:	28          	.byte	0x28
 8007375:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007376:	f7fe ff5f 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007380:	0856      	lsrs	r6, r2, #1
 8007382:	2700      	movs	r7, #0
 8007384:	fbe1 6700 	umlal	r6, r7, r1, r0
 8007388:	2300      	movs	r3, #0
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800738e:	f7f9 fc57 	bl	8000c40 <__aeabi_uldivmod>
          break;
 8007392:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8007394:	4b53      	ldr	r3, [pc, #332]	; (80074e4 <UART_SetConfig+0x2fc>)
 8007396:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800739a:	4299      	cmp	r1, r3
 800739c:	d8b3      	bhi.n	8007306 <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	60d8      	str	r0, [r3, #12]

}
 80073a2:	4610      	mov	r0, r2
 80073a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80073a6:	4850      	ldr	r0, [pc, #320]	; (80074e8 <UART_SetConfig+0x300>)
 80073a8:	0855      	lsrs	r5, r2, #1
 80073aa:	2300      	movs	r3, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80073b0:	f141 0100 	adc.w	r1, r1, #0
 80073b4:	e7eb      	b.n	800738e <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80073b6:	f7fe fc65 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 80073ba:	e7de      	b.n	800737a <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80073bc:	0850      	lsrs	r0, r2, #1
 80073be:	2100      	movs	r1, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80073c6:	e7f3      	b.n	80073b0 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 80073c8:	2201      	movs	r2, #1
 80073ca:	e7e3      	b.n	8007394 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073cc:	f7fe ff4c 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 80073d0:	e059      	b.n	8007486 <UART_SetConfig+0x29e>
    switch (clocksource)
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d897      	bhi.n	8007306 <UART_SetConfig+0x11e>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x1f4>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007415 	.word	0x08007415
 80073e4:	0800741b 	.word	0x0800741b
 80073e8:	08007307 	.word	0x08007307
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007307 	.word	0x08007307
 80073f4:	08007307 	.word	0x08007307
 80073f8:	08007307 	.word	0x08007307
 80073fc:	08007437 	.word	0x08007437
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007400:	f7fe ff1a 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007404:	6863      	ldr	r3, [r4, #4]
 8007406:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800740a:	fbb0 f0f3 	udiv	r0, r0, r3
 800740e:	b280      	uxth	r0, r0
 8007410:	60e8      	str	r0, [r5, #12]
 8007412:	e01e      	b.n	8007452 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007414:	f7fe ff28 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 8007418:	e7f4      	b.n	8007404 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800741a:	6862      	ldr	r2, [r4, #4]
 800741c:	0853      	lsrs	r3, r2, #1
 800741e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007422:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007426:	fbb3 f3f2 	udiv	r3, r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	60eb      	str	r3, [r5, #12]
 800742e:	e010      	b.n	8007452 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007430:	f7fe fc28 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8007434:	e7e6      	b.n	8007404 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007436:	6862      	ldr	r2, [r4, #4]
 8007438:	0853      	lsrs	r3, r2, #1
 800743a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800743e:	e7f2      	b.n	8007426 <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007440:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <UART_SetConfig+0x2dc>)
 8007442:	429d      	cmp	r5, r3
 8007444:	d11a      	bne.n	800747c <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8007446:	f7fe fef7 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
      break;
 800744a:	2300      	movs	r3, #0
    if (tmpreg != 0)
 800744c:	2800      	cmp	r0, #0
 800744e:	f47f af55 	bne.w	80072fc <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8007452:	2200      	movs	r2, #0
      break;
 8007454:	e7a5      	b.n	80073a2 <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007456:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <UART_SetConfig+0x2dc>)
 8007458:	429d      	cmp	r5, r3
 800745a:	d109      	bne.n	8007470 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800745c:	f7fe fc12 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
      break;
 8007460:	2304      	movs	r3, #4
 8007462:	e7f3      	b.n	800744c <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007464:	4b17      	ldr	r3, [pc, #92]	; (80074c4 <UART_SetConfig+0x2dc>)
 8007466:	429d      	cmp	r5, r3
 8007468:	d11d      	bne.n	80074a6 <UART_SetConfig+0x2be>
 800746a:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 800746c:	481f      	ldr	r0, [pc, #124]	; (80074ec <UART_SetConfig+0x304>)
 800746e:	e745      	b.n	80072fc <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007470:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007474:	d1dc      	bne.n	8007430 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007476:	f7fe fc05 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 800747a:	e004      	b.n	8007486 <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007480:	d1be      	bne.n	8007400 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007482:	f7fe fed9 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007486:	6861      	ldr	r1, [r4, #4]
 8007488:	084a      	lsrs	r2, r1, #1
 800748a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800748e:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007492:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007494:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8007496:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 800749a:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800749c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80074a0:	430b      	orrs	r3, r1
 80074a2:	60c3      	str	r3, [r0, #12]
 80074a4:	e77d      	b.n	80073a2 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80074aa:	d1b6      	bne.n	800741a <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80074ac:	6860      	ldr	r0, [r4, #4]
 80074ae:	0843      	lsrs	r3, r0, #1
 80074b0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80074b4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80074b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80074bc:	e7e9      	b.n	8007492 <UART_SetConfig+0x2aa>
 80074be:	bf00      	nop
 80074c0:	efff69f3 	.word	0xefff69f3
 80074c4:	40008000 	.word	0x40008000
 80074c8:	40013800 	.word	0x40013800
 80074cc:	0800eda6 	.word	0x0800eda6
 80074d0:	40004400 	.word	0x40004400
 80074d4:	0800edaa 	.word	0x0800edaa
 80074d8:	40004800 	.word	0x40004800
 80074dc:	40004c00 	.word	0x40004c00
 80074e0:	40005000 	.word	0x40005000
 80074e4:	000ffcff 	.word	0x000ffcff
 80074e8:	f4240000 	.word	0xf4240000
 80074ec:	00f42400 	.word	0x00f42400

080074f0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074f2:	07da      	lsls	r2, r3, #31
{
 80074f4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f6:	d506      	bpl.n	8007506 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074f8:	6801      	ldr	r1, [r0, #0]
 80074fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80074fc:	684a      	ldr	r2, [r1, #4]
 80074fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007502:	4322      	orrs	r2, r4
 8007504:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007506:	079c      	lsls	r4, r3, #30
 8007508:	d506      	bpl.n	8007518 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800750a:	6801      	ldr	r1, [r0, #0]
 800750c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800750e:	684a      	ldr	r2, [r1, #4]
 8007510:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007514:	4322      	orrs	r2, r4
 8007516:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007518:	0759      	lsls	r1, r3, #29
 800751a:	d506      	bpl.n	800752a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751c:	6801      	ldr	r1, [r0, #0]
 800751e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007520:	684a      	ldr	r2, [r1, #4]
 8007522:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007526:	4322      	orrs	r2, r4
 8007528:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800752a:	071a      	lsls	r2, r3, #28
 800752c:	d506      	bpl.n	800753c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800752e:	6801      	ldr	r1, [r0, #0]
 8007530:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007532:	684a      	ldr	r2, [r1, #4]
 8007534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007538:	4322      	orrs	r2, r4
 800753a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800753c:	06dc      	lsls	r4, r3, #27
 800753e:	d506      	bpl.n	800754e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007540:	6801      	ldr	r1, [r0, #0]
 8007542:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007544:	688a      	ldr	r2, [r1, #8]
 8007546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800754a:	4322      	orrs	r2, r4
 800754c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800754e:	0699      	lsls	r1, r3, #26
 8007550:	d506      	bpl.n	8007560 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007552:	6801      	ldr	r1, [r0, #0]
 8007554:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007556:	688a      	ldr	r2, [r1, #8]
 8007558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800755c:	4322      	orrs	r2, r4
 800755e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007560:	065a      	lsls	r2, r3, #25
 8007562:	d50f      	bpl.n	8007584 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007564:	6801      	ldr	r1, [r0, #0]
 8007566:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007568:	684a      	ldr	r2, [r1, #4]
 800756a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800756e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007570:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007574:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007576:	d105      	bne.n	8007584 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007578:	684a      	ldr	r2, [r1, #4]
 800757a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800757c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007580:	4322      	orrs	r2, r4
 8007582:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007584:	061b      	lsls	r3, r3, #24
 8007586:	d506      	bpl.n	8007596 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007588:	6802      	ldr	r2, [r0, #0]
 800758a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800758c:	6853      	ldr	r3, [r2, #4]
 800758e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007592:	430b      	orrs	r3, r1
 8007594:	6053      	str	r3, [r2, #4]
 8007596:	bd10      	pop	{r4, pc}

08007598 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8007598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759c:	4604      	mov	r4, r0
 800759e:	460e      	mov	r6, r1
 80075a0:	4690      	mov	r8, r2
 80075a2:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80075a4:	f7fd fb24 	bl	8004bf0 <HAL_GetTick>
 80075a8:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80075aa:	f1b8 0f00 	cmp.w	r8, #0
 80075ae:	d02f      	beq.n	8007610 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	69d3      	ldr	r3, [r2, #28]
 80075b4:	ea36 0303 	bics.w	r3, r6, r3
 80075b8:	d12f      	bne.n	800761a <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80075ba:	1c6b      	adds	r3, r5, #1
 80075bc:	d0f9      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80075be:	b145      	cbz	r5, 80075d2 <UART_WaitOnFlagUntilTimeout+0x3a>
 80075c0:	f7fd fb16 	bl	8004bf0 <HAL_GetTick>
 80075c4:	1bc0      	subs	r0, r0, r7
 80075c6:	4285      	cmp	r5, r0
 80075c8:	d2f2      	bcs.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x18>
 80075ca:	e002      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 80075cc:	1c69      	adds	r1, r5, #1
 80075ce:	d020      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80075d0:	b9cd      	cbnz	r5, 8007606 <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075da:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	f022 0220 	bic.w	r2, r2, #32
 80075e2:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ea:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	f022 0201 	bic.w	r2, r2, #1
 80075f2:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fa:	2300      	movs	r3, #0
 80075fc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8007600:	2003      	movs	r0, #3
 8007602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007606:	f7fd faf3 	bl	8004bf0 <HAL_GetTick>
 800760a:	1bc0      	subs	r0, r0, r7
 800760c:	4285      	cmp	r5, r0
 800760e:	d3e0      	bcc.n	80075d2 <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	69d3      	ldr	r3, [r2, #28]
 8007614:	ea36 0303 	bics.w	r3, r6, r3
 8007618:	d1d8      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 800761a:	2000      	movs	r0, #0
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007620 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007622:	6803      	ldr	r3, [r0, #0]
{
 8007624:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007626:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	0719      	lsls	r1, r3, #28
{
 800762c:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762e:	d413      	bmi.n	8007658 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	075b      	lsls	r3, r3, #29
 8007636:	d508      	bpl.n	800764a <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800763c:	2200      	movs	r2, #0
 800763e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007642:	4620      	mov	r0, r4
 8007644:	f7ff ffa8 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 8007648:	b970      	cbnz	r0, 8007668 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 800764a:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 800764c:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 800764e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8007652:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8007656:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800765c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007660:	f7ff ff9a 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 8007664:	2800      	cmp	r0, #0
 8007666:	d0e3      	beq.n	8007630 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8007668:	2003      	movs	r0, #3
 800766a:	bd10      	pop	{r4, pc}

0800766c <HAL_UART_Init>:
{
 800766c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800766e:	4604      	mov	r4, r0
 8007670:	b360      	cbz	r0, 80076cc <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8007672:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007676:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800767a:	b91b      	cbnz	r3, 8007684 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800767c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8007680:	f7ff fd44 	bl	800710c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007684:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8007686:	2302      	movs	r3, #2
 8007688:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff fda7 	bl	80071e8 <UART_SetConfig>
 800769a:	2801      	cmp	r0, #1
 800769c:	d016      	beq.n	80076cc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800769e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a0:	b113      	cbz	r3, 80076a8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff ff24 	bl	80074f0 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076b0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80076c0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80076c8:	f7ff bfaa 	b.w	8007620 <UART_CheckIdleState>
}
 80076cc:	2001      	movs	r0, #1
 80076ce:	bd10      	pop	{r4, pc}

080076d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80076d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80076d4:	680a      	ldr	r2, [r1, #0]
 80076d6:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80076da:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80076de:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80076e2:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80076e4:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80076e6:	fa32 f304 	lsrs.w	r3, r2, r4
 80076ea:	d10d      	bne.n	8007708 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80076ec:	684b      	ldr	r3, [r1, #4]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d806      	bhi.n	8007702 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80076f4:	6843      	ldr	r3, [r0, #4]
 80076f6:	68c9      	ldr	r1, [r1, #12]
 80076f8:	ea23 0302 	bic.w	r3, r3, r2
 80076fc:	434a      	muls	r2, r1
 80076fe:	431a      	orrs	r2, r3
 8007700:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8007702:	2001      	movs	r0, #1
 8007704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007708:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 800770c:	4013      	ands	r3, r2
 800770e:	d069      	beq.n	80077e4 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007710:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007714:	f8d0 9000 	ldr.w	r9, [r0]
 8007718:	fa93 fca3 	rbit	ip, r3
 800771c:	fabc fc8c 	clz	ip, ip
 8007720:	fa93 f6a3 	rbit	r6, r3
 8007724:	fab6 f686 	clz	r6, r6
 8007728:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800772c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007730:	0076      	lsls	r6, r6, #1
 8007732:	ea29 0c0c 	bic.w	ip, r9, ip
 8007736:	fa08 f606 	lsl.w	r6, r8, r6
 800773a:	ea4c 0606 	orr.w	r6, ip, r6
 800773e:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007740:	f108 36ff 	add.w	r6, r8, #4294967295
 8007744:	2e01      	cmp	r6, #1
 8007746:	d816      	bhi.n	8007776 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007748:	6886      	ldr	r6, [r0, #8]
 800774a:	fa93 fca3 	rbit	ip, r3
 800774e:	fabc fc8c 	clz	ip, ip
 8007752:	fa93 f9a3 	rbit	r9, r3
 8007756:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800775a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800775e:	ea26 0c0c 	bic.w	ip, r6, ip
 8007762:	fab9 f989 	clz	r9, r9
 8007766:	688e      	ldr	r6, [r1, #8]
 8007768:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800776c:	fa06 f609 	lsl.w	r6, r6, r9
 8007770:	ea4c 0606 	orr.w	r6, ip, r6
 8007774:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007776:	68c6      	ldr	r6, [r0, #12]
 8007778:	fa93 fca3 	rbit	ip, r3
 800777c:	fabc fc8c 	clz	ip, ip
 8007780:	fa93 f9a3 	rbit	r9, r3
 8007784:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007788:	fa05 fc0c 	lsl.w	ip, r5, ip
 800778c:	ea26 0c0c 	bic.w	ip, r6, ip
 8007790:	fab9 f989 	clz	r9, r9
 8007794:	690e      	ldr	r6, [r1, #16]
 8007796:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800779a:	fa06 f609 	lsl.w	r6, r6, r9
 800779e:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80077a2:	f1b8 0f02 	cmp.w	r8, #2
 80077a6:	60c6      	str	r6, [r0, #12]
 80077a8:	d11c      	bne.n	80077e4 <LL_GPIO_Init+0x114>
 80077aa:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80077ae:	fab6 f686 	clz	r6, r6
 80077b2:	2e07      	cmp	r6, #7
 80077b4:	f8d1 c014 	ldr.w	ip, [r1, #20]
 80077b8:	dc16      	bgt.n	80077e8 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80077ba:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80077be:	fa93 f6a3 	rbit	r6, r3
 80077c2:	fab6 f686 	clz	r6, r6
 80077c6:	fa93 f3a3 	rbit	r3, r3
 80077ca:	fab3 f383 	clz	r3, r3
 80077ce:	00b6      	lsls	r6, r6, #2
 80077d0:	fa07 f606 	lsl.w	r6, r7, r6
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	ea28 0606 	bic.w	r6, r8, r6
 80077da:	fa0c fc03 	lsl.w	ip, ip, r3
 80077de:	ea46 060c 	orr.w	r6, r6, ip
 80077e2:	6206      	str	r6, [r0, #32]
    pinpos++;
 80077e4:	3401      	adds	r4, #1
 80077e6:	e77e      	b.n	80076e6 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80077e8:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	fa93 f6a3 	rbit	r6, r3
 80077f2:	fab6 f686 	clz	r6, r6
 80077f6:	fa93 f3a3 	rbit	r3, r3
 80077fa:	fab3 f383 	clz	r3, r3
 80077fe:	00b6      	lsls	r6, r6, #2
 8007800:	fa07 f606 	lsl.w	r6, r7, r6
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	ea28 0606 	bic.w	r6, r8, r6
 800780a:	fa0c f303 	lsl.w	r3, ip, r3
 800780e:	4333      	orrs	r3, r6
 8007810:	6243      	str	r3, [r0, #36]	; 0x24
 8007812:	e7e7      	b.n	80077e4 <LL_GPIO_Init+0x114>

08007814 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8007814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	f8dd c020 	ldr.w	ip, [sp, #32]
 800781c:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8007820:	fa97 f7a7 	rbit	r7, r7
 8007824:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007828:	fab7 f787 	clz	r7, r7
 800782c:	fa94 f4a4 	rbit	r4, r4
 8007830:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8007834:	fab4 fa84 	clz	sl, r4
 8007838:	fa96 f6a6 	rbit	r6, r6
 800783c:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007840:	fab6 f686 	clz	r6, r6
 8007844:	fa99 f9a9 	rbit	r9, r9
 8007848:	2570      	movs	r5, #112	; 0x70
 800784a:	fab9 f989 	clz	r9, r9
 800784e:	fa95 f5a5 	rbit	r5, r5
 8007852:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007856:	fab5 f585 	clz	r5, r5
 800785a:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800785e:	f8d0 e000 	ldr.w	lr, [r0]
 8007862:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007866:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800786a:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800786e:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007872:	ea4e 0101 	orr.w	r1, lr, r1
 8007876:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007878:	f003 040f 	and.w	r4, r3, #15
 800787c:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007880:	fab8 f888 	clz	r8, r8
 8007884:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007888:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800788c:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007890:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007894:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007896:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800789a:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 800789c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078a0:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80078a2:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80078a4:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80078a6:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 80078aa:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80078ac:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80078ae:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80078b2:	432b      	orrs	r3, r5
 80078b4:	6003      	str	r3, [r0, #0]
 80078b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080078bc <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80078c4:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 80078c8:	fa9a faaa 	rbit	sl, sl
 80078cc:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 80078d0:	faba fa8a 	clz	sl, sl
 80078d4:	fa97 f7a7 	rbit	r7, r7
 80078d8:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80078dc:	fab7 f787 	clz	r7, r7
 80078e0:	fa94 f4a4 	rbit	r4, r4
 80078e4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80078e8:	fab4 fb84 	clz	fp, r4
 80078ec:	fa96 f6a6 	rbit	r6, r6
 80078f0:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80078f4:	fab6 f686 	clz	r6, r6
 80078f8:	fa98 f8a8 	rbit	r8, r8
 80078fc:	2530      	movs	r5, #48	; 0x30
 80078fe:	fab8 f888 	clz	r8, r8
 8007902:	fa95 f5a5 	rbit	r5, r5
 8007906:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800790a:	fab5 f585 	clz	r5, r5
 800790e:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007912:	f00e 040f 	and.w	r4, lr, #15
 8007916:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 800791a:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800791e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007922:	4321      	orrs	r1, r4
 8007924:	4c12      	ldr	r4, [pc, #72]	; (8007970 <LL_RTC_DATE_Config+0xb4>)
 8007926:	ea09 0404 	and.w	r4, r9, r4
 800792a:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800792c:	f003 040f 	and.w	r4, r3, #15
 8007930:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007934:	fabc fc8c 	clz	ip, ip
 8007938:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800793c:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007940:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007944:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 8007948:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800794a:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 800794e:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8007952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007956:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007958:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800795a:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800795c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007960:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007962:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007964:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007966:	431a      	orrs	r2, r3
 8007968:	6042      	str	r2, [r0, #4]
 800796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796e:	bf00      	nop
 8007970:	ff0000c0 	.word	0xff0000c0

08007974 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8007974:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8007976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800797a:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800797c:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800797e:	065a      	lsls	r2, r3, #25
 8007980:	d41c      	bmi.n	80079bc <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8007982:	f04f 33ff 	mov.w	r3, #4294967295
 8007986:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8007988:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800798a:	490d      	ldr	r1, [pc, #52]	; (80079c0 <LL_RTC_EnterInitMode+0x4c>)
 800798c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8007990:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8007992:	9c01      	ldr	r4, [sp, #4]
 8007994:	b104      	cbz	r4, 8007998 <LL_RTC_EnterInitMode+0x24>
 8007996:	b113      	cbz	r3, 800799e <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8007998:	4610      	mov	r0, r2
 800799a:	b002      	add	sp, #8
 800799c:	bd10      	pop	{r4, pc}
 800799e:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80079a0:	03db      	lsls	r3, r3, #15
        timeout --;
 80079a2:	bf42      	ittt	mi
 80079a4:	9b01      	ldrmi	r3, [sp, #4]
 80079a6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80079aa:	9301      	strmi	r3, [sp, #4]
 80079ac:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 80079ae:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80079b6:	bf08      	it	eq
 80079b8:	2200      	moveq	r2, #0
 80079ba:	e7ea      	b.n	8007992 <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 80079bc:	2201      	movs	r2, #1
 80079be:	e7eb      	b.n	8007998 <LL_RTC_EnterInitMode+0x24>
 80079c0:	e000e010 	.word	0xe000e010

080079c4 <LL_RTC_Init>:
{
 80079c4:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80079c6:	23ca      	movs	r3, #202	; 0xca
 80079c8:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80079ca:	2353      	movs	r3, #83	; 0x53
 80079cc:	6243      	str	r3, [r0, #36]	; 0x24
 80079ce:	4604      	mov	r4, r0
 80079d0:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80079d2:	f7ff ffcf 	bl	8007974 <LL_RTC_EnterInitMode>
 80079d6:	b1f0      	cbz	r0, 8007a16 <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	682a      	ldr	r2, [r5, #0]
 80079dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	68aa      	ldr	r2, [r5, #8]
 80079e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079f0:	4313      	orrs	r3, r2
 80079f2:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 80079f4:	6921      	ldr	r1, [r4, #16]
 80079f6:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80079fa:	fa93 f3a3 	rbit	r3, r3
 80079fe:	fab3 f283 	clz	r2, r3
 8007a02:	686b      	ldr	r3, [r5, #4]
 8007a04:	4093      	lsls	r3, r2
 8007a06:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007a0e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007a12:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8007a14:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007a16:	23ff      	movs	r3, #255	; 0xff
 8007a18:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}

08007a1c <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8007a1c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8007a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a22:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8007a24:	68c3      	ldr	r3, [r0, #12]
 8007a26:	491e      	ldr	r1, [pc, #120]	; (8007aa0 <LL_RTC_WaitForSynchro+0x84>)
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8007a30:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8007a32:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8007a3a:	9c01      	ldr	r4, [sp, #4]
 8007a3c:	b91c      	cbnz	r4, 8007a46 <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8007a3e:	b99b      	cbnz	r3, 8007a68 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	b002      	add	sp, #8
 8007a44:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	d0f9      	beq.n	8007a3e <LL_RTC_WaitForSynchro+0x22>
 8007a4a:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8007a4c:	03d4      	lsls	r4, r2, #15
      timeout--;
 8007a4e:	bf42      	ittt	mi
 8007a50:	9a01      	ldrmi	r2, [sp, #4]
 8007a52:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8007a56:	9201      	strmi	r2, [sp, #4]
 8007a58:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8007a5a:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007a62:	bf08      	it	eq
 8007a64:	2300      	moveq	r3, #0
 8007a66:	e7e8      	b.n	8007a3a <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8007a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a6c:	9201      	str	r2, [sp, #4]
 8007a6e:	68c2      	ldr	r2, [r0, #12]
 8007a70:	490b      	ldr	r1, [pc, #44]	; (8007aa0 <LL_RTC_WaitForSynchro+0x84>)
 8007a72:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 8007a76:	9c01      	ldr	r4, [sp, #4]
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d0e1      	beq.n	8007a40 <LL_RTC_WaitForSynchro+0x24>
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	d1df      	bne.n	8007a40 <LL_RTC_WaitForSynchro+0x24>
 8007a80:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8007a82:	03d2      	lsls	r2, r2, #15
        timeout--;
 8007a84:	bf42      	ittt	mi
 8007a86:	9a01      	ldrmi	r2, [sp, #4]
 8007a88:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8007a8c:	9201      	strmi	r2, [sp, #4]
 8007a8e:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8007a90:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007a98:	bf08      	it	eq
 8007a9a:	2300      	moveq	r3, #0
 8007a9c:	e7eb      	b.n	8007a76 <LL_RTC_WaitForSynchro+0x5a>
 8007a9e:	bf00      	nop
 8007aa0:	e000e010 	.word	0xe000e010

08007aa4 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8007aa4:	6883      	ldr	r3, [r0, #8]
{
 8007aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa8:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8007aaa:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8007aac:	bf5c      	itt	pl
 8007aae:	2300      	movpl	r3, #0
 8007ab0:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007ab2:	23ca      	movs	r3, #202	; 0xca
 8007ab4:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007ab6:	2353      	movs	r3, #83	; 0x53
 8007ab8:	6243      	str	r3, [r0, #36]	; 0x24
{
 8007aba:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8007abc:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8007abe:	f7ff ff59 	bl	8007974 <LL_RTC_EnterInitMode>
 8007ac2:	b190      	cbz	r0, 8007aea <LL_RTC_TIME_Init+0x46>
 8007ac4:	796b      	ldrb	r3, [r5, #5]
 8007ac6:	792a      	ldrb	r2, [r5, #4]
 8007ac8:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8007aca:	b196      	cbz	r6, 8007af2 <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8007acc:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007ace:	6829      	ldr	r1, [r5, #0]
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7ff fe9f 	bl	8007814 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <LL_RTC_TIME_Init+0x84>)
 8007ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007adc:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8007ade:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8007ae0:	069b      	lsls	r3, r3, #26
 8007ae2:	d41e      	bmi.n	8007b22 <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f7ff ff99 	bl	8007a1c <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007aea:	23ff      	movs	r3, #255	; 0xff
 8007aec:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007aee:	b002      	add	sp, #8
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8007af2:	210a      	movs	r1, #10
 8007af4:	fbb3 f6f1 	udiv	r6, r3, r1
 8007af8:	fb01 3316 	mls	r3, r1, r6, r3
 8007afc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007b00:	fbb2 f6f1 	udiv	r6, r2, r1
 8007b04:	fb01 2216 	mls	r2, r1, r6, r2
 8007b08:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8007b0c:	fbb0 f6f1 	udiv	r6, r0, r1
 8007b10:	fb01 0116 	mls	r1, r1, r6, r0
 8007b14:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007b18:	b2c9      	uxtb	r1, r1
 8007b1a:	9100      	str	r1, [sp, #0]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	e7d5      	b.n	8007ace <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7e1      	b.n	8007aea <LL_RTC_TIME_Init+0x46>
 8007b26:	bf00      	nop
 8007b28:	40002800 	.word	0x40002800

08007b2c <LL_RTC_DATE_Init>:
{
 8007b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8007b32:	460f      	mov	r7, r1
 8007b34:	b931      	cbnz	r1, 8007b44 <LL_RTC_DATE_Init+0x18>
 8007b36:	7853      	ldrb	r3, [r2, #1]
 8007b38:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8007b3a:	bf42      	ittt	mi
 8007b3c:	f023 0310 	bicmi.w	r3, r3, #16
 8007b40:	330a      	addmi	r3, #10
 8007b42:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007b44:	23ca      	movs	r3, #202	; 0xca
 8007b46:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007b48:	2353      	movs	r3, #83	; 0x53
 8007b4a:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7ff ff11 	bl	8007974 <LL_RTC_EnterInitMode>
 8007b52:	b198      	cbz	r0, 8007b7c <LL_RTC_DATE_Init+0x50>
 8007b54:	7873      	ldrb	r3, [r6, #1]
 8007b56:	78b5      	ldrb	r5, [r6, #2]
 8007b58:	7831      	ldrb	r1, [r6, #0]
 8007b5a:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8007b5c:	b197      	cbz	r7, 8007b84 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8007b5e:	9600      	str	r6, [sp, #0]
 8007b60:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7ff feaa 	bl	80078bc <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007b68:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <LL_RTC_DATE_Init+0x8c>)
 8007b6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b6e:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8007b70:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8007b72:	069b      	lsls	r3, r3, #26
 8007b74:	d41e      	bmi.n	8007bb4 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007b76:	4620      	mov	r0, r4
 8007b78:	f7ff ff50 	bl	8007a1c <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007b7c:	23ff      	movs	r3, #255	; 0xff
 8007b7e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007b80:	b003      	add	sp, #12
 8007b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8007b84:	200a      	movs	r0, #10
 8007b86:	fbb3 f2f0 	udiv	r2, r3, r0
 8007b8a:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007b8e:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8007b92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007b96:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8007b9a:	fbb6 f5f0 	udiv	r5, r6, r0
 8007b9e:	fb00 6015 	mls	r0, r0, r5, r6
 8007ba2:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007ba6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8007baa:	b2c0      	uxtb	r0, r0
 8007bac:	9000      	str	r0, [sp, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	e7d6      	b.n	8007b62 <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	e7e1      	b.n	8007b7c <LL_RTC_DATE_Init+0x50>
 8007bb8:	40002800 	.word	0x40002800

08007bbc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	ac03      	add	r4, sp, #12
 8007bc2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007bc6:	9904      	ldr	r1, [sp, #16]
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	6842      	ldr	r2, [r0, #4]
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	9905      	ldr	r1, [sp, #20]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	9906      	ldr	r1, [sp, #24]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	9907      	ldr	r1, [sp, #28]
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 8007bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007be0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8007be4:	430b      	orrs	r3, r1
 8007be6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007bea:	4313      	orrs	r3, r2
 8007bec:	6043      	str	r3, [r0, #4]
}
 8007bee:	b004      	add	sp, #16
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	4770      	bx	lr

08007bf4 <SDMMC_ReadFIFO>:
 8007bf4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007bf8:	4770      	bx	lr

08007bfa <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8007bfe:	2000      	movs	r0, #0
 8007c00:	4770      	bx	lr

08007c02 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007c02:	6800      	ldr	r0, [r0, #0]
}
 8007c04:	f000 0003 	and.w	r0, r0, #3
 8007c08:	4770      	bx	lr

08007c0a <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007c0a:	680b      	ldr	r3, [r1, #0]
 8007c0c:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c0e:	68c3      	ldr	r3, [r0, #12]
 8007c10:	684a      	ldr	r2, [r1, #4]
 8007c12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007c16:	f023 030f 	bic.w	r3, r3, #15
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	688a      	ldr	r2, [r1, #8]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	68ca      	ldr	r2, [r1, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	690a      	ldr	r2, [r1, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	4770      	bx	lr

08007c2e <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 8007c2e:	6900      	ldr	r0, [r0, #16]
}
 8007c30:	b2c0      	uxtb	r0, r0
 8007c32:	4770      	bx	lr

08007c34 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007c34:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007c36:	3014      	adds	r0, #20
 8007c38:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007c3e:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	6818      	ldr	r0, [r3, #0]
}  
 8007c44:	b002      	add	sp, #8
 8007c46:	4770      	bx	lr

08007c48 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007c48:	680b      	ldr	r3, [r1, #0]
 8007c4a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007c4c:	684b      	ldr	r3, [r1, #4]
 8007c4e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007c50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007c52:	688a      	ldr	r2, [r1, #8]
 8007c54:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	68ca      	ldr	r2, [r1, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	690a      	ldr	r2, [r1, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	694a      	ldr	r2, [r1, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8007c68:	2000      	movs	r0, #0
 8007c6a:	4770      	bx	lr

08007c6c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8007c6c:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007c6e:	065b      	lsls	r3, r3, #25
{
 8007c70:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007c72:	d426      	bmi.n	8007cc2 <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007c74:	e891 0048 	ldmia.w	r1, {r3, r6}
 8007c78:	4333      	orrs	r3, r6
 8007c7a:	68ce      	ldr	r6, [r1, #12]
 8007c7c:	694d      	ldr	r5, [r1, #20]
 8007c7e:	6804      	ldr	r4, [r0, #0]
 8007c80:	6a0a      	ldr	r2, [r1, #32]
 8007c82:	4333      	orrs	r3, r6
 8007c84:	690e      	ldr	r6, [r1, #16]
 8007c86:	4333      	orrs	r3, r6
 8007c88:	698e      	ldr	r6, [r1, #24]
 8007c8a:	432b      	orrs	r3, r5
 8007c8c:	4333      	orrs	r3, r6
 8007c8e:	69ce      	ldr	r6, [r1, #28]
 8007c90:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8007c94:	4333      	orrs	r3, r6
 8007c96:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	4323      	orrs	r3, r4
 8007c9e:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8007ca0:	6844      	ldr	r4, [r0, #4]
 8007ca2:	688b      	ldr	r3, [r1, #8]
 8007ca4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 8007ca8:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 8007cac:	f024 0404 	bic.w	r4, r4, #4
 8007cb0:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007cb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 8007cb6:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007cb8:	d101      	bne.n	8007cbe <LL_SPI_Init+0x52>
 8007cba:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007cbc:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8007cbe:	2001      	movs	r0, #1
  }

  return status;
}
 8007cc0:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}

08007cc6 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	ad05      	add	r5, sp, #20
 8007ccc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cd0:	68c3      	ldr	r3, [r0, #12]
 8007cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 8007cd6:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cd8:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8007cda:	f000 fb75 	bl	80083c8 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ce2:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8007ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce8:	2000      	movs	r0, #0
 8007cea:	b004      	add	sp, #16
 8007cec:	4770      	bx	lr

08007cee <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cee:	6883      	ldr	r3, [r0, #8]
 8007cf0:	f043 0301 	orr.w	r3, r3, #1
 8007cf4:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	4770      	bx	lr

08007cfa <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cfa:	6883      	ldr	r3, [r0, #8]
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007d02:	2000      	movs	r0, #0
 8007d04:	4770      	bx	lr

08007d06 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8007d06:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007d08:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 8007d0a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007d0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d10:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8007d12:	d108      	bne.n	8007d26 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8007d14:	68c3      	ldr	r3, [r0, #12]
 8007d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d1a:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8007d1c:	2032      	movs	r0, #50	; 0x32
 8007d1e:	f7fc ff6d 	bl	8004bfc <HAL_Delay>
  
  return HAL_OK;
}
 8007d22:	2000      	movs	r0, #0
 8007d24:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 8007d26:	2900      	cmp	r1, #0
 8007d28:	d1f8      	bne.n	8007d1c <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8007d2a:	68c3      	ldr	r3, [r0, #12]
 8007d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	60c3      	str	r3, [r0, #12]
 8007d32:	e7f3      	b.n	8007d1c <USB_SetCurrentMode+0x16>

08007d34 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d34:	b084      	sub	sp, #16
 8007d36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	a809      	add	r0, sp, #36	; 0x24
 8007d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d44:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007d46:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d4e:	4689      	mov	r9, r1
 8007d50:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8007d52:	b95f      	cbnz	r7, 8007d6c <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d5a:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8007d6c:	2500      	movs	r5, #0
 8007d6e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d72:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007d76:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8007d7a:	2103      	movs	r1, #3
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 f893 	bl	8007ea8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8007d82:	2110      	movs	r1, #16
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 f86d 	bl	8007e64 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d8a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 f87a 	bl	8007e88 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8007d98:	6135      	str	r5, [r6, #16]
 8007d9a:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8007d9c:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007d9e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007da2:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007da4:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8007da6:	61f5      	str	r5, [r6, #28]
 8007da8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007dac:	454d      	cmp	r5, r9
 8007dae:	d13c      	bne.n	8007e2a <USB_DevInit+0xf6>
 8007db0:	2200      	movs	r2, #0
 8007db2:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8007db6:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007dbc:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007dc0:	4295      	cmp	r5, r2
 8007dc2:	d13e      	bne.n	8007e42 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dc4:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8007dc6:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dce:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8007dd0:	d108      	bne.n	8007de4 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8007dd2:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <USB_DevInit+0x128>)
 8007dd4:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8007dd6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ddc:	f043 0303 	orr.w	r3, r3, #3
 8007de0:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8007de2:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007de8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007dec:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8007dee:	f1b8 0f00 	cmp.w	r8, #0
 8007df2:	d103      	bne.n	8007dfc <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8007df4:	69a3      	ldr	r3, [r4, #24]
 8007df6:	f043 0310 	orr.w	r3, r3, #16
 8007dfa:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8007dfc:	69a2      	ldr	r2, [r4, #24]
 8007dfe:	4b18      	ldr	r3, [pc, #96]	; (8007e60 <USB_DevInit+0x12c>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8007e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e06:	b11b      	cbz	r3, 8007e10 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e08:	69a3      	ldr	r3, [r4, #24]
 8007e0a:	f043 0308 	orr.w	r3, r3, #8
 8007e0e:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8007e10:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8007e12:	bf01      	itttt	eq
 8007e14:	69a3      	ldreq	r3, [r4, #24]
 8007e16:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007e1a:	f043 0304 	orreq.w	r3, r3, #4
 8007e1e:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8007e20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	2000      	movs	r0, #0
 8007e26:	b004      	add	sp, #16
 8007e28:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e2a:	f8d3 e000 	ldr.w	lr, [r3]
 8007e2e:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007e32:	bfb4      	ite	lt
 8007e34:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8007e36:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007e38:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8007e3a:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007e3c:	6098      	str	r0, [r3, #8]
 8007e3e:	3320      	adds	r3, #32
 8007e40:	e7b4      	b.n	8007dac <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e42:	f8d3 c000 	ldr.w	ip, [r3]
 8007e46:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007e4a:	bfb4      	ite	lt
 8007e4c:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8007e4e:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007e50:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8007e52:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007e54:	f8c3 e008 	str.w	lr, [r3, #8]
 8007e58:	3320      	adds	r3, #32
 8007e5a:	e7b1      	b.n	8007dc0 <USB_DevInit+0x8c>
 8007e5c:	00800100 	.word	0x00800100
 8007e60:	803c3800 	.word	0x803c3800

08007e64 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8007e64:	0189      	lsls	r1, r1, #6
 8007e66:	f041 0120 	orr.w	r1, r1, #32
 8007e6a:	4a06      	ldr	r2, [pc, #24]	; (8007e84 <USB_FlushTxFifo+0x20>)
 8007e6c:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	d005      	beq.n	8007e7e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e72:	6903      	ldr	r3, [r0, #16]
 8007e74:	f013 0320 	ands.w	r3, r3, #32
 8007e78:	d1f9      	bne.n	8007e6e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007e7e:	2003      	movs	r0, #3
}
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	00030d41 	.word	0x00030d41

08007e88 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e88:	2310      	movs	r3, #16
 8007e8a:	4a06      	ldr	r2, [pc, #24]	; (8007ea4 <USB_FlushRxFifo+0x1c>)
 8007e8c:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8007e8e:	3a01      	subs	r2, #1
 8007e90:	d005      	beq.n	8007e9e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e92:	6903      	ldr	r3, [r0, #16]
 8007e94:	f013 0310 	ands.w	r3, r3, #16
 8007e98:	d1f9      	bne.n	8007e8e <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007e9e:	2003      	movs	r0, #3
}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	00030d41 	.word	0x00030d41

08007ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8007ea8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007eac:	4319      	orrs	r1, r3
 8007eae:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	4770      	bx	lr

08007eb6 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007eb6:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8007eb8:	784b      	ldrb	r3, [r1, #1]
 8007eba:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007ebc:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8007ec0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d11b      	bne.n	8007f00 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007ec8:	40a3      	lsls	r3, r4
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007ece:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007ed2:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007ed4:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	0412      	lsls	r2, r2, #16
 8007edc:	d40e      	bmi.n	8007efc <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007ede:	688a      	ldr	r2, [r1, #8]
 8007ee0:	78c8      	ldrb	r0, [r1, #3]
 8007ee2:	681d      	ldr	r5, [r3, #0]
 8007ee4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007ee8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ef0:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8007ef4:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8007ef8:	4328      	orrs	r0, r5
 8007efa:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8007efc:	2000      	movs	r0, #0
 8007efe:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f04:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007f06:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007f0a:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007f0c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007f10:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007f12:	6803      	ldr	r3, [r0, #0]
 8007f14:	041b      	lsls	r3, r3, #16
 8007f16:	d4f1      	bmi.n	8007efc <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007f18:	688b      	ldr	r3, [r1, #8]
 8007f1a:	78c9      	ldrb	r1, [r1, #3]
 8007f1c:	6802      	ldr	r2, [r0, #0]
 8007f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	e7e3      	b.n	8007efc <USB_ActivateEndpoint+0x46>

08007f34 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f34:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007f36:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007f38:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8007f3c:	7809      	ldrb	r1, [r1, #0]
 8007f3e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d111      	bne.n	8007f6a <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007f46:	408b      	lsls	r3, r1
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	401c      	ands	r4, r3
 8007f4e:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007f50:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007f52:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007f56:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007f58:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007f5c:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007f5e:	6803      	ldr	r3, [r0, #0]
 8007f60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f64:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8007f66:	2000      	movs	r0, #0
 8007f68:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f6e:	408b      	lsls	r3, r1
 8007f70:	43db      	mvns	r3, r3
 8007f72:	401c      	ands	r4, r3
 8007f74:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007f76:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007f78:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007f7c:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007f7e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007f82:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007f84:	6803      	ldr	r3, [r0, #0]
 8007f86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f8a:	6003      	str	r3, [r0, #0]
 8007f8c:	e7eb      	b.n	8007f66 <USB_DeactivateEndpoint+0x32>
	...

08007f90 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8007f92:	784b      	ldrb	r3, [r1, #1]
 8007f94:	780c      	ldrb	r4, [r1, #0]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	694b      	ldr	r3, [r1, #20]
 8007f9a:	d163      	bne.n	8008064 <USB_EPStartXfer+0xd4>
 8007f9c:	2520      	movs	r5, #32
 8007f9e:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007fa2:	fb15 6404 	smlabb	r4, r5, r4, r6
 8007fa6:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8007fa8:	bb73      	cbnz	r3, 8008008 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007faa:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8007fae:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8007fb2:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007fb4:	6925      	ldr	r5, [r4, #16]
 8007fb6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8007fba:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007fbc:	6925      	ldr	r5, [r4, #16]
 8007fbe:	0ced      	lsrs	r5, r5, #19
 8007fc0:	04ed      	lsls	r5, r5, #19
 8007fc2:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 8007fc4:	78cf      	ldrb	r7, [r1, #3]
 8007fc6:	780d      	ldrb	r5, [r1, #0]
 8007fc8:	2f01      	cmp	r7, #1
 8007fca:	f000 8089 	beq.w	80080e0 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007fce:	b14b      	cbz	r3, 8007fe4 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007fd0:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 8007fd4:	2401      	movs	r4, #1
 8007fd6:	40ac      	lsls	r4, r5
 8007fd8:	ea44 040c 	orr.w	r4, r4, ip
 8007fdc:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8007fe0:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fe4:	780d      	ldrb	r5, [r1, #0]
 8007fe6:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8007fea:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fec:	6834      	ldr	r4, [r6, #0]
 8007fee:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007ff2:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8007ff4:	d105      	bne.n	8008002 <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8007ff6:	9200      	str	r2, [sp, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	68c9      	ldr	r1, [r1, #12]
 8007ffe:	f000 f8e3 	bl	80081c8 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8008002:	2000      	movs	r0, #0
 8008004:	b003      	add	sp, #12
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008008:	0ced      	lsrs	r5, r5, #19
 800800a:	04ed      	lsls	r5, r5, #19
 800800c:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800800e:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8008010:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008012:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8008016:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800801a:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 800801c:	19dd      	adds	r5, r3, r7
 800801e:	3d01      	subs	r5, #1
 8008020:	fbb5 f7f7 	udiv	r7, r5, r7
 8008024:	4d35      	ldr	r5, [pc, #212]	; (80080fc <USB_EPStartXfer+0x16c>)
 8008026:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800802a:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 800802e:	ea45 050e 	orr.w	r5, r5, lr
 8008032:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8008034:	6927      	ldr	r7, [r4, #16]
 8008036:	f3c3 0512 	ubfx	r5, r3, #0, #19
 800803a:	433d      	orrs	r5, r7
 800803c:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800803e:	78cd      	ldrb	r5, [r1, #3]
 8008040:	2d01      	cmp	r5, #1
 8008042:	d1bf      	bne.n	8007fc4 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8008044:	6925      	ldr	r5, [r4, #16]
 8008046:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800804a:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 800804c:	6925      	ldr	r5, [r4, #16]
 800804e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008052:	6125      	str	r5, [r4, #16]
 8008054:	e7b6      	b.n	8007fc4 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008056:	fb14 6405 	smlabb	r4, r4, r5, r6
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008060:	6025      	str	r5, [r4, #0]
 8008062:	e7bf      	b.n	8007fe4 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8008064:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8008068:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 800806c:	6914      	ldr	r4, [r2, #16]
 800806e:	0ce4      	lsrs	r4, r4, #19
 8008070:	04e4      	lsls	r4, r4, #19
 8008072:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8008074:	6914      	ldr	r4, [r2, #16]
 8008076:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800807a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800807e:	6114      	str	r4, [r2, #16]
 8008080:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 8008082:	b9db      	cbnz	r3, 80080bc <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008084:	6913      	ldr	r3, [r2, #16]
 8008086:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800808a:	431c      	orrs	r4, r3
 800808c:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 800808e:	6913      	ldr	r3, [r2, #16]
 8008090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008094:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8008096:	78cb      	ldrb	r3, [r1, #3]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d10a      	bne.n	80080b2 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800809c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80080a0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080a4:	6813      	ldr	r3, [r2, #0]
 80080a6:	bf0c      	ite	eq
 80080a8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080ac:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80080b0:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080b8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80080ba:	e7a2      	b.n	8008002 <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80080bc:	4d0f      	ldr	r5, [pc, #60]	; (80080fc <USB_EPStartXfer+0x16c>)
 80080be:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 80080c0:	4423      	add	r3, r4
 80080c2:	3b01      	subs	r3, #1
 80080c4:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80080c8:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 80080cc:	4335      	orrs	r5, r6
 80080ce:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	6915      	ldr	r5, [r2, #16]
 80080d4:	435c      	muls	r4, r3
 80080d6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80080da:	432c      	orrs	r4, r5
 80080dc:	6114      	str	r4, [r2, #16]
 80080de:	e7da      	b.n	8008096 <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80080e0:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80080e4:	f414 7f80 	tst.w	r4, #256	; 0x100
 80080e8:	f04f 0420 	mov.w	r4, #32
 80080ec:	d0b3      	beq.n	8008056 <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ee:	fb14 6405 	smlabb	r4, r4, r5, r6
 80080f2:	6825      	ldr	r5, [r4, #0]
 80080f4:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80080f8:	6025      	str	r5, [r4, #0]
 80080fa:	e773      	b.n	8007fe4 <USB_EPStartXfer+0x54>
 80080fc:	1ff80000 	.word	0x1ff80000

08008100 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8008100:	784b      	ldrb	r3, [r1, #1]
 8008102:	2b01      	cmp	r3, #1
{
 8008104:	b530      	push	{r4, r5, lr}
 8008106:	780b      	ldrb	r3, [r1, #0]
 8008108:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 800810a:	d13e      	bne.n	800818a <USB_EP0StartXfer+0x8a>
 800810c:	2220      	movs	r2, #32
 800810e:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008112:	fb12 4303 	smlabb	r3, r2, r3, r4
 8008116:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8008118:	b9fd      	cbnz	r5, 800815a <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800811a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800811e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8008122:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800812a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	0cd2      	lsrs	r2, r2, #19
 8008130:	04d2      	lsls	r2, r2, #19
 8008132:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8008134:	694b      	ldr	r3, [r1, #20]
 8008136:	b13b      	cbz	r3, 8008148 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8008138:	780d      	ldrb	r5, [r1, #0]
 800813a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800813e:	2301      	movs	r3, #1
 8008140:	40ab      	lsls	r3, r5
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8008148:	780b      	ldrb	r3, [r1, #0]
 800814a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008154:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8008156:	2000      	movs	r0, #0
 8008158:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800815a:	0cd2      	lsrs	r2, r2, #19
 800815c:	04d2      	lsls	r2, r2, #19
 800815e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8008166:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800816a:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800816c:	688a      	ldr	r2, [r1, #8]
 800816e:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8008170:	bf88      	it	hi
 8008172:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800817a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800817c:	694a      	ldr	r2, [r1, #20]
 800817e:	691d      	ldr	r5, [r3, #16]
 8008180:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008184:	432a      	orrs	r2, r5
 8008186:	611a      	str	r2, [r3, #16]
 8008188:	e7d4      	b.n	8008134 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800818a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800818e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008192:	6903      	ldr	r3, [r0, #16]
 8008194:	0cdb      	lsrs	r3, r3, #19
 8008196:	04db      	lsls	r3, r3, #19
 8008198:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800819a:	6903      	ldr	r3, [r0, #16]
 800819c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081a4:	6103      	str	r3, [r0, #16]
 80081a6:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 80081a8:	b105      	cbz	r5, 80081ac <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 80081aa:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 80081ac:	6902      	ldr	r2, [r0, #16]
 80081ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80081b2:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80081b4:	6902      	ldr	r2, [r0, #16]
 80081b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ba:	4313      	orrs	r3, r2
 80081bc:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	e7c6      	b.n	8008156 <USB_EP0StartXfer+0x56>

080081c8 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 80081c8:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80081ca:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 80081ce:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 80081d0:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80081d2:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 80081d6:	2400      	movs	r4, #0
 80081d8:	429c      	cmp	r4, r3
 80081da:	d101      	bne.n	80081e0 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 80081dc:	2000      	movs	r0, #0
 80081de:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80081e0:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80081e4:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 80081e6:	3401      	adds	r4, #1
 80081e8:	e7f6      	b.n	80081d8 <USB_WritePacket+0x10>

080081ea <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081ea:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 80081ec:	3203      	adds	r2, #3
 80081ee:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 80081f0:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80081f2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d102      	bne.n	8008200 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 80081fa:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80081fe:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008200:	6804      	ldr	r4, [r0, #0]
 8008202:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8008206:	3301      	adds	r3, #1
 8008208:	e7f5      	b.n	80081f6 <USB_ReadPacket+0xc>

0800820a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 800820a:	784b      	ldrb	r3, [r1, #1]
 800820c:	780a      	ldrb	r2, [r1, #0]
 800820e:	2b01      	cmp	r3, #1
 8008210:	f04f 0320 	mov.w	r3, #32
 8008214:	d10b      	bne.n	800822e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8008216:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800821a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800821e:	6803      	ldr	r3, [r0, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	db0b      	blt.n	800823c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8008224:	6803      	ldr	r3, [r0, #0]
 8008226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800822a:	6003      	str	r3, [r0, #0]
 800822c:	e006      	b.n	800823c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800822e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8008232:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008236:	6803      	ldr	r3, [r0, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	daf3      	bge.n	8008224 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800823c:	6803      	ldr	r3, [r0, #0]
 800823e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008242:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8008244:	2000      	movs	r0, #0
 8008246:	4770      	bx	lr

08008248 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8008248:	784b      	ldrb	r3, [r1, #1]
 800824a:	780a      	ldrb	r2, [r1, #0]
 800824c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800824e:	bf0c      	ite	eq
 8008250:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008254:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8008258:	2320      	movs	r3, #32
 800825a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800825e:	6803      	ldr	r3, [r0, #0]
 8008260:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008264:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008266:	78cb      	ldrb	r3, [r1, #3]
 8008268:	3b02      	subs	r3, #2
 800826a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800826c:	bf9e      	ittt	ls
 800826e:	6803      	ldrls	r3, [r0, #0]
 8008270:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8008274:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8008276:	2000      	movs	r0, #0
 8008278:	4770      	bx	lr

0800827a <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800827a:	b538      	push	{r3, r4, r5, lr}
 800827c:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 8008280:	4604      	mov	r4, r0
 8008282:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008286:	22ff      	movs	r2, #255	; 0xff
 8008288:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800828a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800828e:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 8008290:	428b      	cmp	r3, r1
 8008292:	d1f9      	bne.n	8008288 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8008294:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008296:	f04f 32ff 	mov.w	r2, #4294967295
 800829a:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 800829e:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 80082a0:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 80082a4:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 80082a8:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 80082ac:	f7ff fdec 	bl	8007e88 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 80082b0:	2110      	movs	r1, #16
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fdd6 	bl	8007e64 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 80082b8:	4628      	mov	r0, r5
 80082ba:	bd38      	pop	{r3, r4, r5, pc}

080082bc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80082bc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80082c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082c4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80082c8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80082cc:	0109      	lsls	r1, r1, #4
 80082ce:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80082d2:	4319      	orrs	r1, r3
 80082d4:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80082d8:	2000      	movs	r0, #0
 80082da:	4770      	bx	lr

080082dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80082dc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 80082de:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80082e2:	f023 0302 	bic.w	r3, r3, #2
 80082e6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80082ea:	2003      	movs	r0, #3
 80082ec:	f7fc fc86 	bl	8004bfc <HAL_Delay>
  
  return HAL_OK;  
}
 80082f0:	2000      	movs	r0, #0
 80082f2:	bd08      	pop	{r3, pc}

080082f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80082f4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 80082f6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80082fa:	f043 0302 	orr.w	r3, r3, #2
 80082fe:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8008302:	2003      	movs	r0, #3
 8008304:	f7fc fc7a 	bl	8004bfc <HAL_Delay>
  
  return HAL_OK;  
}
 8008308:	2000      	movs	r0, #0
 800830a:	bd08      	pop	{r3, pc}

0800830c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 800830c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800830e:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8008310:	4010      	ands	r0, r2
 8008312:	4770      	bx	lr

08008314 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008314:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008318:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800831c:	69c0      	ldr	r0, [r0, #28]
 800831e:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8008320:	0c00      	lsrs	r0, r0, #16
 8008322:	4770      	bx	lr

08008324 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008324:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008328:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800832c:	69c0      	ldr	r0, [r0, #28]
 800832e:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8008330:	b280      	uxth	r0, r0
 8008332:	4770      	bx	lr

08008334 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008334:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008338:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800833c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008340:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008342:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8008344:	4010      	ands	r0, r2
 8008346:	4770      	bx	lr

08008348 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008348:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 800834a:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800834e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008352:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008356:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008358:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 800835c:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800835e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008360:	b2db      	uxtb	r3, r3
 8008362:	4323      	orrs	r3, r4
  return tmpreg;
}
 8008364:	4018      	ands	r0, r3
 8008366:	bd10      	pop	{r4, pc}

08008368 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8008368:	6940      	ldr	r0, [r0, #20]
}
 800836a:	f000 0001 	and.w	r0, r0, #1
 800836e:	4770      	bx	lr

08008370 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008370:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008374:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008378:	f023 0307 	bic.w	r3, r3, #7
 800837c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008380:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	f002 0206 	and.w	r2, r2, #6
 800838a:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800838c:	bf02      	ittt	eq
 800838e:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8008392:	f042 0203 	orreq.w	r2, r2, #3
 8008396:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80083a2:	2000      	movs	r0, #0
 80083a4:	4770      	bx	lr

080083a6 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80083a6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80083aa:	2000      	movs	r0, #0
 80083ac:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80083b4:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80083b6:	691a      	ldr	r2, [r3, #16]
 80083b8:	f042 0218 	orr.w	r2, r2, #24
 80083bc:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80083c4:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 80083c6:	4770      	bx	lr

080083c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4a13      	ldr	r2, [pc, #76]	; (800842c <USB_CoreReset+0x64>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d901      	bls.n	80083e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e01b      	b.n	800841e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	daf2      	bge.n	80083d4 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f043 0201 	orr.w	r2, r3, #1
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4a09      	ldr	r2, [pc, #36]	; (800842c <USB_CoreReset+0x64>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d901      	bls.n	8008410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e006      	b.n	800841e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d0f0      	beq.n	80083fe <USB_CoreReset+0x36>
  
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	00030d40 	.word	0x00030d40

08008430 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <LL_mDelay+0x24>)
{
 8008432:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008438:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 800843c:	1c41      	adds	r1, r0, #1
    Delay++;
 800843e:	bf18      	it	ne
 8008440:	3001      	addne	r0, #1
  while (Delay)
 8008442:	b908      	cbnz	r0, 8008448 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8008444:	b002      	add	sp, #8
 8008446:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	03d2      	lsls	r2, r2, #15
      Delay--;
 800844c:	bf48      	it	mi
 800844e:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8008452:	e7f6      	b.n	8008442 <LL_mDelay+0x12>
 8008454:	e000e010 	.word	0xe000e010

08008458 <delaytimer_event_handler>:
void mpu9255_get_ms(unsigned long *count) {
	*count = g_ul_ms_ticks;
}

void delaytimer_event_handler() {
	g_ul_ms_ticks++;
 8008458:	4a04      	ldr	r2, [pc, #16]	; (800846c <delaytimer_event_handler+0x14>)
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	6013      	str	r3, [r2, #0]
	if (ms_delay) {
 8008460:	4a03      	ldr	r2, [pc, #12]	; (8008470 <delaytimer_event_handler+0x18>)
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	b10b      	cbz	r3, 800846a <delaytimer_event_handler+0x12>
		ms_delay--;
 8008466:	3b01      	subs	r3, #1
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4770      	bx	lr
 800846c:	20000574 	.word	0x20000574
 8008470:	20000578 	.word	0x20000578

08008474 <readTimer_event_handler>:
}

/*
 * Process reading the fifo from the mpu9255
 */
void readTimer_event_handler() {
 8008474:	4770      	bx	lr

08008476 <android_orient_cb>:

}

void android_orient_cb(unsigned char orientation) {
 8008476:	4770      	bx	lr

08008478 <tap_cb>:
	// do nothing, not used.
}
void tap_cb(unsigned char direction, unsigned char count) {
 8008478:	4770      	bx	lr

0800847a <inv_row_2_scale>:

static  unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
 800847a:	f990 3000 	ldrsb.w	r3, [r0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	dc0c      	bgt.n	800849c <inv_row_2_scale+0x22>
        b = 0;
    else if (row[0] < 0)
 8008482:	d10d      	bne.n	80084a0 <inv_row_2_scale+0x26>
        b = 4;
    else if (row[1] > 0)
 8008484:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc0b      	bgt.n	80084a4 <inv_row_2_scale+0x2a>
        b = 1;
    else if (row[1] < 0)
 800848c:	d10c      	bne.n	80084a8 <inv_row_2_scale+0x2e>
        b = 5;
    else if (row[2] > 0)
 800848e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8008492:	2b00      	cmp	r3, #0
 8008494:	dc0a      	bgt.n	80084ac <inv_row_2_scale+0x32>
        b = 2;
    else if (row[2] < 0)
 8008496:	d10b      	bne.n	80084b0 <inv_row_2_scale+0x36>
        b = 6;
    else
        b = 7;      // error
 8008498:	2007      	movs	r0, #7
 800849a:	4770      	bx	lr
        b = 0;
 800849c:	2000      	movs	r0, #0
 800849e:	4770      	bx	lr
        b = 4;
 80084a0:	2004      	movs	r0, #4
 80084a2:	4770      	bx	lr
        b = 1;
 80084a4:	2001      	movs	r0, #1
 80084a6:	4770      	bx	lr
        b = 5;
 80084a8:	2005      	movs	r0, #5
 80084aa:	4770      	bx	lr
        b = 2;
 80084ac:	2002      	movs	r0, #2
 80084ae:	4770      	bx	lr
        b = 6;
 80084b0:	2006      	movs	r0, #6
    return b;
}
 80084b2:	4770      	bx	lr

080084b4 <mpu9255_write>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80084b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
     unsigned char length, unsigned char const *data) {
 80084b8:	b510      	push	{r4, lr}
 80084ba:	f44f 7480 	mov.w	r4, #256	; 0x100
 80084be:	6284      	str	r4, [r0, #40]	; 0x28
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80084c0:	4811      	ldr	r0, [pc, #68]	; (8008508 <mpu9255_write+0x54>)
	for (uint8_t i = 0; i < length; i++) {
 80084c2:	461c      	mov	r4, r3
 80084c4:	7301      	strb	r1, [r0, #12]
 80084c6:	4601      	mov	r1, r0
 80084c8:	1ae0      	subs	r0, r4, r3
 80084ca:	b2c0      	uxtb	r0, r0
 80084cc:	4282      	cmp	r2, r0
 80084ce:	d811      	bhi.n	80084f4 <mpu9255_write+0x40>
	while ((SPI1->SR & SPI_SR_FTLVL)) {
 80084d0:	688b      	ldr	r3, [r1, #8]
 80084d2:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80084d6:	d1fb      	bne.n	80084d0 <mpu9255_write+0x1c>
	while ((SPI1->SR & SPI_SR_BSY)) {
 80084d8:	688b      	ldr	r3, [r1, #8]
 80084da:	061b      	lsls	r3, r3, #24
 80084dc:	d4fc      	bmi.n	80084d8 <mpu9255_write+0x24>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80084de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084e6:	619a      	str	r2, [r3, #24]
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <mpu9255_write+0x54>)
 80084ea:	6898      	ldr	r0, [r3, #8]
 80084ec:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 80084f0:	d107      	bne.n	8008502 <mpu9255_write+0x4e>
}
 80084f2:	bd10      	pop	{r4, pc}
		while (!(SPI1->SR & SPI_SR_TXE)) {
 80084f4:	6888      	ldr	r0, [r1, #8]
 80084f6:	0780      	lsls	r0, r0, #30
 80084f8:	d5fc      	bpl.n	80084f4 <mpu9255_write+0x40>
		LL_SPI_TransmitData8(SPI1, data[i]);
 80084fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80084fe:	7308      	strb	r0, [r1, #12]
 8008500:	e7e2      	b.n	80084c8 <mpu9255_write+0x14>
		uint8_t dummy = SPI1->DR; 			// clear rx fifo from the receives.
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	e7f1      	b.n	80084ea <mpu9255_write+0x36>
 8008506:	bf00      	nop
 8008508:	40013000 	.word	0x40013000

0800850c <mpu9255_read>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800850c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      unsigned char length, unsigned char *data) {
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	f44f 7480 	mov.w	r4, #256	; 0x100
 8008516:	6284      	str	r4, [r0, #40]	; 0x28
 8008518:	4811      	ldr	r0, [pc, #68]	; (8008560 <mpu9255_read+0x54>)
 800851a:	7301      	strb	r1, [r0, #12]
	while ((SPI2->SR & SPI_SR_FRLVL) == 0) {}; 	//wait for SR buffer to have data
 800851c:	4911      	ldr	r1, [pc, #68]	; (8008564 <mpu9255_read+0x58>)
 800851e:	6888      	ldr	r0, [r1, #8]
 8008520:	f410 6fc0 	tst.w	r0, #1536	; 0x600
 8008524:	d0fb      	beq.n	800851e <mpu9255_read+0x12>
	uint8_t dummy = SPI2->DR; 				// first byte is from cmd transfer. Ignore
 8008526:	68c9      	ldr	r1, [r1, #12]
		while ((SPI2->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 8008528:	4e0e      	ldr	r6, [pc, #56]	; (8008564 <mpu9255_read+0x58>)
 800852a:	490d      	ldr	r1, [pc, #52]	; (8008560 <mpu9255_read+0x54>)
	for (uint8_t i = 0; i < length; i++) {
 800852c:	461c      	mov	r4, r3
 800852e:	25ff      	movs	r5, #255	; 0xff
 8008530:	1ae0      	subs	r0, r4, r3
 8008532:	b2c0      	uxtb	r0, r0
 8008534:	4282      	cmp	r2, r0
 8008536:	d809      	bhi.n	800854c <mpu9255_read+0x40>
	while ((SPI1->SR & SPI_SR_BSY)) {
 8008538:	6888      	ldr	r0, [r1, #8]
 800853a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800853e:	d1fb      	bne.n	8008538 <mpu9255_read+0x2c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008548:	619a      	str	r2, [r3, #24]
}
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	730d      	strb	r5, [r1, #12]
		while ((SPI2->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 800854e:	68b0      	ldr	r0, [r6, #8]
 8008550:	f410 6fc0 	tst.w	r0, #1536	; 0x600
 8008554:	d0fb      	beq.n	800854e <mpu9255_read+0x42>
		data[i] = SPI1->DR;
 8008556:	68c8      	ldr	r0, [r1, #12]
 8008558:	f804 0b01 	strb.w	r0, [r4], #1
 800855c:	e7e8      	b.n	8008530 <mpu9255_read+0x24>
 800855e:	bf00      	nop
 8008560:	40013000 	.word	0x40013000
 8008564:	40003800 	.word	0x40003800

08008568 <mpu9255_delay_ms>:
	ms_delay = num_ms;
 8008568:	4b02      	ldr	r3, [pc, #8]	; (8008574 <mpu9255_delay_ms+0xc>)
 800856a:	6018      	str	r0, [r3, #0]
	while (ms_delay) {
 800856c:	2800      	cmp	r0, #0
 800856e:	d1fd      	bne.n	800856c <mpu9255_delay_ms+0x4>
}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000578 	.word	0x20000578

08008578 <mpu9255_init>:


    return scalar;
}

void mpu9255_init(uint32_t readPeriod) {
 8008578:	b5f0      	push	{r4, r5, r6, r7, lr}
	spi1_init();

	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 800857a:	4c24      	ldr	r4, [pc, #144]	; (800860c <mpu9255_init+0x94>)
void mpu9255_init(uint32_t readPeriod) {
 800857c:	b085      	sub	sp, #20
 800857e:	4607      	mov	r7, r0
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8008580:	2600      	movs	r6, #0
	spi1_init();
 8008582:	f002 ff79 	bl	800b478 <spi1_init>
	delayTimer.alarm = 1; // 1ms
 8008586:	2501      	movs	r5, #1
	delayTimer.timerAlarmCallback = delaytimer_event_handler;
 8008588:	4b21      	ldr	r3, [pc, #132]	; (8008610 <mpu9255_init+0x98>)
 800858a:	6123      	str	r3, [r4, #16]
	systick_app_timer_channel_create(&delayTimer);
 800858c:	4620      	mov	r0, r4
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 800858e:	7226      	strb	r6, [r4, #8]
	delayTimer.alarm = 1; // 1ms
 8008590:	60e5      	str	r5, [r4, #12]
	systick_app_timer_channel_create(&delayTimer);
 8008592:	f7f9 fe97 	bl	80022c4 <systick_app_timer_channel_create>
	systick_app_timer_channel_start(delayTimer.channel);
 8008596:	7820      	ldrb	r0, [r4, #0]
 8008598:	f7f9 fe82 	bl	80022a0 <systick_app_timer_channel_start>

	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 800859c:	481d      	ldr	r0, [pc, #116]	; (8008614 <mpu9255_init+0x9c>)
	readTimer.alarm = readPeriod; // 1ms
	readTimer.timerAlarmCallback = readTimer_event_handler;
 800859e:	4b1e      	ldr	r3, [pc, #120]	; (8008618 <mpu9255_init+0xa0>)
 80085a0:	6103      	str	r3, [r0, #16]
	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 80085a2:	7206      	strb	r6, [r0, #8]
	readTimer.alarm = readPeriod; // 1ms
 80085a4:	60c7      	str	r7, [r0, #12]
	systick_app_timer_channel_create(&readTimer);
 80085a6:	f7f9 fe8d 	bl	80022c4 <systick_app_timer_channel_create>
	// don't start this one until after the dmp is initialized

	// First init the MPU chip
	struct int_param_s int_param;
	mpu_init(&int_param);
 80085aa:	4668      	mov	r0, sp
 80085ac:	f7f9 f894 	bl	80016d8 <mpu_init>

	// load dmp and turn on
	dmp_load_motion_driver_firmware();
 80085b0:	f7f9 fae4 	bl	8001b7c <dmp_load_motion_driver_firmware>
	const signed char orientation[9] = {-1, 0, 0,
 80085b4:	4a19      	ldr	r2, [pc, #100]	; (800861c <mpu9255_init+0xa4>)
 80085b6:	6851      	ldr	r1, [r2, #4]
 80085b8:	6810      	ldr	r0, [r2, #0]
 80085ba:	7a12      	ldrb	r2, [r2, #8]
 80085bc:	ab01      	add	r3, sp, #4
 80085be:	c303      	stmia	r3!, {r0, r1}
    scalar = inv_row_2_scale(mtx);
 80085c0:	a801      	add	r0, sp, #4
	const signed char orientation[9] = {-1, 0, 0,
 80085c2:	701a      	strb	r2, [r3, #0]
    scalar = inv_row_2_scale(mtx);
 80085c4:	f7ff ff59 	bl	800847a <inv_row_2_scale>
 80085c8:	4602      	mov	r2, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 80085ca:	f10d 0007 	add.w	r0, sp, #7
 80085ce:	f7ff ff54 	bl	800847a <inv_row_2_scale>
 80085d2:	4601      	mov	r1, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 80085d4:	f10d 000a 	add.w	r0, sp, #10
 80085d8:	f7ff ff4f 	bl	800847a <inv_row_2_scale>
 80085dc:	0180      	lsls	r0, r0, #6
 80085de:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 80085e2:	4310      	orrs	r0, r2
							0, -1, 0,
							0, 0, 1};

	dmp_set_orientation( inv_orientation_matrix_to_scalar(orientation));
 80085e4:	b280      	uxth	r0, r0
 80085e6:	f7f9 fad3 	bl	8001b90 <dmp_set_orientation>
	dmp_register_tap_cb(tap_cb);
 80085ea:	480d      	ldr	r0, [pc, #52]	; (8008620 <mpu9255_init+0xa8>)
 80085ec:	f7f9 fe24 	bl	8002238 <dmp_register_tap_cb>
	dmp_register_android_orient_cb(android_orient_cb);
 80085f0:	480c      	ldr	r0, [pc, #48]	; (8008624 <mpu9255_init+0xac>)
 80085f2:	f7f9 fe27 	bl	8002244 <dmp_register_android_orient_cb>
	/*
	 *  * There is a known issue in which if you do not enable DMP_FEATURE_TAP
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 80085f6:	20d1      	movs	r0, #209	; 0xd1
 80085f8:	f7f9 fd34 	bl	8002064 <dmp_enable_feature>
	        DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);

	dmp_set_fifo_rate(100);
 80085fc:	2064      	movs	r0, #100	; 0x64
 80085fe:	f7f9 fb55 	bl	8001cac <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 8008602:	4628      	mov	r0, r5
 8008604:	f7f9 fa6a 	bl	8001adc <mpu_set_dmp_state>
}
 8008608:	b005      	add	sp, #20
 800860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860c:	20000560 	.word	0x20000560
 8008610:	08008459 	.word	0x08008459
 8008614:	2000057c 	.word	0x2000057c
 8008618:	08008475 	.word	0x08008475
 800861c:	0800e074 	.word	0x0800e074
 8008620:	08008479 	.word	0x08008479
 8008624:	08008477 	.word	0x08008477

08008628 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8008628:	4805      	ldr	r0, [pc, #20]	; (8008640 <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 800862a:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 800862c:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 800862e:	4805      	ldr	r0, [pc, #20]	; (8008644 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 8008630:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 8008632:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8008634:	4804      	ldr	r0, [pc, #16]	; (8008648 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 8008636:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 800863a:	6840      	ldr	r0, [r0, #4]
                BX      R0
 800863c:	4700      	bx	r0
 800863e:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8008640:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8008644:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8008648:	1fff0000 	.word	0x1fff0000

0800864c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 800864c:	4811      	ldr	r0, [pc, #68]	; (8008694 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 800864e:	4912      	ldr	r1, [pc, #72]	; (8008698 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 8008650:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 8008652:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 8008654:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 8008656:	f43f afe7 	beq.w	8008628 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800865a:	f8df d040 	ldr.w	sp, [pc, #64]	; 800869c <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800865e:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008660:	e003      	b.n	800866a <LoopCopyDataInit>

08008662 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008662:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 8008664:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008666:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008668:	3104      	adds	r1, #4

0800866a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800866a:	480e      	ldr	r0, [pc, #56]	; (80086a4 <LoopForever+0x14>)
	ldr	r3, =_edata
 800866c:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <LoopForever+0x18>)
	adds	r2, r0, r1
 800866e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008670:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008672:	d3f6      	bcc.n	8008662 <CopyDataInit>
	ldr	r2, =_sbss
 8008674:	4a0d      	ldr	r2, [pc, #52]	; (80086ac <LoopForever+0x1c>)
	b	LoopFillZerobss
 8008676:	e002      	b.n	800867e <LoopFillZerobss>

08008678 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008678:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800867a:	f842 3b04 	str.w	r3, [r2], #4

0800867e <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <LoopForever+0x20>)
	cmp	r2, r3
 8008680:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008682:	d3f9      	bcc.n	8008678 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008684:	f003 f892 	bl	800b7ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008688:	f004 f886 	bl	800c798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800868c:	f000 fec2 	bl	8009414 <main>

08008690 <LoopForever>:

LoopForever:
    b LoopForever
 8008690:	e7fe      	b.n	8008690 <LoopForever>
 8008692:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8008694:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8008698:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800869c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80086a0:	0800f240 	.word	0x0800f240
	ldr	r0, =_sdata
 80086a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80086a8:	200004b0 	.word	0x200004b0
	ldr	r2, =_sbss
 80086ac:	200004b0 	.word	0x200004b0
	ldr	r3, = _ebss
 80086b0:	2000b0d4 	.word	0x2000b0d4

080086b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80086b4:	e7fe      	b.n	80086b4 <ADC1_2_IRQHandler>

080086b6 <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value){
 80086b6:	b510      	push	{r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
    data[1] = (0x00 | object); //Index LowByte
    data[2] = (0x00 | (object >> 8)); //Index HighByte
    data[3] = subindex; //subindex
 80086b8:	70c2      	strb	r2, [r0, #3]
    data[4] = (0x00 | value); //SDO Byte 0
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 80086ba:	0a1a      	lsrs	r2, r3, #8
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 80086bc:	2422      	movs	r4, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 80086be:	7041      	strb	r1, [r0, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 80086c0:	7103      	strb	r3, [r0, #4]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80086c2:	0a09      	lsrs	r1, r1, #8
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 80086c4:	7142      	strb	r2, [r0, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 80086c6:	0c1a      	lsrs	r2, r3, #16
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 80086c8:	0e1b      	lsrs	r3, r3, #24
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 80086ca:	7004      	strb	r4, [r0, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80086cc:	7081      	strb	r1, [r0, #2]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 80086ce:	7182      	strb	r2, [r0, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 80086d0:	71c3      	strb	r3, [r0, #7]
 80086d2:	bd10      	pop	{r4, pc}

080086d4 <EPOS4_set_operation_mode>:
}

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 80086d4:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[8];
//    uint16_t object = 0x6060;
//    uint8_t subindex = 0x00;

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 80086d6:	460b      	mov	r3, r1
void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 80086d8:	4604      	mov	r4, r0
    EPOS4_data_framer(data, 0x6060 , 0, mode);
 80086da:	2200      	movs	r2, #0
 80086dc:	4668      	mov	r0, sp
 80086de:	f246 0160 	movw	r1, #24672	; 0x6060
 80086e2:	f7ff ffe8 	bl	80086b6 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 80086e6:	466a      	mov	r2, sp
 80086e8:	2108      	movs	r1, #8
 80086ea:	4620      	mov	r0, r4
 80086ec:	f001 f855 	bl	800979a <CAN_transmit>
    delay_us(10000);
 80086f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80086f4:	f003 f896 	bl	800b824 <delay_us>
}
 80086f8:	b002      	add	sp, #8
 80086fa:	bd10      	pop	{r4, pc}

080086fc <EPOS4_PVM_start>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}

void EPOS4_PVM_start(uint16_t CAN_ID){
 80086fc:	b507      	push	{r0, r1, r2, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 80086fe:	2322      	movs	r3, #34	; 0x22
 8008700:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 800870a:	220f      	movs	r2, #15
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 800870c:	2360      	movs	r3, #96	; 0x60
 800870e:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 8008712:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 8008716:	2300      	movs	r3, #0
//    int subindex = 0x00;
//    int value = 0x000F;

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);

    CAN_transmit(CAN_ID, 8, data);
 8008718:	466a      	mov	r2, sp
 800871a:	2108      	movs	r1, #8
    data[3] = subindex; //subindex
 800871c:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8008720:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8008724:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8008728:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 800872c:	f001 f835 	bl	800979a <CAN_transmit>
    delay_us(10000);
 8008730:	f242 7010 	movw	r0, #10000	; 0x2710
 8008734:	f003 f876 	bl	800b824 <delay_us>
}
 8008738:	b003      	add	sp, #12
 800873a:	f85d fb04 	ldr.w	pc, [sp], #4

0800873e <EPOS4_enable>:
void EPOS4_enable(uint16_t CAN_ID){
 800873e:	b513      	push	{r0, r1, r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8008740:	2322      	movs	r3, #34	; 0x22
 8008742:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 8008746:	2340      	movs	r3, #64	; 0x40
 8008748:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 800874c:	2206      	movs	r2, #6
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 800874e:	2360      	movs	r3, #96	; 0x60
    CAN_transmit(CAN_ID, 8, data);
 8008750:	2108      	movs	r1, #8
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8008752:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 8008756:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 800875a:	2300      	movs	r3, #0
    CAN_transmit(CAN_ID, 8, data);
 800875c:	466a      	mov	r2, sp
void EPOS4_enable(uint16_t CAN_ID){
 800875e:	4604      	mov	r4, r0
    data[3] = subindex; //subindex
 8008760:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8008764:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8008768:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800876c:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 8008770:	f001 f813 	bl	800979a <CAN_transmit>
    delay_us(10000);
 8008774:	f242 7010 	movw	r0, #10000	; 0x2710
 8008778:	f003 f854 	bl	800b824 <delay_us>
    EPOS4_enable2(CAN_ID);
 800877c:	4620      	mov	r0, r4
 800877e:	f7ff ffbd 	bl	80086fc <EPOS4_PVM_start>
}
 8008782:	b002      	add	sp, #8
 8008784:	bd10      	pop	{r4, pc}

08008786 <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 8008786:	b513      	push	{r0, r1, r4, lr}
//    }
//    else{
//
//    }

    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 8008788:	460b      	mov	r3, r1
void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 800878a:	4604      	mov	r4, r0
    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 800878c:	2200      	movs	r2, #0
 800878e:	4668      	mov	r0, sp
 8008790:	f246 0171 	movw	r1, #24689	; 0x6071
 8008794:	f7ff ff8f 	bl	80086b6 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8008798:	466a      	mov	r2, sp
 800879a:	2108      	movs	r1, #8
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fffc 	bl	800979a <CAN_transmit>
    delay_us(50); //1500
 80087a2:	2032      	movs	r0, #50	; 0x32
 80087a4:	f003 f83e 	bl	800b824 <delay_us>
}
 80087a8:	b002      	add	sp, #8
 80087aa:	bd10      	pop	{r4, pc}

080087ac <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(1500);
}

void EPOS4_clear_errors(uint16_t CAN_ID){
 80087ac:	b507      	push	{r0, r1, r2, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 80087ae:	2322      	movs	r3, #34	; 0x22
 80087b0:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 80087ba:	2280      	movs	r2, #128	; 0x80
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80087bc:	2360      	movs	r3, #96	; 0x60
 80087be:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 80087c2:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 80087c6:	2300      	movs	r3, #0
//    int object = 0x6040;
//    int subindex = 0x00;
//    int value = 0x0080;
    EPOS4_data_framer(data, 0x6040, 0x00, 0x80);

    CAN_transmit(CAN_ID, 8, data);
 80087c8:	466a      	mov	r2, sp
 80087ca:	2108      	movs	r1, #8
    data[3] = subindex; //subindex
 80087cc:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 80087d0:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 80087d4:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 80087d8:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 80087dc:	f000 ffdd 	bl	800979a <CAN_transmit>
//    delay_us(200);
//    delay_us(1500); // testing by commenting it
}
 80087e0:	b003      	add	sp, #12
 80087e2:	f85d fb04 	ldr.w	pc, [sp], #4

080087e6 <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 80087e6:	b530      	push	{r4, r5, lr}
    
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 80087e8:	ec53 2b10 	vmov	r2, r3, d0
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 80087ec:	b087      	sub	sp, #28
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 80087ee:	ec51 0b14 	vmov	r0, r1, d4
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 80087f2:	ed8d 1b04 	vstr	d1, [sp, #16]
 80087f6:	ed8d 3b00 	vstr	d3, [sp]
 80087fa:	ed8d 2b02 	vstr	d2, [sp, #8]
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 80087fe:	f7f7 fd43 	bl	8000288 <__aeabi_dsub>
 8008802:	ed9d 2b02 	vldr	d2, [sp, #8]
 8008806:	ec53 2b12 	vmov	r2, r3, d2
 800880a:	f7f7 fef1 	bl	80005f0 <__aeabi_dmul>
 800880e:	ed9d 1b04 	vldr	d1, [sp, #16]
 8008812:	ed9d 3b00 	vldr	d3, [sp]
 8008816:	ec53 2b11 	vmov	r2, r3, d1
 800881a:	4604      	mov	r4, r0
 800881c:	460d      	mov	r5, r1
 800881e:	ec51 0b13 	vmov	r0, r1, d3
 8008822:	f7f7 fee5 	bl	80005f0 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fd2b 	bl	8000288 <__aeabi_dsub>
 8008832:	4602      	mov	r2, r0
 8008834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
}
 8008838:	ec43 2b10 	vmov	d0, r2, r3
 800883c:	b007      	add	sp, #28
 800883e:	bd30      	pop	{r4, r5, pc}

08008840 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8008840:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8008842:	2301      	movs	r3, #1
 8008844:	f88d 3007 	strb.w	r3, [sp, #7]
  
//  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
//  {
//   status = SD_NOT_PRESENT;
//  }
  return status;
 8008848:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800884c:	b002      	add	sp, #8
 800884e:	4770      	bx	lr

08008850 <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <BSP_SD_IRQHandler+0x8>)
 8008852:	f7fd bf27 	b.w	80066a4 <HAL_SD_IRQHandler>
 8008856:	bf00      	nop
 8008858:	20008980 	.word	0x20008980

0800885c <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 800885c:	4b01      	ldr	r3, [pc, #4]	; (8008864 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 800885e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008860:	f7fc bb6a 	b.w	8004f38 <HAL_DMA_IRQHandler>
 8008864:	20008980 	.word	0x20008980

08008868 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8008868:	4b01      	ldr	r3, [pc, #4]	; (8008870 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 800886a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800886c:	f7fc bb64 	b.w	8004f38 <HAL_DMA_IRQHandler>
 8008870:	20008980 	.word	0x20008980

08008874 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <BSP_SD_GetStatus+0x8>)
 8008876:	f7fe bb63 	b.w	8006f40 <HAL_SD_GetStatus>
 800887a:	bf00      	nop
 800887c:	20008980 	.word	0x20008980

08008880 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 8008880:	4601      	mov	r1, r0
 8008882:	4801      	ldr	r0, [pc, #4]	; (8008888 <BSP_SD_GetCardInfo+0x8>)
 8008884:	f7fd bf6e 	b.w	8006764 <HAL_SD_Get_CardInfo>
 8008888:	20008980 	.word	0x20008980

0800888c <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 800888c:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800888e:	4c15      	ldr	r4, [pc, #84]	; (80088e4 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8008890:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 8008892:	2307      	movs	r3, #7
 8008894:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8008896:	2300      	movs	r3, #0
 8008898:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800889a:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800889c:	2380      	movs	r3, #128	; 0x80
 800889e:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80088a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a4:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80088a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088aa:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80088ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80088b0:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80088b2:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 80088b4:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <SD_DMAConfigRx+0x5c>)
 80088b6:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80088b8:	4620      	mov	r0, r4
 80088ba:	f7fc fb1f 	bl	8004efc <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80088be:	4620      	mov	r0, r4
 80088c0:	f7fc fa96 	bl	8004df0 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7fc fa23 	bl	8004d10 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ca:	4b08      	ldr	r3, [pc, #32]	; (80088ec <SD_DMAConfigRx+0x60>)
 80088cc:	2230      	movs	r2, #48	; 0x30
 80088ce:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80088d2:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80088d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088d8:	605a      	str	r2, [r3, #4]
}
 80088da:	bf14      	ite	ne
 80088dc:	2029      	movne	r0, #41	; 0x29
 80088de:	2000      	moveq	r0, #0
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	20000590 	.word	0x20000590
 80088e8:	40020444 	.word	0x40020444
 80088ec:	e000e100 	.word	0xe000e100

080088f0 <BSP_SD_ReadBlocks_DMA>:
{
 80088f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 80088f2:	4c10      	ldr	r4, [pc, #64]	; (8008934 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 80088f4:	4605      	mov	r5, r0
 80088f6:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 80088f8:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 80088fa:	2300      	movs	r3, #0
{
 80088fc:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 80088fe:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008900:	f7ff ffc4 	bl	800888c <SD_DMAConfigRx>
  if(state == MSD_OK)
 8008904:	b998      	cbnz	r0, 800892e <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	4632      	mov	r2, r6
 8008910:	463b      	mov	r3, r7
 8008912:	4629      	mov	r1, r5
 8008914:	4620      	mov	r0, r4
 8008916:	f7fd fdcb 	bl	80064b0 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 800891a:	b940      	cbnz	r0, 800892e <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 800891c:	4906      	ldr	r1, [pc, #24]	; (8008938 <BSP_SD_ReadBlocks_DMA+0x48>)
 800891e:	4620      	mov	r0, r4
 8008920:	f7fe fadd 	bl	8006ede <HAL_SD_CheckReadOperation>
 8008924:	3000      	adds	r0, #0
 8008926:	bf18      	it	ne
 8008928:	2001      	movne	r0, #1
}
 800892a:	b003      	add	sp, #12
 800892c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800892e:	2001      	movs	r0, #1
 8008930:	e7fb      	b.n	800892a <BSP_SD_ReadBlocks_DMA+0x3a>
 8008932:	bf00      	nop
 8008934:	20008980 	.word	0x20008980
 8008938:	00989680 	.word	0x00989680

0800893c <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 800893c:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800893e:	4c15      	ldr	r4, [pc, #84]	; (8008994 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8008940:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8008942:	2307      	movs	r3, #7
 8008944:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8008946:	2310      	movs	r3, #16
 8008948:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800894a:	2300      	movs	r3, #0
 800894c:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800894e:	2380      	movs	r3, #128	; 0x80
 8008950:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008956:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8008958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800895c:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800895e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008962:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8008964:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <SD_DMAConfigTx+0x5c>)
 8008968:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 800896a:	4620      	mov	r0, r4
 800896c:	f7fc fac6 	bl	8004efc <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8008970:	4620      	mov	r0, r4
 8008972:	f7fc fa3d 	bl	8004df0 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 8008976:	4620      	mov	r0, r4
 8008978:	f7fc f9ca 	bl	8004d10 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <SD_DMAConfigTx+0x60>)
 800897e:	2230      	movs	r2, #48	; 0x30
 8008980:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 8008984:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800898a:	605a      	str	r2, [r3, #4]
}
 800898c:	bf14      	ite	ne
 800898e:	2029      	movne	r0, #41	; 0x29
 8008990:	2000      	moveq	r0, #0
 8008992:	bd10      	pop	{r4, pc}
 8008994:	200005d8 	.word	0x200005d8
 8008998:	40020444 	.word	0x40020444
 800899c:	e000e100 	.word	0xe000e100

080089a0 <BSP_SD_Init>:
{
 80089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 80089a2:	2214      	movs	r2, #20
{
 80089a4:	b08b      	sub	sp, #44	; 0x2c
  uSdHandle.Instance = SDMMC1;
 80089a6:	4c38      	ldr	r4, [pc, #224]	; (8008a88 <BSP_SD_Init+0xe8>)
 80089a8:	4b38      	ldr	r3, [pc, #224]	; (8008a8c <BSP_SD_Init+0xec>)
 80089aa:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80089ac:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 80089ae:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 80089b0:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80089b4:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80089b6:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80089b8:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80089ba:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80089bc:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 80089be:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80089c0:	f003 ff38 	bl	800c834 <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80089c4:	4b32      	ldr	r3, [pc, #200]	; (8008a90 <BSP_SD_Init+0xf0>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80089c6:	4833      	ldr	r0, [pc, #204]	; (8008a94 <BSP_SD_Init+0xf4>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80089c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80089ca:	4e33      	ldr	r6, [pc, #204]	; (8008a98 <BSP_SD_Init+0xf8>)
 80089cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089d0:	661a      	str	r2, [r3, #96]	; 0x60
 80089d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80089d4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80089d8:	9200      	str	r2, [sp, #0]
 80089da:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 80089dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089de:	f042 0202 	orr.w	r2, r2, #2
 80089e2:	649a      	str	r2, [r3, #72]	; 0x48
 80089e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089e6:	f002 0202 	and.w	r2, r2, #2
 80089ea:	9201      	str	r2, [sp, #4]
 80089ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80089ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089f0:	f042 0204 	orr.w	r2, r2, #4
 80089f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80089f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089f8:	f002 0204 	and.w	r2, r2, #4
 80089fc:	9202      	str	r2, [sp, #8]
 80089fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a02:	f042 0208 	orr.w	r2, r2, #8
 8008a06:	64da      	str	r2, [r3, #76]	; 0x4c
 8008a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a0a:	f002 0208 	and.w	r2, r2, #8
 8008a0e:	9203      	str	r2, [sp, #12]
 8008a10:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8008a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a14:	432a      	orrs	r2, r5
 8008a16:	64da      	str	r2, [r3, #76]	; 0x4c
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8008a1a:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8008a1c:	402b      	ands	r3, r5
 8008a1e:	9304      	str	r3, [sp, #16]
 8008a20:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8008a22:	2302      	movs	r3, #2
 8008a24:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a26:	2303      	movs	r3, #3
 8008a28:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8008a2a:	230c      	movs	r3, #12
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8008a2e:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8008a30:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8008a34:	9305      	str	r3, [sp, #20]
 8008a36:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8008a3a:	f7fc fac5 	bl	8004fc8 <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 8008a3e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8008a40:	4816      	ldr	r0, [pc, #88]	; (8008a9c <BSP_SD_Init+0xfc>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 8008a42:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8008a44:	a905      	add	r1, sp, #20
 8008a46:	f7fc fabf 	bl	8004fc8 <HAL_GPIO_Init>
 8008a4a:	6077      	str	r7, [r6, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7ff ff75 	bl	800893c <SD_DMAConfigTx>
 8008a52:	b900      	cbnz	r0, 8008a56 <BSP_SD_Init+0xb6>
 8008a54:	6077      	str	r7, [r6, #4]
  __IO uint8_t status = SD_PRESENT;
 8008a56:	f88d 5014 	strb.w	r5, [sp, #20]
  return status;
 8008a5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d002      	beq.n	8008a68 <BSP_SD_Init+0xc8>
    return MSD_ERROR;
 8008a62:	2001      	movs	r0, #1
}
 8008a64:	b00b      	add	sp, #44	; 0x2c
 8008a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 8008a68:	490d      	ldr	r1, [pc, #52]	; (8008aa0 <BSP_SD_Init+0x100>)
 8008a6a:	4807      	ldr	r0, [pc, #28]	; (8008a88 <BSP_SD_Init+0xe8>)
 8008a6c:	f7fd ffb4 	bl	80069d8 <HAL_SD_Init>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1f6      	bne.n	8008a62 <BSP_SD_Init+0xc2>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 8008a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a78:	4803      	ldr	r0, [pc, #12]	; (8008a88 <BSP_SD_Init+0xe8>)
 8008a7a:	f7fe f985 	bl	8006d88 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 8008a7e:	3000      	adds	r0, #0
 8008a80:	bf18      	it	ne
 8008a82:	2001      	movne	r0, #1
 8008a84:	e7ee      	b.n	8008a64 <BSP_SD_Init+0xc4>
 8008a86:	bf00      	nop
 8008a88:	20008980 	.word	0x20008980
 8008a8c:	40012800 	.word	0x40012800
 8008a90:	40021000 	.word	0x40021000
 8008a94:	48000800 	.word	0x48000800
 8008a98:	e000e100 	.word	0xe000e100
 8008a9c:	48000c00 	.word	0x48000c00
 8008aa0:	20000620 	.word	0x20000620

08008aa4 <BSP_SD_WriteBlocks_DMA>:
{
 8008aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 8008aa6:	4c10      	ldr	r4, [pc, #64]	; (8008ae8 <BSP_SD_WriteBlocks_DMA+0x44>)
{
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008aac:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 8008aae:	2300      	movs	r3, #0
{
 8008ab0:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 8008ab2:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008ab4:	f7ff ff42 	bl	800893c <SD_DMAConfigTx>
  if(state == MSD_OK)
 8008ab8:	b998      	cbnz	r0, 8008ae2 <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	9b08      	ldr	r3, [sp, #32]
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4632      	mov	r2, r6
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7fd fd6b 	bl	80065a4 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 8008ace:	b940      	cbnz	r0, 8008ae2 <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008ad0:	4906      	ldr	r1, [pc, #24]	; (8008aec <BSP_SD_WriteBlocks_DMA+0x48>)
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f7fe fa59 	bl	8006f8a <HAL_SD_CheckWriteOperation>
 8008ad8:	3000      	adds	r0, #0
 8008ada:	bf18      	it	ne
 8008adc:	2001      	movne	r0, #1
}
 8008ade:	b003      	add	sp, #12
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	e7fb      	b.n	8008ade <BSP_SD_WriteBlocks_DMA+0x3a>
 8008ae6:	bf00      	nop
 8008ae8:	20008980 	.word	0x20008980
 8008aec:	00989680 	.word	0x00989680

08008af0 <controller_impedance>:
// Greg end

//struct st_impedance controller_impedance(float angle, float knee_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float knee_velocity,float Heel_pressure, float Toe_pressure,float IMU_acceleration,float hip_joint_angle)
{
 8008af0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    switch (state)
 8008af4:	4f3c      	ldr	r7, [pc, #240]	; (8008be8 <controller_impedance+0xf8>)
 8008af6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8008bfc <controller_impedance+0x10c>
 8008afa:	783b      	ldrb	r3, [r7, #0]
 8008afc:	4c3b      	ldr	r4, [pc, #236]	; (8008bec <controller_impedance+0xfc>)
{
 8008afe:	4606      	mov	r6, r0
 8008b00:	ee10 5a10 	vmov	r5, s0
 8008b04:	ee10 0a90 	vmov	r0, s1
    switch (state)
 8008b08:	b19b      	cbz	r3, 8008b32 <controller_impedance+0x42>
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d03f      	beq.n	8008b8e <controller_impedance+0x9e>
//
//        break;
    // Greg end comment
    }

    my_st_impedance.st = state;
 8008b0e:	4d38      	ldr	r5, [pc, #224]	; (8008bf0 <controller_impedance+0x100>)
 8008b10:	783b      	ldrb	r3, [r7, #0]
 8008b12:	602b      	str	r3, [r5, #0]
    my_st_impedance.desired_torque = d_torque;
 8008b14:	e9d8 0100 	ldrd	r0, r1, [r8]
 8008b18:	f7f8 f842 	bl	8000ba0 <__aeabi_d2f>
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 8008b1c:	6823      	ldr	r3, [r4, #0]
    my_st_impedance.desired_torque = d_torque;
 8008b1e:	6068      	str	r0, [r5, #4]
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 8008b20:	60ab      	str	r3, [r5, #8]
    return my_st_impedance;
 8008b22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	b002      	add	sp, #8
 8008b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	d_torque = Impedance(angle, knee_velocity, ST_stiffness, ST_damping, ST_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8008b32:	f7f7 fd09 	bl	8000548 <__aeabi_f2d>
 8008b36:	e9cd 0100 	strd	r0, r1, [sp]
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7f7 fd04 	bl	8000548 <__aeabi_f2d>
 8008b40:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8008bb8 <controller_impedance+0xc8>
 8008b44:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8008bc0 <controller_impedance+0xd0>
 8008b48:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8008bc8 <controller_impedance+0xd8>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8008b4c:	ed9d 1b00 	vldr	d1, [sp]
 8008b50:	ec41 0b10 	vmov	d0, r0, r1
 8008b54:	f7ff fe47 	bl	80087e6 <Impedance>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8008b58:	a31d      	add	r3, pc, #116	; (adr r3, 8008bd0 <controller_impedance+0xe0>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8008b5e:	ec51 0b10 	vmov	r0, r1, d0
 8008b62:	ed88 0b00 	vstr	d0, [r8]
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8008b66:	f7f7 fe6d 	bl	8000844 <__aeabi_ddiv>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <controller_impedance+0x104>)
 8008b6e:	f7f7 fd3f 	bl	80005f0 <__aeabi_dmul>
 8008b72:	f7f7 ffed 	bl	8000b50 <__aeabi_d2iz>
    		if (CST_CMD_EPOS_contrl>=max_CST_CMD_EPOS)
 8008b76:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
 8008b7a:	db16      	blt.n	8008baa <controller_impedance+0xba>
    			CST_CMD_EPOS_contrl=max_CST_CMD_EPOS;
 8008b7c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008b80:	6023      	str	r3, [r4, #0]
    		EPOS4_CST_apply_torque(0x601,CST_CMD_EPOS_contrl); //100 means 10% +ve is extension -ve is flexion
 8008b82:	6821      	ldr	r1, [r4, #0]
 8008b84:	f240 6001 	movw	r0, #1537	; 0x601
 8008b88:	f7ff fdfd 	bl	8008786 <EPOS4_CST_apply_torque>
    		break;
 8008b8c:	e7bf      	b.n	8008b0e <controller_impedance+0x1e>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8008b8e:	f7f7 fcdb 	bl	8000548 <__aeabi_f2d>
 8008b92:	e9cd 0100 	strd	r0, r1, [sp]
 8008b96:	4628      	mov	r0, r5
 8008b98:	f7f7 fcd6 	bl	8000548 <__aeabi_f2d>
 8008b9c:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8008bd8 <controller_impedance+0xe8>
 8008ba0:	ed9f 3b07 	vldr	d3, [pc, #28]	; 8008bc0 <controller_impedance+0xd0>
 8008ba4:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8008be0 <controller_impedance+0xf0>
 8008ba8:	e7d0      	b.n	8008b4c <controller_impedance+0x5c>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8008baa:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <controller_impedance+0x108>)
 8008bac:	4298      	cmp	r0, r3
 8008bae:	bfac      	ite	ge
 8008bb0:	6020      	strge	r0, [r4, #0]
 8008bb2:	6023      	strlt	r3, [r4, #0]
 8008bb4:	e7e5      	b.n	8008b82 <controller_impedance+0x92>
 8008bb6:	bf00      	nop
 8008bb8:	8f5c28f6 	.word	0x8f5c28f6
 8008bbc:	c013f5c2 	.word	0xc013f5c2
	...
 8008bcc:	40040000 	.word	0x40040000
 8008bd0:	66666666 	.word	0x66666666
 8008bd4:	403e6666 	.word	0x403e6666
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	c0418000 	.word	0xc0418000
 8008be0:	cccccccd 	.word	0xcccccccd
 8008be4:	3fe4cccc 	.word	0x3fe4cccc
 8008be8:	20000688 	.word	0x20000688
 8008bec:	20000678 	.word	0x20000678
 8008bf0:	200089e0 	.word	0x200089e0
 8008bf4:	408f4000 	.word	0x408f4000
 8008bf8:	fffffb50 	.word	0xfffffb50
 8008bfc:	20000680 	.word	0x20000680

08008c00 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8008c00:	2000      	movs	r0, #0
 8008c02:	4770      	bx	lr

08008c04 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <LL_AHB2_GRP1_EnableClock+0x18>)
 8008c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c08:	4302      	orrs	r2, r0
 8008c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8008c0e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008c10:	4018      	ands	r0, r3
 8008c12:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8008c14:	9b01      	ldr	r3, [sp, #4]
}
 8008c16:	b002      	add	sp, #8
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40021000 	.word	0x40021000

08008c20 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 8008c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8008c24:	2004      	movs	r0, #4
 8008c26:	f7ff ffed 	bl	8008c04 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8008c2a:	2080      	movs	r0, #128	; 0x80
 8008c2c:	f7ff ffea 	bl	8008c04 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008c30:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8008c32:	4c6a      	ldr	r4, [pc, #424]	; (8008ddc <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c34:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008de0 <MX_GPIO_Init+0x1c0>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8008c38:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8008de4 <MX_GPIO_Init+0x1c4>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008c3c:	f7ff ffe2 	bl	8008c04 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008c40:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->BRR, PinMask);
 8008c42:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 8008c46:	f7ff ffdd 	bl	8008c04 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8008c4a:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008c4c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008c4e:	2601      	movs	r6, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8008c50:	f7ff ffd8 	bl	8008c04 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8008c54:	270c      	movs	r7, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c56:	4621      	mov	r1, r4
 8008c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8008c5c:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008c5e:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008c60:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008c62:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008c64:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c66:	f7fe fd33 	bl	80076d0 <LL_GPIO_Init>
 8008c6a:	f8c9 7028 	str.w	r7, [r9, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c6e:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = LED_B_PIN;
 8008c70:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c74:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED_B_PIN;
 8008c76:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008c78:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008c7a:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008c7c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008c7e:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c80:	f7fe fd26 	bl	80076d0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 8008c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c88:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8008c8c:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008c8e:	e884 0028 	stmia.w	r4, {r3, r5}
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8008c92:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008c94:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008c96:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008c98:	6123      	str	r3, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8008c9a:	f7fe fd19 	bl	80076d0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 8008c9e:	2240      	movs	r2, #64	; 0x40
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 8008ca4:	6022      	str	r2, [r4, #0]
 8008ca6:	9201      	str	r2, [sp, #4]

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8008ca8:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008cac:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008cae:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008cb0:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008cb2:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8008cb4:	f7fe fd0c 	bl	80076d0 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008cb8:	2302      	movs	r3, #2
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008cbe:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8008cc0:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008cc4:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8008cc6:	f7fe fd03 	bl	80076d0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 8008cce:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008cd2:	6066      	str	r6, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8008cd4:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd8:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008cda:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008cdc:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8008cde:	f7fe fcf7 	bl	80076d0 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8008ce6:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008cea:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008cec:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008cee:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008cf0:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8008cf2:	f7fe fced 	bl	80076d0 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008cf6:	f8c9 b018 	str.w	fp, [r9, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8008cfa:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 8008cfc:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8008d00:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 8008d02:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008d06:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008d08:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d0a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d0c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8008d0e:	f7fe fcdf 	bl	80076d0 <LL_GPIO_Init>
 8008d12:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8008d16:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8008de8 <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 8008d1a:	6026      	str	r6, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008d20:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008d22:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d24:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d26:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8008d28:	f7fe fcd2 	bl	80076d0 <LL_GPIO_Init>
 8008d2c:	f8cb 6018 	str.w	r6, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8008d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8008d34:	4621      	mov	r1, r4
 8008d36:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008d3c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008d3e:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d40:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d42:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8008d44:	f7fe fcc4 	bl	80076d0 <LL_GPIO_Init>
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	f8c9 3018 	str.w	r3, [r9, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8008d4e:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8008d50:	2302      	movs	r3, #2
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8008d52:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008d54:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d58:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d5a:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8008d5c:	f7fe fcb8 	bl	80076d0 <LL_GPIO_Init>
 8008d60:	2302      	movs	r3, #2
 8008d62:	f8cb 3018 	str.w	r3, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8008d66:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8008d68:	f04f 0b10 	mov.w	fp, #16
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8008d6c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008d6e:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8008d70:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008d74:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8008d76:	f7fe fcab 	bl	80076d0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8008d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008d82:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008d86:	6126      	str	r6, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d88:	f7fe fca2 	bl	80076d0 <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8008d8c:	9a01      	ldr	r2, [sp, #4]
 8008d8e:	6022      	str	r2, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d90:	4621      	mov	r1, r4
 8008d92:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8008d94:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008d96:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008d98:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d9a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d9c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d9e:	f7fe fc97 	bl	80076d0 <LL_GPIO_Init>
 8008da2:	9a00      	ldr	r2, [sp, #0]
 8008da4:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008da8:	4621      	mov	r1, r4
 8008daa:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8008dac:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008db0:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008db2:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008db4:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008db6:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008db8:	f7fe fc8a 	bl	80076d0 <LL_GPIO_Init>
//  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
//  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);

  // Measure interrupt speed
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8008dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f8ca b018 	str.w	fp, [sl, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008dc8:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008dcc:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008dce:	6125      	str	r5, [r4, #16]
  // Greg end
}
 8008dd0:	b003      	add	sp, #12
 8008dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dd6:	f7fe bc7b 	b.w	80076d0 <LL_GPIO_Init>
 8008dda:	bf00      	nop
 8008ddc:	200089ec 	.word	0x200089ec
 8008de0:	48000400 	.word	0x48000400
 8008de4:	48000800 	.word	0x48000800
 8008de8:	48001c00 	.word	0x48001c00

08008dec <BLUE_LED_OFF>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <BLUE_LED_OFF+0xc>)
 8008dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008df2:	619a      	str	r2, [r3, #24]
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	48000400 	.word	0x48000400

08008dfc <ALL_LED_OFF>:
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <ALL_LED_OFF+0x18>)
 8008dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e02:	619a      	str	r2, [r3, #24]
 8008e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e08:	2204      	movs	r2, #4
 8008e0a:	619a      	str	r2, [r3, #24]
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	619a      	str	r2, [r3, #24]
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	48000400 	.word	0x48000400

08008e18 <GREEN_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8008e18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008e20:	4a03      	ldr	r2, [pc, #12]	; (8008e30 <GREEN_LED_ONLY+0x18>)
 8008e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008e26:	6191      	str	r1, [r2, #24]
 8008e28:	2208      	movs	r2, #8
 8008e2a:	619a      	str	r2, [r3, #24]
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	48000400 	.word	0x48000400

08008e34 <RED_LED_OFF>:
 8008e34:	4770      	bx	lr

08008e36 <GREEN_LED_OFF>:
 8008e36:	4770      	bx	lr

08008e38 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8008e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008e40:	4a03      	ldr	r2, [pc, #12]	; (8008e50 <RED_LED_ONLY+0x18>)
 8008e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008e46:	6191      	str	r1, [r2, #24]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	619a      	str	r2, [r3, #24]
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	48000400 	.word	0x48000400

08008e54 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8008e54:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <BLUE_LED_ONLY+0x18>)
 8008e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e60:	2204      	movs	r2, #4
 8008e62:	619a      	str	r2, [r3, #24]
 8008e64:	2208      	movs	r2, #8
 8008e66:	619a      	str	r2, [r3, #24]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	48000400 	.word	0x48000400

08008e70 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <VIOLET_LED_ONLY+0x18>)
 8008e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e76:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e7c:	2204      	movs	r2, #4
 8008e7e:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008e80:	2208      	movs	r2, #8
 8008e82:	629a      	str	r2, [r3, #40]	; 0x28
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	48000400 	.word	0x48000400

08008e8c <CYAN_LED_ONLY>:
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <CYAN_LED_ONLY+0x18>)
 8008e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e92:	629a      	str	r2, [r3, #40]	; 0x28
 8008e94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e98:	2204      	movs	r2, #4
 8008e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	48000400 	.word	0x48000400

08008ea8 <ALL_LED_ON>:
 8008ea8:	f7ff bff0 	b.w	8008e8c <CYAN_LED_ONLY>

08008eac <SD_POWER_ON>:
 8008eac:	4770      	bx	lr

08008eae <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 8008eae:	4770      	bx	lr

08008eb0 <processKnee>:
struct imu_data imu_data_now;
float imu_angle_past = 0.0, imu_angle_now;
// Greg end


void processKnee() {
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	ed2d 8b04 	vpush	{d8-d9}
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8008eb8:	4bc3      	ldr	r3, [pc, #780]	; (80091c8 <processKnee+0x318>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
void processKnee() {
 8008ebe:	b091      	sub	sp, #68	; 0x44
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8008ec0:	f040 8132 	bne.w	8009128 <processKnee+0x278>
	{
		// Get knee angle in deg
		angle_now = knee_angle();
 8008ec4:	f002 f9b0 	bl	800b228 <knee_angle>

		// Compute knee speed in deg/sec with low-frequency differentiator (fc = 10 Hz)
		if (count == 1)
 8008ec8:	4fc0      	ldr	r7, [pc, #768]	; (80091cc <processKnee+0x31c>)
		angle_now = knee_angle();
 8008eca:	4bc1      	ldr	r3, [pc, #772]	; (80091d0 <processKnee+0x320>)
 8008ecc:	4cc1      	ldr	r4, [pc, #772]	; (80091d4 <processKnee+0x324>)
 8008ece:	ed83 0a00 	vstr	s0, [r3]
		if (count == 1)
 8008ed2:	783b      	ldrb	r3, [r7, #0]
 8008ed4:	4dc0      	ldr	r5, [pc, #768]	; (80091d8 <processKnee+0x328>)
 8008ed6:	4ec1      	ldr	r6, [pc, #772]	; (80091dc <processKnee+0x32c>)
 8008ed8:	2b01      	cmp	r3, #1
		angle_now = knee_angle();
 8008eda:	eeb0 8a40 	vmov.f32	s16, s0
		if (count == 1)
 8008ede:	f040 8128 	bne.w	8009132 <processKnee+0x282>
		{
			angular_velocity = 0.0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6023      	str	r3, [r4, #0]
		}
		else
		{
			angular_velocity = (float) 62.83*(angle_now - angle_old) + 0.8819*old_angular_velocity;
		}
		old_angular_velocity = (float) angular_velocity;
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	6033      	str	r3, [r6, #0]
		angle_old            = (float) angle_now;
 8008eea:	ed85 8a00 	vstr	s16, [r5]

		// Filter load cell with 2nd order low-pass Butterworth (fc = 20 Hz)
		uint16_t Loadcell_top = Read_Loadcell1();
 8008eee:	f001 fbf3 	bl	800a6d8 <Read_Loadcell1>
 8008ef2:	9004      	str	r0, [sp, #16]
 8008ef4:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8008ef8:	4eb9      	ldr	r6, [pc, #740]	; (80091e0 <processKnee+0x330>)
		uint16_t Loadcell_bot = Read_Loadcell2();
 8008efa:	f001 fc19 	bl	800a730 <Read_Loadcell2>
 8008efe:	9005      	str	r0, [sp, #20]
 8008f00:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008f04:	9303      	str	r3, [sp, #12]
		if (count == 1)
 8008f06:	783b      	ldrb	r3, [r7, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	f040 8132 	bne.w	8009172 <processKnee+0x2c2>
		{
			Loadcell_top_filtered    = Loadcell_top;
			Loadcell_top_m2          = Loadcell_top;
 8008f0e:	4bb5      	ldr	r3, [pc, #724]	; (80091e4 <processKnee+0x334>)
			Loadcell_top_filtered_m2 = Loadcell_top;

			Loadcell_bot_filtered    = Loadcell_bot;
			Loadcell_bot_m2          = Loadcell_bot;
 8008f10:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			Loadcell_top_m2          = Loadcell_top;
 8008f14:	f8a3 a000 	strh.w	sl, [r3]
			Loadcell_top_filtered    = Loadcell_top;
 8008f18:	ee07 aa90 	vmov	s15, sl
			Loadcell_top_filtered_m2 = Loadcell_top;
 8008f1c:	4bb2      	ldr	r3, [pc, #712]	; (80091e8 <processKnee+0x338>)
			Loadcell_top_filtered    = Loadcell_top;
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			Loadcell_top_filtered_m2 = Loadcell_top;
 8008f22:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_top_filtered    = Loadcell_top;
 8008f26:	edc6 7a00 	vstr	s15, [r6]
			Loadcell_bot_filtered    = Loadcell_bot;
 8008f2a:	eddd 7a03 	vldr	s15, [sp, #12]
 8008f2e:	4baf      	ldr	r3, [pc, #700]	; (80091ec <processKnee+0x33c>)
 8008f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f34:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_bot_m2          = Loadcell_bot;
 8008f38:	4bad      	ldr	r3, [pc, #692]	; (80091f0 <processKnee+0x340>)
 8008f3a:	801a      	strh	r2, [r3, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot;
 8008f3c:	4bad      	ldr	r3, [pc, #692]	; (80091f4 <processKnee+0x344>)
 8008f3e:	edc3 7a00 	vstr	s15, [r3]

			count++;
 8008f42:	2302      	movs	r3, #2

			Loadcell_bot_filtered    = Loadcell_bot;
			Loadcell_bot_m1          = Loadcell_bot;
			Loadcell_bot_filtered_m1 = Loadcell_bot;

			count++;
 8008f44:	703b      	strb	r3, [r7, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
		}

		// Get raw IMU data
		imu_data_now = IMU1_read();
 8008f46:	4cac      	ldr	r4, [pc, #688]	; (80091f8 <processKnee+0x348>)
		// Compute hip angle using
		// 1) Madgwick filter (assumes X+ forward and Z+ upward)
//		hip_angle = -MadgwickAHRSupdateIMU(imu_data_now.GX/32.8*(3.1416/180), -imu_data_now.GZ/32.8*(3.1416/180), imu_data_now.GY/32.8*(3.1416/180), imu_data_now.AX, -imu_data_now.AZ, imu_data_now.AY);
//		hip_angle = hip_angle*rad2deg - angle_now;
		// 2) Complementary filter
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f48:	4dac      	ldr	r5, [pc, #688]	; (80091fc <processKnee+0x34c>)
		IMU_acc = -imu_data_now.AY;
 8008f4a:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8009240 <processKnee+0x390>
		imu_angle_past = imu_angle_now;
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008f4e:	4fa0      	ldr	r7, [pc, #640]	; (80091d0 <processKnee+0x320>)
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008f50:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8009244 <processKnee+0x394>

		// Measure speed with oscope start
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);

		// Command motor
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008f54:	4e9f      	ldr	r6, [pc, #636]	; (80091d4 <processKnee+0x324>)
		Mag_Enc2_Store();

		// Store data
		// Data can only be stored as integers, so some scaling is done to help resolution
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
		Knee_data_store(angle_now / 0.088, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 8008f56:	ed9f 9aaa 	vldr	s18, [pc, #680]	; 8009200 <processKnee+0x350>
		imu_data_now = IMU1_read();
 8008f5a:	a80c      	add	r0, sp, #48	; 0x30
 8008f5c:	f001 fffa 	bl	800af54 <IMU1_read>
 8008f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f6a:	60a3      	str	r3, [r4, #8]
		imu_data_now.GX -= -60;
 8008f6c:	88e3      	ldrh	r3, [r4, #6]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f6e:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8009204 <processKnee+0x354>
 8008f72:	6820      	ldr	r0, [r4, #0]
 8008f74:	ed95 0a00 	vldr	s0, [r5]
		imu_data_now.GX -= -60;
 8008f78:	333c      	adds	r3, #60	; 0x3c
 8008f7a:	80e3      	strh	r3, [r4, #6]
		imu_data_now.GY -= -29;
 8008f7c:	8923      	ldrh	r3, [r4, #8]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f7e:	6861      	ldr	r1, [r4, #4]
		imu_data_now.GY -= -29;
 8008f80:	331d      	adds	r3, #29
 8008f82:	8123      	strh	r3, [r4, #8]
		imu_data_now.GZ -= -16;
 8008f84:	8963      	ldrh	r3, [r4, #10]
 8008f86:	3310      	adds	r3, #16
 8008f88:	8163      	strh	r3, [r4, #10]
		IMU_acc = -imu_data_now.AY;
 8008f8a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f8e:	68a2      	ldr	r2, [r4, #8]
		IMU_acc = -imu_data_now.AY;
 8008f90:	425b      	negs	r3, r3
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f9a:	edcb 7a00 	vstr	s15, [fp]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f9e:	f002 f95b 	bl	800b258 <IMU_orientation>
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008fa2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8009208 <processKnee+0x358>
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008fa6:	4b99      	ldr	r3, [pc, #612]	; (800920c <processKnee+0x35c>)
		imu_angle_past = imu_angle_now;
 8008fa8:	ed85 0a00 	vstr	s0, [r5]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008fac:	ee60 7a07 	vmul.f32	s15, s0, s14
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008fb0:	ed83 0a00 	vstr	s0, [r3]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008fb4:	ee17 0a90 	vmov	r0, s15
 8008fb8:	f7f7 fac6 	bl	8000548 <__aeabi_f2d>
 8008fbc:	a37c      	add	r3, pc, #496	; (adr r3, 80091b0 <processKnee+0x300>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 fc3f 	bl	8000844 <__aeabi_ddiv>
 8008fc6:	ed97 8a00 	vldr	s16, [r7]
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008fca:	4d91      	ldr	r5, [pc, #580]	; (8009210 <processKnee+0x360>)
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008fcc:	4680      	mov	r8, r0
 8008fce:	ee18 0a10 	vmov	r0, s16
 8008fd2:	4689      	mov	r9, r1
 8008fd4:	f7f7 fab8 	bl	8000548 <__aeabi_f2d>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4649      	mov	r1, r9
 8008fe0:	f7f7 f952 	bl	8000288 <__aeabi_dsub>
 8008fe4:	f7f7 fddc 	bl	8000ba0 <__aeabi_d2f>
 8008fe8:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8009248 <processKnee+0x398>
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008fec:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 80091e0 <processKnee+0x330>
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008ff0:	f8c8 0000 	str.w	r0, [r8]
 8008ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ff8:	f8ca 3018 	str.w	r3, [sl, #24]
 8008ffc:	9306      	str	r3, [sp, #24]
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008ffe:	4b7b      	ldr	r3, [pc, #492]	; (80091ec <processKnee+0x33c>)
 8009000:	ed9b 2a00 	vldr	s4, [fp]
 8009004:	ed93 1a00 	vldr	s2, [r3]
 8009008:	edd9 1a00 	vldr	s3, [r9]
 800900c:	edd6 0a00 	vldr	s1, [r6]
 8009010:	aa08      	add	r2, sp, #32
 8009012:	ee02 0a90 	vmov	s5, r0
 8009016:	eeb0 0a48 	vmov.f32	s0, s16
 800901a:	4610      	mov	r0, r2
 800901c:	9203      	str	r2, [sp, #12]
 800901e:	f7ff fd67 	bl	8008af0 <controller_impedance>
 8009022:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->BRR, PinMask);
 8009024:	9b06      	ldr	r3, [sp, #24]
 8009026:	ca07      	ldmia	r2, {r0, r1, r2}
 8009028:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800902c:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
		F_Sensor_ADC_Store();
 8009030:	f001 fbaa 	bl	800a788 <F_Sensor_ADC_Store>
		Mag_Enc2_Store();
 8009034:	f002 f872 	bl	800b11c <Mag_Enc2_Store>
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
 8009038:	f9b4 e00a 	ldrsh.w	lr, [r4, #10]
 800903c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009040:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009044:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009048:	f9b4 0000 	ldrsh.w	r0, [r4]
 800904c:	f8cd e004 	str.w	lr, [sp, #4]
 8009050:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8009054:	9400      	str	r4, [sp, #0]
 8009056:	f001 ffbf 	bl	800afd8 <Knee_data_storeIMU>
		Knee_data_store(angle_now / 0.088, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 800905a:	ed98 8a00 	vldr	s16, [r8]
 800905e:	edd9 8a00 	vldr	s17, [r9]
 8009062:	6838      	ldr	r0, [r7, #0]
 8009064:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8009068:	ee28 8a09 	vmul.f32	s16, s16, s18
 800906c:	f7f7 fa6c 	bl	8000548 <__aeabi_f2d>
 8009070:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8009074:	a350      	add	r3, pc, #320	; (adr r3, 80091b8 <processKnee+0x308>)
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800907e:	f7f7 fbe1 	bl	8000844 <__aeabi_ddiv>
 8009082:	f7f7 fd65 	bl	8000b50 <__aeabi_d2iz>
 8009086:	ee18 3a90 	vmov	r3, s17
 800908a:	4622      	mov	r2, r4
 800908c:	ee18 1a10 	vmov	r1, s16
 8009090:	f001 ffe0 	bl	800b054 <Knee_data_store>
		Knee_data_store1(Loadcell_bot, Loadcell_bot_filtered, my_st_impedance.desired_torque, angular_velocity * 100);
 8009094:	edd6 7a00 	vldr	s15, [r6]
 8009098:	edd5 6a01 	vldr	s13, [r5, #4]
 800909c:	4b53      	ldr	r3, [pc, #332]	; (80091ec <processKnee+0x33c>)
 800909e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80090a2:	ed93 7a00 	vldr	s14, [r3]
 80090a6:	ee67 7a89 	vmul.f32	s15, s15, s18
 80090aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ae:	ee17 3a90 	vmov	r3, s15
 80090b2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80090b6:	ee17 2a90 	vmov	r2, s15
 80090ba:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80090be:	ee17 1a90 	vmov	r1, s15
 80090c2:	f001 fff7 	bl	800b0b4 <Knee_data_store1>
//        Knee_data_store2(15,16);    <-- this is commented out in sensor.c

		if (Sub_cnt == 5) {
 80090c6:	4b53      	ldr	r3, [pc, #332]	; (8009214 <processKnee+0x364>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	2a05      	cmp	r2, #5
 80090cc:	d118      	bne.n	8009100 <processKnee+0x250>
			//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
			BSbuffer[s_flag].RTC_Time = (uint32_t) (RTC->TR & 0x007F7F7F);
 80090ce:	4d52      	ldr	r5, [pc, #328]	; (8009218 <processKnee+0x368>)
 80090d0:	4c52      	ldr	r4, [pc, #328]	; (800921c <processKnee+0x36c>)
 80090d2:	7828      	ldrb	r0, [r5, #0]
 80090d4:	4952      	ldr	r1, [pc, #328]	; (8009220 <processKnee+0x370>)
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 80090dc:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 80090e0:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 80090e4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80090e8:	5182      	str	r2, [r0, r6]
			BSbuffer[s_flag].RTC_Date = (uint32_t) (RTC->DR & 0x00FFFF3F);
 80090ea:	7828      	ldrb	r0, [r5, #0]
 80090ec:	6862      	ldr	r2, [r4, #4]
 80090ee:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 80090f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80090f6:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80090fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80090fe:	500a      	str	r2, [r1, r0]

		}

		// Switching Buffer
		if (Sub_cnt == Highest_sensor_count)    // Total samples to be stored in a 16KB buffer
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8009106:	f040 8162 	bne.w	80093ce <processKnee+0x51e>
		{
			Sub_cnt = 0;          // Reset Counter of sensor element
 800910a:	2100      	movs	r1, #0
 800910c:	6019      	str	r1, [r3, #0]
			SD_write_Flag = 1;    // Flag set to write filled buffer content
 800910e:	4b45      	ldr	r3, [pc, #276]	; (8009224 <processKnee+0x374>)
 8009110:	4845      	ldr	r0, [pc, #276]	; (8009228 <processKnee+0x378>)
 8009112:	2201      	movs	r2, #1
 8009114:	701a      	strb	r2, [r3, #0]
			// Changing Buffer
			if (s_flag == 0)    // if current storgae_buffer was 0
 8009116:	4b40      	ldr	r3, [pc, #256]	; (8009218 <processKnee+0x368>)
 8009118:	781c      	ldrb	r4, [r3, #0]
 800911a:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 800911e:	2c00      	cmp	r4, #0
 8009120:	f040 8152 	bne.w	80093c8 <processKnee+0x518>
			{
				w_flag = 0;    // write_buffer to be saved in SD card = 0
 8009124:	7005      	strb	r5, [r0, #0]
				s_flag = 1;    // current storgae_buffer is set 1
 8009126:	701a      	strb	r2, [r3, #0]
		else
		{
			Sub_cnt++;    // Increment Counter of sensor element
		}
	}
}
 8009128:	b011      	add	sp, #68	; 0x44
 800912a:	ecbd 8b04 	vpop	{d8-d9}
 800912e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			angular_velocity = (float) 62.83*(angle_now - angle_old) + 0.8819*old_angular_velocity;
 8009132:	edd5 7a00 	vldr	s15, [r5]
 8009136:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800922c <processKnee+0x37c>
 800913a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800913e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009142:	ee17 0a90 	vmov	r0, s15
 8009146:	f7f7 f9ff 	bl	8000548 <__aeabi_f2d>
 800914a:	4680      	mov	r8, r0
 800914c:	6830      	ldr	r0, [r6, #0]
 800914e:	4689      	mov	r9, r1
 8009150:	f7f7 f9fa 	bl	8000548 <__aeabi_f2d>
 8009154:	a31a      	add	r3, pc, #104	; (adr r3, 80091c0 <processKnee+0x310>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 fa49 	bl	80005f0 <__aeabi_dmul>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	f7f7 f891 	bl	800028c <__adddf3>
 800916a:	f7f7 fd19 	bl	8000ba0 <__aeabi_d2f>
 800916e:	6020      	str	r0, [r4, #0]
 8009170:	e6b9      	b.n	8008ee6 <processKnee+0x36>
		else if (count == 2)
 8009172:	2b02      	cmp	r3, #2
 8009174:	4d2e      	ldr	r5, [pc, #184]	; (8009230 <processKnee+0x380>)
 8009176:	4c2f      	ldr	r4, [pc, #188]	; (8009234 <processKnee+0x384>)
 8009178:	d16a      	bne.n	8009250 <processKnee+0x3a0>
			Loadcell_top_filtered    = Loadcell_top;
 800917a:	ee07 aa90 	vmov	s15, sl
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			Loadcell_bot_filtered    = Loadcell_bot;
 8009182:	4b1a      	ldr	r3, [pc, #104]	; (80091ec <processKnee+0x33c>)
			Loadcell_top_filtered    = Loadcell_top;
 8009184:	edc6 7a00 	vstr	s15, [r6]
			Loadcell_top_filtered_m1 = Loadcell_top;
 8009188:	edc4 7a00 	vstr	s15, [r4]
			Loadcell_bot_filtered    = Loadcell_bot;
 800918c:	eddd 7a03 	vldr	s15, [sp, #12]
			Loadcell_bot_m1          = Loadcell_bot;
 8009190:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			Loadcell_top_m1          = Loadcell_top;
 8009194:	f8a5 a000 	strh.w	sl, [r5]
			Loadcell_bot_filtered    = Loadcell_bot;
 8009198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919c:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_bot_m1          = Loadcell_bot;
 80091a0:	4b25      	ldr	r3, [pc, #148]	; (8009238 <processKnee+0x388>)
 80091a2:	801a      	strh	r2, [r3, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot;
 80091a4:	4b25      	ldr	r3, [pc, #148]	; (800923c <processKnee+0x38c>)
 80091a6:	edc3 7a00 	vstr	s15, [r3]
			count++;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e6ca      	b.n	8008f44 <processKnee+0x94>
 80091ae:	bf00      	nop
 80091b0:	2e48e8a7 	.word	0x2e48e8a7
 80091b4:	400921ff 	.word	0x400921ff
 80091b8:	020c49ba 	.word	0x020c49ba
 80091bc:	3fb6872b 	.word	0x3fb6872b
 80091c0:	594af4f1 	.word	0x594af4f1
 80091c4:	3fec3886 	.word	0x3fec3886
 80091c8:	20008a35 	.word	0x20008a35
 80091cc:	200000e0 	.word	0x200000e0
 80091d0:	20000690 	.word	0x20000690
 80091d4:	20000698 	.word	0x20000698
 80091d8:	20000694 	.word	0x20000694
 80091dc:	200006a4 	.word	0x200006a4
 80091e0:	20008a18 	.word	0x20008a18
 80091e4:	20008a04 	.word	0x20008a04
 80091e8:	20008a1c 	.word	0x20008a1c
 80091ec:	20008a08 	.word	0x20008a08
 80091f0:	20008a06 	.word	0x20008a06
 80091f4:	20008a24 	.word	0x20008a24
 80091f8:	20008a0c 	.word	0x20008a0c
 80091fc:	200006a0 	.word	0x200006a0
 8009200:	42c80000 	.word	0x42c80000
 8009204:	3b000000 	.word	0x3b000000
 8009208:	43340000 	.word	0x43340000
 800920c:	20008a2c 	.word	0x20008a2c
 8009210:	200089e0 	.word	0x200089e0
 8009214:	200006ac 	.word	0x200006ac
 8009218:	200006b2 	.word	0x200006b2
 800921c:	40002800 	.word	0x40002800
 8009220:	20000944 	.word	0x20000944
 8009224:	20008a3c 	.word	0x20008a3c
 8009228:	200000e8 	.word	0x200000e8
 800922c:	427b51ec 	.word	0x427b51ec
 8009230:	20008a20 	.word	0x20008a20
 8009234:	20008a28 	.word	0x20008a28
 8009238:	20008a22 	.word	0x20008a22
 800923c:	20008a30 	.word	0x20008a30
 8009240:	2000068c 	.word	0x2000068c
 8009244:	48000400 	.word	0x48000400
 8009248:	2000069c 	.word	0x2000069c
 800924c:	3fd3eab3 	.word	0x3fd3eab3
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8009250:	ed94 8a00 	vldr	s16, [r4]
 8009254:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 800924c <processKnee+0x39c>
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8009258:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8009404 <processKnee+0x554>
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 800925c:	882f      	ldrh	r7, [r5, #0]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 800925e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009262:	ee17 0a90 	vmov	r0, s15
 8009266:	f7f7 f96f 	bl	8000548 <__aeabi_f2d>
 800926a:	4680      	mov	r8, r0
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 800926c:	f8db 0000 	ldr.w	r0, [fp]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8009270:	4689      	mov	r9, r1
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8009272:	f7f7 f969 	bl	8000548 <__aeabi_f2d>
 8009276:	a358      	add	r3, pc, #352	; (adr r3, 80093d8 <processKnee+0x528>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f7 f9b8 	bl	80005f0 <__aeabi_dmul>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4640      	mov	r0, r8
 8009286:	4649      	mov	r1, r9
 8009288:	f7f6 fffe 	bl	8000288 <__aeabi_dsub>
 800928c:	4680      	mov	r8, r0
 800928e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8009292:	4689      	mov	r9, r1
 8009294:	f7f7 f946 	bl	8000524 <__aeabi_i2d>
 8009298:	a351      	add	r3, pc, #324	; (adr r3, 80093e0 <processKnee+0x530>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f7 f9a7 	bl	80005f0 <__aeabi_dmul>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	4680      	mov	r8, r0
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 80092b0:	4638      	mov	r0, r7
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 80092b2:	4689      	mov	r9, r1
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 80092b4:	f7f7 f936 	bl	8000524 <__aeabi_i2d>
 80092b8:	a34b      	add	r3, pc, #300	; (adr r3, 80093e8 <processKnee+0x538>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f7 f997 	bl	80005f0 <__aeabi_dmul>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f6 ffdf 	bl	800028c <__adddf3>
 80092ce:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8009408 <processKnee+0x558>
 80092d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80092d6:	f8b8 0000 	ldrh.w	r0, [r8]
 80092da:	f7f7 f923 	bl	8000524 <__aeabi_i2d>
 80092de:	a340      	add	r3, pc, #256	; (adr r3, 80093e0 <processKnee+0x530>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f7 f984 	bl	80005f0 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092f0:	f7f6 ffcc 	bl	800028c <__adddf3>
 80092f4:	f7f7 fc54 	bl	8000ba0 <__aeabi_d2f>
			Loadcell_top_m1          = Loadcell_top;
 80092f8:	f8a5 a000 	strh.w	sl, [r5]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 80092fc:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800940c <processKnee+0x55c>
			Loadcell_top_filtered_m1 = Loadcell_top_filtered;
 8009300:	6020      	str	r0, [r4, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8009302:	f8da 4000 	ldr.w	r4, [sl]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8009306:	6030      	str	r0, [r6, #0]
			Loadcell_top_m2          = Loadcell_top_m1;
 8009308:	f8a8 7000 	strh.w	r7, [r8]
			Loadcell_top_filtered_m2 = Loadcell_top_filtered_m1;
 800930c:	ed8b 8a00 	vstr	s16, [fp]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8009310:	4620      	mov	r0, r4
 8009312:	f7f7 f919 	bl	8000548 <__aeabi_f2d>
 8009316:	a339      	add	r3, pc, #228	; (adr r3, 80093fc <processKnee+0x54c>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f7 f968 	bl	80005f0 <__aeabi_dmul>
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8009320:	4f33      	ldr	r7, [pc, #204]	; (80093f0 <processKnee+0x540>)
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 8009322:	4d34      	ldr	r5, [pc, #208]	; (80093f4 <processKnee+0x544>)
 8009324:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8009410 <processKnee+0x560>
 8009328:	882e      	ldrh	r6, [r5, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 800932a:	4680      	mov	r8, r0
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 800932c:	6838      	ldr	r0, [r7, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 800932e:	4689      	mov	r9, r1
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8009330:	f7f7 f90a 	bl	8000548 <__aeabi_f2d>
 8009334:	a328      	add	r3, pc, #160	; (adr r3, 80093d8 <processKnee+0x528>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f7f7 f959 	bl	80005f0 <__aeabi_dmul>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f6 ff9f 	bl	8000288 <__aeabi_dsub>
 800934a:	4680      	mov	r8, r0
 800934c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8009350:	4689      	mov	r9, r1
 8009352:	f7f7 f8e7 	bl	8000524 <__aeabi_i2d>
 8009356:	a322      	add	r3, pc, #136	; (adr r3, 80093e0 <processKnee+0x530>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f7 f948 	bl	80005f0 <__aeabi_dmul>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4640      	mov	r0, r8
 8009366:	4649      	mov	r1, r9
 8009368:	f7f6 ff90 	bl	800028c <__adddf3>
 800936c:	4680      	mov	r8, r0
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 800936e:	4630      	mov	r0, r6
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8009370:	4689      	mov	r9, r1
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 8009372:	f7f7 f8d7 	bl	8000524 <__aeabi_i2d>
 8009376:	a31c      	add	r3, pc, #112	; (adr r3, 80093e8 <processKnee+0x538>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f7f7 f938 	bl	80005f0 <__aeabi_dmul>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4640      	mov	r0, r8
 8009386:	4649      	mov	r1, r9
 8009388:	f7f6 ff80 	bl	800028c <__adddf3>
 800938c:	4680      	mov	r8, r0
 800938e:	f8bb 0000 	ldrh.w	r0, [fp]
 8009392:	4689      	mov	r9, r1
 8009394:	f7f7 f8c6 	bl	8000524 <__aeabi_i2d>
 8009398:	a311      	add	r3, pc, #68	; (adr r3, 80093e0 <processKnee+0x530>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f7f7 f927 	bl	80005f0 <__aeabi_dmul>
 80093a2:	460b      	mov	r3, r1
 80093a4:	4602      	mov	r2, r0
 80093a6:	4649      	mov	r1, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	f7f6 ff6f 	bl	800028c <__adddf3>
 80093ae:	f7f7 fbf7 	bl	8000ba0 <__aeabi_d2f>
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 80093b2:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <processKnee+0x548>)
			Loadcell_bot_m2          = Loadcell_bot_m1;
 80093b4:	f8ab 6000 	strh.w	r6, [fp]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 80093b8:	6018      	str	r0, [r3, #0]
			Loadcell_bot_m1          = Loadcell_bot;
 80093ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80093be:	802b      	strh	r3, [r5, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
 80093c0:	603c      	str	r4, [r7, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
 80093c2:	f8ca 0000 	str.w	r0, [sl]
 80093c6:	e5be      	b.n	8008f46 <processKnee+0x96>
				w_flag = 1;    // write_buffer to be saved in SD card = 1
 80093c8:	7002      	strb	r2, [r0, #0]
				s_flag = 0;    // current storgae_buffer is set 0
 80093ca:	7019      	strb	r1, [r3, #0]
 80093cc:	e6ac      	b.n	8009128 <processKnee+0x278>
			Sub_cnt++;    // Increment Counter of sensor element
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	3201      	adds	r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
}
 80093d4:	e6a8      	b.n	8009128 <processKnee+0x278>
 80093d6:	bf00      	nop
 80093d8:	089a0275 	.word	0x089a0275
 80093dc:	3fe69e1b 	.word	0x3fe69e1b
 80093e0:	eb1c432d 	.word	0xeb1c432d
 80093e4:	3f8a36e2 	.word	0x3f8a36e2
 80093e8:	eb1c432d 	.word	0xeb1c432d
 80093ec:	3f9a36e2 	.word	0x3f9a36e2
 80093f0:	20008a24 	.word	0x20008a24
 80093f4:	20008a22 	.word	0x20008a22
 80093f8:	20008a08 	.word	0x20008a08
 80093fc:	6cf41f21 	.word	0x6cf41f21
 8009400:	3ffa7d56 	.word	0x3ffa7d56
 8009404:	20008a1c 	.word	0x20008a1c
 8009408:	20008a04 	.word	0x20008a04
 800940c:	20008a30 	.word	0x20008a30
 8009410:	20008a06 	.word	0x20008a06

08009414 <main>:
// Greg start
uint8_t isProcessKneeRequired = 0;
// Greg end


int main(void) {
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Pros_state = LP_STOP;                  // Default state after power ON reset
 8009418:	4c69      	ldr	r4, [pc, #420]	; (80095c0 <main+0x1ac>)
 800941a:	2501      	movs	r5, #1
 800941c:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	// Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 800941e:	f002 fa43 	bl	800b8a8 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
	if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8009422:	4629      	mov	r1, r5
 8009424:	4867      	ldr	r0, [pc, #412]	; (80095c4 <main+0x1b0>)
 8009426:	f000 fead 	bl	800a184 <RTC_BAK_GetRegister>
 800942a:	f243 23f2 	movw	r3, #13042	; 0x32f2
 800942e:	4298      	cmp	r0, r3
 8009430:	d001      	beq.n	8009436 <main+0x22>
	{
		MX_RTC_Init();   // Set RTC clock source and parameters
 8009432:	f000 fe15 	bl	800a060 <MX_RTC_Init>
	//CAN_mode();

	//Transmits a message over can
//clear state

	EPOS4_enable(CAN_ID);
 8009436:	4d64      	ldr	r5, [pc, #400]	; (80095c8 <main+0x1b4>)
	// Data collection will resume after USB disconnect.
	// Only way to stop Data collection is by accessing SD card from PC LabVIEW program

	while (1) {

		if (isProcessKneeRequired) {
 8009438:	4f64      	ldr	r7, [pc, #400]	; (80095cc <main+0x1b8>)
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800943a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80095f4 <main+0x1e0>
	MX_GPIO_Init();
 800943e:	f7ff fbef 	bl	8008c20 <MX_GPIO_Init>
	HAL_Init(); // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8009442:	f7fb fbc1 	bl	8004bc8 <HAL_Init>
	DFU_Bypass();
 8009446:	f000 fbaf 	bl	8009ba8 <DFU_Bypass>
	Configure_USART_1();  // Debug with PC
 800944a:	f001 fa01 	bl	800a850 <Configure_USART_1>
	sprintf(PrintBuf, "Hello");
 800944e:	4960      	ldr	r1, [pc, #384]	; (80095d0 <main+0x1bc>)
 8009450:	4860      	ldr	r0, [pc, #384]	; (80095d4 <main+0x1c0>)
 8009452:	f003 fb03 	bl	800ca5c <strcpy>
	USART1_wr_print(PrintBuf, sizeof(PrintBuf));
 8009456:	2132      	movs	r1, #50	; 0x32
 8009458:	485e      	ldr	r0, [pc, #376]	; (80095d4 <main+0x1c0>)
 800945a:	f001 fa43 	bl	800a8e4 <USART1_wr_print>
	systick_app_timer_module_init();
 800945e:	f7f8 ff4d 	bl	80022fc <systick_app_timer_module_init>
	mpu9255_init();
 8009462:	f7ff f889 	bl	8008578 <mpu9255_init>
	mpu_init();
 8009466:	f7f8 f937 	bl	80016d8 <mpu_init>
	P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 800946a:	f001 f8b9 	bl	800a5e0 <P_ADC_Sensor_GPIO_Init>
	CAN_configure();
 800946e:	f000 f9cb 	bl	8009808 <CAN_configure>
	EPOS4_enable(CAN_ID);
 8009472:	8828      	ldrh	r0, [r5, #0]
 8009474:	f7ff f963 	bl	800873e <EPOS4_enable>
	EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 8009478:	210a      	movs	r1, #10
 800947a:	8828      	ldrh	r0, [r5, #0]
 800947c:	f7ff f92a 	bl	80086d4 <EPOS4_set_operation_mode>
	EPOS4_clear_errors(CAN_ID);
 8009480:	8828      	ldrh	r0, [r5, #0]
 8009482:	f7ff f993 	bl	80087ac <EPOS4_clear_errors>
	delay_us(1500);
 8009486:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800948a:	f002 f9cb 	bl	800b824 <delay_us>
	EPOS4_enable(CAN_ID);
 800948e:	8828      	ldrh	r0, [r5, #0]
		case Dormant_Idle_Stop: // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

			EnterStop();   // Enter Stop Mode
			// Wake Up after STOP Mode only by USB EXTI Int

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8009490:	4d51      	ldr	r5, [pc, #324]	; (80095d8 <main+0x1c4>)
	EPOS4_enable(CAN_ID);
 8009492:	f7ff f954 	bl	800873e <EPOS4_enable>
	USB_PA9_EXTI_conf(); // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 8009496:	f000 fe79 	bl	800a18c <USB_PA9_EXTI_conf>
	Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 800949a:	f002 fa75 	bl	800b988 <Configure_LPTIM2_Int>
	Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 800949e:	f000 fb31 	bl	8009b04 <Configure_Interrupt>
	Power_on_reset();            // Following reset is found by troubleshooting
 80094a2:	f000 fb21 	bl	8009ae8 <Power_on_reset>
	AIM_DataStart_at_Reset();
 80094a6:	f001 fd27 	bl	800aef8 <AIM_DataStart_at_Reset>
	GREEN_LED_ONLY();
 80094aa:	f7ff fcb5 	bl	8008e18 <GREEN_LED_ONLY>
			isProcessKneeRequired = 0;
 80094ae:	2600      	movs	r6, #0
		if (isProcessKneeRequired) {
 80094b0:	783b      	ldrb	r3, [r7, #0]
 80094b2:	b113      	cbz	r3, 80094ba <main+0xa6>
			processKnee();
 80094b4:	f7ff fcfc 	bl	8008eb0 <processKnee>
			isProcessKneeRequired = 0;
 80094b8:	703e      	strb	r6, [r7, #0]
		switch (Pros_state) {
 80094ba:	7823      	ldrb	r3, [r4, #0]
 80094bc:	3b01      	subs	r3, #1
 80094be:	2b06      	cmp	r3, #6
 80094c0:	d8f6      	bhi.n	80094b0 <main+0x9c>
 80094c2:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <main+0xb4>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094e5 	.word	0x080094e5
 80094cc:	0800951f 	.word	0x0800951f
 80094d0:	080094b1 	.word	0x080094b1
 80094d4:	080095a5 	.word	0x080095a5
 80094d8:	0800953d 	.word	0x0800953d
 80094dc:	080095ab 	.word	0x080095ab
 80094e0:	08009559 	.word	0x08009559
			EnterStop();   // Enter Stop Mode
 80094e4:	f002 f9ca 	bl	800b87c <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 80094e8:	782b      	ldrb	r3, [r5, #0]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d104      	bne.n	80094f8 <main+0xe4>
					Pros_state = USB_MSC_VCP_Mode; // Next State USB_MSC_Mode Mode
 80094ee:	2304      	movs	r3, #4
 80094f0:	7023      	strb	r3, [r4, #0]
					USB_Present_ = 0;             // Reset Flag to avoid looping
 80094f2:	2300      	movs	r3, #0
 80094f4:	702b      	strb	r3, [r5, #0]
 80094f6:	e7da      	b.n	80094ae <main+0x9a>
			} else if (FATAL_Error == 1)         // Triggered from Error_Handler
 80094f8:	4b38      	ldr	r3, [pc, #224]	; (80095dc <main+0x1c8>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d105      	bne.n	800950c <main+0xf8>
				FATAL_Error = 0;                  // Reset Flag to avoid looping
 8009500:	4b36      	ldr	r3, [pc, #216]	; (80095dc <main+0x1c8>)
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
				Pros_state = Fatal_Error_State;  // Next State Fatal_Error_State
 8009506:	2307      	movs	r3, #7
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8009508:	7023      	strb	r3, [r4, #0]
 800950a:	e7d0      	b.n	80094ae <main+0x9a>
			} else if (SD_write_Flag == 1) // When BUffer full to store in SD card
 800950c:	4b34      	ldr	r3, [pc, #208]	; (80095e0 <main+0x1cc>)
 800950e:	781a      	ldrb	r2, [r3, #0]
 8009510:	2a01      	cmp	r2, #1
 8009512:	d111      	bne.n	8009538 <main+0x124>
				Pros_state = Sensor_FATFS_Write; // Next State Sensor_FATFS_Write Mode
 8009514:	2202      	movs	r2, #2
 8009516:	7022      	strb	r2, [r4, #0]
				SD_write_Flag = 0;                // Reset Flag to avoid looping
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	e7c7      	b.n	80094ae <main+0x9a>
			Battery_ADC_Value = 2500;
 800951e:	4b31      	ldr	r3, [pc, #196]	; (80095e4 <main+0x1d0>)
 8009520:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009524:	801a      	strh	r2, [r3, #0]
				SD_Sensor_write();             // Write Sensor Buffer to SD card
 8009526:	f001 fca7 	bl	800ae78 <SD_Sensor_write>
				if (USB_Present_ == 1) // If USB attachment detected here via EXTI_5 int
 800952a:	782b      	ldrb	r3, [r5, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d0de      	beq.n	80094ee <main+0xda>
				} else if (FATAL_Error == 1)     // Triggered from Error_Handler
 8009530:	4b2a      	ldr	r3, [pc, #168]	; (80095dc <main+0x1c8>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d0e3      	beq.n	8009500 <main+0xec>
				Pros_state = LP_STOP; // Return to Low Power Mode Data collection
 8009538:	2301      	movs	r3, #1
 800953a:	e7e5      	b.n	8009508 <main+0xf4>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800953c:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <main+0x1d4>)
 800953e:	2204      	movs	r2, #4
 8009540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			ALL_LED_OFF();
 8009544:	f7ff fc5a 	bl	8008dfc <ALL_LED_OFF>
			Shut_Down_SD();
 8009548:	f000 fd6e 	bl	800a028 <Shut_Down_SD>
			Reset_Variables_for_LowBattery();
 800954c:	f000 fb62 	bl	8009c14 <Reset_Variables_for_LowBattery>
			Prepare_Goto_Dormant_Mode();
 8009550:	f000 fb56 	bl	8009c00 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8009554:	2306      	movs	r3, #6
 8009556:	e7d7      	b.n	8009508 <main+0xf4>
			RED_LED_ONLY();
 8009558:	f7ff fc6e 	bl	8008e38 <RED_LED_ONLY>
			FATFS_Logstart_Delete();
 800955c:	f000 fc16 	bl	8009d8c <FATFS_Logstart_Delete>
			Data_log_Start_Resume = 0;
 8009560:	4b22      	ldr	r3, [pc, #136]	; (80095ec <main+0x1d8>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8009562:	4a23      	ldr	r2, [pc, #140]	; (80095f0 <main+0x1dc>)
 8009564:	2600      	movs	r6, #0
 8009566:	701e      	strb	r6, [r3, #0]
			SD_write_Flag = 0;
 8009568:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <main+0x1cc>)
 800956a:	701e      	strb	r6, [r3, #0]
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <main+0x1d4>)
 800956e:	f04f 0904 	mov.w	r9, #4
 8009572:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 8009576:	6893      	ldr	r3, [r2, #8]
 8009578:	f023 0302 	bic.w	r3, r3, #2
 800957c:	6093      	str	r3, [r2, #8]
			SD_POWER_OFF();
 800957e:	f7ff fc96 	bl	8008eae <SD_POWER_OFF>
 8009582:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8009586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800958a:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
			EnterStop();   // Enter Stop Mode
 800958e:	f002 f975 	bl	800b87c <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8009592:	782b      	ldrb	r3, [r5, #0]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d1dd      	bne.n	8009554 <main+0x140>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8009598:	f884 9000 	strb.w	r9, [r4]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 800959c:	702e      	strb	r6, [r5, #0]
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
				USB_Present_ = 0;                 // Reset Flag to avoid looping
				SD_POWER_ON();               				// Power on SD CARD
 800959e:	f7ff fc85 	bl	8008eac <SD_POWER_ON>
 80095a2:	e784      	b.n	80094ae <main+0x9a>
			USB_Init_Start(); // Initialize USB and Stay USB mode as long as USB cable connected
 80095a4:	f001 fbfa 	bl	800ad9c <USB_Init_Start>
			break;
 80095a8:	e781      	b.n	80094ae <main+0x9a>
			EnterStop();   // Enter Stop Mode
 80095aa:	f002 f967 	bl	800b87c <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 80095ae:	782b      	ldrb	r3, [r5, #0]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d1cf      	bne.n	8009554 <main+0x140>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 80095b4:	2304      	movs	r3, #4
 80095b6:	7023      	strb	r3, [r4, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 80095b8:	2300      	movs	r3, #0
 80095ba:	702b      	strb	r3, [r5, #0]
 80095bc:	e7ef      	b.n	800959e <main+0x18a>
 80095be:	bf00      	nop
 80095c0:	20008978 	.word	0x20008978
 80095c4:	40002800 	.word	0x40002800
 80095c8:	200000e4 	.word	0x200000e4
 80095cc:	200006b1 	.word	0x200006b1
 80095d0:	0800edb7 	.word	0x0800edb7
 80095d4:	20008c9c 	.word	0x20008c9c
 80095d8:	200006b0 	.word	0x200006b0
 80095dc:	20009028 	.word	0x20009028
 80095e0:	20008a3c 	.word	0x20008a3c
 80095e4:	20009004 	.word	0x20009004
 80095e8:	e000e100 	.word	0xe000e100
 80095ec:	20008a35 	.word	0x20008a35
 80095f0:	40009400 	.word	0x40009400
 80095f4:	40021000 	.word	0x40021000

080095f8 <LPTIM2_IRQHandler>:
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <LPTIM2_IRQHandler+0x18>)
 80095fa:	681a      	ldr	r2, [r3, #0]
}


void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)    // auto reload match interrupt has occured
 80095fc:	0792      	lsls	r2, r2, #30
 80095fe:	d506      	bpl.n	800960e <LPTIM2_IRQHandler+0x16>
	{
		isProcessKneeRequired = 1;
 8009600:	4a04      	ldr	r2, [pc, #16]	; (8009614 <LPTIM2_IRQHandler+0x1c>)
 8009602:	2101      	movs	r1, #1
 8009604:	7011      	strb	r1, [r2, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	f042 0202 	orr.w	r2, r2, #2
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	4770      	bx	lr
 8009610:	40009400 	.word	0x40009400
 8009614:	200006b1 	.word	0x200006b1

08009618 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <EXTI9_5_IRQHandler+0x18>)
 800961a:	695a      	ldr	r2, [r3, #20]
}


void EXTI9_5_IRQHandler(void)    // Interrupt from USB connectivity PIN PA9
{
	if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 800961c:	0592      	lsls	r2, r2, #22
 800961e:	d505      	bpl.n	800962c <EXTI9_5_IRQHandler+0x14>
	{
		USB_Present_=1;                            // USB present
 8009620:	4a04      	ldr	r2, [pc, #16]	; (8009634 <EXTI9_5_IRQHandler+0x1c>)
 8009622:	2101      	movs	r1, #1
 8009624:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800962a:	615a      	str	r2, [r3, #20]
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	40010400 	.word	0x40010400
 8009634:	200006b0 	.word	0x200006b0

08009638 <mcp25625_reset>:
 8009638:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <mcp25625_reset+0x30>)
 800963a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800963e:	629a      	str	r2, [r3, #40]	; 0x28
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <mcp25625_reset+0x34>)
 8009642:	21c0      	movs	r1, #192	; 0xc0
 8009644:	7311      	strb	r1, [r2, #12]
	setChipSelect();
	LL_SPI_TransmitData8(SPI2, CMD_RESET);
	//while (!(SPI2->SR & SPI_SR_RXNE)) {} ;
	// wait for completion

	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8009646:	6891      	ldr	r1, [r2, #8]
 8009648:	0609      	lsls	r1, r1, #24
 800964a:	d4fc      	bmi.n	8009646 <mcp25625_reset+0xe>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800964c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009650:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <mcp25625_reset+0x34>)
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 800965a:	d102      	bne.n	8009662 <mcp25625_reset+0x2a>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
		(void)dummy;						// suppress unused variable warning
	};

	// reset requires a delay of 128 OSC1 clock cycles. That equals 12.8us.
	delay_us(50);
 800965c:	2032      	movs	r0, #50	; 0x32
 800965e:	f002 b8e1 	b.w	800b824 <delay_us>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	e7f6      	b.n	8009654 <mcp25625_reset+0x1c>
 8009666:	bf00      	nop
 8009668:	48000400 	.word	0x48000400
 800966c:	40003800 	.word	0x40003800

08009670 <mcp25625_writeRegister>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8009670:	4b0d      	ldr	r3, [pc, #52]	; (80096a8 <mcp25625_writeRegister+0x38>)
 8009672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009676:	629a      	str	r2, [r3, #40]	; 0x28
 8009678:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <mcp25625_writeRegister+0x3c>)
 800967a:	2202      	movs	r2, #2
 800967c:	731a      	strb	r2, [r3, #12]
 800967e:	7318      	strb	r0, [r3, #12]
 8009680:	7319      	strb	r1, [r3, #12]
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);
	LL_SPI_TransmitData8(SPI2, reg);
	LL_SPI_TransmitData8(SPI2, value);

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8009688:	d1fb      	bne.n	8009682 <mcp25625_writeRegister+0x12>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	0612      	lsls	r2, r2, #24
 800968e:	d4fc      	bmi.n	800968a <mcp25625_writeRegister+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <mcp25625_writeRegister+0x38>)
 8009692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009696:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8009698:	4b04      	ldr	r3, [pc, #16]	; (80096ac <mcp25625_writeRegister+0x3c>)
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 80096a0:	d100      	bne.n	80096a4 <mcp25625_writeRegister+0x34>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
		(void)dummy;						// suppress unused variable warning
	};


}
 80096a2:	4770      	bx	lr
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	e7f8      	b.n	800969a <mcp25625_writeRegister+0x2a>
 80096a8:	48000400 	.word	0x48000400
 80096ac:	40003800 	.word	0x40003800

080096b0 <mcp25625_readRegister>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80096b0:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <mcp25625_readRegister+0x34>)
 80096b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096b6:	629a      	str	r2, [r3, #40]	; 0x28
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <mcp25625_readRegister+0x38>)
 80096ba:	2203      	movs	r2, #3
 80096bc:	731a      	strb	r2, [r3, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	7318      	strb	r0, [r3, #12]
 80096c2:	731a      	strb	r2, [r3, #12]
	LL_SPI_TransmitData8(SPI2, CMD_READ);
	LL_SPI_TransmitData8(SPI2, reg);
	LL_SPI_TransmitData8(SPI2, 0x00); 		// dummy value to transfer the response

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80096ca:	d1fb      	bne.n	80096c4 <mcp25625_readRegister+0x14>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	0612      	lsls	r2, r2, #24
 80096d0:	d4fc      	bmi.n	80096cc <mcp25625_readRegister+0x1c>
	uint8_t dummy = SPI2->DR; 				// first byte is from cmd transfer
 80096d2:	68da      	ldr	r2, [r3, #12]
	dummy = SPI2->DR;						// second byte is from address
 80096d4:	68da      	ldr	r2, [r3, #12]
	result = SPI2->DR;						// actual result value
 80096d6:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80096d8:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <mcp25625_readRegister+0x34>)
 80096da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096de:	619a      	str	r2, [r3, #24]

	clearChipSelect();

	(void)dummy;						// suppress unused variable warning
	return result;
}
 80096e0:	b2c0      	uxtb	r0, r0
 80096e2:	4770      	bx	lr
 80096e4:	48000400 	.word	0x48000400
 80096e8:	40003800 	.word	0x40003800

080096ec <mcp25625_loadTXB>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80096ec:	4b12      	ldr	r3, [pc, #72]	; (8009738 <mcp25625_loadTXB+0x4c>)

void mcp25625_loadTXB(uint8_t reg, uint8_t length, uint8_t * data) {
 80096ee:	b510      	push	{r4, lr}
 80096f0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80096f4:	629c      	str	r4, [r3, #40]	; 0x28
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <mcp25625_loadTXB+0x50>)

	setChipSelect();

	LL_SPI_TransmitData8(SPI2, reg);
	for ( uint8_t i = 0; i < length; i++) {
 80096f8:	4614      	mov	r4, r2
 80096fa:	7318      	strb	r0, [r3, #12]
 80096fc:	1aa0      	subs	r0, r4, r2
 80096fe:	b2c0      	uxtb	r0, r0
 8009700:	4281      	cmp	r1, r0
 8009702:	d810      	bhi.n	8009726 <mcp25625_loadTXB+0x3a>
		while (!(SPI2->SR & SPI_SR_TXE)) {};
		LL_SPI_TransmitData8(SPI2, data[i]);
	}

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800970a:	d1fb      	bne.n	8009704 <mcp25625_loadTXB+0x18>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	0612      	lsls	r2, r2, #24
 8009710:	d4fc      	bmi.n	800970c <mcp25625_loadTXB+0x20>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <mcp25625_loadTXB+0x4c>)
 8009714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009718:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 800971a:	4b08      	ldr	r3, [pc, #32]	; (800973c <mcp25625_loadTXB+0x50>)
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8009722:	d107      	bne.n	8009734 <mcp25625_loadTXB+0x48>
		(void)dummy;						// suppress unused variable warning
	};



}
 8009724:	bd10      	pop	{r4, pc}
		while (!(SPI2->SR & SPI_SR_TXE)) {};
 8009726:	6898      	ldr	r0, [r3, #8]
 8009728:	0780      	lsls	r0, r0, #30
 800972a:	d5fc      	bpl.n	8009726 <mcp25625_loadTXB+0x3a>
		LL_SPI_TransmitData8(SPI2, data[i]);
 800972c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009730:	7318      	strb	r0, [r3, #12]
 8009732:	e7e3      	b.n	80096fc <mcp25625_loadTXB+0x10>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	e7f1      	b.n	800971c <mcp25625_loadTXB+0x30>
 8009738:	48000400 	.word	0x48000400
 800973c:	40003800 	.word	0x40003800

08009740 <mcp25625_sendCAN>:

/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN(txbuff_t * buffer) {
 8009740:	4601      	mov	r1, r0
 8009742:	b508      	push	{r3, lr}
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL);
 8009744:	2050      	movs	r0, #80	; 0x50
 8009746:	f7ff ffb3 	bl	80096b0 <mcp25625_readRegister>

	txb_ctrl_t txb;

	txb = getTXB2CTRL();
	// check if already sending
	if (!txb.bits.TXREQ) {
 800974a:	06c0      	lsls	r0, r0, #27
 800974c:	d40a      	bmi.n	8009764 <mcp25625_sendCAN+0x24>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data);
 800974e:	460a      	mov	r2, r1
 8009750:	2044      	movs	r0, #68	; 0x44
 8009752:	210d      	movs	r1, #13
 8009754:	f7ff ffca 	bl	80096ec <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ);
 8009758:	210b      	movs	r1, #11
 800975a:	2050      	movs	r0, #80	; 0x50
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
		setTXREQ0();
		return; // once tx buffer is loaded, return
	}
}
 800975c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 8009760:	f7ff bf86 	b.w	8009670 <mcp25625_writeRegister>
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL);
 8009764:	2040      	movs	r0, #64	; 0x40
 8009766:	f7ff ffa3 	bl	80096b0 <mcp25625_readRegister>
	if (!txb.bits.TXREQ) {
 800976a:	06c2      	lsls	r2, r0, #27
 800976c:	d407      	bmi.n	800977e <mcp25625_sendCAN+0x3e>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data);
 800976e:	460a      	mov	r2, r1
 8009770:	2042      	movs	r0, #66	; 0x42
 8009772:	210d      	movs	r1, #13
 8009774:	f7ff ffba 	bl	80096ec <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ);
 8009778:	210b      	movs	r1, #11
 800977a:	2040      	movs	r0, #64	; 0x40
 800977c:	e7ee      	b.n	800975c <mcp25625_sendCAN+0x1c>
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL);
 800977e:	2030      	movs	r0, #48	; 0x30
 8009780:	f7ff ff96 	bl	80096b0 <mcp25625_readRegister>
	if (!txb.bits.TXREQ) {
 8009784:	06c3      	lsls	r3, r0, #27
 8009786:	d407      	bmi.n	8009798 <mcp25625_sendCAN+0x58>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data);
 8009788:	460a      	mov	r2, r1
 800978a:	2040      	movs	r0, #64	; 0x40
 800978c:	210d      	movs	r1, #13
 800978e:	f7ff ffad 	bl	80096ec <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 8009792:	210b      	movs	r1, #11
 8009794:	2030      	movs	r0, #48	; 0x30
 8009796:	e7e1      	b.n	800975c <mcp25625_sendCAN+0x1c>
 8009798:	bd08      	pop	{r3, pc}

0800979a <CAN_transmit>:

/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit(uint16_t CAN_ID, uint8_t length, uint8_t * message) {
 800979a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	460d      	mov	r5, r1
 80097a0:	4616      	mov	r6, r2
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 80097a2:	2100      	movs	r1, #0
 80097a4:	220d      	movs	r2, #13
 80097a6:	4668      	mov	r0, sp
 80097a8:	f003 f844 	bl	800c834 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 80097ac:	08e3      	lsrs	r3, r4, #3
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 80097ae:	0164      	lsls	r4, r4, #5
	t.txb.SIDH = CAN_ID >> 3;
 80097b0:	f88d 3000 	strb.w	r3, [sp]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 80097b4:	f88d 4001 	strb.w	r4, [sp, #1]
	t.txb.DLC.value = length;
 80097b8:	f88d 5004 	strb.w	r5, [sp, #4]
	for (uint8_t i = 0; i < length; i++) {
 80097bc:	2300      	movs	r3, #0
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	4295      	cmp	r5, r2
 80097c2:	d804      	bhi.n	80097ce <CAN_transmit+0x34>
		t.txb.data[i] = message[i];
	}

	mcp25625_sendCAN(&t);
 80097c4:	4668      	mov	r0, sp
 80097c6:	f7ff ffbb 	bl	8009740 <mcp25625_sendCAN>
}
 80097ca:	b004      	add	sp, #16
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
		t.txb.data[i] = message[i];
 80097ce:	eb0d 0203 	add.w	r2, sp, r3
 80097d2:	5cf1      	ldrb	r1, [r6, r3]
 80097d4:	7151      	strb	r1, [r2, #5]
 80097d6:	3301      	adds	r3, #1
 80097d8:	e7f1      	b.n	80097be <CAN_transmit+0x24>
	...

080097dc <mcp25625_init>:

void mcp25625_init(void) {
 80097dc:	b508      	push	{r3, lr}
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 80097de:	f240 2276 	movw	r2, #630	; 0x276
 80097e2:	2100      	movs	r1, #0
 80097e4:	4806      	ldr	r0, [pc, #24]	; (8009800 <mcp25625_init+0x24>)
 80097e6:	f003 f825 	bl	800c834 <memset>
	spi2_init();
 80097ea:	f001 febd 	bl	800b568 <spi2_init>
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <mcp25625_init+0x28>)
 80097f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80097f4:	619a      	str	r2, [r3, #24]
	clearChipSelect();
	mcp25625_reset();

}
 80097f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_reset();
 80097fa:	f7ff bf1d 	b.w	8009638 <mcp25625_reset>
 80097fe:	bf00      	nop
 8009800:	200006b3 	.word	0x200006b3
 8009804:	48000400 	.word	0x48000400

08009808 <CAN_configure>:

void CAN_configure() {
 8009808:	b508      	push	{r3, lr}
	c1.value = 0xC0;
	c2.value = 0x89;
	c3.value = 0x04;
	canctrl.value = 0x08;

	mcp25625_init();
 800980a:	f7ff ffe7 	bl	80097dc <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 800980e:	21c0      	movs	r1, #192	; 0xc0
 8009810:	202a      	movs	r0, #42	; 0x2a
 8009812:	f7ff ff2d 	bl	8009670 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 8009816:	2189      	movs	r1, #137	; 0x89
 8009818:	2029      	movs	r0, #41	; 0x29
 800981a:	f7ff ff29 	bl	8009670 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 800981e:	2104      	movs	r1, #4
 8009820:	2028      	movs	r0, #40	; 0x28
 8009822:	f7ff ff25 	bl	8009670 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 8009826:	2108      	movs	r1, #8
 8009828:	200f      	movs	r0, #15

}
 800982a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 800982e:	f7ff bf1f 	b.w	8009670 <mcp25625_writeRegister>
	...

08009834 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8009834:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009838:	4905      	ldr	r1, [pc, #20]	; (8009850 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800983c:	68ca      	ldr	r2, [r1, #12]
 800983e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009842:	4313      	orrs	r3, r2
 8009844:	60cb      	str	r3, [r1, #12]
 8009846:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <NVIC_SystemReset+0x16>
 800984e:	bf00      	nop
 8009850:	e000ed00 	.word	0xe000ed00
 8009854:	05fa0004 	.word	0x05fa0004

08009858 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009858:	6883      	ldr	r3, [r0, #8]
 800985a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800985e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009862:	f043 0304 	orr.w	r3, r3, #4
 8009866:	6083      	str	r3, [r0, #8]
 8009868:	4770      	bx	lr
	...

0800986c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <LL_AHB2_GRP1_EnableClock+0x18>)
 800986e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009870:	4302      	orrs	r2, r0
 8009872:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8009876:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009878:	4018      	ands	r0, r3
 800987a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800987c:	9b01      	ldr	r3, [sp, #4]
}
 800987e:	b002      	add	sp, #8
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	40021000 	.word	0x40021000

08009888 <LL_GPIO_SetPinMode>:
{
 8009888:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800988a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800988c:	fa91 f4a1 	rbit	r4, r1
 8009890:	fab4 f484 	clz	r4, r4
 8009894:	fa91 f1a1 	rbit	r1, r1
 8009898:	2503      	movs	r5, #3
 800989a:	fab1 f181 	clz	r1, r1
 800989e:	0064      	lsls	r4, r4, #1
 80098a0:	fa05 f404 	lsl.w	r4, r5, r4
 80098a4:	0049      	lsls	r1, r1, #1
 80098a6:	ea23 0304 	bic.w	r3, r3, r4
 80098aa:	fa02 f101 	lsl.w	r1, r2, r1
 80098ae:	4319      	orrs	r1, r3
 80098b0:	6001      	str	r1, [r0, #0]
 80098b2:	bd30      	pop	{r4, r5, pc}

080098b4 <LL_ADC_REG_SetSequencerRanks>:
{
 80098b4:	b530      	push	{r4, r5, lr}
 80098b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098ba:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80098be:	fab3 f383 	clz	r3, r3
 80098c2:	f401 7440 	and.w	r4, r1, #768	; 0x300
 80098c6:	40dc      	lsrs	r4, r3
 80098c8:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 80098ca:	f001 011f 	and.w	r1, r1, #31
 80098ce:	231f      	movs	r3, #31
 80098d0:	fa03 f501 	lsl.w	r5, r3, r1
 80098d4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80098d8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80098dc:	f1c1 011a 	rsb	r1, r1, #26
 80098e0:	ea23 0305 	bic.w	r3, r3, r5
 80098e4:	fa22 f101 	lsr.w	r1, r2, r1
 80098e8:	4319      	orrs	r1, r3
 80098ea:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80098ee:	bd30      	pop	{r4, r5, pc}

080098f0 <LL_ADC_SetChannelSamplingTime>:
{
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80098f6:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80098fa:	fab6 f386 	clz	r3, r6
 80098fe:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8009902:	40de      	lsrs	r6, r3
 8009904:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8009906:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 800990a:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 800990e:	fa93 f5a3 	rbit	r5, r3
 8009912:	fab5 f585 	clz	r5, r5
 8009916:	fa93 f3a3 	rbit	r3, r3
 800991a:	2407      	movs	r4, #7
 800991c:	fa21 f505 	lsr.w	r5, r1, r5
 8009920:	fa04 f505 	lsl.w	r5, r4, r5
 8009924:	fab3 f383 	clz	r3, r3
 8009928:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800992c:	40d9      	lsrs	r1, r3
 800992e:	ea24 0405 	bic.w	r4, r4, r5
 8009932:	fa02 f101 	lsl.w	r1, r2, r1
 8009936:	4321      	orrs	r1, r4
 8009938:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 800993c:	bd70      	pop	{r4, r5, r6, pc}

0800993e <LL_GPIO_SetPinPull>:
{
 800993e:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009940:	68c3      	ldr	r3, [r0, #12]
 8009942:	fa91 f4a1 	rbit	r4, r1
 8009946:	fab4 f484 	clz	r4, r4
 800994a:	fa91 f1a1 	rbit	r1, r1
 800994e:	2503      	movs	r5, #3
 8009950:	fab1 f181 	clz	r1, r1
 8009954:	0064      	lsls	r4, r4, #1
 8009956:	fa05 f404 	lsl.w	r4, r5, r4
 800995a:	0049      	lsls	r1, r1, #1
 800995c:	ea23 0304 	bic.w	r3, r3, r4
 8009960:	fa02 f101 	lsl.w	r1, r2, r1
 8009964:	4319      	orrs	r1, r3
 8009966:	60c1      	str	r1, [r0, #12]
 8009968:	bd30      	pop	{r4, r5, pc}

0800996a <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800996a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800996c:	6882      	ldr	r2, [r0, #8]
 800996e:	fa91 f3a1 	rbit	r3, r1
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	fa91 f1a1 	rbit	r1, r1
 800997a:	2403      	movs	r4, #3
 800997c:	fab1 f181 	clz	r1, r1
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	fa04 f303 	lsl.w	r3, r4, r3
 8009986:	0049      	lsls	r1, r1, #1
 8009988:	ea22 0303 	bic.w	r3, r2, r3
 800998c:	fa04 f101 	lsl.w	r1, r4, r1
 8009990:	4319      	orrs	r1, r3
 8009992:	6081      	str	r1, [r0, #8]
 8009994:	bd10      	pop	{r4, pc}
	...

08009998 <LL_RTC_DATE_GetDay.constprop.7>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <LL_RTC_DATE_GetDay.constprop.7+0x2c>)
 800999a:	2030      	movs	r0, #48	; 0x30
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	fa90 f0a0 	rbit	r0, r0
 80099a2:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 80099a4:	fab0 f080 	clz	r0, r0
 80099a8:	fa92 f2a2 	rbit	r2, r2
 80099ac:	f003 0130 	and.w	r1, r3, #48	; 0x30
 80099b0:	fab2 f282 	clz	r2, r2
 80099b4:	f003 030f 	and.w	r3, r3, #15
 80099b8:	fa21 f000 	lsr.w	r0, r1, r0
 80099bc:	40d3      	lsrs	r3, r2
}
 80099be:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80099c2:	4770      	bx	lr
 80099c4:	40002800 	.word	0x40002800

080099c8 <LL_RTC_DATE_GetMonth.constprop.8>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 80099c8:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <LL_RTC_DATE_GetMonth.constprop.8+0x30>)
 80099ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	fa90 f0a0 	rbit	r0, r0
 80099d4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 80099d8:	fab0 f080 	clz	r0, r0
 80099dc:	fa92 f2a2 	rbit	r2, r2
 80099e0:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 80099e4:	fab2 f282 	clz	r2, r2
 80099e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80099ec:	fa21 f000 	lsr.w	r0, r1, r0
 80099f0:	40d3      	lsrs	r3, r2
}
 80099f2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80099f6:	4770      	bx	lr
 80099f8:	40002800 	.word	0x40002800

080099fc <LL_RTC_DATE_GetYear.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 80099fc:	4b0b      	ldr	r3, [pc, #44]	; (8009a2c <LL_RTC_DATE_GetYear.constprop.9+0x30>)
 80099fe:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	fa90 f0a0 	rbit	r0, r0
 8009a08:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8009a0c:	fab0 f080 	clz	r0, r0
 8009a10:	fa92 f2a2 	rbit	r2, r2
 8009a14:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8009a18:	fab2 f282 	clz	r2, r2
 8009a1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009a20:	fa21 f000 	lsr.w	r0, r1, r0
 8009a24:	40d3      	lsrs	r3, r2
}
 8009a26:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009a2a:	4770      	bx	lr
 8009a2c:	40002800 	.word	0x40002800

08009a30 <LL_RTC_TIME_GetSecond.constprop.10>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8009a30:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <LL_RTC_TIME_GetSecond.constprop.10+0x2c>)
 8009a32:	2070      	movs	r0, #112	; 0x70
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	fa90 f0a0 	rbit	r0, r0
 8009a3a:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8009a3c:	fab0 f080 	clz	r0, r0
 8009a40:	fa92 f2a2 	rbit	r2, r2
 8009a44:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8009a48:	fab2 f282 	clz	r2, r2
 8009a4c:	f003 030f 	and.w	r3, r3, #15
 8009a50:	fa21 f000 	lsr.w	r0, r1, r0
 8009a54:	40d3      	lsrs	r3, r2
}
 8009a56:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009a5a:	4770      	bx	lr
 8009a5c:	40002800 	.word	0x40002800

08009a60 <LL_RTC_TIME_GetMinute.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <LL_RTC_TIME_GetMinute.constprop.11+0x30>)
 8009a62:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	fa90 f0a0 	rbit	r0, r0
 8009a6c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8009a70:	fab0 f080 	clz	r0, r0
 8009a74:	fa92 f2a2 	rbit	r2, r2
 8009a78:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8009a7c:	fab2 f282 	clz	r2, r2
 8009a80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009a84:	fa21 f000 	lsr.w	r0, r1, r0
 8009a88:	40d3      	lsrs	r3, r2
}
 8009a8a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009a8e:	4770      	bx	lr
 8009a90:	40002800 	.word	0x40002800

08009a94 <LL_RTC_TIME_GetHour.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <LL_RTC_TIME_GetHour.constprop.12+0x30>)
 8009a96:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	fa90 f0a0 	rbit	r0, r0
 8009aa0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8009aa4:	fab0 f080 	clz	r0, r0
 8009aa8:	fa92 f2a2 	rbit	r2, r2
 8009aac:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8009ab0:	fab2 f282 	clz	r2, r2
 8009ab4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009ab8:	fa21 f000 	lsr.w	r0, r1, r0
 8009abc:	40d3      	lsrs	r3, r2
}
 8009abe:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009ac2:	4770      	bx	lr
 8009ac4:	40002800 	.word	0x40002800

08009ac8 <LL_APB2_GRP1_EnableClock.constprop.17>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009ac8:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <LL_APB2_GRP1_EnableClock.constprop.17+0x1c>)
 8009aca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
 8009ad4:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009adc:	9b01      	ldr	r3, [sp, #4]
}
 8009ade:	b002      	add	sp, #8
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40021000 	.word	0x40021000

08009ae8 <Power_on_reset>:

	}

}

void Power_on_reset(void) {
 8009ae8:	b508      	push	{r3, lr}
	if (*Reset_Ram_Key_Address != Reset_Key_Value) {
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <Power_on_reset+0x14>)
 8009aec:	4a04      	ldr	r2, [pc, #16]	; (8009b00 <Power_on_reset+0x18>)
 8009aee:	6819      	ldr	r1, [r3, #0]
 8009af0:	4291      	cmp	r1, r2
 8009af2:	d002      	beq.n	8009afa <Power_on_reset+0x12>
		*Reset_Ram_Key_Address = Reset_Key_Value;
 8009af4:	601a      	str	r2, [r3, #0]
		NVIC_SystemReset();
 8009af6:	f7ff fe9d 	bl	8009834 <NVIC_SystemReset>
 8009afa:	bd08      	pop	{r3, pc}
 8009afc:	20017ef0 	.word	0x20017ef0
 8009b00:	deadbeef 	.word	0xdeadbeef

08009b04 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b04:	4a0a      	ldr	r2, [pc, #40]	; (8009b30 <Configure_Interrupt+0x2c>)
 8009b06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009b0c:	041b      	lsls	r3, r3, #16
 8009b0e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 8009b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009b18:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b1a:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <Configure_Interrupt+0x30>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8009b28:	2210      	movs	r2, #16
 8009b2a:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8009b2e:	4770      	bx	lr
 8009b30:	e000ed00 	.word	0xe000ed00
 8009b34:	e000e100 	.word	0xe000e100

08009b38 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8009b38:	4a0a      	ldr	r2, [pc, #40]	; (8009b64 <Shut_Down_USB+0x2c>)
 8009b3a:	6853      	ldr	r3, [r2, #4]
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void) {
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                     // Disable VDDUSB supply for USB
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8009b42:	4c09      	ldr	r4, [pc, #36]	; (8009b68 <Shut_Down_USB+0x30>)
 8009b44:	6053      	str	r3, [r2, #4]
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <Shut_Down_USB+0x34>)
 8009b48:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8009b4a:	4620      	mov	r0, r4
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8009b4c:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8009b4e:	f7fa f89e 	bl	8003c8e <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7fa f87d 	bl	8003c52 <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE()
 8009b58:	4a05      	ldr	r2, [pc, #20]	; (8009b70 <Shut_Down_USB+0x38>)
 8009b5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b62:	bd10      	pop	{r4, pc}
 8009b64:	40007000 	.word	0x40007000
 8009b68:	20008a44 	.word	0x20008a44
 8009b6c:	200006b0 	.word	0x200006b0
 8009b70:	40021000 	.word	0x40021000

08009b74 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <USB_Clock_Ready+0x2c>)
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void USB_Clock_Ready(void) {
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8009b80:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                       // Enable VDDUSB supply for USB
	while (!LL_PWR_IsEnabledVddUSB())
 8009b82:	0552      	lsls	r2, r2, #21
 8009b84:	d5fc      	bpl.n	8009b80 <USB_Clock_Ready+0xc>
		;                       // Wait for VDDUSB supply to activate
	__HAL_RCC_USB_OTG_FS_CLK_ENABLE()
 8009b86:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <USB_Clock_Ready+0x30>)
 8009b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	9b01      	ldr	r3, [sp, #4]
	;     // Enable USB Clock
}
 8009b9a:	b002      	add	sp, #8
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	40007000 	.word	0x40007000
 8009ba4:	40021000 	.word	0x40021000

08009ba8 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8009ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
int check;
void DFU_Bypass(void) {

	uint32_t i = 0;

	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 8009bac:	4810      	ldr	r0, [pc, #64]	; (8009bf0 <DFU_Bypass+0x48>)
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8009bb4:	f3c2 2240 	ubfx	r2, r2, #9, #1
void DFU_Bypass(void) {
 8009bb8:	b570      	push	{r4, r5, r6, lr}
	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 8009bba:	6002      	str	r2, [r0, #0]
 8009bbc:	691a      	ldr	r2, [r3, #16]
	// if(check == 1)
	//	 CYAN_LED_ONLY();
	while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 8009bbe:	0592      	lsls	r2, r2, #22
 8009bc0:	d4fc      	bmi.n	8009bbc <DFU_Bypass+0x14>
		;  // Wait until USB cable disconnect from Charger
	if (*LP_Ram_Key_Address != Reset_Key_Value) {
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <DFU_Bypass+0x4c>)
 8009bc4:	4c0c      	ldr	r4, [pc, #48]	; (8009bf8 <DFU_Bypass+0x50>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	42a2      	cmp	r2, r4
 8009bca:	d010      	beq.n	8009bee <DFU_Bypass+0x46>
		*LP_Ram_Key_Address = Reset_Key_Value;
 8009bcc:	601c      	str	r4, [r3, #0]
		if (check == 1) {
 8009bce:	b171      	cbz	r1, 8009bee <DFU_Bypass+0x46>
 8009bd0:	2505      	movs	r5, #5
 8009bd2:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
			/* Toggle IO in during 2s (10*200ms) */
			for (i = 0; i < 5; i++) {
				//   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				LL_mDelay(200);
 8009bd6:	20c8      	movs	r0, #200	; 0xc8
 8009bd8:	f7fe fc2a 	bl	8008430 <LL_mDelay>
 8009bdc:	6933      	ldr	r3, [r6, #16]
				if (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY)) {
 8009bde:	059b      	lsls	r3, r3, #22
 8009be0:	d503      	bpl.n	8009bea <DFU_Bypass+0x42>
					*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8009be2:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <DFU_Bypass+0x54>)
 8009be4:	601c      	str	r4, [r3, #0]
					NVIC_SystemReset();        // System reset
 8009be6:	f7ff fe25 	bl	8009834 <NVIC_SystemReset>
			for (i = 0; i < 5; i++) {
 8009bea:	3d01      	subs	r5, #1
 8009bec:	d1f3      	bne.n	8009bd6 <DFU_Bypass+0x2e>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	20008db8 	.word	0x20008db8
 8009bf4:	20017cf0 	.word	0x20017cf0
 8009bf8:	deadbeef 	.word	0xdeadbeef
 8009bfc:	20017ff0 	.word	0x20017ff0

08009c00 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8009c00:	4a03      	ldr	r2, [pc, #12]	; (8009c10 <Prepare_Goto_Dormant_Mode+0x10>)
 8009c02:	6893      	ldr	r3, [r2, #8]
 8009c04:	f023 0302 	bic.w	r3, r3, #2
 8009c08:	6093      	str	r3, [r2, #8]
	}
}

void Prepare_Goto_Dormant_Mode(void) {
	LL_LPTIM_DisableIT_ARRM(LPTIM2); // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 8009c0a:	f7ff b950 	b.w	8008eae <SD_POWER_OFF>
 8009c0e:	bf00      	nop
 8009c10:	40009400 	.word	0x40009400

08009c14 <Reset_Variables_for_LowBattery>:
}

void Reset_Variables_for_LowBattery(void) // Reset all variables needed to Sensor logging in Double Buffer System
{

	SD_write_Flag = 0;
 8009c14:	4b01      	ldr	r3, [pc, #4]	; (8009c1c <Reset_Variables_for_LowBattery+0x8>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
 8009c1a:	4770      	bx	lr
 8009c1c:	20008a3c 	.word	0x20008a3c

08009c20 <GetNextIndex>:
	}

}

int GetNextIndex(char *path) // Read SD card content to save next value in auto increment format
{
 8009c20:	b530      	push	{r4, r5, lr}
 8009c22:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	DIR dir;
	FILINFO fno;
	int i, index = -1;

	if (f_opendir(&dir, path) == FR_OK) {
 8009c26:	4601      	mov	r1, r0
 8009c28:	a808      	add	r0, sp, #32
 8009c2a:	f7f9 fec2 	bl	80039b2 <f_opendir>
 8009c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c32:	b9e0      	cbnz	r0, 8009c6e <GetNextIndex+0x4e>

		while (1) {
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
				break;

			if ((strstr(fno.fname, ".BIN") != NULL)
 8009c34:	4d10      	ldr	r5, [pc, #64]	; (8009c78 <GetNextIndex+0x58>)
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
 8009c36:	a902      	add	r1, sp, #8
 8009c38:	a808      	add	r0, sp, #32
 8009c3a:	f7f9 ff08 	bl	8003a4e <f_readdir>
 8009c3e:	b9b0      	cbnz	r0, 8009c6e <GetNextIndex+0x4e>
 8009c40:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8009c44:	b19b      	cbz	r3, 8009c6e <GetNextIndex+0x4e>
			if ((strstr(fno.fname, ".BIN") != NULL)
 8009c46:	4629      	mov	r1, r5
 8009c48:	f10d 0011 	add.w	r0, sp, #17
 8009c4c:	f002 ff0e 	bl	800ca6c <strstr>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d0f0      	beq.n	8009c36 <GetNextIndex+0x16>
					&& (sscanf(fno.fname, "%d", &i) == 1)) // Searcing for .BIN file and determining highest index
 8009c54:	aa01      	add	r2, sp, #4
 8009c56:	4909      	ldr	r1, [pc, #36]	; (8009c7c <GetNextIndex+0x5c>)
 8009c58:	f10d 0011 	add.w	r0, sp, #17
 8009c5c:	f002 fed2 	bl	800ca04 <siscanf>
 8009c60:	2801      	cmp	r0, #1
 8009c62:	d1e8      	bne.n	8009c36 <GetNextIndex+0x16>
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	429c      	cmp	r4, r3
 8009c68:	bfb8      	it	lt
 8009c6a:	461c      	movlt	r4, r3
 8009c6c:	e7e3      	b.n	8009c36 <GetNextIndex+0x16>
				if (i > index)
					index = i;
		}
	}
	return (index + 1);
}
 8009c6e:	1c60      	adds	r0, r4, #1
 8009c70:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8009c74:	bd30      	pop	{r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	0800edeb 	.word	0x0800edeb
 8009c7c:	0800ede4 	.word	0x0800ede4

08009c80 <Try_FATFS_Mount>:
	}
	return 0;
}

void Try_FATFS_Mount(void) {
	if (Fat_mnt_fail == 1) {
 8009c80:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <Try_FATFS_Mount+0x44>)
void Try_FATFS_Mount(void) {
 8009c82:	b510      	push	{r4, lr}
	if (Fat_mnt_fail == 1) {
 8009c84:	681c      	ldr	r4, [r3, #0]
 8009c86:	2c01      	cmp	r4, #1
 8009c88:	d11a      	bne.n	8009cc0 <Try_FATFS_Mount+0x40>
		Fat_mnt_fail = 0;
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
		SD_POWER_OFF();
 8009c8e:	f7ff f90e 	bl	8008eae <SD_POWER_OFF>
		delay_us(10000); // wait 10 msec
 8009c92:	f242 7010 	movw	r0, #10000	; 0x2710
 8009c96:	f001 fdc5 	bl	800b824 <delay_us>
		SD_POWER_ON();
 8009c9a:	f7ff f907 	bl	8008eac <SD_POWER_ON>
		delay_us(1000000); // wait 1 sec
 8009c9e:	480a      	ldr	r0, [pc, #40]	; (8009cc8 <Try_FATFS_Mount+0x48>)
 8009ca0:	f001 fdc0 	bl	800b824 <delay_us>
		//Retry FATFS link

		if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009ca4:	4909      	ldr	r1, [pc, #36]	; (8009ccc <Try_FATFS_Mount+0x4c>)
 8009ca6:	480a      	ldr	r0, [pc, #40]	; (8009cd0 <Try_FATFS_Mount+0x50>)
 8009ca8:	f7f9 ff98 	bl	8003bdc <FATFS_LinkDriver>
 8009cac:	b928      	cbnz	r0, 8009cba <Try_FATFS_Mount+0x3a>
				{
			if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4906      	ldr	r1, [pc, #24]	; (8009ccc <Try_FATFS_Mount+0x4c>)
 8009cb2:	4808      	ldr	r0, [pc, #32]	; (8009cd4 <Try_FATFS_Mount+0x54>)
 8009cb4:	f7f9 fac0 	bl	8003238 <f_mount>
 8009cb8:	b110      	cbz	r0, 8009cc0 <Try_FATFS_Mount+0x40>
					{
				Skip_FATFS = 1;
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <Try_FATFS_Mount+0x58>)
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20008cd0 	.word	0x20008cd0
 8009cc8:	000f4240 	.word	0x000f4240
 8009ccc:	20008dc5 	.word	0x20008dc5
 8009cd0:	0800ecec 	.word	0x0800ecec
 8009cd4:	20008dd4 	.word	0x20008dd4
 8009cd8:	20009029 	.word	0x20009029

08009cdc <file_reopen_sync>:
		}
	}

}

void file_reopen_sync(void) {
 8009cdc:	b508      	push	{r3, lr}
	f_close(&MyFile);
 8009cde:	4807      	ldr	r0, [pc, #28]	; (8009cfc <file_reopen_sync+0x20>)
 8009ce0:	f7f9 fd07 	bl	80036f2 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8009ce4:	2212      	movs	r2, #18
 8009ce6:	4906      	ldr	r1, [pc, #24]	; (8009d00 <file_reopen_sync+0x24>)
 8009ce8:	4804      	ldr	r0, [pc, #16]	; (8009cfc <file_reopen_sync+0x20>)
 8009cea:	f7f9 fadb 	bl	80032a4 <f_open>
	if (res != FR_OK) {
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <file_reopen_sync+0x28>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b113      	cbz	r3, 8009cfa <file_reopen_sync+0x1e>
		Fat_sync_read_fail = 1;
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <file_reopen_sync+0x2c>)
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	bd08      	pop	{r3, pc}
 8009cfc:	20009034 	.word	0x20009034
 8009d00:	20008d18 	.word	0x20008d18
 8009d04:	200092b6 	.word	0x200092b6
 8009d08:	20008cd8 	.word	0x20008cd8

08009d0c <file_reopen>:
	}
}

void file_reopen(void) {
 8009d0c:	b508      	push	{r3, lr}
	f_close(&MyFile);
 8009d0e:	4807      	ldr	r0, [pc, #28]	; (8009d2c <file_reopen+0x20>)
 8009d10:	f7f9 fcef 	bl	80036f2 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8009d14:	2212      	movs	r2, #18
 8009d16:	4906      	ldr	r1, [pc, #24]	; (8009d30 <file_reopen+0x24>)
 8009d18:	4804      	ldr	r0, [pc, #16]	; (8009d2c <file_reopen+0x20>)
 8009d1a:	f7f9 fac3 	bl	80032a4 <f_open>
	if (res != FR_OK) {
 8009d1e:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <file_reopen+0x28>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b113      	cbz	r3, 8009d2a <file_reopen+0x1e>
		Fat_write_read_fail = 1;
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <file_reopen+0x2c>)
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	bd08      	pop	{r3, pc}
 8009d2c:	20009034 	.word	0x20009034
 8009d30:	20008d18 	.word	0x20008d18
 8009d34:	200092b6 	.word	0x200092b6
 8009d38:	20008cd4 	.word	0x20008cd4

08009d3c <file_mnt_reopen>:
	}
}

void file_mnt_reopen(void) {
 8009d3c:	b508      	push	{r3, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009d3e:	490c      	ldr	r1, [pc, #48]	; (8009d70 <file_mnt_reopen+0x34>)
 8009d40:	480c      	ldr	r0, [pc, #48]	; (8009d74 <file_mnt_reopen+0x38>)
 8009d42:	f7f9 ff4b 	bl	8003bdc <FATFS_LinkDriver>
 8009d46:	b928      	cbnz	r0, 8009d54 <file_mnt_reopen+0x18>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009d48:	2201      	movs	r2, #1
 8009d4a:	4909      	ldr	r1, [pc, #36]	; (8009d70 <file_mnt_reopen+0x34>)
 8009d4c:	480a      	ldr	r0, [pc, #40]	; (8009d78 <file_mnt_reopen+0x3c>)
 8009d4e:	f7f9 fa73 	bl	8003238 <f_mount>
 8009d52:	b118      	cbz	r0, 8009d5c <file_mnt_reopen+0x20>
				{
			Fat_read_mnt_fail = 1;
 8009d54:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <file_mnt_reopen+0x40>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	bd08      	pop	{r3, pc}
		} else  // Good to Go
		{
			res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8009d5c:	2212      	movs	r2, #18
 8009d5e:	4908      	ldr	r1, [pc, #32]	; (8009d80 <file_mnt_reopen+0x44>)
 8009d60:	4808      	ldr	r0, [pc, #32]	; (8009d84 <file_mnt_reopen+0x48>)
 8009d62:	f7f9 fa9f 	bl	80032a4 <f_open>
 8009d66:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <file_mnt_reopen+0x4c>)
 8009d68:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) {
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d1f2      	bne.n	8009d54 <file_mnt_reopen+0x18>
 8009d6e:	bd08      	pop	{r3, pc}
 8009d70:	20008dc5 	.word	0x20008dc5
 8009d74:	0800ecec 	.word	0x0800ecec
 8009d78:	20008dd4 	.word	0x20008dd4
 8009d7c:	20008d7c 	.word	0x20008d7c
 8009d80:	20008d18 	.word	0x20008d18
 8009d84:	20009034 	.word	0x20009034
 8009d88:	200092b6 	.word	0x200092b6

08009d8c <FATFS_Logstart_Delete>:
		}
		delay_us(100);
	}
}

void FATFS_Logstart_Delete(void) {
 8009d8c:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009d8e:	490d      	ldr	r1, [pc, #52]	; (8009dc4 <FATFS_Logstart_Delete+0x38>)
 8009d90:	480d      	ldr	r0, [pc, #52]	; (8009dc8 <FATFS_Logstart_Delete+0x3c>)
 8009d92:	f7f9 ff23 	bl	8003bdc <FATFS_LinkDriver>
 8009d96:	b958      	cbnz	r0, 8009db0 <FATFS_Logstart_Delete+0x24>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009d98:	2201      	movs	r2, #1
 8009d9a:	490a      	ldr	r1, [pc, #40]	; (8009dc4 <FATFS_Logstart_Delete+0x38>)
 8009d9c:	480b      	ldr	r0, [pc, #44]	; (8009dcc <FATFS_Logstart_Delete+0x40>)
 8009d9e:	f7f9 fa4b 	bl	8003238 <f_mount>
 8009da2:	b910      	cbnz	r0, 8009daa <FATFS_Logstart_Delete+0x1e>
				{     // Initialization Error Debugging
			//		 RED_LED_ON();
		}

		else {
			if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 8009da4:	480a      	ldr	r0, [pc, #40]	; (8009dd0 <FATFS_Logstart_Delete+0x44>)
 8009da6:	f7f9 fe7d 	bl	8003aa4 <f_unlink>
			}
		}
		delay_us(100);
 8009daa:	2064      	movs	r0, #100	; 0x64
 8009dac:	f001 fd3a 	bl	800b824 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8009db0:	2200      	movs	r2, #0
 8009db2:	4908      	ldr	r1, [pc, #32]	; (8009dd4 <FATFS_Logstart_Delete+0x48>)
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7f9 fa3f 	bl	8003238 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009dba:	4802      	ldr	r0, [pc, #8]	; (8009dc4 <FATFS_Logstart_Delete+0x38>)
}
 8009dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009dc0:	f7f9 bf28 	b.w	8003c14 <FATFS_UnLinkDriver>
 8009dc4:	20008dc5 	.word	0x20008dc5
 8009dc8:	0800ecec 	.word	0x0800ecec
 8009dcc:	20008dd4 	.word	0x20008dd4
 8009dd0:	0800edd7 	.word	0x0800edd7
 8009dd4:	0800ef7b 	.word	0x0800ef7b

08009dd8 <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void) {
 8009dd8:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009dda:	4910      	ldr	r1, [pc, #64]	; (8009e1c <FATFS_Logstart_Ready+0x44>)
 8009ddc:	4810      	ldr	r0, [pc, #64]	; (8009e20 <FATFS_Logstart_Ready+0x48>)
 8009dde:	f7f9 fefd 	bl	8003bdc <FATFS_LinkDriver>
 8009de2:	b988      	cbnz	r0, 8009e08 <FATFS_Logstart_Ready+0x30>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009de4:	2201      	movs	r2, #1
 8009de6:	490d      	ldr	r1, [pc, #52]	; (8009e1c <FATFS_Logstart_Ready+0x44>)
 8009de8:	480e      	ldr	r0, [pc, #56]	; (8009e24 <FATFS_Logstart_Ready+0x4c>)
 8009dea:	f7f9 fa25 	bl	8003238 <f_mount>
 8009dee:	b940      	cbnz	r0, 8009e02 <FATFS_Logstart_Ready+0x2a>
				{     // Initialization Error Debugging

		}

		else {
			if (f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE)
 8009df0:	2212      	movs	r2, #18
 8009df2:	490d      	ldr	r1, [pc, #52]	; (8009e28 <FATFS_Logstart_Ready+0x50>)
 8009df4:	480d      	ldr	r0, [pc, #52]	; (8009e2c <FATFS_Logstart_Ready+0x54>)
 8009df6:	f7f9 fa55 	bl	80032a4 <f_open>
 8009dfa:	b910      	cbnz	r0, 8009e02 <FATFS_Logstart_Ready+0x2a>
					!= FR_OK) // Create and Open a new text file object with write access
					{

			} else {

				f_close(&MyFile);
 8009dfc:	480b      	ldr	r0, [pc, #44]	; (8009e2c <FATFS_Logstart_Ready+0x54>)
 8009dfe:	f7f9 fc78 	bl	80036f2 <f_close>
			}
		}
		delay_us(100);
 8009e02:	2064      	movs	r0, #100	; 0x64
 8009e04:	f001 fd0e 	bl	800b824 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4909      	ldr	r1, [pc, #36]	; (8009e30 <FATFS_Logstart_Ready+0x58>)
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	f7f9 fa13 	bl	8003238 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009e12:	4802      	ldr	r0, [pc, #8]	; (8009e1c <FATFS_Logstart_Ready+0x44>)
}
 8009e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009e18:	f7f9 befc 	b.w	8003c14 <FATFS_UnLinkDriver>
 8009e1c:	20008dc5 	.word	0x20008dc5
 8009e20:	0800ecec 	.word	0x0800ecec
 8009e24:	20008dd4 	.word	0x20008dd4
 8009e28:	0800edd7 	.word	0x0800edd7
 8009e2c:	20009034 	.word	0x20009034
 8009e30:	0800ef7b 	.word	0x0800ef7b

08009e34 <USB_MSC_Init_Start>:
	}
#endif
}

void USB_MSC_Init_Start(void)                         // Initialize USB MSC mode
{
 8009e34:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);             // USB MSC initialization
 8009e36:	4c0b      	ldr	r4, [pc, #44]	; (8009e64 <USB_MSC_Init_Start+0x30>)
 8009e38:	490b      	ldr	r1, [pc, #44]	; (8009e68 <USB_MSC_Init_Start+0x34>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f7f9 feec 	bl	8003c1a <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);  // USB class registration
 8009e42:	490a      	ldr	r1, [pc, #40]	; (8009e6c <USB_MSC_Init_Start+0x38>)
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7f9 ff16 	bl	8003c76 <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 8009e4a:	4909      	ldr	r1, [pc, #36]	; (8009e70 <USB_MSC_Init_Start+0x3c>)
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f7fa fafe 	bl	800444e <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7f9 ff16 	bl	8003c84 <USBD_Start>

	delay_us(1000000);
 8009e58:	4806      	ldr	r0, [pc, #24]	; (8009e74 <USB_MSC_Init_Start+0x40>)

}
 8009e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8009e5e:	f001 bce1 	b.w	800b824 <delay_us>
 8009e62:	bf00      	nop
 8009e64:	20008a44 	.word	0x20008a44
 8009e68:	200000f0 	.word	0x200000f0
 8009e6c:	2000003c 	.word	0x2000003c
 8009e70:	200002bc 	.word	0x200002bc
 8009e74:	000f4240 	.word	0x000f4240

08009e78 <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void) {
 8009e78:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &VCP_Desc, 0);             // USB VCP initialization
 8009e7a:	4c0b      	ldr	r4, [pc, #44]	; (8009ea8 <USB_VCP_Init_Start+0x30>)
 8009e7c:	490b      	ldr	r1, [pc, #44]	; (8009eac <USB_VCP_Init_Start+0x34>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	4620      	mov	r0, r4
 8009e82:	f7f9 feca 	bl	8003c1a <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);  // USB class registration
 8009e86:	490a      	ldr	r1, [pc, #40]	; (8009eb0 <USB_VCP_Init_Start+0x38>)
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f7f9 fef4 	bl	8003c76 <USBD_RegisterClass>
	USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 8009e8e:	4909      	ldr	r1, [pc, #36]	; (8009eb4 <USB_VCP_Init_Start+0x3c>)
 8009e90:	4620      	mov	r0, r4
 8009e92:	f002 fa35 	bl	800c300 <USBD_CDC_RegisterInterface>
	USBD_Start(&USBD_Device);                                 // Start USB VCP
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7f9 fef4 	bl	8003c84 <USBD_Start>
	delay_us(1000000);
 8009e9c:	4806      	ldr	r0, [pc, #24]	; (8009eb8 <USB_VCP_Init_Start+0x40>)
}
 8009e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8009ea2:	f001 bcbf 	b.w	800b824 <delay_us>
 8009ea6:	bf00      	nop
 8009ea8:	20008a44 	.word	0x20008a44
 8009eac:	20000154 	.word	0x20000154
 8009eb0:	2000019c 	.word	0x2000019c
 8009eb4:	200002ac 	.word	0x200002ac
 8009eb8:	000f4240 	.word	0x000f4240

08009ebc <Read_RTC_Timestamp>:
			__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)),
			2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}

void Read_RTC_Timestamp(void)       // Read RTC timestamp and store in variables
{
 8009ebc:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

	Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8009ebe:	f7ff fde9 	bl	8009a94 <LL_RTC_TIME_GetHour.constprop.12>
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	f7ff fde6 	bl	8009a94 <LL_RTC_TIME_GetHour.constprop.12>
 8009ec8:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8009ecc:	4a2b      	ldr	r2, [pc, #172]	; (8009f7c <Read_RTC_Timestamp+0xc0>)
 8009ece:	f000 000f 	and.w	r0, r0, #15
 8009ed2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ed6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009eda:	7013      	strb	r3, [r2, #0]
	Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8009edc:	f7ff fdc0 	bl	8009a60 <LL_RTC_TIME_GetMinute.constprop.11>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	f7ff fdbd 	bl	8009a60 <LL_RTC_TIME_GetMinute.constprop.11>
 8009ee6:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8009eea:	4a25      	ldr	r2, [pc, #148]	; (8009f80 <Read_RTC_Timestamp+0xc4>)
 8009eec:	f000 000f 	and.w	r0, r0, #15
 8009ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ef4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009ef8:	7013      	strb	r3, [r2, #0]
	Sec = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8009efa:	f7ff fd99 	bl	8009a30 <LL_RTC_TIME_GetSecond.constprop.10>
 8009efe:	4604      	mov	r4, r0
 8009f00:	f7ff fd96 	bl	8009a30 <LL_RTC_TIME_GetSecond.constprop.10>
 8009f04:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8009f08:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <Read_RTC_Timestamp+0xc8>)
 8009f0a:	f000 000f 	and.w	r0, r0, #15
 8009f0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f12:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009f16:	7013      	strb	r3, [r2, #0]

	Mon = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8009f18:	f7ff fd56 	bl	80099c8 <LL_RTC_DATE_GetMonth.constprop.8>
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	f7ff fd53 	bl	80099c8 <LL_RTC_DATE_GetMonth.constprop.8>
 8009f22:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8009f26:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <Read_RTC_Timestamp+0xcc>)
 8009f28:	f000 000f 	and.w	r0, r0, #15
 8009f2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009f34:	7013      	strb	r3, [r2, #0]
	Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8009f36:	f7ff fd2f 	bl	8009998 <LL_RTC_DATE_GetDay.constprop.7>
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	f7ff fd2c 	bl	8009998 <LL_RTC_DATE_GetDay.constprop.7>
 8009f40:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8009f44:	4a11      	ldr	r2, [pc, #68]	; (8009f8c <Read_RTC_Timestamp+0xd0>)
 8009f46:	f000 000f 	and.w	r0, r0, #15
 8009f4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009f52:	7013      	strb	r3, [r2, #0]
	Year = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8009f54:	f7ff fd52 	bl	80099fc <LL_RTC_DATE_GetYear.constprop.9>
 8009f58:	4604      	mov	r4, r0
 8009f5a:	f7ff fd4f 	bl	80099fc <LL_RTC_DATE_GetYear.constprop.9>
 8009f5e:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8009f62:	4a0b      	ldr	r2, [pc, #44]	; (8009f90 <Read_RTC_Timestamp+0xd4>)
 8009f64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f68:	f000 000f 	and.w	r0, r0, #15
 8009f6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009f70:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
	(void) RTC->DR;
 8009f72:	4b08      	ldr	r3, [pc, #32]	; (8009f94 <Read_RTC_Timestamp+0xd8>)
 8009f74:	685a      	ldr	r2, [r3, #4]
	(void) RTC->TR;
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20008d2a 	.word	0x20008d2a
 8009f80:	20008ce8 	.word	0x20008ce8
 8009f84:	20008d34 	.word	0x20008d34
 8009f88:	20009018 	.word	0x20009018
 8009f8c:	20009006 	.word	0x20009006
 8009f90:	20009031 	.word	0x20009031
 8009f94:	40002800 	.word	0x40002800

08009f98 <update_FATFS_time>:
{
 8009f98:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();         // Read RTC time-stamps and store in variables
 8009f9a:	f7ff ff8f 	bl	8009ebc <Read_RTC_Timestamp>
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 8009f9e:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <update_FATFS_time+0x44>)
 8009fa0:	490f      	ldr	r1, [pc, #60]	; (8009fe0 <update_FATFS_time+0x48>)
 8009fa2:	781a      	ldrb	r2, [r3, #0]
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 8009fa6:	4810      	ldr	r0, [pc, #64]	; (8009fe8 <update_FATFS_time+0x50>)
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8009fae:	4a0f      	ldr	r2, [pc, #60]	; (8009fec <update_FATFS_time+0x54>)
 8009fb0:	7812      	ldrb	r2, [r2, #0]
 8009fb2:	3214      	adds	r2, #20
 8009fb4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8009fb8:	808b      	strh	r3, [r1, #4]
	fno.ftime = (WORD) (Hour << 11 | Min << 5 | Sec / 2); // Extracting values from RTC registers
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <update_FATFS_time+0x58>)
 8009fbc:	781a      	ldrb	r2, [r3, #0]
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <update_FATFS_time+0x5c>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	015b      	lsls	r3, r3, #5
 8009fc4:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8009fc8:	4a0b      	ldr	r2, [pc, #44]	; (8009ff8 <update_FATFS_time+0x60>)
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8009fd0:	80cb      	strh	r3, [r1, #6]
}
 8009fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 8009fd6:	f7f9 bdb6 	b.w	8003b46 <f_utime>
 8009fda:	bf00      	nop
 8009fdc:	20009018 	.word	0x20009018
 8009fe0:	20008cfc 	.word	0x20008cfc
 8009fe4:	20009006 	.word	0x20009006
 8009fe8:	20008d18 	.word	0x20008d18
 8009fec:	20009031 	.word	0x20009031
 8009ff0:	20008d2a 	.word	0x20008d2a
 8009ff4:	20008ce8 	.word	0x20008ce8
 8009ff8:	20008d34 	.word	0x20008d34

08009ffc <File_Close_Update_Unlink>:
void File_Close_Update_Unlink(void) {
 8009ffc:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 8009ffe:	4807      	ldr	r0, [pc, #28]	; (800a01c <File_Close_Update_Unlink+0x20>)
 800a000:	f7f9 fb77 	bl	80036f2 <f_close>
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 800a004:	f7ff ffc8 	bl	8009f98 <update_FATFS_time>
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
 800a008:	2200      	movs	r2, #0
 800a00a:	4905      	ldr	r1, [pc, #20]	; (800a020 <File_Close_Update_Unlink+0x24>)
 800a00c:	4610      	mov	r0, r2
 800a00e:	f7f9 f913 	bl	8003238 <f_mount>
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 800a012:	4804      	ldr	r0, [pc, #16]	; (800a024 <File_Close_Update_Unlink+0x28>)
}
 800a014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 800a018:	f7f9 bdfc 	b.w	8003c14 <FATFS_UnLinkDriver>
 800a01c:	20009034 	.word	0x20009034
 800a020:	0800ef7b 	.word	0x0800ef7b
 800a024:	20008dc5 	.word	0x20008dc5

0800a028 <Shut_Down_SD>:
 800a028:	f7ff bfe8 	b.w	8009ffc <File_Close_Update_Unlink>

0800a02c <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void) // Function needed before writing on RTC registers
{
	RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 800a02c:	4b03      	ldr	r3, [pc, #12]	; (800a03c <Enter_RTC_InitMode+0x10>)
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295
 800a032:	60da      	str	r2, [r3, #12]
	while (((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF))
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	0652      	lsls	r2, r2, #25
 800a038:	d5fc      	bpl.n	800a034 <Enter_RTC_InitMode+0x8>
		; // Wait to enter Init mode
}
 800a03a:	4770      	bx	lr
 800a03c:	40002800 	.word	0x40002800

0800a040 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)   // Function needed after writing on RTC registers
{
	RTC->ISR = (uint32_t) ~RTC_ISR_INIT; // Disable RTC init mode
 800a040:	4b06      	ldr	r3, [pc, #24]	; (800a05c <Exit_RTC_InitMode+0x1c>)
 800a042:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a046:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR,
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a04e:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 800a052:	60da      	str	r2, [r3, #12]
			(~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
	while (((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF))
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	0692      	lsls	r2, r2, #26
 800a058:	d5fc      	bpl.n	800a054 <Exit_RTC_InitMode+0x14>
		;  // Wait the registers to be synchronised
}
 800a05a:	4770      	bx	lr
 800a05c:	40002800 	.word	0x40002800

0800a060 <MX_RTC_Init>:

void MX_RTC_Init(void)                // RTC initialization after Power on reset
{
 800a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a062:	4b29      	ldr	r3, [pc, #164]	; (800a108 <MX_RTC_Init+0xa8>)
 800a064:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a068:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a06c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a070:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a074:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a07c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a080:	f042 0201 	orr.w	r2, r2, #1
 800a084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800a088:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	LL_RTC_InitTypeDef RTC_InitStruct;

	LL_RCC_ForceBackupDomainReset();            // Reset Backup domain registers
	LL_RCC_ReleaseBackupDomainReset();
	LL_RCC_LSE_Enable();                    // Configure LSE as RTC source clock
	while (LL_RCC_LSE_IsReady() != 1)
 800a08c:	0792      	lsls	r2, r2, #30
 800a08e:	d5fb      	bpl.n	800a088 <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a090:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		;
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
	LL_RCC_EnableRTC();                           // RTC clock

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 800a094:	4c1d      	ldr	r4, [pc, #116]	; (800a10c <MX_RTC_Init+0xac>)
 800a096:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a09a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a09e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a0a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800a0a6:	a904      	add	r1, sp, #16
 800a0a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f841 3d0c 	str.w	r3, [r1, #-12]!
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f7fd fc84 	bl	80079c4 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a0bc:	23ca      	movs	r3, #202	; 0xca
 800a0be:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a0c0:	2353      	movs	r3, #83	; 0x53
 800a0c2:	6263      	str	r3, [r4, #36]	; 0x24

	LL_RTC_DisableWriteProtection(RTC);
	Enter_RTC_InitMode();     // Enter RTC initialization mode to set parameters
 800a0c4:	f7ff ffb2 	bl	800a02c <Enter_RTC_InitMode>

	// Calender set up
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A,
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800a0ce:	fa92 f2a2 	rbit	r2, r2
 800a0d2:	217f      	movs	r1, #127	; 0x7f
 800a0d4:	fab2 f282 	clz	r2, r2
 800a0d8:	fa01 f202 	lsl.w	r2, r1, r2
 800a0dc:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	6123      	str	r3, [r4, #16]
			0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);         // SYNC prediv= 0xFF
 800a0e4:	6923      	ldr	r3, [r4, #16]
 800a0e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a0ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0ee:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800a0f2:	6123      	str	r3, [r4, #16]

	Exit_RTC_InitMode();
 800a0f4:	f7ff ffa4 	bl	800a040 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a0f8:	23ff      	movs	r3, #255	; 0xff
 800a0fa:	6263      	str	r3, [r4, #36]	; 0x24

	tmp = (uint32_t) (&(RTCx->BKP0R));
	tmp += (BackupRegister * 4U);

	/* Write the specified register */
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <MX_RTC_Init+0xb0>)
 800a0fe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800a102:	605a      	str	r2, [r3, #4]
}
 800a104:	b004      	add	sp, #16
 800a106:	bd10      	pop	{r4, pc}
 800a108:	40021000 	.word	0x40021000
 800a10c:	40002800 	.word	0x40002800
 800a110:	40002850 	.word	0x40002850

0800a114 <Set_RTC_Calendar>:
		uint8_t Min, uint8_t Sec) {
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a116:	4c19      	ldr	r4, [pc, #100]	; (800a17c <Set_RTC_Calendar+0x68>)
 800a118:	460f      	mov	r7, r1
 800a11a:	4619      	mov	r1, r3
 800a11c:	23ca      	movs	r3, #202	; 0xca
 800a11e:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a120:	2353      	movs	r3, #83	; 0x53
 800a122:	b085      	sub	sp, #20
 800a124:	6263      	str	r3, [r4, #36]	; 0x24
 800a126:	4606      	mov	r6, r0
 800a128:	4615      	mov	r5, r2
	Enter_RTC_InitMode();
 800a12a:	f7ff ff7f 	bl	800a02c <Enter_RTC_InitMode>
	RTC_TimeStruct.Minutes = Min;
 800a12e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	RTC_TimeStruct.Hours = Hour;
 800a132:	f88d 100c 	strb.w	r1, [sp, #12]
	RTC_TimeStruct.Minutes = Min;
 800a136:	f88d 300d 	strb.w	r3, [sp, #13]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800a13a:	aa02      	add	r2, sp, #8
	RTC_TimeStruct.Seconds = Sec;
 800a13c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a140:	f88d 300e 	strb.w	r3, [sp, #14]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800a144:	2100      	movs	r1, #0
 800a146:	4620      	mov	r0, r4
 800a148:	f7fd fcac 	bl	8007aa4 <LL_RTC_TIME_Init>
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 800a14c:	2301      	movs	r3, #1
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800a14e:	aa01      	add	r2, sp, #4
 800a150:	2100      	movs	r1, #0
 800a152:	4620      	mov	r0, r4
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 800a154:	f88d 3004 	strb.w	r3, [sp, #4]
	RTC_DateStruct.Month = Month;
 800a158:	f88d 7005 	strb.w	r7, [sp, #5]
	RTC_DateStruct.Year = Year;
 800a15c:	f88d 6007 	strb.w	r6, [sp, #7]
	RTC_DateStruct.Day = Day;
 800a160:	f88d 5006 	strb.w	r5, [sp, #6]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800a164:	f7fd fce2 	bl	8007b2c <LL_RTC_DATE_Init>
	Exit_RTC_InitMode();
 800a168:	f7ff ff6a 	bl	800a040 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a16c:	23ff      	movs	r3, #255	; 0xff
 800a16e:	6263      	str	r3, [r4, #36]	; 0x24
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 800a170:	4b03      	ldr	r3, [pc, #12]	; (800a180 <Set_RTC_Calendar+0x6c>)
 800a172:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800a176:	605a      	str	r2, [r3, #4]
}
 800a178:	b005      	add	sp, #20
 800a17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17c:	40002800 	.word	0x40002800
 800a180:	40002850 	.word	0x40002850

0800a184 <RTC_BAK_GetRegister>:

// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister) {
	register uint32_t tmp = 0U;

	tmp = (uint32_t) (&(RTCx->BKP0R));
 800a184:	3050      	adds	r0, #80	; 0x50
	tmp += (BackupRegister * 4U);

	/* Read the specified register */
	return (*(__IO uint32_t *) tmp);
 800a186:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 800a18a:	4770      	bx	lr

0800a18c <USB_PA9_EXTI_conf>:
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_10);    // Enable PA10 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10); // Interrupt configured for falling edge
}

void USB_PA9_EXTI_conf(void) // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 800a18c:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800a18e:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <USB_PA9_EXTI_conf+0x34>)
 800a190:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a194:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG); // Enable Sysconfig clock to enable EXTI pin interrupts
 800a196:	f7ff fc97 	bl	8009ac8 <LL_APB2_GRP1_EnableClock.constprop.17>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800a19a:	4a0a      	ldr	r2, [pc, #40]	; (800a1c4 <USB_PA9_EXTI_conf+0x38>)
 800a19c:	6913      	ldr	r3, [r2, #16]
 800a19e:	21f0      	movs	r1, #240	; 0xf0
 800a1a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1a4:	fa91 f1a1 	rbit	r1, r1
 800a1a8:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a1aa:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <USB_PA9_EXTI_conf+0x3c>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b2:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ba:	609a      	str	r2, [r3, #8]
 800a1bc:	bd08      	pop	{r3, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000e100 	.word	0xe000e100
 800a1c4:	40010000 	.word	0x40010000
 800a1c8:	40010400 	.word	0x40010400

0800a1cc <Wait_for_ADC_timeout_While_Datalog>:
	}
}

void Wait_for_ADC_timeout_While_Datalog(void) // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 800a1cc:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	3201      	adds	r2, #1
 800a1d2:	601a      	str	r2, [r3, #0]
	if (ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 800a1d4:	6819      	ldr	r1, [r3, #0]
 800a1d6:	4a05      	ldr	r2, [pc, #20]	; (800a1ec <Wait_for_ADC_timeout_While_Datalog+0x20>)
 800a1d8:	4291      	cmp	r1, r2
 800a1da:	d904      	bls.n	800a1e6 <Wait_for_ADC_timeout_While_Datalog+0x1a>
	{
		ADC_TimeOut_Count_Buf = 0;
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf = 1;
 800a1e0:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	701a      	strb	r2, [r3, #0]
 800a1e6:	4770      	bx	lr
 800a1e8:	20008cf8 	.word	0x20008cf8
 800a1ec:	00493e00 	.word	0x00493e00
 800a1f0:	200092b7 	.word	0x200092b7

0800a1f4 <Wait_for_ADC_TimeOut_>:
		SPI_Error = 1;
	}
}

void Wait_for_ADC_TimeOut_(void) {
	ADC_TimeOut_Count++;
 800a1f4:	4a06      	ldr	r2, [pc, #24]	; (800a210 <Wait_for_ADC_TimeOut_+0x1c>)
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 800a1f6:	4907      	ldr	r1, [pc, #28]	; (800a214 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 800a1f8:	6813      	ldr	r3, [r2, #0]
 800a1fa:	3301      	adds	r3, #1
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 800a1fc:	428b      	cmp	r3, r1
	{
		ADC_TimeOut_Count = 0;
 800a1fe:	bf83      	ittte	hi
 800a200:	2300      	movhi	r3, #0
 800a202:	6013      	strhi	r3, [r2, #0]
		ADC_Error = 1;
 800a204:	4b04      	ldrhi	r3, [pc, #16]	; (800a218 <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 800a206:	6013      	strls	r3, [r2, #0]
		ADC_Error = 1;
 800a208:	bf84      	itt	hi
 800a20a:	2201      	movhi	r2, #1
 800a20c:	701a      	strbhi	r2, [r3, #0]
 800a20e:	4770      	bx	lr
 800a210:	200092b8 	.word	0x200092b8
 800a214:	00493e00 	.word	0x00493e00
 800a218:	200092ae 	.word	0x200092ae

0800a21c <P_Activate_ADC3>:
void P_Activate_ADC3(void) {
 800a21c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800a21e:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a220:	482c      	ldr	r0, [pc, #176]	; (800a2d4 <P_Activate_ADC3+0xb8>)
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 800a226:	4a2c      	ldr	r2, [pc, #176]	; (800a2d8 <P_Activate_ADC3+0xbc>)
 800a228:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a22c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a230:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a232:	6883      	ldr	r3, [r0, #8]
 800a234:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a23c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a240:	6083      	str	r3, [r0, #8]
 800a242:	4b26      	ldr	r3, [pc, #152]	; (800a2dc <P_Activate_ADC3+0xc0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	fbb3 f3f2 	udiv	r3, r3, r2
 800a24a:	220a      	movs	r2, #10
 800a24c:	4353      	muls	r3, r2
 800a24e:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 800a252:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a254:	9a01      	ldr	r2, [sp, #4]
 800a256:	2a00      	cmp	r2, #0
 800a258:	d12f      	bne.n	800a2ba <P_Activate_ADC3+0x9e>
  MODIFY_REG(ADCx->CR,
 800a25a:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a25c:	4d20      	ldr	r5, [pc, #128]	; (800a2e0 <P_Activate_ADC3+0xc4>)
	ADC_Error = 0;
 800a25e:	4c21      	ldr	r4, [pc, #132]	; (800a2e4 <P_Activate_ADC3+0xc8>)
 800a260:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a26c:	6083      	str	r3, [r0, #8]
 800a26e:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a272:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a274:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a276:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding
 800a278:	2b00      	cmp	r3, #0
 800a27a:	db04      	blt.n	800a286 <P_Activate_ADC3+0x6a>
 800a27c:	6933      	ldr	r3, [r6, #16]
 800a27e:	0599      	lsls	r1, r3, #22
 800a280:	d401      	bmi.n	800a286 <P_Activate_ADC3+0x6a>
			&& (ADC_Error == 0)) {
 800a282:	7823      	ldrb	r3, [r4, #0]
 800a284:	b1e3      	cbz	r3, 800a2c0 <P_Activate_ADC3+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 800a286:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 800a288:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a28a:	9a01      	ldr	r2, [sp, #4]
 800a28c:	b9da      	cbnz	r2, 800a2c6 <P_Activate_ADC3+0xaa>
  MODIFY_REG(ADCx->CR,
 800a28e:	6883      	ldr	r3, [r0, #8]
 800a290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a298:	f043 0301 	orr.w	r3, r3, #1
 800a29c:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a29e:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a2a0:	7022      	strb	r2, [r4, #0]
 800a2a2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a2a6:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0) && !Error_preceding
 800a2a8:	07da      	lsls	r2, r3, #31
 800a2aa:	d404      	bmi.n	800a2b6 <P_Activate_ADC3+0x9a>
 800a2ac:	692b      	ldr	r3, [r5, #16]
 800a2ae:	059b      	lsls	r3, r3, #22
 800a2b0:	d401      	bmi.n	800a2b6 <P_Activate_ADC3+0x9a>
			&& (ADC_Error == 0)) {
 800a2b2:	7823      	ldrb	r3, [r4, #0]
 800a2b4:	b153      	cbz	r3, 800a2cc <P_Activate_ADC3+0xb0>
}
 800a2b6:	b002      	add	sp, #8
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 800a2ba:	9b01      	ldr	r3, [sp, #4]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	e7c8      	b.n	800a252 <P_Activate_ADC3+0x36>
		Wait_for_ADC_TimeOut_();
 800a2c0:	f7ff ff98 	bl	800a1f4 <Wait_for_ADC_TimeOut_>
 800a2c4:	e7d7      	b.n	800a276 <P_Activate_ADC3+0x5a>
		wait_loop_index--;
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	e7dd      	b.n	800a288 <P_Activate_ADC3+0x6c>
		Wait_for_ADC_TimeOut_();
 800a2cc:	f7ff ff92 	bl	800a1f4 <Wait_for_ADC_TimeOut_>
 800a2d0:	e7e9      	b.n	800a2a6 <P_Activate_ADC3+0x8a>
 800a2d2:	bf00      	nop
 800a2d4:	50040200 	.word	0x50040200
 800a2d8:	000186a0 	.word	0x000186a0
 800a2dc:	200000ec 	.word	0x200000ec
 800a2e0:	200092b8 	.word	0x200092b8
 800a2e4:	200092ae 	.word	0x200092ae

0800a2e8 <P_Activate_ADC2>:
void P_Activate_ADC2(void) {
 800a2e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800a2ea:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a2ec:	482c      	ldr	r0, [pc, #176]	; (800a3a0 <P_Activate_ADC2+0xb8>)
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 800a2f2:	4a2c      	ldr	r2, [pc, #176]	; (800a3a4 <P_Activate_ADC2+0xbc>)
 800a2f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a2f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a2fc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a2fe:	6883      	ldr	r3, [r0, #8]
 800a300:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a30c:	6083      	str	r3, [r0, #8]
 800a30e:	4b26      	ldr	r3, [pc, #152]	; (800a3a8 <P_Activate_ADC2+0xc0>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	fbb3 f3f2 	udiv	r3, r3, r2
 800a316:	220a      	movs	r2, #10
 800a318:	4353      	muls	r3, r2
 800a31a:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 800a31e:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a320:	9a01      	ldr	r2, [sp, #4]
 800a322:	2a00      	cmp	r2, #0
 800a324:	d12f      	bne.n	800a386 <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 800a326:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a328:	4d20      	ldr	r5, [pc, #128]	; (800a3ac <P_Activate_ADC2+0xc4>)
	ADC_Error = 0;
 800a32a:	4c21      	ldr	r4, [pc, #132]	; (800a3b0 <P_Activate_ADC2+0xc8>)
 800a32c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a330:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a338:	6083      	str	r3, [r0, #8]
 800a33a:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a33e:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a340:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a342:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding
 800a344:	2b00      	cmp	r3, #0
 800a346:	db04      	blt.n	800a352 <P_Activate_ADC2+0x6a>
 800a348:	6933      	ldr	r3, [r6, #16]
 800a34a:	0599      	lsls	r1, r3, #22
 800a34c:	d401      	bmi.n	800a352 <P_Activate_ADC2+0x6a>
			&& (ADC_Error == 0)) {
 800a34e:	7823      	ldrb	r3, [r4, #0]
 800a350:	b1e3      	cbz	r3, 800a38c <P_Activate_ADC2+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 800a352:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 800a354:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a356:	9a01      	ldr	r2, [sp, #4]
 800a358:	b9da      	cbnz	r2, 800a392 <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 800a35a:	6883      	ldr	r3, [r0, #8]
 800a35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a36a:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a36c:	7022      	strb	r2, [r4, #0]
 800a36e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a372:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0) && !Error_preceding
 800a374:	07da      	lsls	r2, r3, #31
 800a376:	d404      	bmi.n	800a382 <P_Activate_ADC2+0x9a>
 800a378:	692b      	ldr	r3, [r5, #16]
 800a37a:	059b      	lsls	r3, r3, #22
 800a37c:	d401      	bmi.n	800a382 <P_Activate_ADC2+0x9a>
			&& (ADC_Error == 0)) {
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	b153      	cbz	r3, 800a398 <P_Activate_ADC2+0xb0>
}
 800a382:	b002      	add	sp, #8
 800a384:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	3b01      	subs	r3, #1
 800a38a:	e7c8      	b.n	800a31e <P_Activate_ADC2+0x36>
		Wait_for_ADC_TimeOut_();
 800a38c:	f7ff ff32 	bl	800a1f4 <Wait_for_ADC_TimeOut_>
 800a390:	e7d7      	b.n	800a342 <P_Activate_ADC2+0x5a>
		wait_loop_index--;
 800a392:	9b01      	ldr	r3, [sp, #4]
 800a394:	3b01      	subs	r3, #1
 800a396:	e7dd      	b.n	800a354 <P_Activate_ADC2+0x6c>
		Wait_for_ADC_TimeOut_();
 800a398:	f7ff ff2c 	bl	800a1f4 <Wait_for_ADC_TimeOut_>
 800a39c:	e7e9      	b.n	800a372 <P_Activate_ADC2+0x8a>
 800a39e:	bf00      	nop
 800a3a0:	50040100 	.word	0x50040100
 800a3a4:	000186a0 	.word	0x000186a0
 800a3a8:	200000ec 	.word	0x200000ec
 800a3ac:	200092b8 	.word	0x200092b8
 800a3b0:	200092ae 	.word	0x200092ae

0800a3b4 <P_Activate_ADC1>:
void P_Activate_ADC1(void) {
 800a3b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a3ba:	4b2d      	ldr	r3, [pc, #180]	; (800a470 <P_Activate_ADC1+0xbc>)
			* (SystemCoreClock / 100000) / 10);
 800a3bc:	492d      	ldr	r1, [pc, #180]	; (800a474 <P_Activate_ADC1+0xc0>)
 800a3be:	689a      	ldr	r2, [r3, #8]
 800a3c0:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800a3c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a3c8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800a3d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a3d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a3d8:	609a      	str	r2, [r3, #8]
 800a3da:	4a27      	ldr	r2, [pc, #156]	; (800a478 <P_Activate_ADC1+0xc4>)
 800a3dc:	6812      	ldr	r2, [r2, #0]
 800a3de:	fbb2 f2f1 	udiv	r2, r2, r1
 800a3e2:	210a      	movs	r1, #10
 800a3e4:	434a      	muls	r2, r1
 800a3e6:	fbb2 f2f1 	udiv	r2, r2, r1
		wait_loop_index--;
 800a3ea:	9201      	str	r2, [sp, #4]
	while (wait_loop_index != 0) {
 800a3ec:	9901      	ldr	r1, [sp, #4]
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	d132      	bne.n	800a458 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 800a3f2:	689a      	ldr	r2, [r3, #8]
	ADC_TimeOut_Count = 0;
 800a3f4:	4c21      	ldr	r4, [pc, #132]	; (800a47c <P_Activate_ADC1+0xc8>)
	ADC_Error = 0;
 800a3f6:	4822      	ldr	r0, [pc, #136]	; (800a480 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a3f8:	4d1d      	ldr	r5, [pc, #116]	; (800a470 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 800a3fa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800a3fe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a402:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a406:	609a      	str	r2, [r3, #8]
 800a408:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a40c:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 800a40e:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a410:	68ab      	ldr	r3, [r5, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding
 800a412:	2b00      	cmp	r3, #0
 800a414:	db04      	blt.n	800a420 <P_Activate_ADC1+0x6c>
 800a416:	6933      	ldr	r3, [r6, #16]
 800a418:	0599      	lsls	r1, r3, #22
 800a41a:	d401      	bmi.n	800a420 <P_Activate_ADC1+0x6c>
			&& (ADC_Error == 0)) {
 800a41c:	7803      	ldrb	r3, [r0, #0]
 800a41e:	b1f3      	cbz	r3, 800a45e <P_Activate_ADC1+0xaa>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 800a420:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 800a422:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a424:	9901      	ldr	r1, [sp, #4]
 800a426:	b9e9      	cbnz	r1, 800a464 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 800a428:	4a11      	ldr	r2, [pc, #68]	; (800a470 <P_Activate_ADC1+0xbc>)
 800a42a:	6893      	ldr	r3, [r2, #8]
 800a42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	6093      	str	r3, [r2, #8]
 800a43a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a43e:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 800a440:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a442:	4614      	mov	r4, r2
 800a444:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0) && !Error_preceding
 800a446:	07da      	lsls	r2, r3, #31
 800a448:	d404      	bmi.n	800a454 <P_Activate_ADC1+0xa0>
 800a44a:	692b      	ldr	r3, [r5, #16]
 800a44c:	059b      	lsls	r3, r3, #22
 800a44e:	d401      	bmi.n	800a454 <P_Activate_ADC1+0xa0>
			&& (ADC_Error == 0)) {
 800a450:	7803      	ldrb	r3, [r0, #0]
 800a452:	b153      	cbz	r3, 800a46a <P_Activate_ADC1+0xb6>
}
 800a454:	b002      	add	sp, #8
 800a456:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 800a458:	9a01      	ldr	r2, [sp, #4]
 800a45a:	3a01      	subs	r2, #1
 800a45c:	e7c5      	b.n	800a3ea <P_Activate_ADC1+0x36>
		Wait_for_ADC_TimeOut_();
 800a45e:	f7ff fec9 	bl	800a1f4 <Wait_for_ADC_TimeOut_>
 800a462:	e7d5      	b.n	800a410 <P_Activate_ADC1+0x5c>
		wait_loop_index--;
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	3b01      	subs	r3, #1
 800a468:	e7db      	b.n	800a422 <P_Activate_ADC1+0x6e>
		Wait_for_ADC_TimeOut_();
 800a46a:	f7ff fec3 	bl	800a1f4 <Wait_for_ADC_TimeOut_>
 800a46e:	e7e9      	b.n	800a444 <P_Activate_ADC1+0x90>
 800a470:	50040000 	.word	0x50040000
 800a474:	000186a0 	.word	0x000186a0
 800a478:	200000ec 	.word	0x200000ec
 800a47c:	200092b8 	.word	0x200092b8
 800a480:	200092ae 	.word	0x200092ae

0800a484 <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 800a484:	4b4f      	ldr	r3, [pc, #316]	; (800a5c4 <P_ADC1_conf_strain+0x140>)
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
void P_ADC1_conf_strain(void) {
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 800a490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a492:	4d4d      	ldr	r5, [pc, #308]	; (800a5c8 <P_ADC1_conf_strain+0x144>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a494:	4c4d      	ldr	r4, [pc, #308]	; (800a5cc <P_ADC1_conf_strain+0x148>)
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 800a496:	4e4e      	ldr	r6, [pc, #312]	; (800a5d0 <P_ADC1_conf_strain+0x14c>)
 800a498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a49c:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 800a49e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a4a2:	f7ff f9e3 	bl	800986c <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a4a6:	68ab      	ldr	r3, [r5, #8]
 800a4a8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a4ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4b0:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a4b2:	68e3      	ldr	r3, [r4, #12]
 800a4b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4b8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800a4c0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800a4c2:	68e3      	ldr	r3, [r4, #12]
 800a4c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4c8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800a4ca:	68e3      	ldr	r3, [r4, #12]
 800a4cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4d0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a4d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4d4:	f023 030f 	bic.w	r3, r3, #15
 800a4d8:	6323      	str	r3, [r4, #48]	; 0x30
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4632      	mov	r2, r6
 800a4de:	2106      	movs	r1, #6
 800a4e0:	f7ff f9e8 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	2207      	movs	r2, #7
 800a4ea:	f7ff fa01 	bl	80098f0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a4ee:	68ab      	ldr	r3, [r5, #8]
	LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 800a4f0:	4e38      	ldr	r6, [pc, #224]	; (800a5d4 <P_ADC1_conf_strain+0x150>)
 800a4f2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a4f6:	f504 7480 	add.w	r4, r4, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a4fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4fe:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a500:	68e3      	ldr	r3, [r4, #12]
 800a502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a506:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800a508:	68e3      	ldr	r3, [r4, #12]
 800a50a:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800a50e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800a510:	68e3      	ldr	r3, [r4, #12]
 800a512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a516:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800a518:	68e3      	ldr	r3, [r4, #12]
 800a51a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a51e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a522:	f023 030f 	bic.w	r3, r3, #15
 800a526:	6323      	str	r3, [r4, #48]	; 0x30
 800a528:	4632      	mov	r2, r6
 800a52a:	4620      	mov	r0, r4
 800a52c:	2106      	movs	r1, #6
 800a52e:	f7ff f9c1 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4,
 800a532:	4631      	mov	r1, r6
 800a534:	4620      	mov	r0, r4
 800a536:	2207      	movs	r2, #7
 800a538:	f7ff f9da 	bl	80098f0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a53c:	68ab      	ldr	r3, [r5, #8]
 800a53e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a548:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 800a54c:	4d22      	ldr	r5, [pc, #136]	; (800a5d8 <P_ADC1_conf_strain+0x154>)
 800a54e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a552:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800a556:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800a55a:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800a55e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800a562:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800a566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a56a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800a56e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800a572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a576:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a57a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800a57e:	f023 030f 	bic.w	r3, r3, #15
 800a582:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a586:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a58a:	462a      	mov	r2, r5
 800a58c:	4620      	mov	r0, r4
 800a58e:	2106      	movs	r1, #6
 800a590:	f7ff f990 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 800a594:	4629      	mov	r1, r5
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a596:	4d11      	ldr	r5, [pc, #68]	; (800a5dc <P_ADC1_conf_strain+0x158>)
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 800a598:	4620      	mov	r0, r4
 800a59a:	2207      	movs	r2, #7
 800a59c:	f7ff f9a8 	bl	80098f0 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	2106      	movs	r1, #6
 800a5a6:	f7ff f985 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1,
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	2207      	movs	r2, #7
 800a5b0:	f7ff f99e 	bl	80098f0 <LL_ADC_SetChannelSamplingTime>
	P_Activate_ADC3();
 800a5b4:	f7ff fe32 	bl	800a21c <P_Activate_ADC3>
	P_Activate_ADC2();
 800a5b8:	f7ff fe96 	bl	800a2e8 <P_Activate_ADC2>
}
 800a5bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	P_Activate_ADC1();
 800a5c0:	f7ff bef8 	b.w	800a3b4 <P_Activate_ADC1>
 800a5c4:	40021000 	.word	0x40021000
 800a5c8:	50040300 	.word	0x50040300
 800a5cc:	50040000 	.word	0x50040000
 800a5d0:	0c900008 	.word	0x0c900008
 800a5d4:	10c00010 	.word	0x10c00010
 800a5d8:	08600004 	.word	0x08600004
 800a5dc:	04300002 	.word	0x04300002

0800a5e0 <P_ADC_Sensor_GPIO_Init>:
void P_ADC_Sensor_GPIO_Init(void) {
 800a5e0:	b510      	push	{r4, lr}
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 800a5e2:	4c16      	ldr	r4, [pc, #88]	; (800a63c <P_ADC_Sensor_GPIO_Init+0x5c>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800a5e4:	2004      	movs	r0, #4
 800a5e6:	f7ff f941 	bl	800986c <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	2203      	movs	r2, #3
 800a5ee:	2104      	movs	r1, #4
 800a5f0:	f7ff f94a 	bl	8009888 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 800a5f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5f6:	f043 0304 	orr.w	r3, r3, #4
 800a5fa:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	2203      	movs	r2, #3
 800a600:	2108      	movs	r1, #8
 800a602:	f7ff f941 	bl	8009888 <LL_GPIO_SetPinMode>
 800a606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a608:	f043 0308 	orr.w	r3, r3, #8
 800a60c:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 800a60e:	4620      	mov	r0, r4
 800a610:	2203      	movs	r2, #3
 800a612:	2102      	movs	r1, #2
 800a614:	f7ff f938 	bl	8009888 <LL_GPIO_SetPinMode>
 800a618:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a61a:	f043 0302 	orr.w	r3, r3, #2
 800a61e:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 800a620:	4620      	mov	r0, r4
 800a622:	2203      	movs	r2, #3
 800a624:	2101      	movs	r1, #1
 800a626:	f7ff f92f 	bl	8009888 <LL_GPIO_SetPinMode>
 800a62a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a62c:	f043 0301 	orr.w	r3, r3, #1
 800a630:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	P_ADC1_conf_strain();
 800a636:	f7ff bf25 	b.w	800a484 <P_ADC1_conf_strain>
 800a63a:	bf00      	nop
 800a63c:	48000800 	.word	0x48000800

0800a640 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800a640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a644:	f44f 7280 	mov.w	r2, #256	; 0x100
	delay_us(5);
	LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
	return temp_val;
}

unsigned int WriteReg1(uint8_t adress, uint8_t data) {
 800a648:	b510      	push	{r4, lr}
 800a64a:	629a      	str	r2, [r3, #40]	; 0x28
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

	while (!(SPI1->SR & SPI_SR_TXE))
 800a64c:	4a0c      	ldr	r2, [pc, #48]	; (800a680 <WriteReg1+0x40>)
 800a64e:	4613      	mov	r3, r2
 800a650:	6894      	ldr	r4, [r2, #8]
 800a652:	07a4      	lsls	r4, r4, #30
 800a654:	d5fc      	bpl.n	800a650 <WriteReg1+0x10>
 800a656:	7310      	strb	r0, [r2, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
	while (!(SPI1->SR & SPI_SR_RXNE))
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	07d4      	lsls	r4, r2, #31
 800a65c:	d5fc      	bpl.n	800a658 <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a65e:	68da      	ldr	r2, [r3, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	while (!(SPI1->SR & SPI_SR_TXE))
 800a660:	689a      	ldr	r2, [r3, #8]
 800a662:	0790      	lsls	r0, r2, #30
 800a664:	d5fc      	bpl.n	800a660 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800a666:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
	while (!(SPI1->SR & SPI_SR_RXNE))
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <WriteReg1+0x40>)
 800a66a:	689a      	ldr	r2, [r3, #8]
 800a66c:	07d2      	lsls	r2, r2, #31
 800a66e:	d5fc      	bpl.n	800a66a <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a670:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a67a:	619a      	str	r2, [r3, #24]
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
	return temp_val;
}
 800a67c:	b2c0      	uxtb	r0, r0
 800a67e:	bd10      	pop	{r4, pc}
 800a680:	40013000 	.word	0x40013000

0800a684 <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800a684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
//
//	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PC4 CS SET Active Low
//
//}

void ReadRegs1(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes) {
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800a68e:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while (!(SPI1->SR & SPI_SR_TXE))
 800a690:	4b10      	ldr	r3, [pc, #64]	; (800a6d4 <ReadRegs1+0x50>)
 800a692:	461c      	mov	r4, r3
 800a694:	689d      	ldr	r5, [r3, #8]
 800a696:	07ad      	lsls	r5, r5, #30
 800a698:	d5fc      	bpl.n	800a694 <ReadRegs1+0x10>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80)); // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 800a69a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800a69e:	7318      	strb	r0, [r3, #12]
	while (!(SPI1->SR & SPI_SR_RXNE))
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	07db      	lsls	r3, r3, #31
 800a6a4:	d5fc      	bpl.n	800a6a0 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a6a6:	68e3      	ldr	r3, [r4, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++) {
		while (!(SPI1->SR & SPI_SR_TXE))
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <ReadRegs1+0x50>)
 800a6aa:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800a6ac:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++) {
 800a6ae:	4291      	cmp	r1, r2
 800a6b0:	d105      	bne.n	800a6be <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a6b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6ba:	619a      	str	r2, [r3, #24]
 800a6bc:	bd30      	pop	{r4, r5, pc}
		while (!(SPI1->SR & SPI_SR_TXE))
 800a6be:	689c      	ldr	r4, [r3, #8]
 800a6c0:	07a5      	lsls	r5, r4, #30
 800a6c2:	d5fc      	bpl.n	800a6be <ReadRegs1+0x3a>
 800a6c4:	7318      	strb	r0, [r3, #12]
			; //transmit buffer empty?
		LL_SPI_TransmitData8(SPI1, 0x00);

		while (!(SPI1->SR & SPI_SR_RXNE))
 800a6c6:	689c      	ldr	r4, [r3, #8]
 800a6c8:	07e4      	lsls	r4, r4, #31
 800a6ca:	d5fc      	bpl.n	800a6c6 <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a6cc:	68dc      	ldr	r4, [r3, #12]
 800a6ce:	f801 4b01 	strb.w	r4, [r1], #1
 800a6d2:	e7ec      	b.n	800a6ae <ReadRegs1+0x2a>
 800a6d4:	40013000 	.word	0x40013000

0800a6d8 <Read_Loadcell1>:
//
//return Load1;
//	  // ADC3 Ch2 PC1 read
//}

int Read_Loadcell1(void) {
 800a6d8:	b508      	push	{r3, lr}
	int Load1;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a6da:	4a10      	ldr	r2, [pc, #64]	; (800a71c <Read_Loadcell1+0x44>)
 800a6dc:	4810      	ldr	r0, [pc, #64]	; (800a720 <Read_Loadcell1+0x48>)
 800a6de:	2106      	movs	r1, #6
 800a6e0:	f7ff f8e8 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC2);
 800a6e4:	480f      	ldr	r0, [pc, #60]	; (800a724 <Read_Loadcell1+0x4c>)
 800a6e6:	f7ff f8b7 	bl	8009858 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a6ea:	4a0f      	ldr	r2, [pc, #60]	; (800a728 <Read_Loadcell1+0x50>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a6ec:	480d      	ldr	r0, [pc, #52]	; (800a724 <Read_Loadcell1+0x4c>)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 800a6f2:	4a0e      	ldr	r2, [pc, #56]	; (800a72c <Read_Loadcell1+0x54>)
 800a6f4:	7013      	strb	r3, [r2, #0]
 800a6f6:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 800a6f8:	075b      	lsls	r3, r3, #29
 800a6fa:	d50b      	bpl.n	800a714 <Read_Loadcell1+0x3c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a700:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	Load1 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 800a702:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800a706:	b280      	uxth	r0, r0
 800a708:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B); // Toe

	return Load1;
	// ADC3 Ch2 PC1 read
}
 800a70a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a70e:	fbb3 f0f0 	udiv	r0, r3, r0
 800a712:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 800a714:	f7ff fd5a 	bl	800a1cc <Wait_for_ADC_timeout_While_Datalog>
 800a718:	e7ed      	b.n	800a6f6 <Read_Loadcell1+0x1e>
 800a71a:	bf00      	nop
 800a71c:	04300002 	.word	0x04300002
 800a720:	50040200 	.word	0x50040200
 800a724:	50040100 	.word	0x50040100
 800a728:	20008cf8 	.word	0x20008cf8
 800a72c:	200092b7 	.word	0x200092b7

0800a730 <Read_Loadcell2>:

int Read_Loadcell2(void) {
 800a730:	b508      	push	{r3, lr}
	int Load2;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a732:	4a10      	ldr	r2, [pc, #64]	; (800a774 <Read_Loadcell2+0x44>)
 800a734:	4810      	ldr	r0, [pc, #64]	; (800a778 <Read_Loadcell2+0x48>)
 800a736:	2106      	movs	r1, #6
 800a738:	f7ff f8bc 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC1);
 800a73c:	480f      	ldr	r0, [pc, #60]	; (800a77c <Read_Loadcell2+0x4c>)
 800a73e:	f7ff f88b 	bl	8009858 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a742:	4a0f      	ldr	r2, [pc, #60]	; (800a780 <Read_Loadcell2+0x50>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a744:	480d      	ldr	r0, [pc, #52]	; (800a77c <Read_Loadcell2+0x4c>)
 800a746:	2300      	movs	r3, #0
 800a748:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 800a74a:	4a0e      	ldr	r2, [pc, #56]	; (800a784 <Read_Loadcell2+0x54>)
 800a74c:	7013      	strb	r3, [r2, #0]
 800a74e:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 800a750:	075b      	lsls	r3, r3, #29
 800a752:	d50b      	bpl.n	800a76c <Read_Loadcell2+0x3c>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a754:	2304      	movs	r3, #4
 800a756:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a758:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	Load2 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 800a75a:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800a75e:	b280      	uxth	r0, r0
 800a760:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B); //Heel

	return Load2;
	// ADC3 Ch2 PC1 read
}
 800a762:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a766:	fbb3 f0f0 	udiv	r0, r3, r0
 800a76a:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 800a76c:	f7ff fd2e 	bl	800a1cc <Wait_for_ADC_timeout_While_Datalog>
 800a770:	e7ed      	b.n	800a74e <Read_Loadcell2+0x1e>
 800a772:	bf00      	nop
 800a774:	04300002 	.word	0x04300002
 800a778:	50040200 	.word	0x50040200
 800a77c:	50040000 	.word	0x50040000
 800a780:	20008cf8 	.word	0x20008cf8
 800a784:	200092b7 	.word	0x200092b7

0800a788 <F_Sensor_ADC_Store>:

void F_Sensor_ADC_Store(void) {
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a78a:	4a28      	ldr	r2, [pc, #160]	; (800a82c <F_Sensor_ADC_Store+0xa4>)
 800a78c:	4828      	ldr	r0, [pc, #160]	; (800a830 <F_Sensor_ADC_Store+0xa8>)

	LL_ADC_REG_StartConversion(ADC2);
	ADC_TimeOut_Count_Buf = 0;
 800a78e:	4d29      	ldr	r5, [pc, #164]	; (800a834 <F_Sensor_ADC_Store+0xac>)
	ADC_Error_Buf = 0;
 800a790:	4c29      	ldr	r4, [pc, #164]	; (800a838 <F_Sensor_ADC_Store+0xb0>)
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a792:	2106      	movs	r1, #6
 800a794:	f7ff f88e 	bl	80098b4 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_REG_StartConversion(ADC2);
 800a798:	4828      	ldr	r0, [pc, #160]	; (800a83c <F_Sensor_ADC_Store+0xb4>)
 800a79a:	f7ff f85d 	bl	8009858 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a79e:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a7a0:	4826      	ldr	r0, [pc, #152]	; (800a83c <F_Sensor_ADC_Store+0xb4>)
 800a7a2:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 800a7a4:	7023      	strb	r3, [r4, #0]
 800a7a6:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 800a7a8:	075a      	lsls	r2, r3, #29
 800a7aa:	d539      	bpl.n	800a820 <F_Sensor_ADC_Store+0x98>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a7ac:	2304      	movs	r3, #4
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800a7ae:	4f24      	ldr	r7, [pc, #144]	; (800a840 <F_Sensor_ADC_Store+0xb8>)
 800a7b0:	4e24      	ldr	r6, [pc, #144]	; (800a844 <F_Sensor_ADC_Store+0xbc>)
 800a7b2:	6003      	str	r3, [r0, #0]
 800a7b4:	f897 e000 	ldrb.w	lr, [r7]
 800a7b8:	6833      	ldr	r3, [r6, #0]
 800a7ba:	4a23      	ldr	r2, [pc, #140]	; (800a848 <F_Sensor_ADC_Store+0xc0>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a7bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a7be:	eb03 334e 	add.w	r3, r3, lr, lsl #13
 800a7c2:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 800a7c6:	3318      	adds	r3, #24
 800a7c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a7cc:	b280      	uxth	r0, r0
 800a7ce:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800a7d2:	4341      	muls	r1, r0
 800a7d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a7d8:	fbb1 f1f0 	udiv	r1, r1, r0
			VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2),
			LL_ADC_RESOLUTION_12B);  // Toe

	LL_ADC_REG_StartConversion(ADC1);
 800a7dc:	481b      	ldr	r0, [pc, #108]	; (800a84c <F_Sensor_ADC_Store+0xc4>)
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800a7de:	8059      	strh	r1, [r3, #2]
	LL_ADC_REG_StartConversion(ADC1);
 800a7e0:	f7ff f83a 	bl	8009858 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 800a7e8:	7023      	strb	r3, [r4, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a7ea:	4c18      	ldr	r4, [pc, #96]	; (800a84c <F_Sensor_ADC_Store+0xc4>)
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 800a7f0:	075b      	lsls	r3, r3, #29
 800a7f2:	d518      	bpl.n	800a826 <F_Sensor_ADC_Store+0x9e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	6023      	str	r3, [r4, #0]
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	BSbuffer[s_flag].Loadcel2[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800a7f8:	7839      	ldrb	r1, [r7, #0]
 800a7fa:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a7fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a7fe:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 800a802:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800a806:	3318      	adds	r3, #24
 800a808:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a80c:	b291      	uxth	r1, r2
 800a80e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800a812:	434a      	muls	r2, r1
 800a814:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a818:	fbb2 f2f1 	udiv	r2, r2, r1
 800a81c:	809a      	strh	r2, [r3, #4]
 800a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Wait_for_ADC_timeout_While_Datalog();
 800a820:	f7ff fcd4 	bl	800a1cc <Wait_for_ADC_timeout_While_Datalog>
 800a824:	e7bf      	b.n	800a7a6 <F_Sensor_ADC_Store+0x1e>
		Wait_for_ADC_timeout_While_Datalog();
 800a826:	f7ff fcd1 	bl	800a1cc <Wait_for_ADC_timeout_While_Datalog>
 800a82a:	e7e0      	b.n	800a7ee <F_Sensor_ADC_Store+0x66>
 800a82c:	04300002 	.word	0x04300002
 800a830:	50040200 	.word	0x50040200
 800a834:	20008cf8 	.word	0x20008cf8
 800a838:	200092b7 	.word	0x200092b7
 800a83c:	50040100 	.word	0x50040100
 800a840:	200006b2 	.word	0x200006b2
 800a844:	200006ac 	.word	0x200006ac
 800a848:	20000944 	.word	0x20000944
 800a84c:	50040000 	.word	0x50040000

0800a850 <Configure_USART_1>:
	delay_us(10000);

}

void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 800a850:	b538      	push	{r3, r4, r5, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800a852:	4c20      	ldr	r4, [pc, #128]	; (800a8d4 <Configure_USART_1+0x84>)
 800a854:	2202      	movs	r2, #2
 800a856:	2140      	movs	r1, #64	; 0x40
 800a858:	4620      	mov	r0, r4
 800a85a:	f7ff f815 	bl	8009888 <LL_GPIO_SetPinMode>
 800a85e:	2540      	movs	r5, #64	; 0x40
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a860:	6a23      	ldr	r3, [r4, #32]
 800a862:	fa95 f1a5 	rbit	r1, r5
 800a866:	fab1 f181 	clz	r1, r1
 800a86a:	fa95 f2a5 	rbit	r2, r5
 800a86e:	200f      	movs	r0, #15
 800a870:	0089      	lsls	r1, r1, #2
 800a872:	fa00 f101 	lsl.w	r1, r0, r1
 800a876:	fab2 f282 	clz	r2, r2
 800a87a:	ea23 0301 	bic.w	r3, r3, r1
 800a87e:	0092      	lsls	r2, r2, #2
 800a880:	2107      	movs	r1, #7
 800a882:	fa01 f202 	lsl.w	r2, r1, r2
 800a886:	4313      	orrs	r3, r2
 800a888:	6223      	str	r3, [r4, #32]
	LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800a88a:	4629      	mov	r1, r5
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7ff f86c 	bl	800996a <LL_GPIO_SetPinSpeed.constprop.6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a898:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 800a89a:	2201      	movs	r2, #1
 800a89c:	4629      	mov	r1, r5
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7ff f84d 	bl	800993e <LL_GPIO_SetPinPull>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 800a8a4:	4a0c      	ldr	r2, [pc, #48]	; (800a8d8 <Configure_USART_1+0x88>)
 800a8a6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800a8a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8ac:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

	MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE,
 800a8ae:	4b0b      	ldr	r3, [pc, #44]	; (800a8dc <Configure_USART_1+0x8c>)
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	f042 020c 	orr.w	r2, r2, #12
 800a8b6:	601a      	str	r2, [r3, #0]
			(USART_CR1_TE |USART_CR1_RE)); // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX

	USART1->BRR =
			(uint16_t) (__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200)); // Baud rate 115200
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <Configure_USART_1+0x90>)
 800a8ba:	6812      	ldr	r2, [r2, #0]
 800a8bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a8c0:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800a8c4:	fbb2 f2f1 	udiv	r2, r2, r1
	USART1->BRR =
 800a8c8:	60da      	str	r2, [r3, #12]

	USART1->CR1 |= USART_CR1_UE;  // Unable USART1
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	48000400 	.word	0x48000400
 800a8d8:	40021000 	.word	0x40021000
 800a8dc:	40013800 	.word	0x40013800
 800a8e0:	200000ec 	.word	0x200000ec

0800a8e4 <USART1_wr_print>:

}

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes) {
	for (int i = 0; i < nBytes; i++) {
		while (!(USART1->ISR & USART_ISR_TXE))
 800a8e4:	4b09      	ldr	r3, [pc, #36]	; (800a90c <USART1_wr_print+0x28>)
 800a8e6:	4401      	add	r1, r0
	for (int i = 0; i < nBytes; i++) {
 800a8e8:	4288      	cmp	r0, r1
 800a8ea:	d100      	bne.n	800a8ee <USART1_wr_print+0xa>

		while (!(USART1->ISR & USART_ISR_TC))
			;
		USART1->ISR &= ~USART_ISR_TC;
	}
}
 800a8ec:	4770      	bx	lr
		while (!(USART1->ISR & USART_ISR_TXE))
 800a8ee:	69da      	ldr	r2, [r3, #28]
 800a8f0:	0612      	lsls	r2, r2, #24
 800a8f2:	d5fc      	bpl.n	800a8ee <USART1_wr_print+0xa>
		USART1->TDR = buffer[i] & 0xFF;
 800a8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f8:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART1->ISR & USART_ISR_TC))
 800a8fa:	69da      	ldr	r2, [r3, #28]
 800a8fc:	0652      	lsls	r2, r2, #25
 800a8fe:	d5fc      	bpl.n	800a8fa <USART1_wr_print+0x16>
		USART1->ISR &= ~USART_ISR_TC;
 800a900:	69da      	ldr	r2, [r3, #28]
 800a902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a906:	61da      	str	r2, [r3, #28]
 800a908:	e7ee      	b.n	800a8e8 <USART1_wr_print+0x4>
 800a90a:	bf00      	nop
 800a90c:	40013800 	.word	0x40013800

0800a910 <Clear_ErrorTimestamp_Buffer>:
}

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void) {
	ErrorCodeBuf = 0;
 800a910:	4a02      	ldr	r2, [pc, #8]	; (800a91c <Clear_ErrorTimestamp_Buffer+0xc>)
 800a912:	2300      	movs	r3, #0
 800a914:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf = 0;
 800a916:	4a02      	ldr	r2, [pc, #8]	; (800a920 <Clear_ErrorTimestamp_Buffer+0x10>)
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	4770      	bx	lr
 800a91c:	20008a3d 	.word	0x20008a3d
 800a920:	20008a40 	.word	0x20008a40

0800a924 <Reset_All>:
{
 800a924:	b508      	push	{r3, lr}
	last_file = 0;
 800a926:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <Reset_All+0x38>)
 800a928:	2100      	movs	r1, #0
 800a92a:	6019      	str	r1, [r3, #0]
	Sub_cnt = 0;         // Array Index count in a single buffer to store values
 800a92c:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <Reset_All+0x3c>)
 800a92e:	6019      	str	r1, [r3, #0]
	w_flag = 1; // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <Reset_All+0x40>)
 800a932:	2201      	movs	r2, #1
 800a934:	701a      	strb	r2, [r3, #0]
	s_flag = 0; // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <Reset_All+0x44>)
 800a938:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0; // Flag to indicates whether a buffer a full and ready to write in SD card
 800a93a:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <Reset_All+0x48>)
 800a93c:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0; // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <Reset_All+0x4c>)
 800a940:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 800a942:	f7ff ffe5 	bl	800a910 <Clear_ErrorTimestamp_Buffer>
 800a946:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <Reset_All+0x50>)
		Error_reg_log.Error[indxE] = 0;
 800a948:	460a      	mov	r2, r1
 800a94a:	f1a3 0008 	sub.w	r0, r3, #8
 800a94e:	540a      	strb	r2, [r1, r0]
	for (int indxE = 0; indxE < 10; indxE++) {
 800a950:	3101      	adds	r1, #1
 800a952:	290a      	cmp	r1, #10
		Error_reg_log.ErrorTime[indxE] = 0;
 800a954:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int indxE = 0; indxE < 10; indxE++) {
 800a958:	d1f9      	bne.n	800a94e <Reset_All+0x2a>
}
 800a95a:	bd08      	pop	{r3, pc}
 800a95c:	2000902c 	.word	0x2000902c
 800a960:	200006ac 	.word	0x200006ac
 800a964:	200000e8 	.word	0x200000e8
 800a968:	200006b2 	.word	0x200006b2
 800a96c:	20008a3c 	.word	0x20008a3c
 800a970:	200006a8 	.word	0x200006a8
 800a974:	2000894c 	.word	0x2000894c

0800a978 <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf = ErrorCode;
 800a97a:	4b21      	ldr	r3, [pc, #132]	; (800aa00 <Save_ErrorTimestamp_Buffer+0x88>)
void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 800a97c:	4606      	mov	r6, r0
	ErrorCodeBuf = ErrorCode;
 800a97e:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf =
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800a980:	f7ff f888 	bl	8009a94 <LL_RTC_TIME_GetHour.constprop.12>
 800a984:	4604      	mov	r4, r0
 800a986:	f7ff f885 	bl	8009a94 <LL_RTC_TIME_GetHour.constprop.12>
 800a98a:	4605      	mov	r5, r0
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800a98c:	f7ff f868 	bl	8009a60 <LL_RTC_TIME_GetMinute.constprop.11>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800a990:	f3c4 1403 	ubfx	r4, r4, #4, #4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800a994:	4607      	mov	r7, r0
 800a996:	f7ff f863 	bl	8009a60 <LL_RTC_TIME_GetMinute.constprop.11>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800a99a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800a99e:	f005 040f 	and.w	r4, r5, #15
 800a9a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800a9a6:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800a9aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9ae:	f000 000f 	and.w	r0, r0, #15
 800a9b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a9b6:	b2c0      	uxtb	r0, r0
 800a9b8:	2364      	movs	r3, #100	; 0x64
 800a9ba:	fb10 f003 	smulbb	r0, r0, r3
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800a9be:	b2e4      	uxtb	r4, r4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800a9c0:	f242 7310 	movw	r3, #10000	; 0x2710
 800a9c4:	fb03 0404 	mla	r4, r3, r4, r0
 800a9c8:	f7ff f832 	bl	8009a30 <LL_RTC_TIME_GetSecond.constprop.10>
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	f7ff f82f 	bl	8009a30 <LL_RTC_TIME_GetSecond.constprop.10>
 800a9d2:	f3c5 1303 	ubfx	r3, r5, #4, #4
 800a9d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9da:	f000 000f 	and.w	r0, r0, #15
 800a9de:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx] = ErrorCode;
 800a9e2:	4908      	ldr	r1, [pc, #32]	; (800aa04 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf =
 800a9e4:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx] = ErrorCode;
 800a9e6:	4a09      	ldr	r2, [pc, #36]	; (800aa0c <Save_ErrorTimestamp_Buffer+0x94>)
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800a9e8:	fa54 f480 	uxtab	r4, r4, r0
	ErrorTimeStampBuf =
 800a9ec:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx] = ErrorCode;
 800a9ee:	780b      	ldrb	r3, [r1, #0]
 800a9f0:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 800a9f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 800a9fa:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 800a9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20008a3d 	.word	0x20008a3d
 800aa04:	20008d2e 	.word	0x20008d2e
 800aa08:	20008a40 	.word	0x20008a40
 800aa0c:	20008944 	.word	0x20008944

0800aa10 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code) {
	switch (AIM_Error_Code) {
 800aa10:	3801      	subs	r0, #1
void AIM_Error_Handler(int AIM_Error_Code) {
 800aa12:	b510      	push	{r4, lr}
	switch (AIM_Error_Code) {
 800aa14:	280f      	cmp	r0, #15
 800aa16:	d862      	bhi.n	800aade <AIM_Error_Handler+0xce>
 800aa18:	e8df f000 	tbb	[pc, r0]
 800aa1c:	392e611e 	.word	0x392e611e
 800aa20:	4661610f 	.word	0x4661610f
 800aa24:	54616161 	.word	0x54616161
 800aa28:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 800aa2c:	2010      	movs	r0, #16
 800aa2e:	f7ff ffa3 	bl	800a978 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 800aa32:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <AIM_Error_Handler+0xd0>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	701a      	strb	r2, [r3, #0]

		break;
 800aa38:	bd10      	pop	{r4, pc}

	case f_write_E:
		file_reopen();
 800aa3a:	f7ff f967 	bl	8009d0c <file_reopen>
		if (Fat_write_read_fail == 1) // Could not solve write issue by reopening file
 800aa3e:	4b29      	ldr	r3, [pc, #164]	; (800aae4 <AIM_Error_Handler+0xd4>)
 800aa40:	681c      	ldr	r4, [r3, #0]
 800aa42:	2c01      	cmp	r4, #1
 800aa44:	d14b      	bne.n	800aade <AIM_Error_Handler+0xce>
				{
			Fat_read_mnt_fail = 0;
 800aa46:	4b28      	ldr	r3, [pc, #160]	; (800aae8 <AIM_Error_Handler+0xd8>)
 800aa48:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_write_E);
 800aa4a:	2005      	movs	r0, #5
			Fat_read_mnt_fail = 0;
 800aa4c:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_write_E);
 800aa4e:	f7ff ff93 	bl	800a978 <Save_ErrorTimestamp_Buffer>
			File_Sensor_write_issue = 1;
 800aa52:	4b26      	ldr	r3, [pc, #152]	; (800aaec <AIM_Error_Handler+0xdc>)
		file_reopen_sync();
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
				{
			Fat_sync_read_fail = 0;
			Save_ErrorTimestamp_Buffer(f_sync_E);
			File_Sensor_close_issue = 1;
 800aa54:	701c      	strb	r4, [r3, #0]
 800aa56:	e018      	b.n	800aa8a <AIM_Error_Handler+0x7a>
		file_mnt_reopen();
 800aa58:	f7ff f970 	bl	8009d3c <file_mnt_reopen>
		if (Fat_read_mnt_fail == 1) // Could not solve read issue by FATFS mount
 800aa5c:	4b22      	ldr	r3, [pc, #136]	; (800aae8 <AIM_Error_Handler+0xd8>)
 800aa5e:	681c      	ldr	r4, [r3, #0]
 800aa60:	2c01      	cmp	r4, #1
 800aa62:	d13c      	bne.n	800aade <AIM_Error_Handler+0xce>
			Fat_read_mnt_fail = 0;
 800aa64:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_open_E);
 800aa66:	4620      	mov	r0, r4
			Fat_read_mnt_fail = 0;
 800aa68:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_open_E);
 800aa6a:	f7ff ff85 	bl	800a978 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800aa6e:	4b1c      	ldr	r3, [pc, #112]	; (800aae0 <AIM_Error_Handler+0xd0>)
 800aa70:	701c      	strb	r4, [r3, #0]
			Skip_FATFS = 1;
 800aa72:	4b1f      	ldr	r3, [pc, #124]	; (800aaf0 <AIM_Error_Handler+0xe0>)
			FATAL_Error = 1;
 800aa74:	701c      	strb	r4, [r3, #0]
 800aa76:	bd10      	pop	{r4, pc}
		Try_FATFS_Mount();
 800aa78:	f7ff f902 	bl	8009c80 <Try_FATFS_Mount>
		if (Skip_FATFS == 1)  // Could not solve FATFS mount
 800aa7c:	4b1c      	ldr	r3, [pc, #112]	; (800aaf0 <AIM_Error_Handler+0xe0>)
 800aa7e:	781c      	ldrb	r4, [r3, #0]
 800aa80:	2c01      	cmp	r4, #1
 800aa82:	d12c      	bne.n	800aade <AIM_Error_Handler+0xce>
			Save_ErrorTimestamp_Buffer(f_mount_E);
 800aa84:	2003      	movs	r0, #3
 800aa86:	f7ff ff77 	bl	800a978 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800aa8a:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <AIM_Error_Handler+0xd0>)
 800aa8c:	e7f2      	b.n	800aa74 <AIM_Error_Handler+0x64>
		file_reopen_sync();
 800aa8e:	f7ff f925 	bl	8009cdc <file_reopen_sync>
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
 800aa92:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <AIM_Error_Handler+0xe4>)
 800aa94:	681c      	ldr	r4, [r3, #0]
 800aa96:	2c01      	cmp	r4, #1
 800aa98:	d121      	bne.n	800aade <AIM_Error_Handler+0xce>
			Fat_sync_read_fail = 0;
 800aa9a:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_sync_E);
 800aa9c:	2004      	movs	r0, #4
			Fat_sync_read_fail = 0;
 800aa9e:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_sync_E);
 800aaa0:	f7ff ff6a 	bl	800a978 <Save_ErrorTimestamp_Buffer>
			File_Sensor_close_issue = 1;
 800aaa4:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <AIM_Error_Handler+0xe8>)
 800aaa6:	e7d5      	b.n	800aa54 <AIM_Error_Handler+0x44>

		break;

	case SPI_Acc_Error:

		if (SPI_ErrorCnt > 3) {
 800aaa8:	4a14      	ldr	r2, [pc, #80]	; (800aafc <AIM_Error_Handler+0xec>)
 800aaaa:	7813      	ldrb	r3, [r2, #0]
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d914      	bls.n	800aada <AIM_Error_Handler+0xca>
			SPI_ErrorCnt = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <AIM_Error_Handler+0xd0>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 800aaba:	2008      	movs	r0, #8
	default:

		break;

	}
}
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800aac0:	f7ff bf5a 	b.w	800a978 <Save_ErrorTimestamp_Buffer>
		if (ADC_ErrorCnt > 3) {
 800aac4:	4a0e      	ldr	r2, [pc, #56]	; (800ab00 <AIM_Error_Handler+0xf0>)
 800aac6:	7813      	ldrb	r3, [r2, #0]
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d906      	bls.n	800aada <AIM_Error_Handler+0xca>
			ADC_ErrorCnt = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 800aad0:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <AIM_Error_Handler+0xd0>)
 800aad2:	2201      	movs	r2, #1
 800aad4:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800aad6:	200c      	movs	r0, #12
 800aad8:	e7f0      	b.n	800aabc <AIM_Error_Handler+0xac>
			ADC_ErrorCnt++;
 800aada:	3301      	adds	r3, #1
 800aadc:	7013      	strb	r3, [r2, #0]
 800aade:	bd10      	pop	{r4, pc}
 800aae0:	20009028 	.word	0x20009028
 800aae4:	20008cd4 	.word	0x20008cd4
 800aae8:	20008d7c 	.word	0x20008d7c
 800aaec:	20008cf4 	.word	0x20008cf4
 800aaf0:	20009029 	.word	0x20009029
 800aaf4:	20008cd8 	.word	0x20008cd8
 800aaf8:	20008dbe 	.word	0x20008dbe
 800aafc:	200092bc 	.word	0x200092bc
 800ab00:	20009030 	.word	0x20009030

0800ab04 <FATFS_Init>:
void FATFS_Init(void) {
 800ab04:	b510      	push	{r4, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800ab06:	490b      	ldr	r1, [pc, #44]	; (800ab34 <FATFS_Init+0x30>)
 800ab08:	480b      	ldr	r0, [pc, #44]	; (800ab38 <FATFS_Init+0x34>)
 800ab0a:	4c0c      	ldr	r4, [pc, #48]	; (800ab3c <FATFS_Init+0x38>)
 800ab0c:	f7f9 f866 	bl	8003bdc <FATFS_LinkDriver>
 800ab10:	b928      	cbnz	r0, 800ab1e <FATFS_Init+0x1a>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800ab12:	2201      	movs	r2, #1
 800ab14:	4907      	ldr	r1, [pc, #28]	; (800ab34 <FATFS_Init+0x30>)
 800ab16:	480a      	ldr	r0, [pc, #40]	; (800ab40 <FATFS_Init+0x3c>)
 800ab18:	f7f8 fb8e 	bl	8003238 <f_mount>
 800ab1c:	b108      	cbz	r0, 800ab22 <FATFS_Init+0x1e>
			Fat_mnt_fail = 1;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	6023      	str	r3, [r4, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d104      	bne.n	800ab32 <FATFS_Init+0x2e>
		AIM_Error_Handler(f_mount_E);
 800ab28:	2003      	movs	r0, #3
}
 800ab2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		AIM_Error_Handler(f_mount_E);
 800ab2e:	f7ff bf6f 	b.w	800aa10 <AIM_Error_Handler>
 800ab32:	bd10      	pop	{r4, pc}
 800ab34:	20008dc5 	.word	0x20008dc5
 800ab38:	0800ecec 	.word	0x0800ecec
 800ab3c:	20008cd0 	.word	0x20008cd0
 800ab40:	20008dd4 	.word	0x20008dd4

0800ab44 <Check_SD_Command_File>:
void Check_SD_Command_File(void) {
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Data_log_Start_Resume = 0;
 800ab46:	4c31      	ldr	r4, [pc, #196]	; (800ac0c <Check_SD_Command_File+0xc8>)
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800ab48:	4931      	ldr	r1, [pc, #196]	; (800ac10 <Check_SD_Command_File+0xcc>)
 800ab4a:	4832      	ldr	r0, [pc, #200]	; (800ac14 <Check_SD_Command_File+0xd0>)
 800ab4c:	4e32      	ldr	r6, [pc, #200]	; (800ac18 <Check_SD_Command_File+0xd4>)
	Data_log_Start_Resume = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	7023      	strb	r3, [r4, #0]
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800ab52:	f7f9 f843 	bl	8003bdc <FATFS_LinkDriver>
 800ab56:	b930      	cbnz	r0, 800ab66 <Check_SD_Command_File+0x22>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800ab58:	2201      	movs	r2, #1
 800ab5a:	492d      	ldr	r1, [pc, #180]	; (800ac10 <Check_SD_Command_File+0xcc>)
 800ab5c:	482f      	ldr	r0, [pc, #188]	; (800ac1c <Check_SD_Command_File+0xd8>)
 800ab5e:	f7f8 fb6b 	bl	8003238 <f_mount>
 800ab62:	4605      	mov	r5, r0
 800ab64:	b148      	cbz	r0, 800ab7a <Check_SD_Command_File+0x36>
			Fat_mnt_fail = 1;
 800ab66:	2301      	movs	r3, #1
 800ab68:	6033      	str	r3, [r6, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800ab6a:	6833      	ldr	r3, [r6, #0]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d14b      	bne.n	800ac08 <Check_SD_Command_File+0xc4>
		AIM_Error_Handler(f_mount_E);
 800ab70:	2003      	movs	r0, #3
}
 800ab72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		AIM_Error_Handler(f_mount_E);
 800ab76:	f7ff bf4b 	b.w	800aa10 <AIM_Error_Handler>
			if (f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4928      	ldr	r1, [pc, #160]	; (800ac20 <Check_SD_Command_File+0xdc>)
 800ab7e:	4829      	ldr	r0, [pc, #164]	; (800ac24 <Check_SD_Command_File+0xe0>)
 800ab80:	f7f8 fb90 	bl	80032a4 <f_open>
 800ab84:	4607      	mov	r7, r0
 800ab86:	b360      	cbz	r0, 800abe2 <Check_SD_Command_File+0x9e>
				if (f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 800ab88:	2201      	movs	r2, #1
 800ab8a:	4927      	ldr	r1, [pc, #156]	; (800ac28 <Check_SD_Command_File+0xe4>)
 800ab8c:	4825      	ldr	r0, [pc, #148]	; (800ac24 <Check_SD_Command_File+0xe0>)
 800ab8e:	f7f8 fb89 	bl	80032a4 <f_open>
 800ab92:	b1f0      	cbz	r0, 800abd2 <Check_SD_Command_File+0x8e>
					if (Logstart_Delete == 1) {
 800ab94:	4b25      	ldr	r3, [pc, #148]	; (800ac2c <Check_SD_Command_File+0xe8>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	2a01      	cmp	r2, #1
 800ab9a:	d104      	bne.n	800aba6 <Check_SD_Command_File+0x62>
						if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 800ab9c:	4824      	ldr	r0, [pc, #144]	; (800ac30 <Check_SD_Command_File+0xec>)
						Logstart_Delete = 0;
 800ab9e:	601d      	str	r5, [r3, #0]
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 800aba0:	f7f8 ff80 	bl	8003aa4 <f_unlink>
 800aba4:	e006      	b.n	800abb4 <Check_SD_Command_File+0x70>
						if (f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 800aba6:	2201      	movs	r2, #1
 800aba8:	4921      	ldr	r1, [pc, #132]	; (800ac30 <Check_SD_Command_File+0xec>)
 800abaa:	481e      	ldr	r0, [pc, #120]	; (800ac24 <Check_SD_Command_File+0xe0>)
 800abac:	f7f8 fb7a 	bl	80032a4 <f_open>
 800abb0:	b148      	cbz	r0, 800abc6 <Check_SD_Command_File+0x82>
							Data_log_Start_Resume = 0;         // Data Log Stops
 800abb2:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800abb4:	2200      	movs	r2, #0
 800abb6:	491f      	ldr	r1, [pc, #124]	; (800ac34 <Check_SD_Command_File+0xf0>)
 800abb8:	4610      	mov	r0, r2
 800abba:	f7f8 fb3d 	bl	8003238 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800abbe:	4814      	ldr	r0, [pc, #80]	; (800ac10 <Check_SD_Command_File+0xcc>)
 800abc0:	f7f9 f828 	bl	8003c14 <FATFS_UnLinkDriver>
 800abc4:	e7d1      	b.n	800ab6a <Check_SD_Command_File+0x26>
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 800abc6:	2301      	movs	r3, #1
							f_close(&MyFile);
 800abc8:	4816      	ldr	r0, [pc, #88]	; (800ac24 <Check_SD_Command_File+0xe0>)
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 800abca:	7023      	strb	r3, [r4, #0]
							f_close(&MyFile);
 800abcc:	f7f8 fd91 	bl	80036f2 <f_close>
 800abd0:	e7f0      	b.n	800abb4 <Check_SD_Command_File+0x70>
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 800abd2:	4b19      	ldr	r3, [pc, #100]	; (800ac38 <Check_SD_Command_File+0xf4>)
					Data_log_Start_Resume = 0;          // Data Log Stops
 800abd4:	7020      	strb	r0, [r4, #0]
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 800abd6:	7018      	strb	r0, [r3, #0]
					f_close(&MyFile);
 800abd8:	4812      	ldr	r0, [pc, #72]	; (800ac24 <Check_SD_Command_File+0xe0>)
 800abda:	f7f8 fd8a 	bl	80036f2 <f_close>
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 800abde:	4812      	ldr	r0, [pc, #72]	; (800ac28 <Check_SD_Command_File+0xe4>)
 800abe0:	e7de      	b.n	800aba0 <Check_SD_Command_File+0x5c>
				f_close(&MyFile);
 800abe2:	4810      	ldr	r0, [pc, #64]	; (800ac24 <Check_SD_Command_File+0xe0>)
 800abe4:	f7f8 fd85 	bl	80036f2 <f_close>
				if (f_unlink("EnterDFU.txt") == FR_OK) { // If EnterDFU.txt file present, delete the file
 800abe8:	480d      	ldr	r0, [pc, #52]	; (800ac20 <Check_SD_Command_File+0xdc>)
 800abea:	f7f8 ff5b 	bl	8003aa4 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800abee:	463a      	mov	r2, r7
 800abf0:	4910      	ldr	r1, [pc, #64]	; (800ac34 <Check_SD_Command_File+0xf0>)
 800abf2:	4638      	mov	r0, r7
 800abf4:	f7f8 fb20 	bl	8003238 <f_mount>
				FATFS_UnLinkDriver(SDPath); //  unlink SD card driver if necessary
 800abf8:	4805      	ldr	r0, [pc, #20]	; (800ac10 <Check_SD_Command_File+0xcc>)
 800abfa:	f7f9 f80b 	bl	8003c14 <FATFS_UnLinkDriver>
				*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800abfe:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <Check_SD_Command_File+0xf8>)
 800ac00:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <Check_SD_Command_File+0xfc>)
 800ac02:	601a      	str	r2, [r3, #0]
				NVIC_SystemReset();        // System reset
 800ac04:	f7fe fe16 	bl	8009834 <NVIC_SystemReset>
 800ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20008a35 	.word	0x20008a35
 800ac10:	20008dc5 	.word	0x20008dc5
 800ac14:	0800ecec 	.word	0x0800ecec
 800ac18:	20008cd0 	.word	0x20008cd0
 800ac1c:	20008dd4 	.word	0x20008dd4
 800ac20:	0800edbd 	.word	0x0800edbd
 800ac24:	20009034 	.word	0x20009034
 800ac28:	0800edca 	.word	0x0800edca
 800ac2c:	200097c8 	.word	0x200097c8
 800ac30:	0800edd7 	.word	0x0800edd7
 800ac34:	0800ef7b 	.word	0x0800ef7b
 800ac38:	200092f4 	.word	0x200092f4
 800ac3c:	20017ff0 	.word	0x20017ff0
 800ac40:	deadbeef 	.word	0xdeadbeef

0800ac44 <Execute_VCP_Command>:
	if (EnterReset_Create == 1) {
 800ac44:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <Execute_VCP_Command+0x44>)
 800ac46:	6811      	ldr	r1, [r2, #0]
void Execute_VCP_Command(void) {
 800ac48:	b538      	push	{r3, r4, r5, lr}
	Data_log_Start_Resume = 0;
 800ac4a:	4c10      	ldr	r4, [pc, #64]	; (800ac8c <Execute_VCP_Command+0x48>)
 800ac4c:	2300      	movs	r3, #0
	if (EnterReset_Create == 1) {
 800ac4e:	2901      	cmp	r1, #1
	Data_log_Start_Resume = 0;
 800ac50:	7023      	strb	r3, [r4, #0]
	if (EnterReset_Create == 1) {
 800ac52:	d102      	bne.n	800ac5a <Execute_VCP_Command+0x16>
		EnterReset_Create = 0;
 800ac54:	6013      	str	r3, [r2, #0]
		NVIC_SystemReset();    // System reset
 800ac56:	f7fe fded 	bl	8009834 <NVIC_SystemReset>
	if (EnterDFU_Create == 1) {
 800ac5a:	4a0d      	ldr	r2, [pc, #52]	; (800ac90 <Execute_VCP_Command+0x4c>)
 800ac5c:	6811      	ldr	r1, [r2, #0]
 800ac5e:	2901      	cmp	r1, #1
 800ac60:	d104      	bne.n	800ac6c <Execute_VCP_Command+0x28>
		EnterDFU_Create = 0;
 800ac62:	6013      	str	r3, [r2, #0]
		*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800ac64:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <Execute_VCP_Command+0x50>)
 800ac66:	4a0c      	ldr	r2, [pc, #48]	; (800ac98 <Execute_VCP_Command+0x54>)
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e7f4      	b.n	800ac56 <Execute_VCP_Command+0x12>
	if (Logstart_Create == 1) {
 800ac6c:	4a0b      	ldr	r2, [pc, #44]	; (800ac9c <Execute_VCP_Command+0x58>)
 800ac6e:	6815      	ldr	r5, [r2, #0]
 800ac70:	2d01      	cmp	r5, #1
 800ac72:	d107      	bne.n	800ac84 <Execute_VCP_Command+0x40>
		Logstart_Create = 0;
 800ac74:	6013      	str	r3, [r2, #0]
		FATFS_Logstart_Ready();
 800ac76:	f7ff f8af 	bl	8009dd8 <FATFS_Logstart_Ready>
		Data_log_Start_Resume = 1;
 800ac7a:	7025      	strb	r5, [r4, #0]
}
 800ac7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Check_SD_Command_File();
 800ac80:	f7ff bf60 	b.w	800ab44 <Check_SD_Command_File>
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	bf00      	nop
 800ac88:	2000a0b4 	.word	0x2000a0b4
 800ac8c:	20008a35 	.word	0x20008a35
 800ac90:	2000aca4 	.word	0x2000aca4
 800ac94:	20017ff0 	.word	0x20017ff0
 800ac98:	deadbeef 	.word	0xdeadbeef
 800ac9c:	20009844 	.word	0x20009844

0800aca0 <Open_File_For_Sensor_Write>:
void Open_File_For_Sensor_Write(void) {
 800aca0:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS == 0) {
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <Open_File_For_Sensor_Write+0x58>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	bb2b      	cbnz	r3, 800acf4 <Open_File_For_Sensor_Write+0x54>
		last_file = GetNextIndex("");
 800aca8:	4814      	ldr	r0, [pc, #80]	; (800acfc <Open_File_For_Sensor_Write+0x5c>)
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800acaa:	4c15      	ldr	r4, [pc, #84]	; (800ad00 <Open_File_For_Sensor_Write+0x60>)
 800acac:	4d15      	ldr	r5, [pc, #84]	; (800ad04 <Open_File_For_Sensor_Write+0x64>)
		last_file = GetNextIndex("");
 800acae:	f7fe ffb7 	bl	8009c20 <GetNextIndex>
 800acb2:	4b15      	ldr	r3, [pc, #84]	; (800ad08 <Open_File_For_Sensor_Write+0x68>)
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 800acb4:	4915      	ldr	r1, [pc, #84]	; (800ad0c <Open_File_For_Sensor_Write+0x6c>)
		last_file = GetNextIndex("");
 800acb6:	6018      	str	r0, [r3, #0]
 800acb8:	4602      	mov	r2, r0
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 800acba:	4815      	ldr	r0, [pc, #84]	; (800ad10 <Open_File_For_Sensor_Write+0x70>)
 800acbc:	f001 fe7e 	bl	800c9bc <siprintf>
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800acc0:	2212      	movs	r2, #18
 800acc2:	4913      	ldr	r1, [pc, #76]	; (800ad10 <Open_File_For_Sensor_Write+0x70>)
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7f8 faed 	bl	80032a4 <f_open>
 800acca:	7028      	strb	r0, [r5, #0]
		if (res != FR_OK) // Create and Open a new text file object with write access
 800accc:	b140      	cbz	r0, 800ace0 <Open_File_For_Sensor_Write+0x40>
			AIM_Error_Handler(f_open_E);
 800acce:	2001      	movs	r0, #1
 800acd0:	f7ff fe9e 	bl	800aa10 <AIM_Error_Handler>
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800acd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800acd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800acdc:	f000 bda2 	b.w	800b824 <delay_us>
			f_lseek(&MyFile, MyFile.fsize); // Increase File Size when big file to write
 800ace0:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800ace4:	4620      	mov	r0, r4
 800ace6:	f7f8 fd15 	bl	8003714 <f_lseek>
			res = f_sync(&MyFile);
 800acea:	4620      	mov	r0, r4
 800acec:	f7f8 fca1 	bl	8003632 <f_sync>
 800acf0:	7028      	strb	r0, [r5, #0]
 800acf2:	e7ef      	b.n	800acd4 <Open_File_For_Sensor_Write+0x34>
 800acf4:	bd38      	pop	{r3, r4, r5, pc}
 800acf6:	bf00      	nop
 800acf8:	20009029 	.word	0x20009029
 800acfc:	0800ef7b 	.word	0x0800ef7b
 800ad00:	20009034 	.word	0x20009034
 800ad04:	200092b6 	.word	0x200092b6
 800ad08:	2000902c 	.word	0x2000902c
 800ad0c:	0800ede7 	.word	0x0800ede7
 800ad10:	20008d18 	.word	0x20008d18

0800ad14 <Datalog_Sensor_Initialization>:
void Datalog_Sensor_Initialization(void) {
 800ad14:	b508      	push	{r3, lr}
	FATFS_Init();
 800ad16:	f7ff fef5 	bl	800ab04 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800ad1a:	f7ff ffc1 	bl	800aca0 <Open_File_For_Sensor_Write>
	if (Skip_FATFS == 0) {
 800ad1e:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <Datalog_Sensor_Initialization+0x1c>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b91b      	cbnz	r3, 800ad2c <Datalog_Sensor_Initialization+0x18>
}
 800ad24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();         // Reset All Buffer parameters for FATFS SDIO write
 800ad28:	f7ff bdfc 	b.w	800a924 <Reset_All>
 800ad2c:	bd08      	pop	{r3, pc}
 800ad2e:	bf00      	nop
 800ad30:	20009029 	.word	0x20009029

0800ad34 <Prepare_Data_Log_State>:
void Prepare_Data_Log_State(void) {
 800ad34:	b510      	push	{r4, lr}
	if (Skip_FATFS == 0)   // If there's no FATFS SD error
 800ad36:	4c12      	ldr	r4, [pc, #72]	; (800ad80 <Prepare_Data_Log_State+0x4c>)
 800ad38:	7821      	ldrb	r1, [r4, #0]
 800ad3a:	b9d9      	cbnz	r1, 800ad74 <Prepare_Data_Log_State+0x40>
		Battery_ADC_Value = 2500;
 800ad3c:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <Prepare_Data_Log_State+0x50>)
 800ad3e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ad42:	801a      	strh	r2, [r3, #0]
			if (Data_log_Start_Resume == 1) // Continue Data Log after USB disconnect
 800ad44:	4b10      	ldr	r3, [pc, #64]	; (800ad88 <Prepare_Data_Log_State+0x54>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d10c      	bne.n	800ad66 <Prepare_Data_Log_State+0x32>
				Datalog_Sensor_Initialization();
 800ad4c:	f7ff ffe2 	bl	800ad14 <Datalog_Sensor_Initialization>
				if (Skip_FATFS == 0)   // If there's no FATFS SD error
 800ad50:	7823      	ldrb	r3, [r4, #0]
 800ad52:	b97b      	cbnz	r3, 800ad74 <Prepare_Data_Log_State+0x40>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800ad54:	4a0d      	ldr	r2, [pc, #52]	; (800ad8c <Prepare_Data_Log_State+0x58>)
 800ad56:	6893      	ldr	r3, [r2, #8]
 800ad58:	f043 0302 	orr.w	r3, r3, #2
 800ad5c:	6093      	str	r3, [r2, #8]
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <Prepare_Data_Log_State+0x5c>)
 800ad60:	2204      	movs	r2, #4
 800ad62:	609a      	str	r2, [r3, #8]
 800ad64:	bd10      	pop	{r4, pc}
			else if (VCP_Bypass == 1) {
 800ad66:	4a0b      	ldr	r2, [pc, #44]	; (800ad94 <Prepare_Data_Log_State+0x60>)
 800ad68:	4c0b      	ldr	r4, [pc, #44]	; (800ad98 <Prepare_Data_Log_State+0x64>)
 800ad6a:	7813      	ldrb	r3, [r2, #0]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d102      	bne.n	800ad76 <Prepare_Data_Log_State+0x42>
				VCP_Bypass = 0;
 800ad70:	7011      	strb	r1, [r2, #0]
				Pros_state = Dormant_Idle_Stop;
 800ad72:	7023      	strb	r3, [r4, #0]
 800ad74:	bd10      	pop	{r4, pc}
				Prepare_Goto_Dormant_Mode();
 800ad76:	f7fe ff43 	bl	8009c00 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop;
 800ad7a:	2306      	movs	r3, #6
 800ad7c:	e7f9      	b.n	800ad72 <Prepare_Data_Log_State+0x3e>
 800ad7e:	bf00      	nop
 800ad80:	20009029 	.word	0x20009029
 800ad84:	20009004 	.word	0x20009004
 800ad88:	20008a35 	.word	0x20008a35
 800ad8c:	40009400 	.word	0x40009400
 800ad90:	e000e100 	.word	0xe000e100
 800ad94:	20008dd1 	.word	0x20008dd1
 800ad98:	20008978 	.word	0x20008978

0800ad9c <USB_Init_Start>:
void USB_Init_Start(void) {
 800ad9c:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 800ad9e:	f7fe f885 	bl	8008eac <SD_POWER_ON>
	Pros_state = LP_STOP;                  // Next state
 800ada2:	4b2d      	ldr	r3, [pc, #180]	; (800ae58 <USB_Init_Start+0xbc>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ada4:	492d      	ldr	r1, [pc, #180]	; (800ae5c <USB_Init_Start+0xc0>)
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 800ada6:	4d2e      	ldr	r5, [pc, #184]	; (800ae60 <USB_Init_Start+0xc4>)
	Pros_state = LP_STOP;                  // Next state
 800ada8:	2201      	movs	r2, #1
 800adaa:	701a      	strb	r2, [r3, #0]
 800adac:	2304      	movs	r3, #4
 800adae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	USB_Clock_Ready();
 800adb2:	f7fe fedf 	bl	8009b74 <USB_Clock_Ready>
 800adb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800adba:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 800adbe:	782a      	ldrb	r2, [r5, #0]
 800adc0:	2a01      	cmp	r2, #1
 800adc2:	d101      	bne.n	800adc8 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 800adc4:	f7ff f91a 	bl	8009ffc <File_Close_Update_Unlink>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 800adc8:	4e26      	ldr	r6, [pc, #152]	; (800ae64 <USB_Init_Start+0xc8>)
	Data_log_Start_Resume = 0;
 800adca:	2400      	movs	r4, #0
 800adcc:	702c      	strb	r4, [r5, #0]
	HAL_ResumeTick();      // Before entering USB mode, SYS_tick needs to enable
 800adce:	f7f9 ff29 	bl	8004c24 <HAL_ResumeTick>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 800add2:	7833      	ldrb	r3, [r6, #0]
 800add4:	4d24      	ldr	r5, [pc, #144]	; (800ae68 <USB_Init_Start+0xcc>)
 800add6:	2b01      	cmp	r3, #1
 800add8:	d118      	bne.n	800ae0c <USB_Init_Start+0x70>
		VIOLET_LED_ONLY();
 800adda:	f7fe f849 	bl	8008e70 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 800adde:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 800ade0:	f7ff f828 	bl	8009e34 <USB_MSC_Init_Start>
		FATAL_Error = 0;
 800ade4:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800ade6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800adea:	6914      	ldr	r4, [r2, #16]
		while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800adec:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 800adf0:	d1fb      	bne.n	800adea <USB_Init_Start+0x4e>
		ALL_LED_OFF();
 800adf2:	f7fe f803 	bl	8008dfc <ALL_LED_OFF>
		Shut_Down_USB();
 800adf6:	f7fe fe9f 	bl	8009b38 <Shut_Down_USB>
		Enter_Into_DFU = 0;
 800adfa:	4b1c      	ldr	r3, [pc, #112]	; (800ae6c <USB_Init_Start+0xd0>)
 800adfc:	701c      	strb	r4, [r3, #0]
				Prepare_Data_Log_State();         // Prepare for Data collection
 800adfe:	f7ff ff99 	bl	800ad34 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ae02:	4b16      	ldr	r3, [pc, #88]	; (800ae5c <USB_Init_Start+0xc0>)
 800ae04:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
		CYAN_LED_ONLY();
 800ae0c:	f7fe f83e 	bl	8008e8c <CYAN_LED_ONLY>
		USB_VCP_Init_Start();
 800ae10:	f7ff f832 	bl	8009e78 <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK) // USB Battery charging mode
 800ae14:	4816      	ldr	r0, [pc, #88]	; (800ae70 <USB_Init_Start+0xd4>)
 800ae16:	f7f8 ff15 	bl	8003c44 <Battey_Charge_Mode>
 800ae1a:	b960      	cbnz	r0, 800ae36 <USB_Init_Start+0x9a>
			FATAL_Error = 0;
 800ae1c:	7028      	strb	r0, [r5, #0]
 800ae1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800ae22:	6913      	ldr	r3, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800ae24:	059b      	lsls	r3, r3, #22
 800ae26:	d4fc      	bmi.n	800ae22 <USB_Init_Start+0x86>
			Shut_Down_USB();
 800ae28:	f7fe fe86 	bl	8009b38 <Shut_Down_USB>
			ALL_LED_OFF();
 800ae2c:	f7fd ffe6 	bl	8008dfc <ALL_LED_OFF>
			Check_SD_Command_File();
 800ae30:	f7ff fe88 	bl	800ab44 <Check_SD_Command_File>
 800ae34:	e7e3      	b.n	800adfe <USB_Init_Start+0x62>
			FATAL_Error = 0;
 800ae36:	702c      	strb	r4, [r5, #0]
 800ae38:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800ae3c:	6914      	ldr	r4, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800ae3e:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 800ae42:	d1fb      	bne.n	800ae3c <USB_Init_Start+0xa0>
			Shut_Down_USB();
 800ae44:	f7fe fe78 	bl	8009b38 <Shut_Down_USB>
			ALL_LED_OFF();
 800ae48:	f7fd ffd8 	bl	8008dfc <ALL_LED_OFF>
				VCP_continue = 0;               // Variable reset, aviod looping
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <USB_Init_Start+0xd8>)
 800ae4e:	701c      	strb	r4, [r3, #0]
				Execute_VCP_Command();
 800ae50:	f7ff fef8 	bl	800ac44 <Execute_VCP_Command>
 800ae54:	e7d3      	b.n	800adfe <USB_Init_Start+0x62>
 800ae56:	bf00      	nop
 800ae58:	20008978 	.word	0x20008978
 800ae5c:	e000e100 	.word	0xe000e100
 800ae60:	20008a35 	.word	0x20008a35
 800ae64:	200092f4 	.word	0x200092f4
 800ae68:	20009028 	.word	0x20009028
 800ae6c:	20008dd2 	.word	0x20008dd2
 800ae70:	20008a44 	.word	0x20008a44
 800ae74:	20008d5e 	.word	0x20008d5e

0800ae78 <SD_Sensor_write>:
{
 800ae78:	b538      	push	{r3, r4, r5, lr}
	res = f_write(&MyFile, &BSbuffer[w_flag], (8192 * 2), &BytesWritten2);
 800ae7a:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <SD_Sensor_write+0x60>)
 800ae7c:	4917      	ldr	r1, [pc, #92]	; (800aedc <SD_Sensor_write+0x64>)
 800ae7e:	7818      	ldrb	r0, [r3, #0]
 800ae80:	4b17      	ldr	r3, [pc, #92]	; (800aee0 <SD_Sensor_write+0x68>)
 800ae82:	4c18      	ldr	r4, [pc, #96]	; (800aee4 <SD_Sensor_write+0x6c>)
 800ae84:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 800ae88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae8c:	4816      	ldr	r0, [pc, #88]	; (800aee8 <SD_Sensor_write+0x70>)
 800ae8e:	f7f8 fae1 	bl	8003454 <f_write>
 800ae92:	7020      	strb	r0, [r4, #0]
	if (res != FR_OK)   // Write the sensor Buffer content to .BIN file
 800ae94:	b1b8      	cbz	r0, 800aec6 <SD_Sensor_write+0x4e>
		AIM_Error_Handler(f_write_E);
 800ae96:	2005      	movs	r0, #5
 800ae98:	f7ff fdba 	bl	800aa10 <AIM_Error_Handler>
	if (File_Sensor_write_issue == 0) {
 800ae9c:	4b13      	ldr	r3, [pc, #76]	; (800aeec <SD_Sensor_write+0x74>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	b9c3      	cbnz	r3, 800aed4 <SD_Sensor_write+0x5c>
		if (SD_Write_Count == SD_cnt_limit) // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 800aea2:	4a13      	ldr	r2, [pc, #76]	; (800aef0 <SD_Sensor_write+0x78>)
 800aea4:	4b13      	ldr	r3, [pc, #76]	; (800aef4 <SD_Sensor_write+0x7c>)
 800aea6:	7811      	ldrb	r1, [r2, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4299      	cmp	r1, r3
 800aeac:	4615      	mov	r5, r2
 800aeae:	d10d      	bne.n	800aecc <SD_Sensor_write+0x54>
			res = f_sync(&MyFile);
 800aeb0:	480d      	ldr	r0, [pc, #52]	; (800aee8 <SD_Sensor_write+0x70>)
 800aeb2:	f7f8 fbbe 	bl	8003632 <f_sync>
 800aeb6:	7020      	strb	r0, [r4, #0]
			if (res != FR_OK) {
 800aeb8:	b110      	cbz	r0, 800aec0 <SD_Sensor_write+0x48>
				AIM_Error_Handler(f_sync_E);
 800aeba:	2004      	movs	r0, #4
 800aebc:	f7ff fda8 	bl	800aa10 <AIM_Error_Handler>
			SD_Write_Count = 0;                       // Reset SD write counters
 800aec0:	2300      	movs	r3, #0
 800aec2:	702b      	strb	r3, [r5, #0]
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
		GREEN_LED_OFF();               // Sensor write Completed
 800aec6:	f7fd ffb6 	bl	8008e36 <GREEN_LED_OFF>
 800aeca:	e7e7      	b.n	800ae9c <SD_Sensor_write+0x24>
			SD_Write_Count++;                      // Increment SD write counter
 800aecc:	7813      	ldrb	r3, [r2, #0]
 800aece:	3301      	adds	r3, #1
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	7013      	strb	r3, [r2, #0]
 800aed4:	bd38      	pop	{r3, r4, r5, pc}
 800aed6:	bf00      	nop
 800aed8:	200000e8 	.word	0x200000e8
 800aedc:	20000944 	.word	0x20000944
 800aee0:	20008d30 	.word	0x20008d30
 800aee4:	200092b6 	.word	0x200092b6
 800aee8:	20009034 	.word	0x20009034
 800aeec:	20008cf4 	.word	0x20008cf4
 800aef0:	200006a8 	.word	0x200006a8
 800aef4:	20008c9b 	.word	0x20008c9b

0800aef8 <AIM_DataStart_at_Reset>:

void AIM_DataStart_at_Reset(void) {
 800aef8:	b510      	push	{r4, lr}
	SD_POWER_ON();
 800aefa:	f7fd ffd7 	bl	8008eac <SD_POWER_ON>
	SD_cnt_limit = 3;                    // After 50 write, File will Sync
 800aefe:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <AIM_DataStart_at_Reset+0x44>)
 800af00:	2203      	movs	r2, #3
 800af02:	601a      	str	r2, [r3, #0]
	Data_log_Start_Resume = 1;
 800af04:	4b0e      	ldr	r3, [pc, #56]	; (800af40 <AIM_DataStart_at_Reset+0x48>)
 800af06:	2401      	movs	r4, #1
 800af08:	701c      	strb	r4, [r3, #0]
	FATFS_Init();
 800af0a:	f7ff fdfb 	bl	800ab04 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800af0e:	f7ff fec7 	bl	800aca0 <Open_File_For_Sensor_Write>
	Reset_All();
 800af12:	f7ff fd07 	bl	800a924 <Reset_All>
//	  Start_LPTIMCounter2(0x10); //0xFF //0x4032768
	// Greg end comment

	// Greg start
	// Start interrupt (speed = 32,768 Hz / hex_value, i.e. 0x40 = 64 so speed = 32,768/64 = 512 Hz)
	Start_LPTIMCounter2(0x40);
 800af16:	2040      	movs	r0, #64	; 0x40
 800af18:	f000 fc8e 	bl	800b838 <Start_LPTIMCounter2>
 800af1c:	4a09      	ldr	r2, [pc, #36]	; (800af44 <AIM_DataStart_at_Reset+0x4c>)
 800af1e:	6893      	ldr	r3, [r2, #8]
 800af20:	f043 0302 	orr.w	r3, r3, #2
 800af24:	6093      	str	r3, [r2, #8]
 800af26:	4b08      	ldr	r3, [pc, #32]	; (800af48 <AIM_DataStart_at_Reset+0x50>)
 800af28:	2204      	movs	r2, #4
 800af2a:	609a      	str	r2, [r3, #8]
	// Greg end

	LL_LPTIM_EnableIT_ARRM(LPTIM2);
	NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 800af2c:	4a07      	ldr	r2, [pc, #28]	; (800af4c <AIM_DataStart_at_Reset+0x54>)
 800af2e:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 800af30:	4a07      	ldr	r2, [pc, #28]	; (800af50 <AIM_DataStart_at_Reset+0x58>)
 800af32:	7014      	strb	r4, [r2, #0]
 800af34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	bd10      	pop	{r4, pc}
 800af3c:	20008c9b 	.word	0x20008c9b
 800af40:	20008a35 	.word	0x20008a35
 800af44:	40009400 	.word	0x40009400
 800af48:	e000e100 	.word	0xe000e100
 800af4c:	20008978 	.word	0x20008978
 800af50:	200092f4 	.word	0x200092f4

0800af54 <IMU1_read>:
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];

	return data_az;
}

struct imu_data IMU1_read(void) {
 800af54:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct imu_data IMU1;
	uint8_t response[21];
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800af56:	218c      	movs	r1, #140	; 0x8c
struct imu_data IMU1_read(void) {
 800af58:	b087      	sub	sp, #28
 800af5a:	4604      	mov	r4, r0
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800af5c:	2025      	movs	r0, #37	; 0x25
 800af5e:	f7ff fb6f 	bl	800a640 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL); // I2C slave 0 register address from where to begin data transfer
 800af62:	2103      	movs	r1, #3
 800af64:	2026      	movs	r0, #38	; 0x26
 800af66:	f7ff fb6b 	bl	800a640 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87); // Read 7 bytes from the magnetometer
 800af6a:	2187      	movs	r1, #135	; 0x87
 800af6c:	2027      	movs	r0, #39	; 0x27
 800af6e:	f7ff fb67 	bl	800a640 <WriteReg1>

	ReadRegs1(MPUREG_ACCEL_XOUT_H, response, 21);
 800af72:	4669      	mov	r1, sp
 800af74:	2215      	movs	r2, #21
 800af76:	203b      	movs	r0, #59	; 0x3b
 800af78:	f7ff fb84 	bl	800a684 <ReadRegs1>

	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 800af7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800af80:	f89d 5003 	ldrb.w	r5, [sp, #3]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800af84:	f89d 0005 	ldrb.w	r0, [sp, #5]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800af88:	f89d 1009 	ldrb.w	r1, [sp, #9]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800af8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800af90:	f89d 600c 	ldrb.w	r6, [sp, #12]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800af94:	f89d 7000 	ldrb.w	r7, [sp]
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 800af98:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800af9c:	f89d 3004 	ldrb.w	r3, [sp, #4]

	return IMU1;
 800afa0:	8065      	strh	r5, [r4, #2]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800afa2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800afa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	return IMU1;
 800afaa:	80a0      	strh	r0, [r4, #4]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800afac:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800afb0:	f89d 300a 	ldrb.w	r3, [sp, #10]
	return IMU1;
 800afb4:	80e1      	strh	r1, [r4, #6]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800afb6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800afba:	f89d 300d 	ldrb.w	r3, [sp, #13]
	return IMU1;
 800afbe:	8122      	strh	r2, [r4, #8]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800afc0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800afc4:	f89d 6001 	ldrb.w	r6, [sp, #1]
	return IMU1;
 800afc8:	8163      	strh	r3, [r4, #10]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800afca:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
}
 800afce:	4620      	mov	r0, r4
	return IMU1;
 800afd0:	8026      	strh	r6, [r4, #0]
}
 800afd2:	b007      	add	sp, #28
 800afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800afd8 <Knee_data_storeIMU>:

void Knee_data_storeIMU(int value1, int value2, int value3, int value4,
		int value5, int value6) {
 800afd8:	b5f0      	push	{r4, r5, r6, r7, lr}

	BSbuffer[s_flag].AX1[Sub_cnt] = value1;
 800afda:	4e1b      	ldr	r6, [pc, #108]	; (800b048 <Knee_data_storeIMU+0x70>)
 800afdc:	4d1b      	ldr	r5, [pc, #108]	; (800b04c <Knee_data_storeIMU+0x74>)
 800afde:	f896 e000 	ldrb.w	lr, [r6]
 800afe2:	682f      	ldr	r7, [r5, #0]
 800afe4:	4c1a      	ldr	r4, [pc, #104]	; (800b050 <Knee_data_storeIMU+0x78>)
 800afe6:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800afea:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800afee:	82f8      	strh	r0, [r7, #22]
	BSbuffer[s_flag].AY1[Sub_cnt] = value2;
 800aff0:	7837      	ldrb	r7, [r6, #0]
 800aff2:	6828      	ldr	r0, [r5, #0]
 800aff4:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800aff8:	f500 70f6 	add.w	r0, r0, #492	; 0x1ec
 800affc:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
	BSbuffer[s_flag].AZ1[Sub_cnt] = value3;
 800b000:	7830      	ldrb	r0, [r6, #0]
 800b002:	6829      	ldr	r1, [r5, #0]
 800b004:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 800b008:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b00c:	f8a1 279a 	strh.w	r2, [r1, #1946]	; 0x79a
	BSbuffer[s_flag].GX1[Sub_cnt] = value4;
 800b010:	7831      	ldrb	r1, [r6, #0]
 800b012:	682a      	ldr	r2, [r5, #0]
 800b014:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800b018:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800b01c:	f8a2 3b5c 	strh.w	r3, [r2, #2908]	; 0xb5c
	BSbuffer[s_flag].GY1[Sub_cnt] = value5;
 800b020:	7832      	ldrb	r2, [r6, #0]
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800b028:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b02c:	9a05      	ldr	r2, [sp, #20]
 800b02e:	f8a3 2f1e 	strh.w	r2, [r3, #3870]	; 0xf1e
	BSbuffer[s_flag].GZ1[Sub_cnt] = value6;
 800b032:	7832      	ldrb	r2, [r6, #0]
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800b03a:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 800b03e:	9a06      	ldr	r2, [sp, #24]
 800b040:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 800b044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b046:	bf00      	nop
 800b048:	200006b2 	.word	0x200006b2
 800b04c:	200006ac 	.word	0x200006ac
 800b050:	20000944 	.word	0x20000944

0800b054 <Knee_data_store>:
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
//
//
//}

void Knee_data_store(int val1, int val2, int val3, int val4) {
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
	BSbuffer[s_flag].data1[Sub_cnt] = val1;
 800b056:	4e14      	ldr	r6, [pc, #80]	; (800b0a8 <Knee_data_store+0x54>)
 800b058:	4d14      	ldr	r5, [pc, #80]	; (800b0ac <Knee_data_store+0x58>)
 800b05a:	f896 e000 	ldrb.w	lr, [r6]
 800b05e:	682f      	ldr	r7, [r5, #0]
 800b060:	4c13      	ldr	r4, [pc, #76]	; (800b0b0 <Knee_data_store+0x5c>)
 800b062:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800b066:	f507 6735 	add.w	r7, r7, #2896	; 0xb50
 800b06a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800b06e:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data2[Sub_cnt] = val2;
 800b070:	7837      	ldrb	r7, [r6, #0]
 800b072:	6828      	ldr	r0, [r5, #0]
 800b074:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800b078:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
 800b07c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800b080:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data3[Sub_cnt] = val3;
 800b082:	7830      	ldrb	r0, [r6, #0]
 800b084:	6829      	ldr	r1, [r5, #0]
 800b086:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 800b08a:	f501 6171 	add.w	r1, r1, #3856	; 0xf10
 800b08e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b092:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data4[Sub_cnt] = val4;
 800b094:	7831      	ldrb	r1, [r6, #0]
 800b096:	682a      	ldr	r2, [r5, #0]
 800b098:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800b09c:	f502 5287 	add.w	r2, r2, #4320	; 0x10e0
 800b0a0:	3214      	adds	r2, #20
 800b0a2:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 800b0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0a8:	200006b2 	.word	0x200006b2
 800b0ac:	200006ac 	.word	0x200006ac
 800b0b0:	20000944 	.word	0x20000944

0800b0b4 <Knee_data_store1>:
//	BSbuffer[s_flag].data6[Sub_cnt]=val6;
//	BSbuffer[s_flag].data7[Sub_cnt]=val7;
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
}

void Knee_data_store1(int val5, int val6, int val7, int val8) {
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
//	BSbuffer[s_flag].data1[Sub_cnt]=val1;
//	BSbuffer[s_flag].data2[Sub_cnt]=val2;
//	BSbuffer[s_flag].data3[Sub_cnt]=val3;
//	BSbuffer[s_flag].data4[Sub_cnt]=val4;
	BSbuffer[s_flag].data5[Sub_cnt] = val5;
 800b0b6:	4e16      	ldr	r6, [pc, #88]	; (800b110 <Knee_data_store1+0x5c>)
 800b0b8:	4d16      	ldr	r5, [pc, #88]	; (800b114 <Knee_data_store1+0x60>)
 800b0ba:	f896 e000 	ldrb.w	lr, [r6]
 800b0be:	682f      	ldr	r7, [r5, #0]
 800b0c0:	4c15      	ldr	r4, [pc, #84]	; (800b118 <Knee_data_store1+0x64>)
 800b0c2:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800b0c6:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800b0d0:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data6[Sub_cnt] = val6;
 800b0d2:	7837      	ldrb	r7, [r6, #0]
 800b0d4:	6828      	ldr	r0, [r5, #0]
 800b0d6:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800b0da:	f500 50a5 	add.w	r0, r0, #5280	; 0x14a0
 800b0de:	3014      	adds	r0, #20
 800b0e0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800b0e4:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data7[Sub_cnt] = val7;
 800b0e6:	7830      	ldrb	r0, [r6, #0]
 800b0e8:	6829      	ldr	r1, [r5, #0]
 800b0ea:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 800b0ee:	f501 51b4 	add.w	r1, r1, #5760	; 0x1680
 800b0f2:	3114      	adds	r1, #20
 800b0f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b0f8:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data8[Sub_cnt] = val8;
 800b0fa:	7831      	ldrb	r1, [r6, #0]
 800b0fc:	682a      	ldr	r2, [r5, #0]
 800b0fe:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800b102:	f502 52c3 	add.w	r2, r2, #6240	; 0x1860
 800b106:	3218      	adds	r2, #24
 800b108:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 800b10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10e:	bf00      	nop
 800b110:	200006b2 	.word	0x200006b2
 800b114:	200006ac 	.word	0x200006ac
 800b118:	20000944 	.word	0x20000944

0800b11c <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800b11c:	4b1f      	ldr	r3, [pc, #124]	; (800b19c <Mag_Enc2_Store+0x80>)
//
////	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
	// Greg end comment out
}

void Mag_Enc2_Store(void) {
 800b11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b122:	2240      	movs	r2, #64	; 0x40
 800b124:	2780      	movs	r7, #128	; 0x80
 800b126:	4e1e      	ldr	r6, [pc, #120]	; (800b1a0 <Mag_Enc2_Store+0x84>)
 800b128:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for (i = 11; i >= 0; i--) {
 800b12a:	240b      	movs	r4, #11
	int tempPosition = 0;
 800b12c:	2500      	movs	r5, #0
 800b12e:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b130:	200a      	movs	r0, #10
 800b132:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b136:	f000 fb75 	bl	800b824 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b13a:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b13c:	200a      	movs	r0, #10
 800b13e:	f000 fb71 	bl	800b824 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b142:	4b16      	ldr	r3, [pc, #88]	; (800b19c <Mag_Enc2_Store+0x80>)
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 800b14a:	40a3      	lsls	r3, r4
	for (i = 11; i >= 0; i--) {
 800b14c:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 800b150:	ea45 0503 	orr.w	r5, r5, r3
	for (i = 11; i >= 0; i--) {
 800b154:	d2ec      	bcs.n	800b130 <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 800b156:	2780      	movs	r7, #128	; 0x80
 800b158:	4e11      	ldr	r6, [pc, #68]	; (800b1a0 <Mag_Enc2_Store+0x84>)
 800b15a:	2406      	movs	r4, #6
 800b15c:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b15e:	200a      	movs	r0, #10
 800b160:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b164:	f000 fb5e 	bl	800b824 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b168:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b16a:	200a      	movs	r0, #10
 800b16c:	f000 fb5a 	bl	800b824 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b170:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <Mag_Enc2_Store+0x80>)
	for (i = 0; i < 6; i++) {
 800b172:	3c01      	subs	r4, #1
 800b174:	691a      	ldr	r2, [r3, #16]
 800b176:	d1f2      	bne.n	800b15e <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b178:	2240      	movs	r2, #64	; 0x40
 800b17a:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead) << i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt] = tempPosition;
 800b17c:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <Mag_Enc2_Store+0x88>)
 800b17e:	781a      	ldrb	r2, [r3, #0]
 800b180:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <Mag_Enc2_Store+0x8c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800b188:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800b18c:	4a07      	ldr	r2, [pc, #28]	; (800b1ac <Mag_Enc2_Store+0x90>)
 800b18e:	3318      	adds	r3, #24
 800b190:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800b194:	80dd      	strh	r5, [r3, #6]
 800b196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b19a:	bf00      	nop
 800b19c:	48000800 	.word	0x48000800
 800b1a0:	48000400 	.word	0x48000400
 800b1a4:	200006b2 	.word	0x200006b2
 800b1a8:	200006ac 	.word	0x200006ac
 800b1ac:	20000944 	.word	0x20000944

0800b1b0 <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800b1b0:	4b1a      	ldr	r3, [pc, #104]	; (800b21c <Enc2_GetPosition+0x6c>)
 800b1b2:	2240      	movs	r2, #64	; 0x40
}

int Enc2_GetPosition(void) {
 800b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(1);
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b1bc:	f000 fb32 	bl	800b824 <delay_us>
 800b1c0:	2780      	movs	r7, #128	; 0x80
 800b1c2:	4e17      	ldr	r6, [pc, #92]	; (800b220 <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for (i = DataPrecision - 1; i >= 0; i--) {
 800b1c4:	240b      	movs	r4, #11
	int tempPosition = 0;
 800b1c6:	2500      	movs	r5, #0
 800b1c8:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b1d0:	f000 fb28 	bl	800b824 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b1d4:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f000 fb24 	bl	800b824 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b1dc:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <Enc2_GetPosition+0x6c>)
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 800b1e4:	40a3      	lsls	r3, r4
	for (i = DataPrecision - 1; i >= 0; i--) {
 800b1e6:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 800b1ea:	ea45 0503 	orr.w	r5, r5, r3
	for (i = DataPrecision - 1; i >= 0; i--) {
 800b1ee:	d2ec      	bcs.n	800b1ca <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 800b1f0:	2780      	movs	r7, #128	; 0x80
 800b1f2:	4e0b      	ldr	r6, [pc, #44]	; (800b220 <Enc2_GetPosition+0x70>)
 800b1f4:	2406      	movs	r4, #6
 800b1f6:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b1f8:	2001      	movs	r0, #1
 800b1fa:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b1fe:	f000 fb11 	bl	800b824 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b202:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b204:	2001      	movs	r0, #1
 800b206:	f000 fb0d 	bl	800b824 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b20a:	4b04      	ldr	r3, [pc, #16]	; (800b21c <Enc2_GetPosition+0x6c>)
	for (i = 0; i < 6; i++) {
 800b20c:	3c01      	subs	r4, #1
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	d1f2      	bne.n	800b1f8 <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b212:	2240      	movs	r2, #64	; 0x40
 800b214:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 800b216:	4628      	mov	r0, r5
 800b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21c:	48000800 	.word	0x48000800
 800b220:	48000400 	.word	0x48000400
 800b224:	00000000 	.word	0x00000000

0800b228 <knee_angle>:

float knee_angle(void) {
 800b228:	b508      	push	{r3, lr}
	float knee_position;
// Greg start comment
//knee_position= -(Enc2_GetPosition()*0.088)+125; //-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)

// Greg end comment
	knee_position = (Enc2_GetPosition() - 2249) * 0.088;
 800b22a:	f7ff ffc1 	bl	800b1b0 <Enc2_GetPosition>
 800b22e:	f6a0 00c9 	subw	r0, r0, #2249	; 0x8c9
 800b232:	f7f5 f977 	bl	8000524 <__aeabi_i2d>
 800b236:	a306      	add	r3, pc, #24	; (adr r3, 800b250 <knee_angle+0x28>)
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f7f5 f9d8 	bl	80005f0 <__aeabi_dmul>
 800b240:	f7f5 fcae 	bl	8000ba0 <__aeabi_d2f>
// Greg start

	return knee_position;
}
 800b244:	ee00 0a10 	vmov	s0, r0
 800b248:	bd08      	pop	{r3, pc}
 800b24a:	bf00      	nop
 800b24c:	f3af 8000 	nop.w
 800b250:	020c49ba 	.word	0x020c49ba
 800b254:	3fb6872b 	.word	0x3fb6872b

0800b258 <IMU_orientation>:

float IMU_orientation(struct imu_data imuMyData, float last_angle, float dt_s)
{
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	ed2d 8b04 	vpush	{d8-d9}
 800b260:	b085      	sub	sp, #20
 800b262:	ab04      	add	r3, sp, #16
 800b264:	e903 0007 	stmdb	r3, {r0, r1, r2}
	accel.x = (float) imuMyData.AX / 4096;
	accel.y = (float) imuMyData.AY / 4096;
	accel.z = (float) imuMyData.AZ / 4096;
	gyro.x  = (float) imuMyData.GX / 32.8 * DEGREES_TO_RADIANS;
	gyro.y  = (float) imuMyData.GY / 32.8 * DEGREES_TO_RADIANS;
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b268:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
	accel.x = (float) imuMyData.AX / 4096;
 800b26c:	eddf 8a4e 	vldr	s17, [pc, #312]	; 800b3a8 <IMU_orientation+0x150>
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b270:	ee07 0a90 	vmov	s15, r0
 800b274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800b278:	eeb0 8a60 	vmov.f32	s16, s1
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b27c:	ee17 0a90 	vmov	r0, s15
{
 800b280:	eef0 9a40 	vmov.f32	s19, s0
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b284:	f7f5 f960 	bl	8000548 <__aeabi_f2d>
 800b288:	a343      	add	r3, pc, #268	; (adr r3, 800b398 <IMU_orientation+0x140>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 fad9 	bl	8000844 <__aeabi_ddiv>
 800b292:	a343      	add	r3, pc, #268	; (adr r3, 800b3a0 <IMU_orientation+0x148>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f7f5 f9aa 	bl	80005f0 <__aeabi_dmul>
 800b29c:	f7f5 fc80 	bl	8000ba0 <__aeabi_d2f>
	accel.x = (float) imuMyData.AX / 4096;
 800b2a0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b2ac:	ee09 0a10 	vmov	s18, r0

	// Compute angle from accel
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b2b0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b2b4:	ee17 0a90 	vmov	r0, s15
 800b2b8:	f7f5 f946 	bl	8000548 <__aeabi_f2d>
	accel.y = (float) imuMyData.AY / 4096;
 800b2bc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	ee17 0a90 	vmov	r0, s15
 800b2d4:	f7f5 f938 	bl	8000548 <__aeabi_f2d>
	accel.z = (float) imuMyData.AZ / 4096;
 800b2d8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b2dc:	ee07 3a90 	vmov	s15, r3
 800b2e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b2ea:	460f      	mov	r7, r1
 800b2ec:	ee17 0a90 	vmov	r0, s15
 800b2f0:	f7f5 f92a 	bl	8000548 <__aeabi_f2d>
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4680      	mov	r8, r0
 800b2f8:	4689      	mov	r9, r1
 800b2fa:	463b      	mov	r3, r7
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f5 f976 	bl	80005f0 <__aeabi_dmul>
 800b304:	4642      	mov	r2, r8
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	464b      	mov	r3, r9
 800b30c:	4640      	mov	r0, r8
 800b30e:	4649      	mov	r1, r9
 800b310:	f7f5 f96e 	bl	80005f0 <__aeabi_dmul>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	f7f4 ffb6 	bl	800028c <__adddf3>
 800b320:	ec41 0b10 	vmov	d0, r0, r1
 800b324:	f002 fd60 	bl	800dde8 <sqrt>
 800b328:	4620      	mov	r0, r4
 800b32a:	ec53 2b10 	vmov	r2, r3, d0
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f5 fa88 	bl	8000844 <__aeabi_ddiv>
 800b334:	ec41 0b10 	vmov	d0, r0, r1
 800b338:	f002 fba6 	bl	800da88 <atan>
 800b33c:	ec51 0b10 	vmov	r0, r1, d0
 800b340:	f7f5 fc2e 	bl	8000ba0 <__aeabi_d2f>

	// Compute change in angle from gyro (trapezoidal used)
	if (count == 1)
 800b344:	4a19      	ldr	r2, [pc, #100]	; (800b3ac <IMU_orientation+0x154>)
 800b346:	7813      	ldrb	r3, [r2, #0]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	4b19      	ldr	r3, [pc, #100]	; (800b3b0 <IMU_orientation+0x158>)
	{
		gyro_angle.z = 0;
 800b34c:	bf0c      	ite	eq
 800b34e:	ed9f 0a19 	vldreq	s0, [pc, #100]	; 800b3b4 <IMU_orientation+0x15c>
		count++;
	}
	else
	{
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800b352:	ed93 0a00 	vldrne	s0, [r3]
	}

	// Save gyro for next iteration
	last_gyro = gyro.z;
 800b356:	ed83 9a00 	vstr	s18, [r3]
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800b35a:	bf1e      	ittt	ne
 800b35c:	eef6 7a00 	vmovne.f32	s15, #96	; 0x3f000000  0.5
 800b360:	ee39 0a00 	vaddne.f32	s0, s18, s0
 800b364:	ee28 8a27 	vmulne.f32	s16, s16, s15

	// Compute angle using complementary filter
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 800b368:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b3b8 <IMU_orientation+0x160>
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800b36c:	bf18      	it	ne
 800b36e:	ee20 0a08 	vmulne.f32	s0, s0, s16
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b372:	ee07 0a10 	vmov	s14, r0
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 800b376:	ee30 0a29 	vadd.f32	s0, s0, s19
		count++;
 800b37a:	bf08      	it	eq
 800b37c:	2102      	moveq	r1, #2
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 800b37e:	ee20 0a27 	vmul.f32	s0, s0, s15

	// Return angle
	return (imu_angle);
}
 800b382:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b3bc <IMU_orientation+0x164>
		count++;
 800b386:	bf08      	it	eq
 800b388:	7011      	strbeq	r1, [r2, #0]
}
 800b38a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b38e:	b005      	add	sp, #20
 800b390:	ecbd 8b04 	vpop	{d8-d9}
 800b394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b398:	66666666 	.word	0x66666666
 800b39c:	40406666 	.word	0x40406666
 800b3a0:	a0000000 	.word	0xa0000000
 800b3a4:	3f91df45 	.word	0x3f91df45
 800b3a8:	39800000 	.word	0x39800000
 800b3ac:	200000e9 	.word	0x200000e9
 800b3b0:	2000092c 	.word	0x2000092c
 800b3b4:	00000000 	.word	0x00000000
 800b3b8:	3f7f7cee 	.word	0x3f7f7cee
 800b3bc:	3b03126f 	.word	0x3b03126f

0800b3c0 <LL_GPIO_SetAFPin_0_7.constprop.1>:
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b3c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 800b3c4:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b3c6:	6a0b      	ldr	r3, [r1, #32]
 800b3c8:	fa90 f2a0 	rbit	r2, r0
 800b3cc:	fab2 f282 	clz	r2, r2
 800b3d0:	fa90 f0a0 	rbit	r0, r0
 800b3d4:	240f      	movs	r4, #15
 800b3d6:	0092      	lsls	r2, r2, #2
 800b3d8:	fa04 f202 	lsl.w	r2, r4, r2
 800b3dc:	fab0 f080 	clz	r0, r0
 800b3e0:	ea23 0302 	bic.w	r3, r3, r2
 800b3e4:	0080      	lsls	r0, r0, #2
 800b3e6:	2205      	movs	r2, #5
 800b3e8:	fa02 f000 	lsl.w	r0, r2, r0
 800b3ec:	4318      	orrs	r0, r3
 800b3ee:	6208      	str	r0, [r1, #32]
 800b3f0:	bd10      	pop	{r4, pc}

0800b3f2 <LL_GPIO_SetPinPull.constprop.2>:
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 800b3f2:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b3f4:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 800b3f8:	68e2      	ldr	r2, [r4, #12]
 800b3fa:	fa90 f3a0 	rbit	r3, r0
 800b3fe:	fab3 f383 	clz	r3, r3
 800b402:	2103      	movs	r1, #3
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	fa01 f303 	lsl.w	r3, r1, r3
 800b40a:	ea22 0303 	bic.w	r3, r2, r3
 800b40e:	fa90 f0a0 	rbit	r0, r0
 800b412:	60e3      	str	r3, [r4, #12]
 800b414:	bd10      	pop	{r4, pc}

0800b416 <LL_GPIO_SetPinSpeed.constprop.3>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800b416:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b418:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 800b41c:	68a2      	ldr	r2, [r4, #8]
 800b41e:	fa90 f3a0 	rbit	r3, r0
 800b422:	fab3 f383 	clz	r3, r3
 800b426:	fa90 f0a0 	rbit	r0, r0
 800b42a:	2103      	movs	r1, #3
 800b42c:	fab0 f080 	clz	r0, r0
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	fa01 f303 	lsl.w	r3, r1, r3
 800b436:	0040      	lsls	r0, r0, #1
 800b438:	ea22 0303 	bic.w	r3, r2, r3
 800b43c:	fa01 f000 	lsl.w	r0, r1, r0
 800b440:	4318      	orrs	r0, r3
 800b442:	60a0      	str	r0, [r4, #8]
 800b444:	bd10      	pop	{r4, pc}

0800b446 <LL_GPIO_SetPinMode.constprop.4>:
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b446:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 800b44a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b44c:	680b      	ldr	r3, [r1, #0]
 800b44e:	fa90 f2a0 	rbit	r2, r0
 800b452:	fab2 f282 	clz	r2, r2
 800b456:	fa90 f0a0 	rbit	r0, r0
 800b45a:	2403      	movs	r4, #3
 800b45c:	0052      	lsls	r2, r2, #1
 800b45e:	fa04 f202 	lsl.w	r2, r4, r2
 800b462:	fab0 f080 	clz	r0, r0
 800b466:	ea23 0302 	bic.w	r3, r3, r2
 800b46a:	0040      	lsls	r0, r0, #1
 800b46c:	2202      	movs	r2, #2
 800b46e:	fa02 f000 	lsl.w	r0, r2, r0
 800b472:	4318      	orrs	r0, r3
 800b474:	6008      	str	r0, [r1, #0]
 800b476:	bd10      	pop	{r4, pc}

0800b478 <spi1_init>:
  SET_BIT(RCC->APB2ENR, Periphs);
 800b478:	4b39      	ldr	r3, [pc, #228]	; (800b560 <spi1_init+0xe8>)
 800b47a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 */


#include "main.h"

void spi1_init() {
 800b47c:	b513      	push	{r0, r1, r4, lr}
 800b47e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b482:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b48a:	9301      	str	r3, [sp, #4]
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);

	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 800b48c:	2020      	movs	r0, #32
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b48e:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
  (void)tmpreg;
 800b492:	9b01      	ldr	r3, [sp, #4]
 800b494:	f7ff ffd7 	bl	800b446 <LL_GPIO_SetPinMode.constprop.4>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 800b498:	2020      	movs	r0, #32
 800b49a:	f7ff ff91 	bl	800b3c0 <LL_GPIO_SetAFPin_0_7.constprop.1>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b49e:	2020      	movs	r0, #32
 800b4a0:	f7ff ffb9 	bl	800b416 <LL_GPIO_SetPinSpeed.constprop.3>
 800b4a4:	6863      	ldr	r3, [r4, #4]
 800b4a6:	f023 0320 	bic.w	r3, r3, #32
 800b4aa:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 800b4ac:	2020      	movs	r0, #32
 800b4ae:	f7ff ffa0 	bl	800b3f2 <LL_GPIO_SetPinPull.constprop.2>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800b4b2:	2040      	movs	r0, #64	; 0x40
 800b4b4:	f7ff ffc7 	bl	800b446 <LL_GPIO_SetPinMode.constprop.4>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 800b4b8:	2040      	movs	r0, #64	; 0x40
 800b4ba:	f7ff ff81 	bl	800b3c0 <LL_GPIO_SetAFPin_0_7.constprop.1>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b4be:	2040      	movs	r0, #64	; 0x40
 800b4c0:	f7ff ffa9 	bl	800b416 <LL_GPIO_SetPinSpeed.constprop.3>
 800b4c4:	6863      	ldr	r3, [r4, #4]
 800b4c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ca:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800b4cc:	2040      	movs	r0, #64	; 0x40
 800b4ce:	f7ff ff90 	bl	800b3f2 <LL_GPIO_SetPinPull.constprop.2>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 800b4d2:	2080      	movs	r0, #128	; 0x80
 800b4d4:	f7ff ffb7 	bl	800b446 <LL_GPIO_SetPinMode.constprop.4>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 800b4d8:	2080      	movs	r0, #128	; 0x80
 800b4da:	f7ff ff71 	bl	800b3c0 <LL_GPIO_SetAFPin_0_7.constprop.1>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b4de:	2080      	movs	r0, #128	; 0x80
 800b4e0:	f7ff ff99 	bl	800b416 <LL_GPIO_SetPinSpeed.constprop.3>
 800b4e4:	6863      	ldr	r3, [r4, #4]
 800b4e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4ea:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 800b4ec:	2080      	movs	r0, #128	; 0x80
 800b4ee:	f7ff ff80 	bl	800b3f2 <LL_GPIO_SetPinPull.constprop.2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800b4f2:	4b1c      	ldr	r3, [pc, #112]	; (800b564 <spi1_init+0xec>)
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800b4fa:	f042 0208 	orr.w	r2, r2, #8
 800b4fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800b506:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	f042 0201 	orr.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	f042 0202 	orr.w	r2, r2, #2
 800b516:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b51e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800b526:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800b52a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b532:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	f022 0204 	bic.w	r2, r2, #4
 800b53a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b542:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800b54a:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b552:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	f042 0208 	orr.w	r2, r2, #8
 800b55a:	605a      	str	r2, [r3, #4]
	LL_SPI_SetNSSMode(SPI1, LL_SPI_NSS_SOFT);
	LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
	LL_SPI_SetMode(SPI1, LL_SPI_MODE_MASTER);
	LL_SPI_Enable(SPI1);
	LL_SPI_EnableNSSPulseMgt(SPI1);
}
 800b55c:	b002      	add	sp, #8
 800b55e:	bd10      	pop	{r4, pc}
 800b560:	40021000 	.word	0x40021000
 800b564:	40013000 	.word	0x40013000

0800b568 <spi2_init>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b568:	4b3d      	ldr	r3, [pc, #244]	; (800b660 <spi2_init+0xf8>)
 *      Author: brett
 */

#include "main.h"

void spi2_init() {
 800b56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b570:	4e3c      	ldr	r6, [pc, #240]	; (800b664 <spi2_init+0xfc>)
 800b572:	f042 0204 	orr.w	r2, r2, #4
 800b576:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
void spi2_init() {
 800b57a:	b094      	sub	sp, #80	; 0x50
 800b57c:	f002 0204 	and.w	r2, r2, #4
 800b580:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800b582:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b586:	f042 0202 	orr.w	r2, r2, #2
 800b58a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b58c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b58e:	f002 0202 	and.w	r2, r2, #2
 800b592:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800b594:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b596:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b59c:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5a4:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b5a6:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b5a8:	2502      	movs	r5, #2
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b5aa:	f04f 0803 	mov.w	r8, #3
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b5ae:	2705      	movs	r7, #5
  (void)tmpreg;
 800b5b0:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b5b2:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 800b5b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b5b8:	a904      	add	r1, sp, #16
 800b5ba:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 800b5bc:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b5be:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b5c0:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b5c2:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b5c6:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b5c8:	f7fc f882 	bl	80076d0 <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 800b5cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b5d0:	a904      	add	r1, sp, #16
 800b5d2:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 800b5d4:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b5d6:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b5d8:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b5da:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b5dc:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b5e0:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b5e2:	f7fc f875 	bl	80076d0 <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 800b5e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b5ea:	a904      	add	r1, sp, #16
 800b5ec:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 800b5ee:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b5f0:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b5f2:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b5f4:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b5f6:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b5fa:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b5fc:	f7fc f868 	bl	80076d0 <LL_GPIO_Init>

		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
		SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b600:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b604:	930b      	str	r3, [sp, #44]	; 0x2c
		SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b606:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b60a:	930c      	str	r3, [sp, #48]	; 0x30
		/*Mode 3 (Mode 1,1) */
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 800b60c:	2301      	movs	r3, #1
		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b60e:	940a      	str	r4, [sp, #40]	; 0x28
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 800b610:	930e      	str	r3, [sp, #56]	; 0x38
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
		SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b612:	9411      	str	r4, [sp, #68]	; 0x44
		SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b614:	9412      	str	r4, [sp, #72]	; 0x48
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b616:	f44f 7300 	mov.w	r3, #512	; 0x200
		SPI_InitStruct.CRCPoly = 7; //?
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b61a:	4c13      	ldr	r4, [pc, #76]	; (800b668 <spi2_init+0x100>)
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b61c:	930f      	str	r3, [sp, #60]	; 0x3c
		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800b61e:	2308      	movs	r3, #8
 800b620:	9310      	str	r3, [sp, #64]	; 0x40
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b622:	a90a      	add	r1, sp, #40	; 0x28
		SPI_InitStruct.CRCPoly = 7; //?
 800b624:	2307      	movs	r3, #7
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b626:	4620      	mov	r0, r4
		SPI_InitStruct.CRCPoly = 7; //?
 800b628:	9313      	str	r3, [sp, #76]	; 0x4c
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
 800b62a:	950d      	str	r5, [sp, #52]	; 0x34
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b62c:	f7fc fb1e 	bl	8007c6c <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	f023 0308 	bic.w	r3, r3, #8
 800b636:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800b638:	6863      	ldr	r3, [r4, #4]
 800b63a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b63e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800b640:	6863      	ldr	r3, [r4, #4]
 800b642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b646:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64e:	6023      	str	r3, [r4, #0]

		LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
		LL_SPI_DisableIT_RXNE(SPI2);
		LL_SPI_Enable(SPI2);

		delay_us(10000);
 800b650:	f242 7010 	movw	r0, #10000	; 0x2710
 800b654:	f000 f8e6 	bl	800b824 <delay_us>
}
 800b658:	b014      	add	sp, #80	; 0x50
 800b65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65e:	bf00      	nop
 800b660:	40021000 	.word	0x40021000
 800b664:	48000400 	.word	0x48000400
 800b668:	40003800 	.word	0x40003800

0800b66c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b66c:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <HAL_MspInit+0x88>)
{
 800b66e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b670:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b672:	f042 0201 	orr.w	r2, r2, #1
 800b676:	661a      	str	r2, [r3, #96]	; 0x60
 800b678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b67a:	f002 0201 	and.w	r2, r2, #1
 800b67e:	9200      	str	r2, [sp, #0]
 800b680:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b684:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b688:	659a      	str	r2, [r3, #88]	; 0x58
 800b68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b690:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b692:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800b694:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b696:	f7f9 facd 	bl	8004c34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b69a:	2200      	movs	r2, #0
 800b69c:	4611      	mov	r1, r2
 800b69e:	f06f 000b 	mvn.w	r0, #11
 800b6a2:	f7f9 fad9 	bl	8004c58 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	f06f 000a 	mvn.w	r0, #10
 800b6ae:	f7f9 fad3 	bl	8004c58 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	f06f 0009 	mvn.w	r0, #9
 800b6ba:	f7f9 facd 	bl	8004c58 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	f06f 0004 	mvn.w	r0, #4
 800b6c6:	f7f9 fac7 	bl	8004c58 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	f06f 0003 	mvn.w	r0, #3
 800b6d2:	f7f9 fac1 	bl	8004c58 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4611      	mov	r1, r2
 800b6da:	f06f 0001 	mvn.w	r0, #1
 800b6de:	f7f9 fabb 	bl	8004c58 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ea:	f7f9 fab5 	bl	8004c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b6ee:	b003      	add	sp, #12
 800b6f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6f4:	40021000 	.word	0x40021000

0800b6f8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800b6fa:	6802      	ldr	r2, [r0, #0]
 800b6fc:	4b15      	ldr	r3, [pc, #84]	; (800b754 <HAL_SD_MspInit+0x5c>)
 800b6fe:	429a      	cmp	r2, r3
{
 800b700:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 800b702:	d124      	bne.n	800b74e <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b704:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b708:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b70a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b70c:	4812      	ldr	r0, [pc, #72]	; (800b758 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b70e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b712:	661a      	str	r2, [r3, #96]	; 0x60
 800b714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b716:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b720:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b722:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b726:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b728:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b72a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b72c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b72e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b730:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b732:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b734:	f7f9 fc48 	bl	8004fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b738:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b73a:	eb0d 0103 	add.w	r1, sp, r3
 800b73e:	4807      	ldr	r0, [pc, #28]	; (800b75c <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b740:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b742:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b744:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b746:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b748:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b74a:	f7f9 fc3d 	bl	8004fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800b74e:	b007      	add	sp, #28
 800b750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b752:	bf00      	nop
 800b754:	40012800 	.word	0x40012800
 800b758:	48000800 	.word	0x48000800
 800b75c:	48000c00 	.word	0x48000c00

0800b760 <NMI_Handler>:
 800b760:	4770      	bx	lr

0800b762 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800b762:	e7fe      	b.n	800b762 <HardFault_Handler>

0800b764 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800b764:	e7fe      	b.n	800b764 <MemManage_Handler>

0800b766 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800b766:	e7fe      	b.n	800b766 <BusFault_Handler>

0800b768 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800b768:	e7fe      	b.n	800b768 <UsageFault_Handler>

0800b76a <SVC_Handler>:
 800b76a:	4770      	bx	lr

0800b76c <DebugMon_Handler>:
 800b76c:	4770      	bx	lr

0800b76e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800b76e:	4770      	bx	lr

0800b770 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800b770:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b772:	f7f9 fa35 	bl	8004be0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800b776:	f7f9 fac6 	bl	8004d06 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_app_timer_tickAndProcess();
  /* USER CODE END SysTick_IRQn 1 */
}
 800b77a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_app_timer_tickAndProcess();
 800b77e:	f7f6 bd67 	b.w	8002250 <systick_app_timer_tickAndProcess>
	...

0800b784 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <OTG_FS_IRQHandler+0x8>)
 800b786:	f7f9 bdbf 	b.w	8005308 <HAL_PCD_IRQHandler>
 800b78a:	bf00      	nop
 800b78c:	200092f8 	.word	0x200092f8

0800b790 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <DMA2_Channel4_IRQHandler+0x14>)
 800b792:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b794:	2a01      	cmp	r2, #1
 800b796:	d001      	beq.n	800b79c <DMA2_Channel4_IRQHandler+0xc>
 800b798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79a:	b90b      	cbnz	r3, 800b7a0 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 800b79c:	f7fd b864 	b.w	8008868 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 800b7a0:	f7fd b85c 	b.w	800885c <BSP_SD_DMA_Tx_IRQHandler>
 800b7a4:	20008980 	.word	0x20008980

0800b7a8 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 800b7a8:	f7fd b852 	b.w	8008850 <BSP_SD_IRQHandler>

0800b7ac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b7ac:	490f      	ldr	r1, [pc, #60]	; (800b7ec <SystemInit+0x40>)
 800b7ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b7b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	; (800b7f0 <SystemInit+0x44>)
 800b7bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b7be:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800b7c0:	f042 0201 	orr.w	r2, r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b7c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800b7ce:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b7d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800b7d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7e0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b7e2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b7e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7e8:	608b      	str	r3, [r1, #8]
 800b7ea:	4770      	bx	lr
 800b7ec:	e000ed00 	.word	0xe000ed00
 800b7f0:	40021000 	.word	0x40021000

0800b7f4 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <LL_APB1_GRP1_EnableClock+0x18>)
 800b7f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7f8:	4302      	orrs	r2, r0
 800b7fa:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800b7fe:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b800:	4018      	ands	r0, r3
 800b802:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800b804:	9b01      	ldr	r3, [sp, #4]
}
 800b806:	b002      	add	sp, #8
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	40021000 	.word	0x40021000

0800b810 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 800b810:	4a03      	ldr	r2, [pc, #12]	; (800b820 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 800b812:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b816:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800b81a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b81e:	4770      	bx	lr
 800b820:	40021000 	.word	0x40021000

0800b824 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 800b824:	2300      	movs	r3, #0
 800b826:	4283      	cmp	r3, r0
 800b828:	d100      	bne.n	800b82c <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 800b82a:	4770      	bx	lr
 800b82c:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 800b82e:	bf00      	nop
    	for(i=0;i<11;i++)
 800b830:	3a01      	subs	r2, #1
 800b832:	d1fc      	bne.n	800b82e <delay_us+0xa>
    for(k=0;k<us;k++)
 800b834:	3301      	adds	r3, #1
 800b836:	e7f6      	b.n	800b826 <delay_us+0x2>

0800b838 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800b838:	4a08      	ldr	r2, [pc, #32]	; (800b85c <Start_LPTIMCounter2+0x24>)
 800b83a:	6913      	ldr	r3, [r2, #16]
 800b83c:	f043 0301 	orr.w	r3, r3, #1
 800b840:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800b842:	6993      	ldr	r3, [r2, #24]
 800b844:	0c1b      	lsrs	r3, r3, #16
 800b846:	041b      	lsls	r3, r3, #16
 800b848:	4318      	orrs	r0, r3
 800b84a:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800b84c:	6913      	ldr	r3, [r2, #16]
 800b84e:	f023 0306 	bic.w	r3, r3, #6
 800b852:	f043 0304 	orr.w	r3, r3, #4
 800b856:	6113      	str	r3, [r2, #16]
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40009400 	.word	0x40009400

0800b860 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 800b860:	4b05      	ldr	r3, [pc, #20]	; (800b878 <LSE_ON+0x18>)
 800b862:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b866:	f042 0201 	orr.w	r2, r2, #1
 800b86a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 800b86e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b872:	0792      	lsls	r2, r2, #30
 800b874:	d5fb      	bpl.n	800b86e <LSE_ON+0xe>

}
 800b876:	4770      	bx	lr
 800b878:	40021000 	.word	0x40021000

0800b87c <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 800b87c:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 800b87e:	f7f9 f9c9 	bl	8004c14 <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800b882:	4a07      	ldr	r2, [pc, #28]	; (800b8a0 <EnterStop+0x24>)
 800b884:	6813      	ldr	r3, [r2, #0]
 800b886:	f023 0307 	bic.w	r3, r3, #7
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b890:	4a04      	ldr	r2, [pc, #16]	; (800b8a4 <EnterStop+0x28>)
 800b892:	6913      	ldr	r3, [r2, #16]
 800b894:	f043 0304 	orr.w	r3, r3, #4
 800b898:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 800b89a:	bf30      	wfi
 800b89c:	bd08      	pop	{r3, pc}
 800b89e:	bf00      	nop
 800b8a0:	40007000 	.word	0x40007000
 800b8a4:	e000ed00 	.word	0xe000ed00

0800b8a8 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 800b8a8:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800b8aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 800b8ae:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800b8b0:	f7ff ffa0 	bl	800b7f4 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8b4:	4b31      	ldr	r3, [pc, #196]	; (800b97c <SystemClock_Config_MSI_80MHz+0xd4>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8bc:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8c4:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 800b8c6:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 800b8c8:	0552      	lsls	r2, r2, #21
 800b8ca:	d5fc      	bpl.n	800b8c6 <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800b8d4:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800b8d6:	2306      	movs	r3, #6
 800b8d8:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 800b8da:	2328      	movs	r3, #40	; 0x28
 800b8dc:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800b8de:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800b8e0:	4c27      	ldr	r4, [pc, #156]	; (800b980 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800b8e2:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800b8e4:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800b8e6:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800b8e8:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b8ea:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800b8f2:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 800b8f4:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b8f6:	f7fa fa5b 	bl	8005db0 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800b8fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b8fe:	f023 0320 	bic.w	r3, r3, #32
 800b902:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800b906:	69a3      	ldr	r3, [r4, #24]
 800b908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b90c:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 800b90e:	f7ff ffa7 	bl	800b860 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 800b912:	f7fa fcc1 	bl	8006298 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800b916:	f7ff ff7b 	bl	800b810 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 800b91a:	f7ff ff79 	bl	800b810 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b924:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b92c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b930:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800b938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b93c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b93e:	68a3      	ldr	r3, [r4, #8]
 800b940:	f023 0303 	bic.w	r3, r3, #3
 800b944:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800b946:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <SystemClock_Config_MSI_80MHz+0xdc>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	f022 0207 	bic.w	r2, r2, #7
 800b94e:	f042 0204 	orr.w	r2, r2, #4
 800b952:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 800b95a:	2a04      	cmp	r2, #4
 800b95c:	d1fa      	bne.n	800b954 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b964:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 800b966:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b96c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b96e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	9b00      	ldr	r3, [sp, #0]

		}
 800b978:	b012      	add	sp, #72	; 0x48
 800b97a:	bd10      	pop	{r4, pc}
 800b97c:	40007000 	.word	0x40007000
 800b980:	40021000 	.word	0x40021000
 800b984:	40022000 	.word	0x40022000

0800b988 <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b988:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <Configure_LPTIM2_Int+0x40>)
 800b98a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b98e:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800b992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 800b996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b998:	f042 0220 	orr.w	r2, r2, #32
 800b99c:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800b99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800b9a8:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b9aa:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <Configure_LPTIM2_Int+0x44>)
 800b9ac:	2204      	movs	r2, #4
 800b9ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800b9b2:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <Configure_LPTIM2_Int+0x48>)
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	f022 0202 	bic.w	r2, r2, #2
 800b9ba:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800b9bc:	691a      	ldr	r2, [r3, #16]
 800b9be:	f022 0201 	bic.w	r2, r2, #1
 800b9c2:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 800b9c4:	b002      	add	sp, #8
 800b9c6:	4770      	bx	lr
 800b9c8:	40021000 	.word	0x40021000
 800b9cc:	e000e100 	.word	0xe000e100
 800b9d0:	40009400 	.word	0x40009400

0800b9d4 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800b9d4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9d6:	4c1d      	ldr	r4, [pc, #116]	; (800ba4c <HAL_PCD_MspInit+0x78>)
 800b9d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b9da:	f043 0301 	orr.w	r3, r3, #1
 800b9de:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b9e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800b9e2:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800b9ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b9f0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f6:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9f8:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b9fa:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b9fc:	a903      	add	r1, sp, #12
 800b9fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba02:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba04:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba06:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800ba08:	f7f9 fade 	bl	8004fc8 <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ba0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba10:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ba12:	2312      	movs	r3, #18
 800ba14:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba16:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba18:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba20:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba22:	f7f9 fad1 	bl	8004fc8 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ba28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba2c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ba2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ba30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba34:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800ba36:	462a      	mov	r2, r5
 800ba38:	2107      	movs	r1, #7
 800ba3a:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba3c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800ba3e:	f7f9 f90b 	bl	8004c58 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba42:	2043      	movs	r0, #67	; 0x43
 800ba44:	f7f9 f93c 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
    
}
 800ba48:	b008      	add	sp, #32
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	40021000 	.word	0x40021000

0800ba50 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <HAL_PCD_MspDeInit+0x14>)
 800ba52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ba58:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 800ba5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba5c:	f022 0201 	bic.w	r2, r2, #1
 800ba60:	661a      	str	r2, [r3, #96]	; 0x60
 800ba62:	4770      	bx	lr
 800ba64:	40021000 	.word	0x40021000

0800ba68 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba68:	f500 7162 	add.w	r1, r0, #904	; 0x388
 800ba6c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800ba70:	f7f8 b92b 	b.w	8003cca <USBD_LL_SetupStage>

0800ba74 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba74:	231c      	movs	r3, #28
 800ba76:	fb03 0301 	mla	r3, r3, r1, r0
 800ba7a:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800ba7e:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800ba82:	f7f8 b94f 	b.w	8003d24 <USBD_LL_DataOutStage>

0800ba86 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba86:	231c      	movs	r3, #28
 800ba88:	fb03 0301 	mla	r3, r3, r1, r0
 800ba8c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800ba90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba92:	f7f8 b979 	b.w	8003d88 <USBD_LL_DataInStage>

0800ba96 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800ba96:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800ba9a:	f7f8 b9f5 	b.w	8003e88 <USBD_LL_SOF>

0800ba9e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800baa2:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800baa6:	f7f8 f9be 	bl	8003e26 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800baaa:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 800baae:	2101      	movs	r1, #1
}
 800bab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800bab4:	f7f8 b9d6 	b.w	8003e64 <USBD_LL_SetSpeed>

0800bab8 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 800bab8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800babc:	f7f8 b9d5 	b.w	8003e6a <USBD_LL_Suspend>

0800bac0 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 800bac0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800bac4:	f7f8 b9da 	b.w	8003e7c <USBD_LL_Resume>

0800bac8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800bac8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800bacc:	f7f8 b9ea 	b.w	8003ea4 <USBD_LL_IsoOUTIncomplete>

0800bad0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800bad0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800bad4:	f7f8 b9e4 	b.w	8003ea0 <USBD_LL_IsoINIncomplete>

0800bad8 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 800bad8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800badc:	f7f8 b9e4 	b.w	8003ea8 <USBD_LL_DevConnected>

0800bae0 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 800bae0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800bae4:	f7f8 b9e2 	b.w	8003eac <USBD_LL_DevDisconnected>

0800bae8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800baea:	4c15      	ldr	r4, [pc, #84]	; (800bb40 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 800baec:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 800baee:	2305      	movs	r3, #5
 800baf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baf4:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800baf6:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 800bafa:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 800bafc:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800bb00:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 800bb02:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 800bb06:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800bb08:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800bb0a:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 800bb0c:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 800bb0e:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 800bb10:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb12:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 800bb14:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800bb16:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800bb18:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800bb1a:	f7f9 fb31 	bl	8005180 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800bb1e:	2180      	movs	r1, #128	; 0x80
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7fa f842 	bl	8005baa <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 800bb26:	463a      	mov	r2, r7
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7fa f81c 	bl	8005b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 800bb30:	2280      	movs	r2, #128	; 0x80
 800bb32:	4631      	mov	r1, r6
 800bb34:	4620      	mov	r0, r4
 800bb36:	f7fa f817 	bl	8005b68 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200092f8 	.word	0x200092f8

0800bb44 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800bb44:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 800bb46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bb4a:	f7f9 fbcb 	bl	80052e4 <HAL_PCD_DeInit>
  return USBD_OK;
}
 800bb4e:	2000      	movs	r0, #0
 800bb50:	bd08      	pop	{r3, pc}

0800bb52 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb52:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800bb54:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bb58:	f7f9 fb97 	bl	800528a <HAL_PCD_Start>
  return USBD_OK;
}
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	bd08      	pop	{r3, pc}

0800bb60 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800bb60:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 800bb62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bb66:	f7f9 fba5 	bl	80052b4 <HAL_PCD_Stop>
  return USBD_OK;
}
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	bd08      	pop	{r3, pc}

0800bb6e <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 800bb72:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bb76:	4613      	mov	r3, r2
 800bb78:	4622      	mov	r2, r4
 800bb7a:	f7f9 fee9 	bl	8005950 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 800bb7e:	2000      	movs	r0, #0
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb82:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb84:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bb88:	f7f9 ff07 	bl	800599a <HAL_PCD_EP_Close>
  return USBD_OK;
}
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	bd08      	pop	{r3, pc}

0800bb90 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb90:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800bb92:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bb96:	f7f9 ffcd 	bl	8005b34 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	bd08      	pop	{r3, pc}

0800bb9e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb9e:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bba0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bba4:	f7f9 ff75 	bl	8005a92 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800bba8:	2000      	movs	r0, #0
 800bbaa:	bd08      	pop	{r3, pc}

0800bbac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbac:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bbb2:	f7f9 ff9a 	bl	8005aea <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	bd08      	pop	{r3, pc}

0800bbba <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800bbba:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bbbe:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800bbc2:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbc6:	bf1b      	ittet	ne
 800bbc8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800bbcc:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbd0:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbd4:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbd8:	bf08      	it	eq
 800bbda:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 800bbde:	4770      	bx	lr

0800bbe0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbe0:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbe2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bbe6:	f7f9 fe9f 	bl	8005928 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800bbea:	2000      	movs	r0, #0
 800bbec:	bd08      	pop	{r3, pc}

0800bbee <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800bbee:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbf0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bbf4:	f7f9 ff26 	bl	8005a44 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	bd08      	pop	{r3, pc}

0800bbfc <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800bbfc:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbfe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bc02:	f7f9 feed 	bl	80059e0 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800bc06:	2000      	movs	r0, #0
 800bc08:	bd08      	pop	{r3, pc}

0800bc0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc0a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800bc0c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bc10:	f7f9 ff10 	bl	8005a34 <HAL_PCD_EP_GetRxCount>
}
 800bc14:	bd08      	pop	{r3, pc}
	...

0800bc18 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 800bc18:	2312      	movs	r3, #18
 800bc1a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 800bc1c:	4800      	ldr	r0, [pc, #0]	; (800bc20 <USBD_VCP_DeviceDescriptor+0x8>)
 800bc1e:	4770      	bx	lr
 800bc20:	20000120 	.word	0x20000120

0800bc24 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 800bc24:	2312      	movs	r3, #18
 800bc26:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 800bc28:	4800      	ldr	r0, [pc, #0]	; (800bc2c <USBD_MSC_DeviceDescriptor+0x8>)
 800bc2a:	4770      	bx	lr
 800bc2c:	2000010c 	.word	0x2000010c

0800bc30 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800bc30:	2304      	movs	r3, #4
 800bc32:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 800bc34:	4800      	ldr	r0, [pc, #0]	; (800bc38 <USBD_MSC_LangIDStrDescriptor+0x8>)
 800bc36:	4770      	bx	lr
 800bc38:	20000134 	.word	0x20000134

0800bc3c <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bc3c:	2300      	movs	r3, #0
{
 800bc3e:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800bc40:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 800bc42:	b2dc      	uxtb	r4, r3
 800bc44:	42a2      	cmp	r2, r4
 800bc46:	d800      	bhi.n	800bc4a <IntToUnicode+0xe>
  }
}
 800bc48:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 800bc4a:	0f04      	lsrs	r4, r0, #28
 800bc4c:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 800bc4e:	bf94      	ite	ls
 800bc50:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800bc52:	3437      	addhi	r4, #55	; 0x37
 800bc54:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800bc58:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800bc5c:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 800bc5e:	7065      	strb	r5, [r4, #1]
 800bc60:	3301      	adds	r3, #1
 800bc62:	e7ee      	b.n	800bc42 <IntToUnicode+0x6>

0800bc64 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800bc64:	231a      	movs	r3, #26
{
 800bc66:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800bc68:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 800bc6a:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <USBD_VCP_SerialStrDescriptor+0x2c>)
 800bc6c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 800bc6e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800bc70:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800bc72:	18c0      	adds	r0, r0, r3
 800bc74:	d00a      	beq.n	800bc8c <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800bc78:	4907      	ldr	r1, [pc, #28]	; (800bc98 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 800bc7a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800bc7c:	2208      	movs	r2, #8
 800bc7e:	f7ff ffdd 	bl	800bc3c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800bc82:	2204      	movs	r2, #4
 800bc84:	4905      	ldr	r1, [pc, #20]	; (800bc9c <USBD_VCP_SerialStrDescriptor+0x38>)
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff ffd8 	bl	800bc3c <IntToUnicode>
}
 800bc8c:	4804      	ldr	r0, [pc, #16]	; (800bca0 <USBD_VCP_SerialStrDescriptor+0x3c>)
 800bc8e:	bd10      	pop	{r4, pc}
 800bc90:	1fff7a30 	.word	0x1fff7a30
 800bc94:	1fff7a34 	.word	0x1fff7a34
 800bc98:	2000013a 	.word	0x2000013a
 800bc9c:	2000014a 	.word	0x2000014a
 800bca0:	20000138 	.word	0x20000138

0800bca4 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800bca4:	231a      	movs	r3, #26
{
 800bca6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800bca8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <USBD_MSC_SerialStrDescriptor+0x2c>)
 800bcac:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800bcae:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800bcb0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800bcb2:	18c0      	adds	r0, r0, r3
 800bcb4:	d00a      	beq.n	800bccc <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800bcb6:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800bcb8:	4907      	ldr	r1, [pc, #28]	; (800bcd8 <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800bcba:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800bcbc:	2208      	movs	r2, #8
 800bcbe:	f7ff ffbd 	bl	800bc3c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	4905      	ldr	r1, [pc, #20]	; (800bcdc <USBD_MSC_SerialStrDescriptor+0x38>)
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7ff ffb8 	bl	800bc3c <IntToUnicode>
}
 800bccc:	4804      	ldr	r0, [pc, #16]	; (800bce0 <USBD_MSC_SerialStrDescriptor+0x3c>)
 800bcce:	bd10      	pop	{r4, pc}
 800bcd0:	1fff7a10 	.word	0x1fff7a10
 800bcd4:	1fff7a14 	.word	0x1fff7a14
 800bcd8:	2000013a 	.word	0x2000013a
 800bcdc:	2000014a 	.word	0x2000014a
 800bce0:	20000138 	.word	0x20000138

0800bce4 <USBD_VCP_ProductStrDescriptor>:
{
 800bce4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 800bce6:	4c04      	ldr	r4, [pc, #16]	; (800bcf8 <USBD_VCP_ProductStrDescriptor+0x14>)
 800bce8:	4804      	ldr	r0, [pc, #16]	; (800bcfc <USBD_VCP_ProductStrDescriptor+0x18>)
 800bcea:	460a      	mov	r2, r1
 800bcec:	4621      	mov	r1, r4
 800bcee:	f7f8 fa87 	bl	8004200 <USBD_GetString>
}
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	bd10      	pop	{r4, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200096c4 	.word	0x200096c4
 800bcfc:	0800ee95 	.word	0x0800ee95

0800bd00 <USBD_MSC_ProductStrDescriptor>:
{
 800bd00:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800bd02:	4c04      	ldr	r4, [pc, #16]	; (800bd14 <USBD_MSC_ProductStrDescriptor+0x14>)
 800bd04:	4804      	ldr	r0, [pc, #16]	; (800bd18 <USBD_MSC_ProductStrDescriptor+0x18>)
 800bd06:	460a      	mov	r2, r1
 800bd08:	4621      	mov	r1, r4
 800bd0a:	f7f8 fa79 	bl	8004200 <USBD_GetString>
}
 800bd0e:	4620      	mov	r0, r4
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	bf00      	nop
 800bd14:	200096c4 	.word	0x200096c4
 800bd18:	0800ee64 	.word	0x0800ee64

0800bd1c <USBD_MSC_ManufacturerStrDescriptor>:
{
 800bd1c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd1e:	4c04      	ldr	r4, [pc, #16]	; (800bd30 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 800bd20:	4804      	ldr	r0, [pc, #16]	; (800bd34 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 800bd22:	460a      	mov	r2, r1
 800bd24:	4621      	mov	r1, r4
 800bd26:	f7f8 fa6b 	bl	8004200 <USBD_GetString>
}
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	bd10      	pop	{r4, pc}
 800bd2e:	bf00      	nop
 800bd30:	200096c4 	.word	0x200096c4
 800bd34:	0800ee51 	.word	0x0800ee51

0800bd38 <USBD_VCP_ConfigStrDescriptor>:
{
 800bd38:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 800bd3a:	4c04      	ldr	r4, [pc, #16]	; (800bd4c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800bd3c:	4804      	ldr	r0, [pc, #16]	; (800bd50 <USBD_VCP_ConfigStrDescriptor+0x18>)
 800bd3e:	460a      	mov	r2, r1
 800bd40:	4621      	mov	r1, r4
 800bd42:	f7f8 fa5d 	bl	8004200 <USBD_GetString>
}
 800bd46:	4620      	mov	r0, r4
 800bd48:	bd10      	pop	{r4, pc}
 800bd4a:	bf00      	nop
 800bd4c:	200096c4 	.word	0x200096c4
 800bd50:	0800ee7c 	.word	0x0800ee7c

0800bd54 <USBD_MSC_ConfigStrDescriptor>:
{
 800bd54:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800bd56:	4c04      	ldr	r4, [pc, #16]	; (800bd68 <USBD_MSC_ConfigStrDescriptor+0x14>)
 800bd58:	4804      	ldr	r0, [pc, #16]	; (800bd6c <USBD_MSC_ConfigStrDescriptor+0x18>)
 800bd5a:	460a      	mov	r2, r1
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f7f8 fa4f 	bl	8004200 <USBD_GetString>
}
 800bd62:	4620      	mov	r0, r4
 800bd64:	bd10      	pop	{r4, pc}
 800bd66:	bf00      	nop
 800bd68:	200096c4 	.word	0x200096c4
 800bd6c:	0800ee38 	.word	0x0800ee38

0800bd70 <USBD_VCP_InterfaceStrDescriptor>:
{
 800bd70:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 800bd72:	4c04      	ldr	r4, [pc, #16]	; (800bd84 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800bd74:	4804      	ldr	r0, [pc, #16]	; (800bd88 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 800bd76:	460a      	mov	r2, r1
 800bd78:	4621      	mov	r1, r4
 800bd7a:	f7f8 fa41 	bl	8004200 <USBD_GetString>
}
 800bd7e:	4620      	mov	r0, r4
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	bf00      	nop
 800bd84:	200096c4 	.word	0x200096c4
 800bd88:	0800ee87 	.word	0x0800ee87

0800bd8c <USBD_MSC_InterfaceStrDescriptor>:
{
 800bd8c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800bd8e:	4c04      	ldr	r4, [pc, #16]	; (800bda0 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 800bd90:	4804      	ldr	r0, [pc, #16]	; (800bda4 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 800bd92:	460a      	mov	r2, r1
 800bd94:	4621      	mov	r1, r4
 800bd96:	f7f8 fa33 	bl	8004200 <USBD_GetString>
}
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	bf00      	nop
 800bda0:	200096c4 	.word	0x200096c4
 800bda4:	0800ee43 	.word	0x0800ee43

0800bda8 <USBD_VCP_LangIDStrDescriptor>:
 800bda8:	2304      	movs	r3, #4
 800bdaa:	800b      	strh	r3, [r1, #0]
 800bdac:	4800      	ldr	r0, [pc, #0]	; (800bdb0 <USBD_VCP_LangIDStrDescriptor+0x8>)
 800bdae:	4770      	bx	lr
 800bdb0:	20000134 	.word	0x20000134

0800bdb4 <USBD_VCP_ManufacturerStrDescriptor>:
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	4c04      	ldr	r4, [pc, #16]	; (800bdc8 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800bdb8:	4804      	ldr	r0, [pc, #16]	; (800bdcc <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 800bdba:	460a      	mov	r2, r1
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f7f8 fa1f 	bl	8004200 <USBD_GetString>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200096c4 	.word	0x200096c4
 800bdcc:	0800ee51 	.word	0x0800ee51

0800bdd0 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	4770      	bx	lr

0800bdd4 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	4770      	bx	lr

0800bdd8 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bdd8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 800bddc:	b11b      	cbz	r3, 800bde6 <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 800bdde:	2000      	movs	r0, #0
 800bde0:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800bde4:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800bde6:	2002      	movs	r0, #2
  }
}
 800bde8:	4770      	bx	lr

0800bdea <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800bdea:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 800bdee:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bdf0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800bdf4:	b15b      	cbz	r3, 800be0e <USBD_CDC_EP0_RxReady+0x24>
 800bdf6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bdfa:	28ff      	cmp	r0, #255	; 0xff
 800bdfc:	d007      	beq.n	800be0e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800be04:	4621      	mov	r1, r4
 800be06:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 800be08:	23ff      	movs	r3, #255	; 0xff
 800be0a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800be0e:	2000      	movs	r0, #0
 800be10:	bd10      	pop	{r4, pc}
	...

0800be14 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800be14:	2343      	movs	r3, #67	; 0x43
 800be16:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800be18:	4800      	ldr	r0, [pc, #0]	; (800be1c <USBD_CDC_GetFSCfgDesc+0x8>)
 800be1a:	4770      	bx	lr
 800be1c:	200001d4 	.word	0x200001d4

0800be20 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800be20:	2343      	movs	r3, #67	; 0x43
 800be22:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800be24:	4800      	ldr	r0, [pc, #0]	; (800be28 <USBD_CDC_GetHSCfgDesc+0x8>)
 800be26:	4770      	bx	lr
 800be28:	20000218 	.word	0x20000218

0800be2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800be2c:	2343      	movs	r3, #67	; 0x43
 800be2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800be30:	4800      	ldr	r0, [pc, #0]	; (800be34 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800be32:	4770      	bx	lr
 800be34:	20000268 	.word	0x20000268

0800be38 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800be38:	230a      	movs	r3, #10
 800be3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800be3c:	4800      	ldr	r0, [pc, #0]	; (800be40 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800be3e:	4770      	bx	lr
 800be40:	2000025c 	.word	0x2000025c

0800be44 <STORAGE_Init>:
{
 800be44:	b508      	push	{r3, lr}
  BSP_SD_Init();
 800be46:	f7fc fdab 	bl	80089a0 <BSP_SD_Init>
}
 800be4a:	2000      	movs	r0, #0
 800be4c:	bd08      	pop	{r3, pc}

0800be4e <STORAGE_GetCapacity>:
{
 800be4e:	b530      	push	{r4, r5, lr}
 800be50:	b097      	sub	sp, #92	; 0x5c
 800be52:	460d      	mov	r5, r1
 800be54:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800be56:	f7fc fcf3 	bl	8008840 <BSP_SD_IsDetected>
 800be5a:	b178      	cbz	r0, 800be7c <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 800be5c:	4668      	mov	r0, sp
 800be5e:	f7fc fd0f 	bl	8008880 <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 800be62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be66:	0a5b      	lsrs	r3, r3, #9
 800be68:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800be6c:	3b01      	subs	r3, #1
 800be6e:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 800be70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be74:	8023      	strh	r3, [r4, #0]
    ret = 0;
 800be76:	2000      	movs	r0, #0
}
 800be78:	b017      	add	sp, #92	; 0x5c
 800be7a:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	e7fa      	b.n	800be78 <STORAGE_GetCapacity+0x2a>

0800be82 <STORAGE_Read>:
{
 800be82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be84:	460c      	mov	r4, r1
 800be86:	4615      	mov	r5, r2
 800be88:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800be8a:	f7fc fcd9 	bl	8008840 <BSP_SD_IsDetected>
 800be8e:	b158      	cbz	r0, 800bea8 <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 800be90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	9601      	str	r6, [sp, #4]
 800be98:	026a      	lsls	r2, r5, #9
 800be9a:	2300      	movs	r3, #0
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7fc fd27 	bl	80088f0 <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 800bea2:	2000      	movs	r0, #0
}
 800bea4:	b002      	add	sp, #8
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295
 800beac:	e7fa      	b.n	800bea4 <STORAGE_Read+0x22>

0800beae <STORAGE_Write>:
{
 800beae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	4615      	mov	r5, r2
 800beb4:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800beb6:	f7fc fcc3 	bl	8008840 <BSP_SD_IsDetected>
 800beba:	b158      	cbz	r0, 800bed4 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 800bebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	9601      	str	r6, [sp, #4]
 800bec4:	026a      	lsls	r2, r5, #9
 800bec6:	2300      	movs	r3, #0
 800bec8:	4620      	mov	r0, r4
 800beca:	f7fc fdeb 	bl	8008aa4 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 800bece:	2000      	movs	r0, #0
}
 800bed0:	b002      	add	sp, #8
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	e7fa      	b.n	800bed0 <STORAGE_Write+0x22>

0800beda <USBD_CDC_DataOut>:
{
 800beda:	b538      	push	{r3, r4, r5, lr}
 800bedc:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bede:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bee2:	f7ff fe92 	bl	800bc0a <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800bee6:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800beea:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800beee:	b14b      	cbz	r3, 800bf04 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bef0:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800bef4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800befe:	4798      	blx	r3
    return USBD_OK;
 800bf00:	2000      	movs	r0, #0
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800bf04:	2002      	movs	r0, #2
}
 800bf06:	bd38      	pop	{r3, r4, r5, pc}

0800bf08 <USBD_CDC_Setup>:
{
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf0a:	780f      	ldrb	r7, [r1, #0]
 800bf0c:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800bf10:	4606      	mov	r6, r0
 800bf12:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf14:	d023      	beq.n	800bf5e <USBD_CDC_Setup+0x56>
 800bf16:	2b20      	cmp	r3, #32
 800bf18:	d119      	bne.n	800bf4e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 800bf1a:	88ca      	ldrh	r2, [r1, #6]
 800bf1c:	784b      	ldrb	r3, [r1, #1]
 800bf1e:	b1c2      	cbz	r2, 800bf52 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800bf20:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf22:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800bf26:	d50b      	bpl.n	800bf40 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf28:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	688f      	ldr	r7, [r1, #8]
 800bf30:	4629      	mov	r1, r5
 800bf32:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 800bf34:	88e2      	ldrh	r2, [r4, #6]
 800bf36:	4629      	mov	r1, r5
 800bf38:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 800bf3a:	f7f8 f97d 	bl	8004238 <USBD_CtlSendData>
      break;
 800bf3e:	e006      	b.n	800bf4e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 800bf40:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800bf44:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f7f8 f98a 	bl	8004262 <USBD_CtlPrepareRx>
}
 800bf4e:	2000      	movs	r0, #0
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf52:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800bf56:	6884      	ldr	r4, [r0, #8]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	47a0      	blx	r4
 800bf5c:	e7f7      	b.n	800bf4e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800bf5e:	784b      	ldrb	r3, [r1, #1]
 800bf60:	2b0a      	cmp	r3, #10
 800bf62:	d1f4      	bne.n	800bf4e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 800bf64:	2201      	movs	r2, #1
 800bf66:	4901      	ldr	r1, [pc, #4]	; (800bf6c <USBD_CDC_Setup+0x64>)
 800bf68:	e7e7      	b.n	800bf3a <USBD_CDC_Setup+0x32>
 800bf6a:	bf00      	nop
 800bf6c:	20000934 	.word	0x20000934

0800bf70 <USBD_CDC_DeInit>:
{
 800bf70:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800bf72:	2183      	movs	r1, #131	; 0x83
{
 800bf74:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800bf76:	f7ff fe04 	bl	800bb82 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800bf7a:	2103      	movs	r1, #3
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7ff fe00 	bl	800bb82 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800bf82:	2182      	movs	r1, #130	; 0x82
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7ff fdfc 	bl	800bb82 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800bf8a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800bf8e:	b153      	cbz	r3, 800bfa6 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf90:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bf98:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800bf9c:	f000 fc28 	bl	800c7f0 <free>
    pdev->pClassData = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	bd10      	pop	{r4, pc}

0800bfaa <USBD_CDC_Init>:
{
 800bfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bfac:	7c03      	ldrb	r3, [r0, #16]
{
 800bfae:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bfb0:	bb7b      	cbnz	r3, 800c012 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800bfb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	2183      	movs	r1, #131	; 0x83
 800bfba:	f7ff fdd8 	bl	800bb6e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800bfbe:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	2103      	movs	r1, #3
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f7ff fdd1 	bl	800bb6e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800bfcc:	2308      	movs	r3, #8
 800bfce:	2203      	movs	r2, #3
 800bfd0:	2182      	movs	r1, #130	; 0x82
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7ff fdcb 	bl	800bb6e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bfd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bfdc:	f000 fc00 	bl	800c7e0 <malloc>
 800bfe0:	4606      	mov	r6, r0
 800bfe2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800bfe6:	b320      	cbz	r0, 800c032 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bfe8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bff0:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800bff2:	2500      	movs	r5, #0
 800bff4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800bff8:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bffc:	b987      	cbnz	r7, 800c020 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800bffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c002:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c006:	2103      	movs	r1, #3
 800c008:	4620      	mov	r0, r4
 800c00a:	f7ff fdf7 	bl	800bbfc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800c00e:	4638      	mov	r0, r7
 800c010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800c012:	2340      	movs	r3, #64	; 0x40
 800c014:	2202      	movs	r2, #2
 800c016:	2183      	movs	r1, #131	; 0x83
 800c018:	f7ff fda9 	bl	800bb6e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800c01c:	2340      	movs	r3, #64	; 0x40
 800c01e:	e7d0      	b.n	800bfc2 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800c020:	2340      	movs	r3, #64	; 0x40
 800c022:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c026:	2103      	movs	r1, #3
 800c028:	4620      	mov	r0, r4
 800c02a:	f7ff fde7 	bl	800bbfc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800c02e:	4628      	mov	r0, r5
 800c030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 800c032:	2001      	movs	r0, #1
}
 800c034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c038 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 800c038:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c03a:	4802      	ldr	r0, [pc, #8]	; (800c044 <CDC_Itf_DeInit+0xc>)
 800c03c:	f7fb f868 	bl	8007110 <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 800c040:	2000      	movs	r0, #0
 800c042:	bd08      	pop	{r3, pc}
 800c044:	200097d4 	.word	0x200097d4

0800c048 <CDC_Itf_Init>:
{
 800c048:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800c04a:	4a18      	ldr	r2, [pc, #96]	; (800c0ac <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 800c04c:	4c18      	ldr	r4, [pc, #96]	; (800c0b0 <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c04e:	4e19      	ldr	r6, [pc, #100]	; (800c0b4 <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800c050:	2500      	movs	r5, #0
 800c052:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c056:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c05a:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800c05c:	230c      	movs	r3, #12
 800c05e:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 800c060:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 800c062:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800c064:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c066:	f7fb fb01 	bl	800766c <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c06a:	2201      	movs	r2, #1
 800c06c:	4631      	mov	r1, r6
 800c06e:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800c070:	4c11      	ldr	r4, [pc, #68]	; (800c0b8 <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c072:	f7fb f867 	bl	8007144 <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 800c076:	4b11      	ldr	r3, [pc, #68]	; (800c0bc <CDC_Itf_Init+0x74>)
 800c078:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 800c07a:	f241 3387 	movw	r3, #4999	; 0x1387
 800c07e:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800c080:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 800c082:	2353      	movs	r3, #83	; 0x53
 800c084:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 800c086:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c088:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800c08a:	f7fb f825 	bl	80070d8 <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800c08e:	4620      	mov	r0, r4
 800c090:	f7fa ffb4 	bl	8006ffc <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 800c096:	4a0b      	ldr	r2, [pc, #44]	; (800c0c4 <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c098:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 800c09c:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 800c09e:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0a2:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 800c0a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	40013800 	.word	0x40013800
 800c0b0:	200097d4 	.word	0x200097d4
 800c0b4:	200098ad 	.word	0x200098ad
 800c0b8:	2000acac 	.word	0x2000acac
 800c0bc:	40000400 	.word	0x40000400
 800c0c0:	20008a44 	.word	0x20008a44
 800c0c4:	2000a4a0 	.word	0x2000a4a0

0800c0c8 <STORAGE_IsReady>:
{
 800c0c8:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c0ca:	f7fc fbb9 	bl	8008840 <BSP_SD_IsDetected>
 800c0ce:	4c0b      	ldr	r4, [pc, #44]	; (800c0fc <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 800c0d0:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c0d4:	b160      	cbz	r0, 800c0f0 <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	da03      	bge.n	800c0e2 <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 800c0da:	f7fc fc61 	bl	80089a0 <BSP_SD_Init>
      prev_status = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 800c0e2:	f7fc fbc7 	bl	8008874 <BSP_SD_GetStatus>
 800c0e6:	3000      	adds	r0, #0
 800c0e8:	bf18      	it	ne
 800c0ea:	2001      	movne	r0, #1
 800c0ec:	4240      	negs	r0, r0
 800c0ee:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 800c0f0:	b90b      	cbnz	r3, 800c0f6 <STORAGE_IsReady+0x2e>
    prev_status = -1;
 800c0f2:	23ff      	movs	r3, #255	; 0xff
 800c0f4:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c0fa:	bd10      	pop	{r4, pc}
 800c0fc:	20000935 	.word	0x20000935

0800c100 <CDC_Itf_Control>:
  switch (cmd)
 800c100:	2820      	cmp	r0, #32
{
 800c102:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 800c104:	d003      	beq.n	800c10e <CDC_Itf_Control+0xe>
 800c106:	2821      	cmp	r0, #33	; 0x21
 800c108:	d048      	beq.n	800c19c <CDC_Itf_Control+0x9c>
}
 800c10a:	2000      	movs	r0, #0
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c10e:	4c2c      	ldr	r4, [pc, #176]	; (800c1c0 <CDC_Itf_Control+0xc0>)
 800c110:	680b      	ldr	r3, [r1, #0]
 800c112:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c114:	4d2b      	ldr	r5, [pc, #172]	; (800c1c4 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 800c116:	790b      	ldrb	r3, [r1, #4]
 800c118:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 800c11a:	794b      	ldrb	r3, [r1, #5]
 800c11c:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c11e:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 800c120:	798b      	ldrb	r3, [r1, #6]
 800c122:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c124:	f7fa fff4 	bl	8007110 <HAL_UART_DeInit>
  switch (LineCoding.format)
 800c128:	7923      	ldrb	r3, [r4, #4]
 800c12a:	4628      	mov	r0, r5
 800c12c:	b12b      	cbz	r3, 800c13a <CDC_Itf_Control+0x3a>
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d001      	beq.n	800c136 <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 800c132:	2300      	movs	r3, #0
 800c134:	e001      	b.n	800c13a <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 800c136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 800c13a:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 800c13c:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 800c13e:	2a01      	cmp	r2, #1
 800c140:	d020      	beq.n	800c184 <CDC_Itf_Control+0x84>
 800c142:	f04f 0300 	mov.w	r3, #0
 800c146:	d301      	bcc.n	800c14c <CDC_Itf_Control+0x4c>
 800c148:	2a02      	cmp	r2, #2
 800c14a:	d01e      	beq.n	800c18a <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 800c14c:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 800c14e:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 800c150:	2a07      	cmp	r2, #7
 800c152:	f04f 0300 	mov.w	r3, #0
 800c156:	d001      	beq.n	800c15c <CDC_Itf_Control+0x5c>
 800c158:	2a08      	cmp	r2, #8
 800c15a:	d019      	beq.n	800c190 <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800c15c:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800c162:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800c164:	2300      	movs	r3, #0
 800c166:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800c168:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800c16a:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c16c:	4815      	ldr	r0, [pc, #84]	; (800c1c4 <CDC_Itf_Control+0xc4>)
 800c16e:	f7fb fa7d 	bl	800766c <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <CDC_Itf_Control+0xc8>)
 800c174:	4915      	ldr	r1, [pc, #84]	; (800c1cc <CDC_Itf_Control+0xcc>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4812      	ldr	r0, [pc, #72]	; (800c1c4 <CDC_Itf_Control+0xc4>)
 800c17a:	2201      	movs	r2, #1
 800c17c:	4419      	add	r1, r3
 800c17e:	f7fa ffe1 	bl	8007144 <HAL_UART_Receive_IT>
 800c182:	e7c2      	b.n	800c10a <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 800c184:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c188:	e7e0      	b.n	800c14c <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 800c18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18e:	e7dd      	b.n	800c14c <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 800c190:	6903      	ldr	r3, [r0, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0e2      	beq.n	800c15c <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 800c196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c19a:	e7df      	b.n	800c15c <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800c19c:	4b08      	ldr	r3, [pc, #32]	; (800c1c0 <CDC_Itf_Control+0xc0>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	0a12      	lsrs	r2, r2, #8
 800c1a6:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800c1a8:	885a      	ldrh	r2, [r3, #2]
 800c1aa:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800c1ac:	78da      	ldrb	r2, [r3, #3]
 800c1ae:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800c1b0:	791a      	ldrb	r2, [r3, #4]
 800c1b2:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800c1b4:	795a      	ldrb	r2, [r3, #5]
 800c1b6:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 800c1b8:	799b      	ldrb	r3, [r3, #6]
 800c1ba:	718b      	strb	r3, [r1, #6]
    break;
 800c1bc:	e7a5      	b.n	800c10a <CDC_Itf_Control+0xa>
 800c1be:	bf00      	nop
 800c1c0:	20000170 	.word	0x20000170
 800c1c4:	200097d4 	.word	0x200097d4
 800c1c8:	20000930 	.word	0x20000930
 800c1cc:	200098ad 	.word	0x200098ad

0800c1d0 <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1d2:	2030      	movs	r0, #48	; 0x30
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	fa90 f0a0 	rbit	r0, r0
 800c1da:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 800c1dc:	fab0 f080 	clz	r0, r0
 800c1e0:	fa92 f2a2 	rbit	r2, r2
 800c1e4:	f003 0130 	and.w	r1, r3, #48	; 0x30
 800c1e8:	fab2 f282 	clz	r2, r2
 800c1ec:	f003 030f 	and.w	r3, r3, #15
 800c1f0:	fa21 f000 	lsr.w	r0, r1, r0
 800c1f4:	40d3      	lsrs	r3, r2
}
 800c1f6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c1fa:	4770      	bx	lr
 800c1fc:	40002800 	.word	0x40002800

0800c200 <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 800c202:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	fa90 f0a0 	rbit	r0, r0
 800c20c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 800c210:	fab0 f080 	clz	r0, r0
 800c214:	fa92 f2a2 	rbit	r2, r2
 800c218:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 800c21c:	fab2 f282 	clz	r2, r2
 800c220:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c224:	fa21 f000 	lsr.w	r0, r1, r0
 800c228:	40d3      	lsrs	r3, r2
}
 800c22a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c22e:	4770      	bx	lr
 800c230:	40002800 	.word	0x40002800

0800c234 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 800c236:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	fa90 f0a0 	rbit	r0, r0
 800c240:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 800c244:	fab0 f080 	clz	r0, r0
 800c248:	fa92 f2a2 	rbit	r2, r2
 800c24c:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 800c250:	fab2 f282 	clz	r2, r2
 800c254:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c258:	fa21 f000 	lsr.w	r0, r1, r0
 800c25c:	40d3      	lsrs	r3, r2
}
 800c25e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c262:	4770      	bx	lr
 800c264:	40002800 	.word	0x40002800

0800c268 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 800c26a:	2070      	movs	r0, #112	; 0x70
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	fa90 f0a0 	rbit	r0, r0
 800c272:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 800c274:	fab0 f080 	clz	r0, r0
 800c278:	fa92 f2a2 	rbit	r2, r2
 800c27c:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800c280:	fab2 f282 	clz	r2, r2
 800c284:	f003 030f 	and.w	r3, r3, #15
 800c288:	fa21 f000 	lsr.w	r0, r1, r0
 800c28c:	40d3      	lsrs	r3, r2
}
 800c28e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c292:	4770      	bx	lr
 800c294:	40002800 	.word	0x40002800

0800c298 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800c298:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 800c29a:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	fa90 f0a0 	rbit	r0, r0
 800c2a4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 800c2a8:	fab0 f080 	clz	r0, r0
 800c2ac:	fa92 f2a2 	rbit	r2, r2
 800c2b0:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 800c2b4:	fab2 f282 	clz	r2, r2
 800c2b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c2bc:	fa21 f000 	lsr.w	r0, r1, r0
 800c2c0:	40d3      	lsrs	r3, r2
}
 800c2c2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c2c6:	4770      	bx	lr
 800c2c8:	40002800 	.word	0x40002800

0800c2cc <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800c2cc:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 800c2ce:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	fa90 f0a0 	rbit	r0, r0
 800c2d8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 800c2dc:	fab0 f080 	clz	r0, r0
 800c2e0:	fa92 f2a2 	rbit	r2, r2
 800c2e4:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 800c2e8:	fab2 f282 	clz	r2, r2
 800c2ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c2f0:	fa21 f000 	lsr.w	r0, r1, r0
 800c2f4:	40d3      	lsrs	r3, r2
}
 800c2f6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c2fa:	4770      	bx	lr
 800c2fc:	40002800 	.word	0x40002800

0800c300 <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 800c300:	b119      	cbz	r1, 800c30a <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 800c302:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 800c306:	2000      	movs	r0, #0
 800c308:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800c30a:	2002      	movs	r0, #2
}
 800c30c:	4770      	bx	lr

0800c30e <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c30e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800c312:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 800c314:	b172      	cbz	r2, 800c334 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 800c316:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800c31a:	2301      	movs	r3, #1
 800c31c:	b964      	cbnz	r4, 800c338 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 800c31e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 800c322:	2183      	movs	r1, #131	; 0x83
 800c324:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800c328:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800c32c:	f7ff fc5f 	bl	800bbee <USBD_LL_Transmit>
      return USBD_OK;
 800c330:	4620      	mov	r0, r4
 800c332:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c334:	2002      	movs	r0, #2
 800c336:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800c338:	4618      	mov	r0, r3
}
 800c33a:	bd10      	pop	{r4, pc}

0800c33c <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c33c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800c340:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 800c342:	b162      	cbz	r2, 800c35e <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c344:	7c04      	ldrb	r4, [r0, #16]
 800c346:	b944      	cbnz	r4, 800c35a <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800c348:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 800c34c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c350:	2103      	movs	r1, #3
 800c352:	f7ff fc53 	bl	800bbfc <USBD_LL_PrepareReceive>
    return USBD_OK;
 800c356:	2000      	movs	r0, #0
 800c358:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	e7f6      	b.n	800c34c <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 800c35e:	2002      	movs	r0, #2
}
 800c360:	bd10      	pop	{r4, pc}
	...

0800c364 <CDC_Itf_Receive>:
{
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 800c368:	4dc1      	ldr	r5, [pc, #772]	; (800c670 <CDC_Itf_Receive+0x30c>)
 800c36a:	4cc2      	ldr	r4, [pc, #776]	; (800c674 <CDC_Itf_Receive+0x310>)
 800c36c:	2300      	movs	r3, #0
{
 800c36e:	b087      	sub	sp, #28
BuffLength=0;
 800c370:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 800c372:	4602      	mov	r2, r0
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	1a13      	subs	r3, r2, r0
 800c378:	429e      	cmp	r6, r3
 800c37a:	f200 8089 	bhi.w	800c490 <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 800c37e:	7823      	ldrb	r3, [r4, #0]
 800c380:	2b67      	cmp	r3, #103	; 0x67
 800c382:	f040 808c 	bne.w	800c49e <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c386:	f894 c002 	ldrb.w	ip, [r4, #2]
 800c38a:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c38c:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c390:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c392:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c394:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c396:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c39a:	f8df b324 	ldr.w	fp, [pc, #804]	; 800c6c0 <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c39e:	4fb6      	ldr	r7, [pc, #728]	; (800c678 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c3a0:	4eb6      	ldr	r6, [pc, #728]	; (800c67c <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c3a2:	f8df 9320 	ldr.w	r9, [pc, #800]	; 800c6c4 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c3a6:	f8df 8320 	ldr.w	r8, [pc, #800]	; 800c6c8 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c3aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c3ae:	3b30      	subs	r3, #48	; 0x30
 800c3b0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800c3b4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c3b8:	79e3      	ldrb	r3, [r4, #7]
 800c3ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c3be:	3b30      	subs	r3, #48	; 0x30
 800c3c0:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800c3c4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c3c8:	7aa3      	ldrb	r3, [r4, #10]
 800c3ca:	3b30      	subs	r3, #48	; 0x30
 800c3cc:	3a30      	subs	r2, #48	; 0x30
 800c3ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c3d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c3d6:	7ba2      	ldrb	r2, [r4, #14]
 800c3d8:	3a30      	subs	r2, #48	; 0x30
 800c3da:	3930      	subs	r1, #48	; 0x30
 800c3dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c3e0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c3e4:	7ca1      	ldrb	r1, [r4, #18]
 800c3e6:	3930      	subs	r1, #48	; 0x30
 800c3e8:	3830      	subs	r0, #48	; 0x30
 800c3ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c3ee:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c3f2:	7de0      	ldrb	r0, [r4, #23]
 800c3f4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 800c3f8:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800c3fc:	3830      	subs	r0, #48	; 0x30
 800c3fe:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800c402:	f8df a294 	ldr.w	sl, [pc, #660]	; 800c698 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c406:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c40a:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c40e:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c410:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c412:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c414:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c416:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c41a:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c41e:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c422:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c426:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c42a:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 800c42e:	f8cd c004 	str.w	ip, [sp, #4]
 800c432:	f8cd e000 	str.w	lr, [sp]
 800c436:	f7fd fe6d 	bl	800a114 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 800c43a:	f89a 2000 	ldrb.w	r2, [sl]
 800c43e:	f89b 3000 	ldrb.w	r3, [fp]
 800c442:	9204      	str	r2, [sp, #16]
 800c444:	f899 2000 	ldrb.w	r2, [r9]
 800c448:	9203      	str	r2, [sp, #12]
 800c44a:	f898 2000 	ldrb.w	r2, [r8]
 800c44e:	9202      	str	r2, [sp, #8]
 800c450:	783a      	ldrb	r2, [r7, #0]
 800c452:	f8df b250 	ldr.w	fp, [pc, #592]	; 800c6a4 <CDC_Itf_Receive+0x340>
 800c456:	9201      	str	r2, [sp, #4]
 800c458:	7832      	ldrb	r2, [r6, #0]
 800c45a:	9200      	str	r2, [sp, #0]
 800c45c:	4988      	ldr	r1, [pc, #544]	; (800c680 <CDC_Itf_Receive+0x31c>)
 800c45e:	4a89      	ldr	r2, [pc, #548]	; (800c684 <CDC_Itf_Receive+0x320>)
 800c460:	4658      	mov	r0, fp
 800c462:	f000 faab 	bl	800c9bc <siprintf>
 800c466:	4a88      	ldr	r2, [pc, #544]	; (800c688 <CDC_Itf_Receive+0x324>)
 800c468:	4603      	mov	r3, r0
 800c46a:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c46c:	4887      	ldr	r0, [pc, #540]	; (800c68c <CDC_Itf_Receive+0x328>)
 800c46e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c478:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 800c47c:	f7ff ff47 	bl	800c30e <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 800c480:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 800c482:	4a83      	ldr	r2, [pc, #524]	; (800c690 <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 800c484:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 800c486:	2301      	movs	r3, #1
 800c488:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 800c48a:	4a82      	ldr	r2, [pc, #520]	; (800c694 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 800c48c:	6013      	str	r3, [r2, #0]
 800c48e:	e011      	b.n	800c4b4 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	f812 6b01 	ldrb.w	r6, [r2], #1
 800c496:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 800c498:	3301      	adds	r3, #1
 800c49a:	602b      	str	r3, [r5, #0]
 800c49c:	e76a      	b.n	800c374 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 800c49e:	2b6f      	cmp	r3, #111	; 0x6f
 800c4a0:	f04f 0600 	mov.w	r6, #0
 800c4a4:	d114      	bne.n	800c4d0 <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 800c4a6:	f7fc fcc5 	bl	8008e34 <RED_LED_OFF>
GREEN_LED_OFF();
 800c4aa:	f7fc fcc4 	bl	8008e36 <GREEN_LED_OFF>
BLUE_LED_OFF();
 800c4ae:	f7fc fc9d 	bl	8008dec <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 800c4b2:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 800c4b8:	496e      	ldr	r1, [pc, #440]	; (800c674 <CDC_Itf_Receive+0x310>)
 800c4ba:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	f040 8154 	bne.w	800c76a <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 800c4c2:	4872      	ldr	r0, [pc, #456]	; (800c68c <CDC_Itf_Receive+0x328>)
 800c4c4:	f7ff ff3a 	bl	800c33c <USBD_CDC_ReceivePacket>
}
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	b007      	add	sp, #28
 800c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 800c4d0:	2b42      	cmp	r3, #66	; 0x42
 800c4d2:	d102      	bne.n	800c4da <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 800c4d4:	f7fc fcbe 	bl	8008e54 <BLUE_LED_ONLY>
 800c4d8:	e7eb      	b.n	800c4b2 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 800c4da:	2b62      	cmp	r3, #98	; 0x62
 800c4dc:	d104      	bne.n	800c4e8 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 800c4de:	f7fc fc8d 	bl	8008dfc <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	7023      	strb	r3, [r4, #0]
 800c4e6:	e7e5      	b.n	800c4b4 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 800c4e8:	2b45      	cmp	r3, #69	; 0x45
 800c4ea:	d102      	bne.n	800c4f2 <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 800c4ec:	f7fc fc94 	bl	8008e18 <GREEN_LED_ONLY>
 800c4f0:	e7df      	b.n	800c4b2 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 800c4f2:	2b65      	cmp	r3, #101	; 0x65
 800c4f4:	d0f3      	beq.n	800c4de <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 800c4f6:	2b46      	cmp	r3, #70	; 0x46
 800c4f8:	d102      	bne.n	800c500 <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 800c4fa:	f7fc fc9d 	bl	8008e38 <RED_LED_ONLY>
 800c4fe:	e7d8      	b.n	800c4b2 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 800c500:	2b66      	cmp	r3, #102	; 0x66
 800c502:	d0ec      	beq.n	800c4de <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 800c504:	2b6c      	cmp	r3, #108	; 0x6c
 800c506:	d102      	bne.n	800c50e <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 800c508:	f7fc fcce 	bl	8008ea8 <ALL_LED_ON>
 800c50c:	e7e9      	b.n	800c4e2 <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 800c50e:	2b72      	cmp	r3, #114	; 0x72
 800c510:	f040 8086 	bne.w	800c620 <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800c514:	f7ff feda 	bl	800c2cc <LL_RTC_TIME_GetHour.constprop.7>
 800c518:	4606      	mov	r6, r0
 800c51a:	f7ff fed7 	bl	800c2cc <LL_RTC_TIME_GetHour.constprop.7>
 800c51e:	f3c6 1303 	ubfx	r3, r6, #4, #4
 800c522:	f8df a19c 	ldr.w	sl, [pc, #412]	; 800c6c0 <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800c526:	4e55      	ldr	r6, [pc, #340]	; (800c67c <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800c528:	f000 000f 	and.w	r0, r0, #15
 800c52c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c530:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c534:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800c538:	f7ff feae 	bl	800c298 <LL_RTC_TIME_GetMinute.constprop.6>
 800c53c:	4607      	mov	r7, r0
 800c53e:	f7ff feab 	bl	800c298 <LL_RTC_TIME_GetMinute.constprop.6>
 800c542:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800c546:	f000 000f 	and.w	r0, r0, #15
 800c54a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c54e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c552:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800c554:	f7ff fe88 	bl	800c268 <LL_RTC_TIME_GetSecond.constprop.5>
 800c558:	4680      	mov	r8, r0
 800c55a:	f7ff fe85 	bl	800c268 <LL_RTC_TIME_GetSecond.constprop.5>
 800c55e:	f3c8 1303 	ubfx	r3, r8, #4, #4
 800c562:	4f45      	ldr	r7, [pc, #276]	; (800c678 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 800c564:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800c6c8 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800c568:	f000 000f 	and.w	r0, r0, #15
 800c56c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c570:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c574:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 800c576:	f7ff fe43 	bl	800c200 <LL_RTC_DATE_GetMonth.constprop.3>
 800c57a:	4681      	mov	r9, r0
 800c57c:	f7ff fe40 	bl	800c200 <LL_RTC_DATE_GetMonth.constprop.3>
 800c580:	f3c9 1303 	ubfx	r3, r9, #4, #4
 800c584:	f000 000f 	and.w	r0, r0, #15
 800c588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c58c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c590:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800c594:	f7ff fe1c 	bl	800c1d0 <LL_RTC_DATE_GetDay.constprop.2>
 800c598:	4683      	mov	fp, r0
 800c59a:	f7ff fe19 	bl	800c1d0 <LL_RTC_DATE_GetDay.constprop.2>
 800c59e:	f3cb 1303 	ubfx	r3, fp, #4, #4
 800c5a2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800c6c4 <CDC_Itf_Receive+0x360>
 800c5a6:	f000 000f 	and.w	r0, r0, #15
 800c5aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c5ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c5b2:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800c5b6:	f7ff fe3d 	bl	800c234 <LL_RTC_DATE_GetYear.constprop.4>
 800c5ba:	4683      	mov	fp, r0
 800c5bc:	f7ff fe3a 	bl	800c234 <LL_RTC_DATE_GetYear.constprop.4>
 800c5c0:	f3cb 1303 	ubfx	r3, fp, #4, #4
 800c5c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c5c8:	f000 000f 	and.w	r0, r0, #15
 800c5cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c5d0:	4b31      	ldr	r3, [pc, #196]	; (800c698 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800c5d2:	4932      	ldr	r1, [pc, #200]	; (800c69c <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800c5d4:	b2c0      	uxtb	r0, r0
 800c5d6:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 800c5d8:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <CDC_Itf_Receive+0x33c>)
 800c5da:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 800c5dc:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800c5de:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e2:	9004      	str	r0, [sp, #16]
 800c5e4:	f899 2000 	ldrb.w	r2, [r9]
 800c5e8:	9203      	str	r2, [sp, #12]
 800c5ea:	f898 2000 	ldrb.w	r2, [r8]
 800c5ee:	9202      	str	r2, [sp, #8]
 800c5f0:	783a      	ldrb	r2, [r7, #0]
 800c5f2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800c6a4 <CDC_Itf_Receive+0x340>
 800c5f6:	9201      	str	r2, [sp, #4]
 800c5f8:	7832      	ldrb	r2, [r6, #0]
 800c5fa:	9200      	str	r2, [sp, #0]
 800c5fc:	4650      	mov	r0, sl
 800c5fe:	4a21      	ldr	r2, [pc, #132]	; (800c684 <CDC_Itf_Receive+0x320>)
 800c600:	f000 f9dc 	bl	800c9bc <siprintf>
 800c604:	4a20      	ldr	r2, [pc, #128]	; (800c688 <CDC_Itf_Receive+0x324>)
 800c606:	4603      	mov	r3, r0
 800c608:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c60a:	4820      	ldr	r0, [pc, #128]	; (800c68c <CDC_Itf_Receive+0x328>)
 800c60c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c610:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 800c612:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 800c616:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800c61a:	f7ff fe78 	bl	800c30e <USBD_CDC_TransmitPacket>
 800c61e:	e760      	b.n	800c4e2 <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 800c620:	2b55      	cmp	r3, #85	; 0x55
 800c622:	d153      	bne.n	800c6cc <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 800c624:	4e1f      	ldr	r6, [pc, #124]	; (800c6a4 <CDC_Itf_Receive+0x340>)
 800c626:	4920      	ldr	r1, [pc, #128]	; (800c6a8 <CDC_Itf_Receive+0x344>)
 800c628:	4a16      	ldr	r2, [pc, #88]	; (800c684 <CDC_Itf_Receive+0x320>)
 800c62a:	4630      	mov	r0, r6
 800c62c:	f000 f9c6 	bl	800c9bc <siprintf>
 800c630:	4a15      	ldr	r2, [pc, #84]	; (800c688 <CDC_Itf_Receive+0x324>)
 800c632:	4603      	mov	r3, r0
 800c634:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c636:	4815      	ldr	r0, [pc, #84]	; (800c68c <CDC_Itf_Receive+0x328>)
 800c638:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c642:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800c646:	f7ff fe62 	bl	800c30e <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 800c64a:	4911      	ldr	r1, [pc, #68]	; (800c690 <CDC_Itf_Receive+0x32c>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 800c650:	4916      	ldr	r1, [pc, #88]	; (800c6ac <CDC_Itf_Receive+0x348>)
 800c652:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 800c654:	4916      	ldr	r1, [pc, #88]	; (800c6b0 <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800c656:	2300      	movs	r3, #0
	EnterReset_Create=0;
 800c658:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 800c65a:	4916      	ldr	r1, [pc, #88]	; (800c6b4 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800c65c:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 800c65e:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 800c660:	490c      	ldr	r1, [pc, #48]	; (800c694 <CDC_Itf_Receive+0x330>)
 800c662:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 800c664:	4914      	ldr	r1, [pc, #80]	; (800c6b8 <CDC_Itf_Receive+0x354>)
 800c666:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 800c668:	4a14      	ldr	r2, [pc, #80]	; (800c6bc <CDC_Itf_Receive+0x358>)
 800c66a:	7013      	strb	r3, [r2, #0]
 800c66c:	e722      	b.n	800c4b4 <CDC_Itf_Receive+0x150>
 800c66e:	bf00      	nop
 800c670:	200097d0 	.word	0x200097d0
 800c674:	2000ace8 	.word	0x2000ace8
 800c678:	2000aca0 	.word	0x2000aca0
 800c67c:	2000aca1 	.word	0x2000aca1
 800c680:	0800eeb6 	.word	0x0800eeb6
 800c684:	0002c314 	.word	0x0002c314
 800c688:	2000aca2 	.word	0x2000aca2
 800c68c:	20008a44 	.word	0x20008a44
 800c690:	200092f4 	.word	0x200092f4
 800c694:	20009844 	.word	0x20009844
 800c698:	200098ac 	.word	0x200098ac
 800c69c:	0800eef2 	.word	0x0800eef2
 800c6a0:	40002800 	.word	0x40002800
 800c6a4:	2000a0b8 	.word	0x2000a0b8
 800c6a8:	0800ef37 	.word	0x0800ef37
 800c6ac:	200097c8 	.word	0x200097c8
 800c6b0:	2000a0b4 	.word	0x2000a0b4
 800c6b4:	2000aca4 	.word	0x2000aca4
 800c6b8:	20008dd1 	.word	0x20008dd1
 800c6bc:	20008a35 	.word	0x20008a35
 800c6c0:	200097cc 	.word	0x200097cc
 800c6c4:	2000aca8 	.word	0x2000aca8
 800c6c8:	200097c4 	.word	0x200097c4
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 800c6cc:	2b5a      	cmp	r3, #90	; 0x5a
 800c6ce:	d118      	bne.n	800c702 <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 800c6d0:	4e27      	ldr	r6, [pc, #156]	; (800c770 <CDC_Itf_Receive+0x40c>)
 800c6d2:	4a28      	ldr	r2, [pc, #160]	; (800c774 <CDC_Itf_Receive+0x410>)
 800c6d4:	4928      	ldr	r1, [pc, #160]	; (800c778 <CDC_Itf_Receive+0x414>)
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f000 f970 	bl	800c9bc <siprintf>
 800c6dc:	4a27      	ldr	r2, [pc, #156]	; (800c77c <CDC_Itf_Receive+0x418>)
 800c6de:	4603      	mov	r3, r0
 800c6e0:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c6e2:	4827      	ldr	r0, [pc, #156]	; (800c780 <CDC_Itf_Receive+0x41c>)
 800c6e4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c6ee:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800c6f2:	f7ff fe0c 	bl	800c30e <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 800c6fa:	4b22      	ldr	r3, [pc, #136]	; (800c784 <CDC_Itf_Receive+0x420>)
 800c6fc:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	e6d8      	b.n	800c4b4 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 800c702:	2b58      	cmp	r3, #88	; 0x58
 800c704:	d117      	bne.n	800c736 <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 800c706:	4e1a      	ldr	r6, [pc, #104]	; (800c770 <CDC_Itf_Receive+0x40c>)
 800c708:	4a1a      	ldr	r2, [pc, #104]	; (800c774 <CDC_Itf_Receive+0x410>)
 800c70a:	491f      	ldr	r1, [pc, #124]	; (800c788 <CDC_Itf_Receive+0x424>)
 800c70c:	4630      	mov	r0, r6
 800c70e:	f000 f955 	bl	800c9bc <siprintf>
 800c712:	4a1a      	ldr	r2, [pc, #104]	; (800c77c <CDC_Itf_Receive+0x418>)
 800c714:	4603      	mov	r3, r0
 800c716:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c718:	4819      	ldr	r0, [pc, #100]	; (800c780 <CDC_Itf_Receive+0x41c>)
 800c71a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c724:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800c728:	f7ff fdf1 	bl	800c30e <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800c72c:	2300      	movs	r3, #0
 800c72e:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 800c730:	2201      	movs	r2, #1
 800c732:	4b16      	ldr	r3, [pc, #88]	; (800c78c <CDC_Itf_Receive+0x428>)
 800c734:	e7e3      	b.n	800c6fe <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 800c736:	2b59      	cmp	r3, #89	; 0x59
 800c738:	f47f aebc 	bne.w	800c4b4 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 800c73c:	4e0c      	ldr	r6, [pc, #48]	; (800c770 <CDC_Itf_Receive+0x40c>)
 800c73e:	4a0d      	ldr	r2, [pc, #52]	; (800c774 <CDC_Itf_Receive+0x410>)
 800c740:	4913      	ldr	r1, [pc, #76]	; (800c790 <CDC_Itf_Receive+0x42c>)
 800c742:	4630      	mov	r0, r6
 800c744:	f000 f93a 	bl	800c9bc <siprintf>
 800c748:	4a0c      	ldr	r2, [pc, #48]	; (800c77c <CDC_Itf_Receive+0x418>)
 800c74a:	4603      	mov	r3, r0
 800c74c:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c74e:	480c      	ldr	r0, [pc, #48]	; (800c780 <CDC_Itf_Receive+0x41c>)
 800c750:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c754:	b2db      	uxtb	r3, r3
 800c756:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c75a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800c75e:	f7ff fdd6 	bl	800c30e <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800c762:	2300      	movs	r3, #0
 800c764:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 800c766:	4a0b      	ldr	r2, [pc, #44]	; (800c794 <CDC_Itf_Receive+0x430>)
 800c768:	e690      	b.n	800c48c <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 800c76a:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800c76c:	3301      	adds	r3, #1
 800c76e:	e6a5      	b.n	800c4bc <CDC_Itf_Receive+0x158>
 800c770:	2000a0b8 	.word	0x2000a0b8
 800c774:	0002c314 	.word	0x0002c314
 800c778:	0800ef7c 	.word	0x0800ef7c
 800c77c:	2000aca2 	.word	0x2000aca2
 800c780:	20008a44 	.word	0x20008a44
 800c784:	2000a0b4 	.word	0x2000a0b4
 800c788:	0800efba 	.word	0x0800efba
 800c78c:	2000aca4 	.word	0x2000aca4
 800c790:	0800f002 	.word	0x0800f002
 800c794:	20017cf0 	.word	0x20017cf0

0800c798 <__libc_init_array>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	4e0d      	ldr	r6, [pc, #52]	; (800c7d0 <__libc_init_array+0x38>)
 800c79c:	4c0d      	ldr	r4, [pc, #52]	; (800c7d4 <__libc_init_array+0x3c>)
 800c79e:	1ba4      	subs	r4, r4, r6
 800c7a0:	10a4      	asrs	r4, r4, #2
 800c7a2:	2500      	movs	r5, #0
 800c7a4:	42a5      	cmp	r5, r4
 800c7a6:	d109      	bne.n	800c7bc <__libc_init_array+0x24>
 800c7a8:	4e0b      	ldr	r6, [pc, #44]	; (800c7d8 <__libc_init_array+0x40>)
 800c7aa:	4c0c      	ldr	r4, [pc, #48]	; (800c7dc <__libc_init_array+0x44>)
 800c7ac:	f001 fc3c 	bl	800e028 <_init>
 800c7b0:	1ba4      	subs	r4, r4, r6
 800c7b2:	10a4      	asrs	r4, r4, #2
 800c7b4:	2500      	movs	r5, #0
 800c7b6:	42a5      	cmp	r5, r4
 800c7b8:	d105      	bne.n	800c7c6 <__libc_init_array+0x2e>
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7c0:	4798      	blx	r3
 800c7c2:	3501      	adds	r5, #1
 800c7c4:	e7ee      	b.n	800c7a4 <__libc_init_array+0xc>
 800c7c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7ca:	4798      	blx	r3
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	e7f2      	b.n	800c7b6 <__libc_init_array+0x1e>
 800c7d0:	0800f238 	.word	0x0800f238
 800c7d4:	0800f238 	.word	0x0800f238
 800c7d8:	0800f238 	.word	0x0800f238
 800c7dc:	0800f23c 	.word	0x0800f23c

0800c7e0 <malloc>:
 800c7e0:	4b02      	ldr	r3, [pc, #8]	; (800c7ec <malloc+0xc>)
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	6818      	ldr	r0, [r3, #0]
 800c7e6:	f000 b87b 	b.w	800c8e0 <_malloc_r>
 800c7ea:	bf00      	nop
 800c7ec:	200002dc 	.word	0x200002dc

0800c7f0 <free>:
 800c7f0:	4b02      	ldr	r3, [pc, #8]	; (800c7fc <free+0xc>)
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f000 b825 	b.w	800c844 <_free_r>
 800c7fa:	bf00      	nop
 800c7fc:	200002dc 	.word	0x200002dc

0800c800 <memcmp>:
 800c800:	b510      	push	{r4, lr}
 800c802:	3901      	subs	r1, #1
 800c804:	4402      	add	r2, r0
 800c806:	4290      	cmp	r0, r2
 800c808:	d101      	bne.n	800c80e <memcmp+0xe>
 800c80a:	2000      	movs	r0, #0
 800c80c:	bd10      	pop	{r4, pc}
 800c80e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c812:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c816:	42a3      	cmp	r3, r4
 800c818:	d0f5      	beq.n	800c806 <memcmp+0x6>
 800c81a:	1b18      	subs	r0, r3, r4
 800c81c:	bd10      	pop	{r4, pc}

0800c81e <memcpy>:
 800c81e:	b510      	push	{r4, lr}
 800c820:	1e43      	subs	r3, r0, #1
 800c822:	440a      	add	r2, r1
 800c824:	4291      	cmp	r1, r2
 800c826:	d100      	bne.n	800c82a <memcpy+0xc>
 800c828:	bd10      	pop	{r4, pc}
 800c82a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c82e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c832:	e7f7      	b.n	800c824 <memcpy+0x6>

0800c834 <memset>:
 800c834:	4402      	add	r2, r0
 800c836:	4603      	mov	r3, r0
 800c838:	4293      	cmp	r3, r2
 800c83a:	d100      	bne.n	800c83e <memset+0xa>
 800c83c:	4770      	bx	lr
 800c83e:	f803 1b01 	strb.w	r1, [r3], #1
 800c842:	e7f9      	b.n	800c838 <memset+0x4>

0800c844 <_free_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	4605      	mov	r5, r0
 800c848:	2900      	cmp	r1, #0
 800c84a:	d045      	beq.n	800c8d8 <_free_r+0x94>
 800c84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c850:	1f0c      	subs	r4, r1, #4
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfb8      	it	lt
 800c856:	18e4      	addlt	r4, r4, r3
 800c858:	f000 f923 	bl	800caa2 <__malloc_lock>
 800c85c:	4a1f      	ldr	r2, [pc, #124]	; (800c8dc <_free_r+0x98>)
 800c85e:	6813      	ldr	r3, [r2, #0]
 800c860:	4610      	mov	r0, r2
 800c862:	b933      	cbnz	r3, 800c872 <_free_r+0x2e>
 800c864:	6063      	str	r3, [r4, #4]
 800c866:	6014      	str	r4, [r2, #0]
 800c868:	4628      	mov	r0, r5
 800c86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c86e:	f000 b919 	b.w	800caa4 <__malloc_unlock>
 800c872:	42a3      	cmp	r3, r4
 800c874:	d90c      	bls.n	800c890 <_free_r+0x4c>
 800c876:	6821      	ldr	r1, [r4, #0]
 800c878:	1862      	adds	r2, r4, r1
 800c87a:	4293      	cmp	r3, r2
 800c87c:	bf04      	itt	eq
 800c87e:	681a      	ldreq	r2, [r3, #0]
 800c880:	685b      	ldreq	r3, [r3, #4]
 800c882:	6063      	str	r3, [r4, #4]
 800c884:	bf04      	itt	eq
 800c886:	1852      	addeq	r2, r2, r1
 800c888:	6022      	streq	r2, [r4, #0]
 800c88a:	6004      	str	r4, [r0, #0]
 800c88c:	e7ec      	b.n	800c868 <_free_r+0x24>
 800c88e:	4613      	mov	r3, r2
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	b10a      	cbz	r2, 800c898 <_free_r+0x54>
 800c894:	42a2      	cmp	r2, r4
 800c896:	d9fa      	bls.n	800c88e <_free_r+0x4a>
 800c898:	6819      	ldr	r1, [r3, #0]
 800c89a:	1858      	adds	r0, r3, r1
 800c89c:	42a0      	cmp	r0, r4
 800c89e:	d10b      	bne.n	800c8b8 <_free_r+0x74>
 800c8a0:	6820      	ldr	r0, [r4, #0]
 800c8a2:	4401      	add	r1, r0
 800c8a4:	1858      	adds	r0, r3, r1
 800c8a6:	4282      	cmp	r2, r0
 800c8a8:	6019      	str	r1, [r3, #0]
 800c8aa:	d1dd      	bne.n	800c868 <_free_r+0x24>
 800c8ac:	6810      	ldr	r0, [r2, #0]
 800c8ae:	6852      	ldr	r2, [r2, #4]
 800c8b0:	605a      	str	r2, [r3, #4]
 800c8b2:	4401      	add	r1, r0
 800c8b4:	6019      	str	r1, [r3, #0]
 800c8b6:	e7d7      	b.n	800c868 <_free_r+0x24>
 800c8b8:	d902      	bls.n	800c8c0 <_free_r+0x7c>
 800c8ba:	230c      	movs	r3, #12
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	e7d3      	b.n	800c868 <_free_r+0x24>
 800c8c0:	6820      	ldr	r0, [r4, #0]
 800c8c2:	1821      	adds	r1, r4, r0
 800c8c4:	428a      	cmp	r2, r1
 800c8c6:	bf04      	itt	eq
 800c8c8:	6811      	ldreq	r1, [r2, #0]
 800c8ca:	6852      	ldreq	r2, [r2, #4]
 800c8cc:	6062      	str	r2, [r4, #4]
 800c8ce:	bf04      	itt	eq
 800c8d0:	1809      	addeq	r1, r1, r0
 800c8d2:	6021      	streq	r1, [r4, #0]
 800c8d4:	605c      	str	r4, [r3, #4]
 800c8d6:	e7c7      	b.n	800c868 <_free_r+0x24>
 800c8d8:	bd38      	pop	{r3, r4, r5, pc}
 800c8da:	bf00      	nop
 800c8dc:	20000938 	.word	0x20000938

0800c8e0 <_malloc_r>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	1ccd      	adds	r5, r1, #3
 800c8e4:	f025 0503 	bic.w	r5, r5, #3
 800c8e8:	3508      	adds	r5, #8
 800c8ea:	2d0c      	cmp	r5, #12
 800c8ec:	bf38      	it	cc
 800c8ee:	250c      	movcc	r5, #12
 800c8f0:	2d00      	cmp	r5, #0
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	db01      	blt.n	800c8fa <_malloc_r+0x1a>
 800c8f6:	42a9      	cmp	r1, r5
 800c8f8:	d903      	bls.n	800c902 <_malloc_r+0x22>
 800c8fa:	230c      	movs	r3, #12
 800c8fc:	6033      	str	r3, [r6, #0]
 800c8fe:	2000      	movs	r0, #0
 800c900:	bd70      	pop	{r4, r5, r6, pc}
 800c902:	f000 f8ce 	bl	800caa2 <__malloc_lock>
 800c906:	4a23      	ldr	r2, [pc, #140]	; (800c994 <_malloc_r+0xb4>)
 800c908:	6814      	ldr	r4, [r2, #0]
 800c90a:	4621      	mov	r1, r4
 800c90c:	b991      	cbnz	r1, 800c934 <_malloc_r+0x54>
 800c90e:	4c22      	ldr	r4, [pc, #136]	; (800c998 <_malloc_r+0xb8>)
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	b91b      	cbnz	r3, 800c91c <_malloc_r+0x3c>
 800c914:	4630      	mov	r0, r6
 800c916:	f000 f841 	bl	800c99c <_sbrk_r>
 800c91a:	6020      	str	r0, [r4, #0]
 800c91c:	4629      	mov	r1, r5
 800c91e:	4630      	mov	r0, r6
 800c920:	f000 f83c 	bl	800c99c <_sbrk_r>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d126      	bne.n	800c976 <_malloc_r+0x96>
 800c928:	230c      	movs	r3, #12
 800c92a:	6033      	str	r3, [r6, #0]
 800c92c:	4630      	mov	r0, r6
 800c92e:	f000 f8b9 	bl	800caa4 <__malloc_unlock>
 800c932:	e7e4      	b.n	800c8fe <_malloc_r+0x1e>
 800c934:	680b      	ldr	r3, [r1, #0]
 800c936:	1b5b      	subs	r3, r3, r5
 800c938:	d41a      	bmi.n	800c970 <_malloc_r+0x90>
 800c93a:	2b0b      	cmp	r3, #11
 800c93c:	d90f      	bls.n	800c95e <_malloc_r+0x7e>
 800c93e:	600b      	str	r3, [r1, #0]
 800c940:	50cd      	str	r5, [r1, r3]
 800c942:	18cc      	adds	r4, r1, r3
 800c944:	4630      	mov	r0, r6
 800c946:	f000 f8ad 	bl	800caa4 <__malloc_unlock>
 800c94a:	f104 000b 	add.w	r0, r4, #11
 800c94e:	1d23      	adds	r3, r4, #4
 800c950:	f020 0007 	bic.w	r0, r0, #7
 800c954:	1ac3      	subs	r3, r0, r3
 800c956:	d01b      	beq.n	800c990 <_malloc_r+0xb0>
 800c958:	425a      	negs	r2, r3
 800c95a:	50e2      	str	r2, [r4, r3]
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	428c      	cmp	r4, r1
 800c960:	bf0d      	iteet	eq
 800c962:	6863      	ldreq	r3, [r4, #4]
 800c964:	684b      	ldrne	r3, [r1, #4]
 800c966:	6063      	strne	r3, [r4, #4]
 800c968:	6013      	streq	r3, [r2, #0]
 800c96a:	bf18      	it	ne
 800c96c:	460c      	movne	r4, r1
 800c96e:	e7e9      	b.n	800c944 <_malloc_r+0x64>
 800c970:	460c      	mov	r4, r1
 800c972:	6849      	ldr	r1, [r1, #4]
 800c974:	e7ca      	b.n	800c90c <_malloc_r+0x2c>
 800c976:	1cc4      	adds	r4, r0, #3
 800c978:	f024 0403 	bic.w	r4, r4, #3
 800c97c:	42a0      	cmp	r0, r4
 800c97e:	d005      	beq.n	800c98c <_malloc_r+0xac>
 800c980:	1a21      	subs	r1, r4, r0
 800c982:	4630      	mov	r0, r6
 800c984:	f000 f80a 	bl	800c99c <_sbrk_r>
 800c988:	3001      	adds	r0, #1
 800c98a:	d0cd      	beq.n	800c928 <_malloc_r+0x48>
 800c98c:	6025      	str	r5, [r4, #0]
 800c98e:	e7d9      	b.n	800c944 <_malloc_r+0x64>
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	bf00      	nop
 800c994:	20000938 	.word	0x20000938
 800c998:	2000093c 	.word	0x2000093c

0800c99c <_sbrk_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4c06      	ldr	r4, [pc, #24]	; (800c9b8 <_sbrk_r+0x1c>)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	6023      	str	r3, [r4, #0]
 800c9a8:	f001 fb30 	bl	800e00c <_sbrk>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d102      	bne.n	800c9b6 <_sbrk_r+0x1a>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	b103      	cbz	r3, 800c9b6 <_sbrk_r+0x1a>
 800c9b4:	602b      	str	r3, [r5, #0]
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	2000b0d0 	.word	0x2000b0d0

0800c9bc <siprintf>:
 800c9bc:	b40e      	push	{r1, r2, r3}
 800c9be:	b500      	push	{lr}
 800c9c0:	b09c      	sub	sp, #112	; 0x70
 800c9c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c9c6:	ab1d      	add	r3, sp, #116	; 0x74
 800c9c8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c9cc:	9002      	str	r0, [sp, #8]
 800c9ce:	9006      	str	r0, [sp, #24]
 800c9d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9d4:	480a      	ldr	r0, [pc, #40]	; (800ca00 <siprintf+0x44>)
 800c9d6:	9104      	str	r1, [sp, #16]
 800c9d8:	9107      	str	r1, [sp, #28]
 800c9da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c9e6:	6800      	ldr	r0, [r0, #0]
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	a902      	add	r1, sp, #8
 800c9ec:	f000 f8b6 	bl	800cb5c <_svfiprintf_r>
 800c9f0:	9b02      	ldr	r3, [sp, #8]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	701a      	strb	r2, [r3, #0]
 800c9f6:	b01c      	add	sp, #112	; 0x70
 800c9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9fc:	b003      	add	sp, #12
 800c9fe:	4770      	bx	lr
 800ca00:	200002dc 	.word	0x200002dc

0800ca04 <siscanf>:
 800ca04:	b40e      	push	{r1, r2, r3}
 800ca06:	b530      	push	{r4, r5, lr}
 800ca08:	b09c      	sub	sp, #112	; 0x70
 800ca0a:	ac1f      	add	r4, sp, #124	; 0x7c
 800ca0c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ca10:	f854 5b04 	ldr.w	r5, [r4], #4
 800ca14:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ca18:	9002      	str	r0, [sp, #8]
 800ca1a:	9006      	str	r0, [sp, #24]
 800ca1c:	f7f3 fbd8 	bl	80001d0 <strlen>
 800ca20:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <siscanf+0x4c>)
 800ca22:	9003      	str	r0, [sp, #12]
 800ca24:	9007      	str	r0, [sp, #28]
 800ca26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca28:	480a      	ldr	r0, [pc, #40]	; (800ca54 <siscanf+0x50>)
 800ca2a:	9401      	str	r4, [sp, #4]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca30:	9314      	str	r3, [sp, #80]	; 0x50
 800ca32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca36:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4623      	mov	r3, r4
 800ca3e:	a902      	add	r1, sp, #8
 800ca40:	6800      	ldr	r0, [r0, #0]
 800ca42:	f000 f9d9 	bl	800cdf8 <__ssvfiscanf_r>
 800ca46:	b01c      	add	sp, #112	; 0x70
 800ca48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca4c:	b003      	add	sp, #12
 800ca4e:	4770      	bx	lr
 800ca50:	0800ca59 	.word	0x0800ca59
 800ca54:	200002dc 	.word	0x200002dc

0800ca58 <__seofread>:
 800ca58:	2000      	movs	r0, #0
 800ca5a:	4770      	bx	lr

0800ca5c <strcpy>:
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca62:	f803 2b01 	strb.w	r2, [r3], #1
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	d1f9      	bne.n	800ca5e <strcpy+0x2>
 800ca6a:	4770      	bx	lr

0800ca6c <strstr>:
 800ca6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca6e:	7803      	ldrb	r3, [r0, #0]
 800ca70:	b133      	cbz	r3, 800ca80 <strstr+0x14>
 800ca72:	4603      	mov	r3, r0
 800ca74:	4618      	mov	r0, r3
 800ca76:	1c5e      	adds	r6, r3, #1
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	b933      	cbnz	r3, 800ca8a <strstr+0x1e>
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca80:	780b      	ldrb	r3, [r1, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	bf18      	it	ne
 800ca86:	2000      	movne	r0, #0
 800ca88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca8a:	1e4d      	subs	r5, r1, #1
 800ca8c:	1e44      	subs	r4, r0, #1
 800ca8e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	d0f3      	beq.n	800ca7e <strstr+0x12>
 800ca96:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800ca9a:	4297      	cmp	r7, r2
 800ca9c:	4633      	mov	r3, r6
 800ca9e:	d0f6      	beq.n	800ca8e <strstr+0x22>
 800caa0:	e7e8      	b.n	800ca74 <strstr+0x8>

0800caa2 <__malloc_lock>:
 800caa2:	4770      	bx	lr

0800caa4 <__malloc_unlock>:
 800caa4:	4770      	bx	lr

0800caa6 <__ssputs_r>:
 800caa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caaa:	688e      	ldr	r6, [r1, #8]
 800caac:	429e      	cmp	r6, r3
 800caae:	4682      	mov	sl, r0
 800cab0:	460c      	mov	r4, r1
 800cab2:	4691      	mov	r9, r2
 800cab4:	4698      	mov	r8, r3
 800cab6:	d835      	bhi.n	800cb24 <__ssputs_r+0x7e>
 800cab8:	898a      	ldrh	r2, [r1, #12]
 800caba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cabe:	d031      	beq.n	800cb24 <__ssputs_r+0x7e>
 800cac0:	6825      	ldr	r5, [r4, #0]
 800cac2:	6909      	ldr	r1, [r1, #16]
 800cac4:	1a6f      	subs	r7, r5, r1
 800cac6:	6965      	ldr	r5, [r4, #20]
 800cac8:	2302      	movs	r3, #2
 800caca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cace:	fb95 f5f3 	sdiv	r5, r5, r3
 800cad2:	f108 0301 	add.w	r3, r8, #1
 800cad6:	443b      	add	r3, r7
 800cad8:	429d      	cmp	r5, r3
 800cada:	bf38      	it	cc
 800cadc:	461d      	movcc	r5, r3
 800cade:	0553      	lsls	r3, r2, #21
 800cae0:	d531      	bpl.n	800cb46 <__ssputs_r+0xa0>
 800cae2:	4629      	mov	r1, r5
 800cae4:	f7ff fefc 	bl	800c8e0 <_malloc_r>
 800cae8:	4606      	mov	r6, r0
 800caea:	b950      	cbnz	r0, 800cb02 <__ssputs_r+0x5c>
 800caec:	230c      	movs	r3, #12
 800caee:	f8ca 3000 	str.w	r3, [sl]
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	f04f 30ff 	mov.w	r0, #4294967295
 800cafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb02:	463a      	mov	r2, r7
 800cb04:	6921      	ldr	r1, [r4, #16]
 800cb06:	f7ff fe8a 	bl	800c81e <memcpy>
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	6126      	str	r6, [r4, #16]
 800cb18:	6165      	str	r5, [r4, #20]
 800cb1a:	443e      	add	r6, r7
 800cb1c:	1bed      	subs	r5, r5, r7
 800cb1e:	6026      	str	r6, [r4, #0]
 800cb20:	60a5      	str	r5, [r4, #8]
 800cb22:	4646      	mov	r6, r8
 800cb24:	4546      	cmp	r6, r8
 800cb26:	bf28      	it	cs
 800cb28:	4646      	movcs	r6, r8
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	6820      	ldr	r0, [r4, #0]
 800cb30:	f000 ff54 	bl	800d9dc <memmove>
 800cb34:	68a3      	ldr	r3, [r4, #8]
 800cb36:	1b9b      	subs	r3, r3, r6
 800cb38:	60a3      	str	r3, [r4, #8]
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	441e      	add	r6, r3
 800cb3e:	6026      	str	r6, [r4, #0]
 800cb40:	2000      	movs	r0, #0
 800cb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb46:	462a      	mov	r2, r5
 800cb48:	f000 ff62 	bl	800da10 <_realloc_r>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d1e1      	bne.n	800cb16 <__ssputs_r+0x70>
 800cb52:	6921      	ldr	r1, [r4, #16]
 800cb54:	4650      	mov	r0, sl
 800cb56:	f7ff fe75 	bl	800c844 <_free_r>
 800cb5a:	e7c7      	b.n	800caec <__ssputs_r+0x46>

0800cb5c <_svfiprintf_r>:
 800cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	b09d      	sub	sp, #116	; 0x74
 800cb62:	4680      	mov	r8, r0
 800cb64:	9303      	str	r3, [sp, #12]
 800cb66:	898b      	ldrh	r3, [r1, #12]
 800cb68:	061c      	lsls	r4, r3, #24
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	4616      	mov	r6, r2
 800cb6e:	d50f      	bpl.n	800cb90 <_svfiprintf_r+0x34>
 800cb70:	690b      	ldr	r3, [r1, #16]
 800cb72:	b96b      	cbnz	r3, 800cb90 <_svfiprintf_r+0x34>
 800cb74:	2140      	movs	r1, #64	; 0x40
 800cb76:	f7ff feb3 	bl	800c8e0 <_malloc_r>
 800cb7a:	6028      	str	r0, [r5, #0]
 800cb7c:	6128      	str	r0, [r5, #16]
 800cb7e:	b928      	cbnz	r0, 800cb8c <_svfiprintf_r+0x30>
 800cb80:	230c      	movs	r3, #12
 800cb82:	f8c8 3000 	str.w	r3, [r8]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	e0c5      	b.n	800cd18 <_svfiprintf_r+0x1bc>
 800cb8c:	2340      	movs	r3, #64	; 0x40
 800cb8e:	616b      	str	r3, [r5, #20]
 800cb90:	2300      	movs	r3, #0
 800cb92:	9309      	str	r3, [sp, #36]	; 0x24
 800cb94:	2320      	movs	r3, #32
 800cb96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb9a:	2330      	movs	r3, #48	; 0x30
 800cb9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cba0:	f04f 0b01 	mov.w	fp, #1
 800cba4:	4637      	mov	r7, r6
 800cba6:	463c      	mov	r4, r7
 800cba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d13c      	bne.n	800cc2a <_svfiprintf_r+0xce>
 800cbb0:	ebb7 0a06 	subs.w	sl, r7, r6
 800cbb4:	d00b      	beq.n	800cbce <_svfiprintf_r+0x72>
 800cbb6:	4653      	mov	r3, sl
 800cbb8:	4632      	mov	r2, r6
 800cbba:	4629      	mov	r1, r5
 800cbbc:	4640      	mov	r0, r8
 800cbbe:	f7ff ff72 	bl	800caa6 <__ssputs_r>
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	f000 80a3 	beq.w	800cd0e <_svfiprintf_r+0x1b2>
 800cbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbca:	4453      	add	r3, sl
 800cbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbce:	783b      	ldrb	r3, [r7, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 809c 	beq.w	800cd0e <_svfiprintf_r+0x1b2>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	9307      	str	r3, [sp, #28]
 800cbe0:	9205      	str	r2, [sp, #20]
 800cbe2:	9306      	str	r3, [sp, #24]
 800cbe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbe8:	931a      	str	r3, [sp, #104]	; 0x68
 800cbea:	2205      	movs	r2, #5
 800cbec:	7821      	ldrb	r1, [r4, #0]
 800cbee:	4850      	ldr	r0, [pc, #320]	; (800cd30 <_svfiprintf_r+0x1d4>)
 800cbf0:	f7f3 faf6 	bl	80001e0 <memchr>
 800cbf4:	1c67      	adds	r7, r4, #1
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	b9d8      	cbnz	r0, 800cc32 <_svfiprintf_r+0xd6>
 800cbfa:	06d9      	lsls	r1, r3, #27
 800cbfc:	bf44      	itt	mi
 800cbfe:	2220      	movmi	r2, #32
 800cc00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cc04:	071a      	lsls	r2, r3, #28
 800cc06:	bf44      	itt	mi
 800cc08:	222b      	movmi	r2, #43	; 0x2b
 800cc0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cc0e:	7822      	ldrb	r2, [r4, #0]
 800cc10:	2a2a      	cmp	r2, #42	; 0x2a
 800cc12:	d016      	beq.n	800cc42 <_svfiprintf_r+0xe6>
 800cc14:	9a07      	ldr	r2, [sp, #28]
 800cc16:	2100      	movs	r1, #0
 800cc18:	200a      	movs	r0, #10
 800cc1a:	4627      	mov	r7, r4
 800cc1c:	3401      	adds	r4, #1
 800cc1e:	783b      	ldrb	r3, [r7, #0]
 800cc20:	3b30      	subs	r3, #48	; 0x30
 800cc22:	2b09      	cmp	r3, #9
 800cc24:	d951      	bls.n	800ccca <_svfiprintf_r+0x16e>
 800cc26:	b1c9      	cbz	r1, 800cc5c <_svfiprintf_r+0x100>
 800cc28:	e011      	b.n	800cc4e <_svfiprintf_r+0xf2>
 800cc2a:	2b25      	cmp	r3, #37	; 0x25
 800cc2c:	d0c0      	beq.n	800cbb0 <_svfiprintf_r+0x54>
 800cc2e:	4627      	mov	r7, r4
 800cc30:	e7b9      	b.n	800cba6 <_svfiprintf_r+0x4a>
 800cc32:	4a3f      	ldr	r2, [pc, #252]	; (800cd30 <_svfiprintf_r+0x1d4>)
 800cc34:	1a80      	subs	r0, r0, r2
 800cc36:	fa0b f000 	lsl.w	r0, fp, r0
 800cc3a:	4318      	orrs	r0, r3
 800cc3c:	9004      	str	r0, [sp, #16]
 800cc3e:	463c      	mov	r4, r7
 800cc40:	e7d3      	b.n	800cbea <_svfiprintf_r+0x8e>
 800cc42:	9a03      	ldr	r2, [sp, #12]
 800cc44:	1d11      	adds	r1, r2, #4
 800cc46:	6812      	ldr	r2, [r2, #0]
 800cc48:	9103      	str	r1, [sp, #12]
 800cc4a:	2a00      	cmp	r2, #0
 800cc4c:	db01      	blt.n	800cc52 <_svfiprintf_r+0xf6>
 800cc4e:	9207      	str	r2, [sp, #28]
 800cc50:	e004      	b.n	800cc5c <_svfiprintf_r+0x100>
 800cc52:	4252      	negs	r2, r2
 800cc54:	f043 0302 	orr.w	r3, r3, #2
 800cc58:	9207      	str	r2, [sp, #28]
 800cc5a:	9304      	str	r3, [sp, #16]
 800cc5c:	783b      	ldrb	r3, [r7, #0]
 800cc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc60:	d10e      	bne.n	800cc80 <_svfiprintf_r+0x124>
 800cc62:	787b      	ldrb	r3, [r7, #1]
 800cc64:	2b2a      	cmp	r3, #42	; 0x2a
 800cc66:	f107 0101 	add.w	r1, r7, #1
 800cc6a:	d132      	bne.n	800ccd2 <_svfiprintf_r+0x176>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	1d1a      	adds	r2, r3, #4
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	9203      	str	r2, [sp, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bfb8      	it	lt
 800cc78:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc7c:	3702      	adds	r7, #2
 800cc7e:	9305      	str	r3, [sp, #20]
 800cc80:	4c2c      	ldr	r4, [pc, #176]	; (800cd34 <_svfiprintf_r+0x1d8>)
 800cc82:	7839      	ldrb	r1, [r7, #0]
 800cc84:	2203      	movs	r2, #3
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7f3 faaa 	bl	80001e0 <memchr>
 800cc8c:	b138      	cbz	r0, 800cc9e <_svfiprintf_r+0x142>
 800cc8e:	2340      	movs	r3, #64	; 0x40
 800cc90:	1b00      	subs	r0, r0, r4
 800cc92:	fa03 f000 	lsl.w	r0, r3, r0
 800cc96:	9b04      	ldr	r3, [sp, #16]
 800cc98:	4303      	orrs	r3, r0
 800cc9a:	9304      	str	r3, [sp, #16]
 800cc9c:	3701      	adds	r7, #1
 800cc9e:	7839      	ldrb	r1, [r7, #0]
 800cca0:	4825      	ldr	r0, [pc, #148]	; (800cd38 <_svfiprintf_r+0x1dc>)
 800cca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cca6:	2206      	movs	r2, #6
 800cca8:	1c7e      	adds	r6, r7, #1
 800ccaa:	f7f3 fa99 	bl	80001e0 <memchr>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d035      	beq.n	800cd1e <_svfiprintf_r+0x1c2>
 800ccb2:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <_svfiprintf_r+0x1e0>)
 800ccb4:	b9fb      	cbnz	r3, 800ccf6 <_svfiprintf_r+0x19a>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	3307      	adds	r3, #7
 800ccba:	f023 0307 	bic.w	r3, r3, #7
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	9303      	str	r3, [sp, #12]
 800ccc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc4:	444b      	add	r3, r9
 800ccc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccc8:	e76c      	b.n	800cba4 <_svfiprintf_r+0x48>
 800ccca:	fb00 3202 	mla	r2, r0, r2, r3
 800ccce:	2101      	movs	r1, #1
 800ccd0:	e7a3      	b.n	800cc1a <_svfiprintf_r+0xbe>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9305      	str	r3, [sp, #20]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	240a      	movs	r4, #10
 800ccda:	460f      	mov	r7, r1
 800ccdc:	3101      	adds	r1, #1
 800ccde:	783a      	ldrb	r2, [r7, #0]
 800cce0:	3a30      	subs	r2, #48	; 0x30
 800cce2:	2a09      	cmp	r2, #9
 800cce4:	d903      	bls.n	800ccee <_svfiprintf_r+0x192>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0ca      	beq.n	800cc80 <_svfiprintf_r+0x124>
 800ccea:	9005      	str	r0, [sp, #20]
 800ccec:	e7c8      	b.n	800cc80 <_svfiprintf_r+0x124>
 800ccee:	fb04 2000 	mla	r0, r4, r0, r2
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e7f1      	b.n	800ccda <_svfiprintf_r+0x17e>
 800ccf6:	ab03      	add	r3, sp, #12
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	462a      	mov	r2, r5
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <_svfiprintf_r+0x1e4>)
 800ccfe:	a904      	add	r1, sp, #16
 800cd00:	4640      	mov	r0, r8
 800cd02:	f3af 8000 	nop.w
 800cd06:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cd0a:	4681      	mov	r9, r0
 800cd0c:	d1d9      	bne.n	800ccc2 <_svfiprintf_r+0x166>
 800cd0e:	89ab      	ldrh	r3, [r5, #12]
 800cd10:	065b      	lsls	r3, r3, #25
 800cd12:	f53f af38 	bmi.w	800cb86 <_svfiprintf_r+0x2a>
 800cd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd18:	b01d      	add	sp, #116	; 0x74
 800cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1e:	ab03      	add	r3, sp, #12
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	462a      	mov	r2, r5
 800cd24:	4b06      	ldr	r3, [pc, #24]	; (800cd40 <_svfiprintf_r+0x1e4>)
 800cd26:	a904      	add	r1, sp, #16
 800cd28:	4640      	mov	r0, r8
 800cd2a:	f000 fa2f 	bl	800d18c <_printf_i>
 800cd2e:	e7ea      	b.n	800cd06 <_svfiprintf_r+0x1aa>
 800cd30:	0800f027 	.word	0x0800f027
 800cd34:	0800f02d 	.word	0x0800f02d
 800cd38:	0800f031 	.word	0x0800f031
 800cd3c:	00000000 	.word	0x00000000
 800cd40:	0800caa7 	.word	0x0800caa7

0800cd44 <_sungetc_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	1c4b      	adds	r3, r1, #1
 800cd48:	4614      	mov	r4, r2
 800cd4a:	d103      	bne.n	800cd54 <_sungetc_r+0x10>
 800cd4c:	f04f 35ff 	mov.w	r5, #4294967295
 800cd50:	4628      	mov	r0, r5
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	8993      	ldrh	r3, [r2, #12]
 800cd56:	f023 0320 	bic.w	r3, r3, #32
 800cd5a:	8193      	strh	r3, [r2, #12]
 800cd5c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cd5e:	6852      	ldr	r2, [r2, #4]
 800cd60:	b2cd      	uxtb	r5, r1
 800cd62:	b18b      	cbz	r3, 800cd88 <_sungetc_r+0x44>
 800cd64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd66:	429a      	cmp	r2, r3
 800cd68:	da08      	bge.n	800cd7c <_sungetc_r+0x38>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	1e5a      	subs	r2, r3, #1
 800cd6e:	6022      	str	r2, [r4, #0]
 800cd70:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cd74:	6863      	ldr	r3, [r4, #4]
 800cd76:	3301      	adds	r3, #1
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	e7e9      	b.n	800cd50 <_sungetc_r+0xc>
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f000 fdcf 	bl	800d920 <__submore>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d0f1      	beq.n	800cd6a <_sungetc_r+0x26>
 800cd86:	e7e1      	b.n	800cd4c <_sungetc_r+0x8>
 800cd88:	6921      	ldr	r1, [r4, #16]
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	b151      	cbz	r1, 800cda4 <_sungetc_r+0x60>
 800cd8e:	4299      	cmp	r1, r3
 800cd90:	d208      	bcs.n	800cda4 <_sungetc_r+0x60>
 800cd92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cd96:	428d      	cmp	r5, r1
 800cd98:	d104      	bne.n	800cda4 <_sungetc_r+0x60>
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	3201      	adds	r2, #1
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	6062      	str	r2, [r4, #4]
 800cda2:	e7d5      	b.n	800cd50 <_sungetc_r+0xc>
 800cda4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cda6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdaa:	6363      	str	r3, [r4, #52]	; 0x34
 800cdac:	2303      	movs	r3, #3
 800cdae:	63a3      	str	r3, [r4, #56]	; 0x38
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	6422      	str	r2, [r4, #64]	; 0x40
 800cdb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e7dc      	b.n	800cd78 <_sungetc_r+0x34>

0800cdbe <__ssrefill_r>:
 800cdbe:	b510      	push	{r4, lr}
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cdc4:	b169      	cbz	r1, 800cde2 <__ssrefill_r+0x24>
 800cdc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdca:	4299      	cmp	r1, r3
 800cdcc:	d001      	beq.n	800cdd2 <__ssrefill_r+0x14>
 800cdce:	f7ff fd39 	bl	800c844 <_free_r>
 800cdd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	6360      	str	r0, [r4, #52]	; 0x34
 800cdda:	b113      	cbz	r3, 800cde2 <__ssrefill_r+0x24>
 800cddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	bd10      	pop	{r4, pc}
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	2300      	movs	r3, #0
 800cde8:	6063      	str	r3, [r4, #4]
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f043 0320 	orr.w	r3, r3, #32
 800cdf0:	81a3      	strh	r3, [r4, #12]
 800cdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf6:	bd10      	pop	{r4, pc}

0800cdf8 <__ssvfiscanf_r>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800ce00:	f10d 080c 	add.w	r8, sp, #12
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	2300      	movs	r3, #0
 800ce08:	9346      	str	r3, [sp, #280]	; 0x118
 800ce0a:	9347      	str	r3, [sp, #284]	; 0x11c
 800ce0c:	4ba0      	ldr	r3, [pc, #640]	; (800d090 <__ssvfiscanf_r+0x298>)
 800ce0e:	93a2      	str	r3, [sp, #648]	; 0x288
 800ce10:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800d098 <__ssvfiscanf_r+0x2a0>
 800ce14:	4b9f      	ldr	r3, [pc, #636]	; (800d094 <__ssvfiscanf_r+0x29c>)
 800ce16:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	93a3      	str	r3, [sp, #652]	; 0x28c
 800ce20:	4692      	mov	sl, r2
 800ce22:	270a      	movs	r7, #10
 800ce24:	f89a 3000 	ldrb.w	r3, [sl]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 812f 	beq.w	800d08c <__ssvfiscanf_r+0x294>
 800ce2e:	f000 fdb5 	bl	800d99c <__locale_ctype_ptr>
 800ce32:	f89a b000 	ldrb.w	fp, [sl]
 800ce36:	4458      	add	r0, fp
 800ce38:	7843      	ldrb	r3, [r0, #1]
 800ce3a:	f013 0308 	ands.w	r3, r3, #8
 800ce3e:	d143      	bne.n	800cec8 <__ssvfiscanf_r+0xd0>
 800ce40:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ce44:	f10a 0501 	add.w	r5, sl, #1
 800ce48:	f040 8099 	bne.w	800cf7e <__ssvfiscanf_r+0x186>
 800ce4c:	9345      	str	r3, [sp, #276]	; 0x114
 800ce4e:	9343      	str	r3, [sp, #268]	; 0x10c
 800ce50:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ce54:	2b2a      	cmp	r3, #42	; 0x2a
 800ce56:	d103      	bne.n	800ce60 <__ssvfiscanf_r+0x68>
 800ce58:	2310      	movs	r3, #16
 800ce5a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ce5c:	f10a 0502 	add.w	r5, sl, #2
 800ce60:	7829      	ldrb	r1, [r5, #0]
 800ce62:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ce66:	2a09      	cmp	r2, #9
 800ce68:	46aa      	mov	sl, r5
 800ce6a:	f105 0501 	add.w	r5, r5, #1
 800ce6e:	d941      	bls.n	800cef4 <__ssvfiscanf_r+0xfc>
 800ce70:	2203      	movs	r2, #3
 800ce72:	4889      	ldr	r0, [pc, #548]	; (800d098 <__ssvfiscanf_r+0x2a0>)
 800ce74:	f7f3 f9b4 	bl	80001e0 <memchr>
 800ce78:	b138      	cbz	r0, 800ce8a <__ssvfiscanf_r+0x92>
 800ce7a:	eba0 0309 	sub.w	r3, r0, r9
 800ce7e:	2001      	movs	r0, #1
 800ce80:	4098      	lsls	r0, r3
 800ce82:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ce84:	4318      	orrs	r0, r3
 800ce86:	9043      	str	r0, [sp, #268]	; 0x10c
 800ce88:	46aa      	mov	sl, r5
 800ce8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8e:	2b67      	cmp	r3, #103	; 0x67
 800ce90:	f10a 0501 	add.w	r5, sl, #1
 800ce94:	d84a      	bhi.n	800cf2c <__ssvfiscanf_r+0x134>
 800ce96:	2b65      	cmp	r3, #101	; 0x65
 800ce98:	f080 80b7 	bcs.w	800d00a <__ssvfiscanf_r+0x212>
 800ce9c:	2b47      	cmp	r3, #71	; 0x47
 800ce9e:	d82f      	bhi.n	800cf00 <__ssvfiscanf_r+0x108>
 800cea0:	2b45      	cmp	r3, #69	; 0x45
 800cea2:	f080 80b2 	bcs.w	800d00a <__ssvfiscanf_r+0x212>
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f000 8082 	beq.w	800cfb0 <__ssvfiscanf_r+0x1b8>
 800ceac:	2b25      	cmp	r3, #37	; 0x25
 800ceae:	d066      	beq.n	800cf7e <__ssvfiscanf_r+0x186>
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	9349      	str	r3, [sp, #292]	; 0x124
 800ceb4:	9744      	str	r7, [sp, #272]	; 0x110
 800ceb6:	e045      	b.n	800cf44 <__ssvfiscanf_r+0x14c>
 800ceb8:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800ceba:	3101      	adds	r1, #1
 800cebc:	9147      	str	r1, [sp, #284]	; 0x11c
 800cebe:	6861      	ldr	r1, [r4, #4]
 800cec0:	3301      	adds	r3, #1
 800cec2:	3901      	subs	r1, #1
 800cec4:	6061      	str	r1, [r4, #4]
 800cec6:	6023      	str	r3, [r4, #0]
 800cec8:	6863      	ldr	r3, [r4, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	dd0b      	ble.n	800cee6 <__ssvfiscanf_r+0xee>
 800cece:	f000 fd65 	bl	800d99c <__locale_ctype_ptr>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	7819      	ldrb	r1, [r3, #0]
 800ced6:	4408      	add	r0, r1
 800ced8:	7841      	ldrb	r1, [r0, #1]
 800ceda:	070d      	lsls	r5, r1, #28
 800cedc:	d4ec      	bmi.n	800ceb8 <__ssvfiscanf_r+0xc0>
 800cede:	f10a 0501 	add.w	r5, sl, #1
 800cee2:	46aa      	mov	sl, r5
 800cee4:	e79e      	b.n	800ce24 <__ssvfiscanf_r+0x2c>
 800cee6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cee8:	4621      	mov	r1, r4
 800ceea:	4630      	mov	r0, r6
 800ceec:	4798      	blx	r3
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d0ed      	beq.n	800cece <__ssvfiscanf_r+0xd6>
 800cef2:	e7f4      	b.n	800cede <__ssvfiscanf_r+0xe6>
 800cef4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cef6:	fb07 1303 	mla	r3, r7, r3, r1
 800cefa:	3b30      	subs	r3, #48	; 0x30
 800cefc:	9345      	str	r3, [sp, #276]	; 0x114
 800cefe:	e7af      	b.n	800ce60 <__ssvfiscanf_r+0x68>
 800cf00:	2b5b      	cmp	r3, #91	; 0x5b
 800cf02:	d061      	beq.n	800cfc8 <__ssvfiscanf_r+0x1d0>
 800cf04:	d80c      	bhi.n	800cf20 <__ssvfiscanf_r+0x128>
 800cf06:	2b58      	cmp	r3, #88	; 0x58
 800cf08:	d1d2      	bne.n	800ceb0 <__ssvfiscanf_r+0xb8>
 800cf0a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cf0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf10:	9243      	str	r2, [sp, #268]	; 0x10c
 800cf12:	2210      	movs	r2, #16
 800cf14:	9244      	str	r2, [sp, #272]	; 0x110
 800cf16:	2b6f      	cmp	r3, #111	; 0x6f
 800cf18:	bfb4      	ite	lt
 800cf1a:	2303      	movlt	r3, #3
 800cf1c:	2304      	movge	r3, #4
 800cf1e:	e010      	b.n	800cf42 <__ssvfiscanf_r+0x14a>
 800cf20:	2b63      	cmp	r3, #99	; 0x63
 800cf22:	d05c      	beq.n	800cfde <__ssvfiscanf_r+0x1e6>
 800cf24:	2b64      	cmp	r3, #100	; 0x64
 800cf26:	d1c3      	bne.n	800ceb0 <__ssvfiscanf_r+0xb8>
 800cf28:	9744      	str	r7, [sp, #272]	; 0x110
 800cf2a:	e7f4      	b.n	800cf16 <__ssvfiscanf_r+0x11e>
 800cf2c:	2b70      	cmp	r3, #112	; 0x70
 800cf2e:	d042      	beq.n	800cfb6 <__ssvfiscanf_r+0x1be>
 800cf30:	d81d      	bhi.n	800cf6e <__ssvfiscanf_r+0x176>
 800cf32:	2b6e      	cmp	r3, #110	; 0x6e
 800cf34:	d059      	beq.n	800cfea <__ssvfiscanf_r+0x1f2>
 800cf36:	d843      	bhi.n	800cfc0 <__ssvfiscanf_r+0x1c8>
 800cf38:	2b69      	cmp	r3, #105	; 0x69
 800cf3a:	d1b9      	bne.n	800ceb0 <__ssvfiscanf_r+0xb8>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9344      	str	r3, [sp, #272]	; 0x110
 800cf40:	2303      	movs	r3, #3
 800cf42:	9349      	str	r3, [sp, #292]	; 0x124
 800cf44:	6863      	ldr	r3, [r4, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	dd61      	ble.n	800d00e <__ssvfiscanf_r+0x216>
 800cf4a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cf4c:	0659      	lsls	r1, r3, #25
 800cf4e:	d56f      	bpl.n	800d030 <__ssvfiscanf_r+0x238>
 800cf50:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	dc7c      	bgt.n	800d050 <__ssvfiscanf_r+0x258>
 800cf56:	ab01      	add	r3, sp, #4
 800cf58:	4622      	mov	r2, r4
 800cf5a:	a943      	add	r1, sp, #268	; 0x10c
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f000 fa35 	bl	800d3cc <_scanf_chars>
 800cf62:	2801      	cmp	r0, #1
 800cf64:	f000 8092 	beq.w	800d08c <__ssvfiscanf_r+0x294>
 800cf68:	2802      	cmp	r0, #2
 800cf6a:	d1ba      	bne.n	800cee2 <__ssvfiscanf_r+0xea>
 800cf6c:	e01d      	b.n	800cfaa <__ssvfiscanf_r+0x1b2>
 800cf6e:	2b75      	cmp	r3, #117	; 0x75
 800cf70:	d0da      	beq.n	800cf28 <__ssvfiscanf_r+0x130>
 800cf72:	2b78      	cmp	r3, #120	; 0x78
 800cf74:	d0c9      	beq.n	800cf0a <__ssvfiscanf_r+0x112>
 800cf76:	2b73      	cmp	r3, #115	; 0x73
 800cf78:	d19a      	bne.n	800ceb0 <__ssvfiscanf_r+0xb8>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e7e1      	b.n	800cf42 <__ssvfiscanf_r+0x14a>
 800cf7e:	6863      	ldr	r3, [r4, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	dd0c      	ble.n	800cf9e <__ssvfiscanf_r+0x1a6>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	781a      	ldrb	r2, [r3, #0]
 800cf88:	4593      	cmp	fp, r2
 800cf8a:	d17f      	bne.n	800d08c <__ssvfiscanf_r+0x294>
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	6862      	ldr	r2, [r4, #4]
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cf94:	3a01      	subs	r2, #1
 800cf96:	3301      	adds	r3, #1
 800cf98:	6062      	str	r2, [r4, #4]
 800cf9a:	9347      	str	r3, [sp, #284]	; 0x11c
 800cf9c:	e7a1      	b.n	800cee2 <__ssvfiscanf_r+0xea>
 800cf9e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cfa0:	4621      	mov	r1, r4
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	4798      	blx	r3
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d0ec      	beq.n	800cf84 <__ssvfiscanf_r+0x18c>
 800cfaa:	9846      	ldr	r0, [sp, #280]	; 0x118
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d163      	bne.n	800d078 <__ssvfiscanf_r+0x280>
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	e066      	b.n	800d084 <__ssvfiscanf_r+0x28c>
 800cfb6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cfb8:	f042 0220 	orr.w	r2, r2, #32
 800cfbc:	9243      	str	r2, [sp, #268]	; 0x10c
 800cfbe:	e7a4      	b.n	800cf0a <__ssvfiscanf_r+0x112>
 800cfc0:	2308      	movs	r3, #8
 800cfc2:	9344      	str	r3, [sp, #272]	; 0x110
 800cfc4:	2304      	movs	r3, #4
 800cfc6:	e7bc      	b.n	800cf42 <__ssvfiscanf_r+0x14a>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4640      	mov	r0, r8
 800cfcc:	f000 fb56 	bl	800d67c <__sccl>
 800cfd0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cfd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd6:	9343      	str	r3, [sp, #268]	; 0x10c
 800cfd8:	4605      	mov	r5, r0
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e7b1      	b.n	800cf42 <__ssvfiscanf_r+0x14a>
 800cfde:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cfe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe4:	9343      	str	r3, [sp, #268]	; 0x10c
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e7ab      	b.n	800cf42 <__ssvfiscanf_r+0x14a>
 800cfea:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cfec:	06d0      	lsls	r0, r2, #27
 800cfee:	f53f af78 	bmi.w	800cee2 <__ssvfiscanf_r+0xea>
 800cff2:	f012 0f01 	tst.w	r2, #1
 800cff6:	9a01      	ldr	r2, [sp, #4]
 800cff8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cffa:	f102 0104 	add.w	r1, r2, #4
 800cffe:	9101      	str	r1, [sp, #4]
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	bf14      	ite	ne
 800d004:	8013      	strhne	r3, [r2, #0]
 800d006:	6013      	streq	r3, [r2, #0]
 800d008:	e76b      	b.n	800cee2 <__ssvfiscanf_r+0xea>
 800d00a:	2305      	movs	r3, #5
 800d00c:	e799      	b.n	800cf42 <__ssvfiscanf_r+0x14a>
 800d00e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d010:	4621      	mov	r1, r4
 800d012:	4630      	mov	r0, r6
 800d014:	4798      	blx	r3
 800d016:	2800      	cmp	r0, #0
 800d018:	d097      	beq.n	800cf4a <__ssvfiscanf_r+0x152>
 800d01a:	e7c6      	b.n	800cfaa <__ssvfiscanf_r+0x1b2>
 800d01c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800d01e:	3201      	adds	r2, #1
 800d020:	9247      	str	r2, [sp, #284]	; 0x11c
 800d022:	6862      	ldr	r2, [r4, #4]
 800d024:	3a01      	subs	r2, #1
 800d026:	2a00      	cmp	r2, #0
 800d028:	6062      	str	r2, [r4, #4]
 800d02a:	dd0a      	ble.n	800d042 <__ssvfiscanf_r+0x24a>
 800d02c:	3301      	adds	r3, #1
 800d02e:	6023      	str	r3, [r4, #0]
 800d030:	f000 fcb4 	bl	800d99c <__locale_ctype_ptr>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	781a      	ldrb	r2, [r3, #0]
 800d038:	4410      	add	r0, r2
 800d03a:	7842      	ldrb	r2, [r0, #1]
 800d03c:	0712      	lsls	r2, r2, #28
 800d03e:	d4ed      	bmi.n	800d01c <__ssvfiscanf_r+0x224>
 800d040:	e786      	b.n	800cf50 <__ssvfiscanf_r+0x158>
 800d042:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d044:	4621      	mov	r1, r4
 800d046:	4630      	mov	r0, r6
 800d048:	4798      	blx	r3
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0f0      	beq.n	800d030 <__ssvfiscanf_r+0x238>
 800d04e:	e7ac      	b.n	800cfaa <__ssvfiscanf_r+0x1b2>
 800d050:	2b04      	cmp	r3, #4
 800d052:	dc06      	bgt.n	800d062 <__ssvfiscanf_r+0x26a>
 800d054:	ab01      	add	r3, sp, #4
 800d056:	4622      	mov	r2, r4
 800d058:	a943      	add	r1, sp, #268	; 0x10c
 800d05a:	4630      	mov	r0, r6
 800d05c:	f000 fa1a 	bl	800d494 <_scanf_i>
 800d060:	e77f      	b.n	800cf62 <__ssvfiscanf_r+0x16a>
 800d062:	4b0e      	ldr	r3, [pc, #56]	; (800d09c <__ssvfiscanf_r+0x2a4>)
 800d064:	2b00      	cmp	r3, #0
 800d066:	f43f af3c 	beq.w	800cee2 <__ssvfiscanf_r+0xea>
 800d06a:	ab01      	add	r3, sp, #4
 800d06c:	4622      	mov	r2, r4
 800d06e:	a943      	add	r1, sp, #268	; 0x10c
 800d070:	4630      	mov	r0, r6
 800d072:	f3af 8000 	nop.w
 800d076:	e774      	b.n	800cf62 <__ssvfiscanf_r+0x16a>
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d07e:	bf18      	it	ne
 800d080:	f04f 30ff 	movne.w	r0, #4294967295
 800d084:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800d08e:	e7f9      	b.n	800d084 <__ssvfiscanf_r+0x28c>
 800d090:	0800cd45 	.word	0x0800cd45
 800d094:	0800cdbf 	.word	0x0800cdbf
 800d098:	0800f02d 	.word	0x0800f02d
 800d09c:	00000000 	.word	0x00000000

0800d0a0 <_printf_common>:
 800d0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	4691      	mov	r9, r2
 800d0a6:	461f      	mov	r7, r3
 800d0a8:	688a      	ldr	r2, [r1, #8]
 800d0aa:	690b      	ldr	r3, [r1, #16]
 800d0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	bfb8      	it	lt
 800d0b4:	4613      	movlt	r3, r2
 800d0b6:	f8c9 3000 	str.w	r3, [r9]
 800d0ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0be:	4606      	mov	r6, r0
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	b112      	cbz	r2, 800d0ca <_printf_common+0x2a>
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	f8c9 3000 	str.w	r3, [r9]
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	0699      	lsls	r1, r3, #26
 800d0ce:	bf42      	ittt	mi
 800d0d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d0d4:	3302      	addmi	r3, #2
 800d0d6:	f8c9 3000 	strmi.w	r3, [r9]
 800d0da:	6825      	ldr	r5, [r4, #0]
 800d0dc:	f015 0506 	ands.w	r5, r5, #6
 800d0e0:	d107      	bne.n	800d0f2 <_printf_common+0x52>
 800d0e2:	f104 0a19 	add.w	sl, r4, #25
 800d0e6:	68e3      	ldr	r3, [r4, #12]
 800d0e8:	f8d9 2000 	ldr.w	r2, [r9]
 800d0ec:	1a9b      	subs	r3, r3, r2
 800d0ee:	429d      	cmp	r5, r3
 800d0f0:	db29      	blt.n	800d146 <_printf_common+0xa6>
 800d0f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d0f6:	6822      	ldr	r2, [r4, #0]
 800d0f8:	3300      	adds	r3, #0
 800d0fa:	bf18      	it	ne
 800d0fc:	2301      	movne	r3, #1
 800d0fe:	0692      	lsls	r2, r2, #26
 800d100:	d42e      	bmi.n	800d160 <_printf_common+0xc0>
 800d102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d106:	4639      	mov	r1, r7
 800d108:	4630      	mov	r0, r6
 800d10a:	47c0      	blx	r8
 800d10c:	3001      	adds	r0, #1
 800d10e:	d021      	beq.n	800d154 <_printf_common+0xb4>
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	68e5      	ldr	r5, [r4, #12]
 800d114:	f8d9 2000 	ldr.w	r2, [r9]
 800d118:	f003 0306 	and.w	r3, r3, #6
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	bf08      	it	eq
 800d120:	1aad      	subeq	r5, r5, r2
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	6922      	ldr	r2, [r4, #16]
 800d126:	bf0c      	ite	eq
 800d128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d12c:	2500      	movne	r5, #0
 800d12e:	4293      	cmp	r3, r2
 800d130:	bfc4      	itt	gt
 800d132:	1a9b      	subgt	r3, r3, r2
 800d134:	18ed      	addgt	r5, r5, r3
 800d136:	f04f 0900 	mov.w	r9, #0
 800d13a:	341a      	adds	r4, #26
 800d13c:	454d      	cmp	r5, r9
 800d13e:	d11b      	bne.n	800d178 <_printf_common+0xd8>
 800d140:	2000      	movs	r0, #0
 800d142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d146:	2301      	movs	r3, #1
 800d148:	4652      	mov	r2, sl
 800d14a:	4639      	mov	r1, r7
 800d14c:	4630      	mov	r0, r6
 800d14e:	47c0      	blx	r8
 800d150:	3001      	adds	r0, #1
 800d152:	d103      	bne.n	800d15c <_printf_common+0xbc>
 800d154:	f04f 30ff 	mov.w	r0, #4294967295
 800d158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15c:	3501      	adds	r5, #1
 800d15e:	e7c2      	b.n	800d0e6 <_printf_common+0x46>
 800d160:	18e1      	adds	r1, r4, r3
 800d162:	1c5a      	adds	r2, r3, #1
 800d164:	2030      	movs	r0, #48	; 0x30
 800d166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d16a:	4422      	add	r2, r4
 800d16c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d174:	3302      	adds	r3, #2
 800d176:	e7c4      	b.n	800d102 <_printf_common+0x62>
 800d178:	2301      	movs	r3, #1
 800d17a:	4622      	mov	r2, r4
 800d17c:	4639      	mov	r1, r7
 800d17e:	4630      	mov	r0, r6
 800d180:	47c0      	blx	r8
 800d182:	3001      	adds	r0, #1
 800d184:	d0e6      	beq.n	800d154 <_printf_common+0xb4>
 800d186:	f109 0901 	add.w	r9, r9, #1
 800d18a:	e7d7      	b.n	800d13c <_printf_common+0x9c>

0800d18c <_printf_i>:
 800d18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d190:	4617      	mov	r7, r2
 800d192:	7e0a      	ldrb	r2, [r1, #24]
 800d194:	b085      	sub	sp, #20
 800d196:	2a6e      	cmp	r2, #110	; 0x6e
 800d198:	4698      	mov	r8, r3
 800d19a:	4606      	mov	r6, r0
 800d19c:	460c      	mov	r4, r1
 800d19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800d1a4:	f000 80bc 	beq.w	800d320 <_printf_i+0x194>
 800d1a8:	d81a      	bhi.n	800d1e0 <_printf_i+0x54>
 800d1aa:	2a63      	cmp	r2, #99	; 0x63
 800d1ac:	d02e      	beq.n	800d20c <_printf_i+0x80>
 800d1ae:	d80a      	bhi.n	800d1c6 <_printf_i+0x3a>
 800d1b0:	2a00      	cmp	r2, #0
 800d1b2:	f000 80c8 	beq.w	800d346 <_printf_i+0x1ba>
 800d1b6:	2a58      	cmp	r2, #88	; 0x58
 800d1b8:	f000 808a 	beq.w	800d2d0 <_printf_i+0x144>
 800d1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d1c4:	e02a      	b.n	800d21c <_printf_i+0x90>
 800d1c6:	2a64      	cmp	r2, #100	; 0x64
 800d1c8:	d001      	beq.n	800d1ce <_printf_i+0x42>
 800d1ca:	2a69      	cmp	r2, #105	; 0x69
 800d1cc:	d1f6      	bne.n	800d1bc <_printf_i+0x30>
 800d1ce:	6821      	ldr	r1, [r4, #0]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d1d6:	d023      	beq.n	800d220 <_printf_i+0x94>
 800d1d8:	1d11      	adds	r1, r2, #4
 800d1da:	6019      	str	r1, [r3, #0]
 800d1dc:	6813      	ldr	r3, [r2, #0]
 800d1de:	e027      	b.n	800d230 <_printf_i+0xa4>
 800d1e0:	2a73      	cmp	r2, #115	; 0x73
 800d1e2:	f000 80b4 	beq.w	800d34e <_printf_i+0x1c2>
 800d1e6:	d808      	bhi.n	800d1fa <_printf_i+0x6e>
 800d1e8:	2a6f      	cmp	r2, #111	; 0x6f
 800d1ea:	d02a      	beq.n	800d242 <_printf_i+0xb6>
 800d1ec:	2a70      	cmp	r2, #112	; 0x70
 800d1ee:	d1e5      	bne.n	800d1bc <_printf_i+0x30>
 800d1f0:	680a      	ldr	r2, [r1, #0]
 800d1f2:	f042 0220 	orr.w	r2, r2, #32
 800d1f6:	600a      	str	r2, [r1, #0]
 800d1f8:	e003      	b.n	800d202 <_printf_i+0x76>
 800d1fa:	2a75      	cmp	r2, #117	; 0x75
 800d1fc:	d021      	beq.n	800d242 <_printf_i+0xb6>
 800d1fe:	2a78      	cmp	r2, #120	; 0x78
 800d200:	d1dc      	bne.n	800d1bc <_printf_i+0x30>
 800d202:	2278      	movs	r2, #120	; 0x78
 800d204:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800d208:	496e      	ldr	r1, [pc, #440]	; (800d3c4 <_printf_i+0x238>)
 800d20a:	e064      	b.n	800d2d6 <_printf_i+0x14a>
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800d212:	1d11      	adds	r1, r2, #4
 800d214:	6019      	str	r1, [r3, #0]
 800d216:	6813      	ldr	r3, [r2, #0]
 800d218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d21c:	2301      	movs	r3, #1
 800d21e:	e0a3      	b.n	800d368 <_printf_i+0x1dc>
 800d220:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d224:	f102 0104 	add.w	r1, r2, #4
 800d228:	6019      	str	r1, [r3, #0]
 800d22a:	d0d7      	beq.n	800d1dc <_printf_i+0x50>
 800d22c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d230:	2b00      	cmp	r3, #0
 800d232:	da03      	bge.n	800d23c <_printf_i+0xb0>
 800d234:	222d      	movs	r2, #45	; 0x2d
 800d236:	425b      	negs	r3, r3
 800d238:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d23c:	4962      	ldr	r1, [pc, #392]	; (800d3c8 <_printf_i+0x23c>)
 800d23e:	220a      	movs	r2, #10
 800d240:	e017      	b.n	800d272 <_printf_i+0xe6>
 800d242:	6820      	ldr	r0, [r4, #0]
 800d244:	6819      	ldr	r1, [r3, #0]
 800d246:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d24a:	d003      	beq.n	800d254 <_printf_i+0xc8>
 800d24c:	1d08      	adds	r0, r1, #4
 800d24e:	6018      	str	r0, [r3, #0]
 800d250:	680b      	ldr	r3, [r1, #0]
 800d252:	e006      	b.n	800d262 <_printf_i+0xd6>
 800d254:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d258:	f101 0004 	add.w	r0, r1, #4
 800d25c:	6018      	str	r0, [r3, #0]
 800d25e:	d0f7      	beq.n	800d250 <_printf_i+0xc4>
 800d260:	880b      	ldrh	r3, [r1, #0]
 800d262:	4959      	ldr	r1, [pc, #356]	; (800d3c8 <_printf_i+0x23c>)
 800d264:	2a6f      	cmp	r2, #111	; 0x6f
 800d266:	bf14      	ite	ne
 800d268:	220a      	movne	r2, #10
 800d26a:	2208      	moveq	r2, #8
 800d26c:	2000      	movs	r0, #0
 800d26e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800d272:	6865      	ldr	r5, [r4, #4]
 800d274:	60a5      	str	r5, [r4, #8]
 800d276:	2d00      	cmp	r5, #0
 800d278:	f2c0 809c 	blt.w	800d3b4 <_printf_i+0x228>
 800d27c:	6820      	ldr	r0, [r4, #0]
 800d27e:	f020 0004 	bic.w	r0, r0, #4
 800d282:	6020      	str	r0, [r4, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d13f      	bne.n	800d308 <_printf_i+0x17c>
 800d288:	2d00      	cmp	r5, #0
 800d28a:	f040 8095 	bne.w	800d3b8 <_printf_i+0x22c>
 800d28e:	4675      	mov	r5, lr
 800d290:	2a08      	cmp	r2, #8
 800d292:	d10b      	bne.n	800d2ac <_printf_i+0x120>
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	07da      	lsls	r2, r3, #31
 800d298:	d508      	bpl.n	800d2ac <_printf_i+0x120>
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	6862      	ldr	r2, [r4, #4]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	bfde      	ittt	le
 800d2a2:	2330      	movle	r3, #48	; 0x30
 800d2a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2ac:	ebae 0305 	sub.w	r3, lr, r5
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	f8cd 8000 	str.w	r8, [sp]
 800d2b6:	463b      	mov	r3, r7
 800d2b8:	aa03      	add	r2, sp, #12
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	4630      	mov	r0, r6
 800d2be:	f7ff feef 	bl	800d0a0 <_printf_common>
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d155      	bne.n	800d372 <_printf_i+0x1e6>
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ca:	b005      	add	sp, #20
 800d2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800d2d4:	493c      	ldr	r1, [pc, #240]	; (800d3c8 <_printf_i+0x23c>)
 800d2d6:	6822      	ldr	r2, [r4, #0]
 800d2d8:	6818      	ldr	r0, [r3, #0]
 800d2da:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d2de:	f100 0504 	add.w	r5, r0, #4
 800d2e2:	601d      	str	r5, [r3, #0]
 800d2e4:	d001      	beq.n	800d2ea <_printf_i+0x15e>
 800d2e6:	6803      	ldr	r3, [r0, #0]
 800d2e8:	e002      	b.n	800d2f0 <_printf_i+0x164>
 800d2ea:	0655      	lsls	r5, r2, #25
 800d2ec:	d5fb      	bpl.n	800d2e6 <_printf_i+0x15a>
 800d2ee:	8803      	ldrh	r3, [r0, #0]
 800d2f0:	07d0      	lsls	r0, r2, #31
 800d2f2:	bf44      	itt	mi
 800d2f4:	f042 0220 	orrmi.w	r2, r2, #32
 800d2f8:	6022      	strmi	r2, [r4, #0]
 800d2fa:	b91b      	cbnz	r3, 800d304 <_printf_i+0x178>
 800d2fc:	6822      	ldr	r2, [r4, #0]
 800d2fe:	f022 0220 	bic.w	r2, r2, #32
 800d302:	6022      	str	r2, [r4, #0]
 800d304:	2210      	movs	r2, #16
 800d306:	e7b1      	b.n	800d26c <_printf_i+0xe0>
 800d308:	4675      	mov	r5, lr
 800d30a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d30e:	fb02 3310 	mls	r3, r2, r0, r3
 800d312:	5ccb      	ldrb	r3, [r1, r3]
 800d314:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d318:	4603      	mov	r3, r0
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d1f5      	bne.n	800d30a <_printf_i+0x17e>
 800d31e:	e7b7      	b.n	800d290 <_printf_i+0x104>
 800d320:	6808      	ldr	r0, [r1, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	6949      	ldr	r1, [r1, #20]
 800d326:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d32a:	d004      	beq.n	800d336 <_printf_i+0x1aa>
 800d32c:	1d10      	adds	r0, r2, #4
 800d32e:	6018      	str	r0, [r3, #0]
 800d330:	6813      	ldr	r3, [r2, #0]
 800d332:	6019      	str	r1, [r3, #0]
 800d334:	e007      	b.n	800d346 <_printf_i+0x1ba>
 800d336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d33a:	f102 0004 	add.w	r0, r2, #4
 800d33e:	6018      	str	r0, [r3, #0]
 800d340:	6813      	ldr	r3, [r2, #0]
 800d342:	d0f6      	beq.n	800d332 <_printf_i+0x1a6>
 800d344:	8019      	strh	r1, [r3, #0]
 800d346:	2300      	movs	r3, #0
 800d348:	6123      	str	r3, [r4, #16]
 800d34a:	4675      	mov	r5, lr
 800d34c:	e7b1      	b.n	800d2b2 <_printf_i+0x126>
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	1d11      	adds	r1, r2, #4
 800d352:	6019      	str	r1, [r3, #0]
 800d354:	6815      	ldr	r5, [r2, #0]
 800d356:	6862      	ldr	r2, [r4, #4]
 800d358:	2100      	movs	r1, #0
 800d35a:	4628      	mov	r0, r5
 800d35c:	f7f2 ff40 	bl	80001e0 <memchr>
 800d360:	b108      	cbz	r0, 800d366 <_printf_i+0x1da>
 800d362:	1b40      	subs	r0, r0, r5
 800d364:	6060      	str	r0, [r4, #4]
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	6123      	str	r3, [r4, #16]
 800d36a:	2300      	movs	r3, #0
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d370:	e79f      	b.n	800d2b2 <_printf_i+0x126>
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	462a      	mov	r2, r5
 800d376:	4639      	mov	r1, r7
 800d378:	4630      	mov	r0, r6
 800d37a:	47c0      	blx	r8
 800d37c:	3001      	adds	r0, #1
 800d37e:	d0a2      	beq.n	800d2c6 <_printf_i+0x13a>
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	079b      	lsls	r3, r3, #30
 800d384:	d507      	bpl.n	800d396 <_printf_i+0x20a>
 800d386:	2500      	movs	r5, #0
 800d388:	f104 0919 	add.w	r9, r4, #25
 800d38c:	68e3      	ldr	r3, [r4, #12]
 800d38e:	9a03      	ldr	r2, [sp, #12]
 800d390:	1a9b      	subs	r3, r3, r2
 800d392:	429d      	cmp	r5, r3
 800d394:	db05      	blt.n	800d3a2 <_printf_i+0x216>
 800d396:	68e0      	ldr	r0, [r4, #12]
 800d398:	9b03      	ldr	r3, [sp, #12]
 800d39a:	4298      	cmp	r0, r3
 800d39c:	bfb8      	it	lt
 800d39e:	4618      	movlt	r0, r3
 800d3a0:	e793      	b.n	800d2ca <_printf_i+0x13e>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	464a      	mov	r2, r9
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	47c0      	blx	r8
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d08a      	beq.n	800d2c6 <_printf_i+0x13a>
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	e7eb      	b.n	800d38c <_printf_i+0x200>
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1a7      	bne.n	800d308 <_printf_i+0x17c>
 800d3b8:	780b      	ldrb	r3, [r1, #0]
 800d3ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3c2:	e765      	b.n	800d290 <_printf_i+0x104>
 800d3c4:	0800f049 	.word	0x0800f049
 800d3c8:	0800f038 	.word	0x0800f038

0800d3cc <_scanf_chars>:
 800d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d0:	4615      	mov	r5, r2
 800d3d2:	688a      	ldr	r2, [r1, #8]
 800d3d4:	4680      	mov	r8, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	b932      	cbnz	r2, 800d3e8 <_scanf_chars+0x1c>
 800d3da:	698a      	ldr	r2, [r1, #24]
 800d3dc:	2a00      	cmp	r2, #0
 800d3de:	bf0c      	ite	eq
 800d3e0:	2201      	moveq	r2, #1
 800d3e2:	f04f 32ff 	movne.w	r2, #4294967295
 800d3e6:	608a      	str	r2, [r1, #8]
 800d3e8:	6822      	ldr	r2, [r4, #0]
 800d3ea:	06d1      	lsls	r1, r2, #27
 800d3ec:	bf5f      	itttt	pl
 800d3ee:	681a      	ldrpl	r2, [r3, #0]
 800d3f0:	1d11      	addpl	r1, r2, #4
 800d3f2:	6019      	strpl	r1, [r3, #0]
 800d3f4:	6817      	ldrpl	r7, [r2, #0]
 800d3f6:	2600      	movs	r6, #0
 800d3f8:	69a3      	ldr	r3, [r4, #24]
 800d3fa:	b1db      	cbz	r3, 800d434 <_scanf_chars+0x68>
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d107      	bne.n	800d410 <_scanf_chars+0x44>
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	6962      	ldr	r2, [r4, #20]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	5cd3      	ldrb	r3, [r2, r3]
 800d408:	b9a3      	cbnz	r3, 800d434 <_scanf_chars+0x68>
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	d132      	bne.n	800d474 <_scanf_chars+0xa8>
 800d40e:	e006      	b.n	800d41e <_scanf_chars+0x52>
 800d410:	2b02      	cmp	r3, #2
 800d412:	d007      	beq.n	800d424 <_scanf_chars+0x58>
 800d414:	2e00      	cmp	r6, #0
 800d416:	d12d      	bne.n	800d474 <_scanf_chars+0xa8>
 800d418:	69a3      	ldr	r3, [r4, #24]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d12a      	bne.n	800d474 <_scanf_chars+0xa8>
 800d41e:	2001      	movs	r0, #1
 800d420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d424:	f000 faba 	bl	800d99c <__locale_ctype_ptr>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	4418      	add	r0, r3
 800d42e:	7843      	ldrb	r3, [r0, #1]
 800d430:	071b      	lsls	r3, r3, #28
 800d432:	d4ef      	bmi.n	800d414 <_scanf_chars+0x48>
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	06da      	lsls	r2, r3, #27
 800d438:	bf5e      	ittt	pl
 800d43a:	682b      	ldrpl	r3, [r5, #0]
 800d43c:	781b      	ldrbpl	r3, [r3, #0]
 800d43e:	703b      	strbpl	r3, [r7, #0]
 800d440:	682a      	ldr	r2, [r5, #0]
 800d442:	686b      	ldr	r3, [r5, #4]
 800d444:	f102 0201 	add.w	r2, r2, #1
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	68a2      	ldr	r2, [r4, #8]
 800d44c:	f103 33ff 	add.w	r3, r3, #4294967295
 800d450:	f102 32ff 	add.w	r2, r2, #4294967295
 800d454:	606b      	str	r3, [r5, #4]
 800d456:	f106 0601 	add.w	r6, r6, #1
 800d45a:	bf58      	it	pl
 800d45c:	3701      	addpl	r7, #1
 800d45e:	60a2      	str	r2, [r4, #8]
 800d460:	b142      	cbz	r2, 800d474 <_scanf_chars+0xa8>
 800d462:	2b00      	cmp	r3, #0
 800d464:	dcc8      	bgt.n	800d3f8 <_scanf_chars+0x2c>
 800d466:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d46a:	4629      	mov	r1, r5
 800d46c:	4640      	mov	r0, r8
 800d46e:	4798      	blx	r3
 800d470:	2800      	cmp	r0, #0
 800d472:	d0c1      	beq.n	800d3f8 <_scanf_chars+0x2c>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	f013 0310 	ands.w	r3, r3, #16
 800d47a:	d105      	bne.n	800d488 <_scanf_chars+0xbc>
 800d47c:	68e2      	ldr	r2, [r4, #12]
 800d47e:	3201      	adds	r2, #1
 800d480:	60e2      	str	r2, [r4, #12]
 800d482:	69a2      	ldr	r2, [r4, #24]
 800d484:	b102      	cbz	r2, 800d488 <_scanf_chars+0xbc>
 800d486:	703b      	strb	r3, [r7, #0]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	441e      	add	r6, r3
 800d48c:	6126      	str	r6, [r4, #16]
 800d48e:	2000      	movs	r0, #0
 800d490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d494 <_scanf_i>:
 800d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	469a      	mov	sl, r3
 800d49a:	4b74      	ldr	r3, [pc, #464]	; (800d66c <_scanf_i+0x1d8>)
 800d49c:	460c      	mov	r4, r1
 800d49e:	4683      	mov	fp, r0
 800d4a0:	4616      	mov	r6, r2
 800d4a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	ab03      	add	r3, sp, #12
 800d4aa:	68a7      	ldr	r7, [r4, #8]
 800d4ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d4b0:	4b6f      	ldr	r3, [pc, #444]	; (800d670 <_scanf_i+0x1dc>)
 800d4b2:	69a1      	ldr	r1, [r4, #24]
 800d4b4:	4a6f      	ldr	r2, [pc, #444]	; (800d674 <_scanf_i+0x1e0>)
 800d4b6:	2903      	cmp	r1, #3
 800d4b8:	bf18      	it	ne
 800d4ba:	461a      	movne	r2, r3
 800d4bc:	1e7b      	subs	r3, r7, #1
 800d4be:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800d4c2:	bf84      	itt	hi
 800d4c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d4c8:	60a3      	strhi	r3, [r4, #8]
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	9200      	str	r2, [sp, #0]
 800d4ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d4d2:	bf88      	it	hi
 800d4d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d4d8:	f104 091c 	add.w	r9, r4, #28
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	bf8c      	ite	hi
 800d4e0:	197f      	addhi	r7, r7, r5
 800d4e2:	2700      	movls	r7, #0
 800d4e4:	464b      	mov	r3, r9
 800d4e6:	f04f 0800 	mov.w	r8, #0
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	6831      	ldr	r1, [r6, #0]
 800d4ee:	ab03      	add	r3, sp, #12
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d4f6:	7809      	ldrb	r1, [r1, #0]
 800d4f8:	f7f2 fe72 	bl	80001e0 <memchr>
 800d4fc:	9b01      	ldr	r3, [sp, #4]
 800d4fe:	b328      	cbz	r0, 800d54c <_scanf_i+0xb8>
 800d500:	f1b8 0f01 	cmp.w	r8, #1
 800d504:	d156      	bne.n	800d5b4 <_scanf_i+0x120>
 800d506:	6862      	ldr	r2, [r4, #4]
 800d508:	b92a      	cbnz	r2, 800d516 <_scanf_i+0x82>
 800d50a:	2208      	movs	r2, #8
 800d50c:	6062      	str	r2, [r4, #4]
 800d50e:	6822      	ldr	r2, [r4, #0]
 800d510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d514:	6022      	str	r2, [r4, #0]
 800d516:	6822      	ldr	r2, [r4, #0]
 800d518:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d51c:	6022      	str	r2, [r4, #0]
 800d51e:	68a2      	ldr	r2, [r4, #8]
 800d520:	1e51      	subs	r1, r2, #1
 800d522:	60a1      	str	r1, [r4, #8]
 800d524:	b192      	cbz	r2, 800d54c <_scanf_i+0xb8>
 800d526:	6832      	ldr	r2, [r6, #0]
 800d528:	1c51      	adds	r1, r2, #1
 800d52a:	6031      	str	r1, [r6, #0]
 800d52c:	7812      	ldrb	r2, [r2, #0]
 800d52e:	701a      	strb	r2, [r3, #0]
 800d530:	1c5d      	adds	r5, r3, #1
 800d532:	6873      	ldr	r3, [r6, #4]
 800d534:	3b01      	subs	r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	6073      	str	r3, [r6, #4]
 800d53a:	dc06      	bgt.n	800d54a <_scanf_i+0xb6>
 800d53c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d540:	4631      	mov	r1, r6
 800d542:	4658      	mov	r0, fp
 800d544:	4798      	blx	r3
 800d546:	2800      	cmp	r0, #0
 800d548:	d176      	bne.n	800d638 <_scanf_i+0x1a4>
 800d54a:	462b      	mov	r3, r5
 800d54c:	f108 0801 	add.w	r8, r8, #1
 800d550:	f1b8 0f03 	cmp.w	r8, #3
 800d554:	d1c9      	bne.n	800d4ea <_scanf_i+0x56>
 800d556:	6862      	ldr	r2, [r4, #4]
 800d558:	b90a      	cbnz	r2, 800d55e <_scanf_i+0xca>
 800d55a:	220a      	movs	r2, #10
 800d55c:	6062      	str	r2, [r4, #4]
 800d55e:	6862      	ldr	r2, [r4, #4]
 800d560:	4945      	ldr	r1, [pc, #276]	; (800d678 <_scanf_i+0x1e4>)
 800d562:	6960      	ldr	r0, [r4, #20]
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	1a89      	subs	r1, r1, r2
 800d568:	f000 f888 	bl	800d67c <__sccl>
 800d56c:	9b01      	ldr	r3, [sp, #4]
 800d56e:	f04f 0800 	mov.w	r8, #0
 800d572:	461d      	mov	r5, r3
 800d574:	68a3      	ldr	r3, [r4, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d038      	beq.n	800d5ec <_scanf_i+0x158>
 800d57a:	6831      	ldr	r1, [r6, #0]
 800d57c:	6960      	ldr	r0, [r4, #20]
 800d57e:	780a      	ldrb	r2, [r1, #0]
 800d580:	5c80      	ldrb	r0, [r0, r2]
 800d582:	2800      	cmp	r0, #0
 800d584:	d032      	beq.n	800d5ec <_scanf_i+0x158>
 800d586:	2a30      	cmp	r2, #48	; 0x30
 800d588:	6822      	ldr	r2, [r4, #0]
 800d58a:	d121      	bne.n	800d5d0 <_scanf_i+0x13c>
 800d58c:	0510      	lsls	r0, r2, #20
 800d58e:	d51f      	bpl.n	800d5d0 <_scanf_i+0x13c>
 800d590:	f108 0801 	add.w	r8, r8, #1
 800d594:	b117      	cbz	r7, 800d59c <_scanf_i+0x108>
 800d596:	3301      	adds	r3, #1
 800d598:	3f01      	subs	r7, #1
 800d59a:	60a3      	str	r3, [r4, #8]
 800d59c:	6873      	ldr	r3, [r6, #4]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	6073      	str	r3, [r6, #4]
 800d5a4:	dd1b      	ble.n	800d5de <_scanf_i+0x14a>
 800d5a6:	6833      	ldr	r3, [r6, #0]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	6033      	str	r3, [r6, #0]
 800d5ac:	68a3      	ldr	r3, [r4, #8]
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	60a3      	str	r3, [r4, #8]
 800d5b2:	e7df      	b.n	800d574 <_scanf_i+0xe0>
 800d5b4:	f1b8 0f02 	cmp.w	r8, #2
 800d5b8:	d1b1      	bne.n	800d51e <_scanf_i+0x8a>
 800d5ba:	6822      	ldr	r2, [r4, #0]
 800d5bc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d5c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d5c4:	d1c2      	bne.n	800d54c <_scanf_i+0xb8>
 800d5c6:	2110      	movs	r1, #16
 800d5c8:	6061      	str	r1, [r4, #4]
 800d5ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5ce:	e7a5      	b.n	800d51c <_scanf_i+0x88>
 800d5d0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d5d4:	6022      	str	r2, [r4, #0]
 800d5d6:	780b      	ldrb	r3, [r1, #0]
 800d5d8:	702b      	strb	r3, [r5, #0]
 800d5da:	3501      	adds	r5, #1
 800d5dc:	e7de      	b.n	800d59c <_scanf_i+0x108>
 800d5de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4658      	mov	r0, fp
 800d5e6:	4798      	blx	r3
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0df      	beq.n	800d5ac <_scanf_i+0x118>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	05d9      	lsls	r1, r3, #23
 800d5f0:	d50c      	bpl.n	800d60c <_scanf_i+0x178>
 800d5f2:	454d      	cmp	r5, r9
 800d5f4:	d908      	bls.n	800d608 <_scanf_i+0x174>
 800d5f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d5fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5fe:	4632      	mov	r2, r6
 800d600:	4658      	mov	r0, fp
 800d602:	4798      	blx	r3
 800d604:	1e6f      	subs	r7, r5, #1
 800d606:	463d      	mov	r5, r7
 800d608:	454d      	cmp	r5, r9
 800d60a:	d02c      	beq.n	800d666 <_scanf_i+0x1d2>
 800d60c:	6822      	ldr	r2, [r4, #0]
 800d60e:	f012 0210 	ands.w	r2, r2, #16
 800d612:	d11e      	bne.n	800d652 <_scanf_i+0x1be>
 800d614:	702a      	strb	r2, [r5, #0]
 800d616:	6863      	ldr	r3, [r4, #4]
 800d618:	9e00      	ldr	r6, [sp, #0]
 800d61a:	4649      	mov	r1, r9
 800d61c:	4658      	mov	r0, fp
 800d61e:	47b0      	blx	r6
 800d620:	6822      	ldr	r2, [r4, #0]
 800d622:	f8da 3000 	ldr.w	r3, [sl]
 800d626:	f012 0f20 	tst.w	r2, #32
 800d62a:	d008      	beq.n	800d63e <_scanf_i+0x1aa>
 800d62c:	1d1a      	adds	r2, r3, #4
 800d62e:	f8ca 2000 	str.w	r2, [sl]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6018      	str	r0, [r3, #0]
 800d636:	e009      	b.n	800d64c <_scanf_i+0x1b8>
 800d638:	f04f 0800 	mov.w	r8, #0
 800d63c:	e7d6      	b.n	800d5ec <_scanf_i+0x158>
 800d63e:	07d2      	lsls	r2, r2, #31
 800d640:	d5f4      	bpl.n	800d62c <_scanf_i+0x198>
 800d642:	1d1a      	adds	r2, r3, #4
 800d644:	f8ca 2000 	str.w	r2, [sl]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	8018      	strh	r0, [r3, #0]
 800d64c:	68e3      	ldr	r3, [r4, #12]
 800d64e:	3301      	adds	r3, #1
 800d650:	60e3      	str	r3, [r4, #12]
 800d652:	eba5 0509 	sub.w	r5, r5, r9
 800d656:	44a8      	add	r8, r5
 800d658:	6925      	ldr	r5, [r4, #16]
 800d65a:	4445      	add	r5, r8
 800d65c:	6125      	str	r5, [r4, #16]
 800d65e:	2000      	movs	r0, #0
 800d660:	b007      	add	sp, #28
 800d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d666:	2001      	movs	r0, #1
 800d668:	e7fa      	b.n	800d660 <_scanf_i+0x1cc>
 800d66a:	bf00      	nop
 800d66c:	0800e080 	.word	0x0800e080
 800d670:	0800d8fd 	.word	0x0800d8fd
 800d674:	0800d7dd 	.word	0x0800d7dd
 800d678:	0800f06a 	.word	0x0800f06a

0800d67c <__sccl>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	780b      	ldrb	r3, [r1, #0]
 800d680:	2b5e      	cmp	r3, #94	; 0x5e
 800d682:	bf13      	iteet	ne
 800d684:	1c4a      	addne	r2, r1, #1
 800d686:	1c8a      	addeq	r2, r1, #2
 800d688:	784b      	ldrbeq	r3, [r1, #1]
 800d68a:	2100      	movne	r1, #0
 800d68c:	bf08      	it	eq
 800d68e:	2101      	moveq	r1, #1
 800d690:	1e44      	subs	r4, r0, #1
 800d692:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800d696:	f804 1f01 	strb.w	r1, [r4, #1]!
 800d69a:	42a5      	cmp	r5, r4
 800d69c:	d1fb      	bne.n	800d696 <__sccl+0x1a>
 800d69e:	b913      	cbnz	r3, 800d6a6 <__sccl+0x2a>
 800d6a0:	3a01      	subs	r2, #1
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
 800d6a6:	f081 0401 	eor.w	r4, r1, #1
 800d6aa:	54c4      	strb	r4, [r0, r3]
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	780d      	ldrb	r5, [r1, #0]
 800d6b0:	2d2d      	cmp	r5, #45	; 0x2d
 800d6b2:	f101 0201 	add.w	r2, r1, #1
 800d6b6:	d006      	beq.n	800d6c6 <__sccl+0x4a>
 800d6b8:	2d5d      	cmp	r5, #93	; 0x5d
 800d6ba:	d0f2      	beq.n	800d6a2 <__sccl+0x26>
 800d6bc:	b90d      	cbnz	r5, 800d6c2 <__sccl+0x46>
 800d6be:	460a      	mov	r2, r1
 800d6c0:	e7ef      	b.n	800d6a2 <__sccl+0x26>
 800d6c2:	462b      	mov	r3, r5
 800d6c4:	e7f1      	b.n	800d6aa <__sccl+0x2e>
 800d6c6:	784e      	ldrb	r6, [r1, #1]
 800d6c8:	2e5d      	cmp	r6, #93	; 0x5d
 800d6ca:	d0fa      	beq.n	800d6c2 <__sccl+0x46>
 800d6cc:	42b3      	cmp	r3, r6
 800d6ce:	dcf8      	bgt.n	800d6c2 <__sccl+0x46>
 800d6d0:	3102      	adds	r1, #2
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	429e      	cmp	r6, r3
 800d6d6:	54c4      	strb	r4, [r0, r3]
 800d6d8:	dcfb      	bgt.n	800d6d2 <__sccl+0x56>
 800d6da:	e7e8      	b.n	800d6ae <__sccl+0x32>

0800d6dc <_strtol_l.isra.0>:
 800d6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e0:	4680      	mov	r8, r0
 800d6e2:	4689      	mov	r9, r1
 800d6e4:	4692      	mov	sl, r2
 800d6e6:	461f      	mov	r7, r3
 800d6e8:	468b      	mov	fp, r1
 800d6ea:	465d      	mov	r5, fp
 800d6ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6f2:	f000 f950 	bl	800d996 <__locale_ctype_ptr_l>
 800d6f6:	4420      	add	r0, r4
 800d6f8:	7846      	ldrb	r6, [r0, #1]
 800d6fa:	f016 0608 	ands.w	r6, r6, #8
 800d6fe:	d10b      	bne.n	800d718 <_strtol_l.isra.0+0x3c>
 800d700:	2c2d      	cmp	r4, #45	; 0x2d
 800d702:	d10b      	bne.n	800d71c <_strtol_l.isra.0+0x40>
 800d704:	782c      	ldrb	r4, [r5, #0]
 800d706:	2601      	movs	r6, #1
 800d708:	f10b 0502 	add.w	r5, fp, #2
 800d70c:	b167      	cbz	r7, 800d728 <_strtol_l.isra.0+0x4c>
 800d70e:	2f10      	cmp	r7, #16
 800d710:	d114      	bne.n	800d73c <_strtol_l.isra.0+0x60>
 800d712:	2c30      	cmp	r4, #48	; 0x30
 800d714:	d00a      	beq.n	800d72c <_strtol_l.isra.0+0x50>
 800d716:	e011      	b.n	800d73c <_strtol_l.isra.0+0x60>
 800d718:	46ab      	mov	fp, r5
 800d71a:	e7e6      	b.n	800d6ea <_strtol_l.isra.0+0xe>
 800d71c:	2c2b      	cmp	r4, #43	; 0x2b
 800d71e:	bf04      	itt	eq
 800d720:	782c      	ldrbeq	r4, [r5, #0]
 800d722:	f10b 0502 	addeq.w	r5, fp, #2
 800d726:	e7f1      	b.n	800d70c <_strtol_l.isra.0+0x30>
 800d728:	2c30      	cmp	r4, #48	; 0x30
 800d72a:	d127      	bne.n	800d77c <_strtol_l.isra.0+0xa0>
 800d72c:	782b      	ldrb	r3, [r5, #0]
 800d72e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d732:	2b58      	cmp	r3, #88	; 0x58
 800d734:	d14b      	bne.n	800d7ce <_strtol_l.isra.0+0xf2>
 800d736:	786c      	ldrb	r4, [r5, #1]
 800d738:	2710      	movs	r7, #16
 800d73a:	3502      	adds	r5, #2
 800d73c:	2e00      	cmp	r6, #0
 800d73e:	bf0c      	ite	eq
 800d740:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d744:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d748:	2200      	movs	r2, #0
 800d74a:	fbb1 fef7 	udiv	lr, r1, r7
 800d74e:	4610      	mov	r0, r2
 800d750:	fb07 1c1e 	mls	ip, r7, lr, r1
 800d754:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d758:	2b09      	cmp	r3, #9
 800d75a:	d811      	bhi.n	800d780 <_strtol_l.isra.0+0xa4>
 800d75c:	461c      	mov	r4, r3
 800d75e:	42a7      	cmp	r7, r4
 800d760:	dd1d      	ble.n	800d79e <_strtol_l.isra.0+0xc2>
 800d762:	1c53      	adds	r3, r2, #1
 800d764:	d007      	beq.n	800d776 <_strtol_l.isra.0+0x9a>
 800d766:	4586      	cmp	lr, r0
 800d768:	d316      	bcc.n	800d798 <_strtol_l.isra.0+0xbc>
 800d76a:	d101      	bne.n	800d770 <_strtol_l.isra.0+0x94>
 800d76c:	45a4      	cmp	ip, r4
 800d76e:	db13      	blt.n	800d798 <_strtol_l.isra.0+0xbc>
 800d770:	fb00 4007 	mla	r0, r0, r7, r4
 800d774:	2201      	movs	r2, #1
 800d776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d77a:	e7eb      	b.n	800d754 <_strtol_l.isra.0+0x78>
 800d77c:	270a      	movs	r7, #10
 800d77e:	e7dd      	b.n	800d73c <_strtol_l.isra.0+0x60>
 800d780:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d784:	2b19      	cmp	r3, #25
 800d786:	d801      	bhi.n	800d78c <_strtol_l.isra.0+0xb0>
 800d788:	3c37      	subs	r4, #55	; 0x37
 800d78a:	e7e8      	b.n	800d75e <_strtol_l.isra.0+0x82>
 800d78c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d790:	2b19      	cmp	r3, #25
 800d792:	d804      	bhi.n	800d79e <_strtol_l.isra.0+0xc2>
 800d794:	3c57      	subs	r4, #87	; 0x57
 800d796:	e7e2      	b.n	800d75e <_strtol_l.isra.0+0x82>
 800d798:	f04f 32ff 	mov.w	r2, #4294967295
 800d79c:	e7eb      	b.n	800d776 <_strtol_l.isra.0+0x9a>
 800d79e:	1c53      	adds	r3, r2, #1
 800d7a0:	d108      	bne.n	800d7b4 <_strtol_l.isra.0+0xd8>
 800d7a2:	2322      	movs	r3, #34	; 0x22
 800d7a4:	f8c8 3000 	str.w	r3, [r8]
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	f1ba 0f00 	cmp.w	sl, #0
 800d7ae:	d107      	bne.n	800d7c0 <_strtol_l.isra.0+0xe4>
 800d7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b4:	b106      	cbz	r6, 800d7b8 <_strtol_l.isra.0+0xdc>
 800d7b6:	4240      	negs	r0, r0
 800d7b8:	f1ba 0f00 	cmp.w	sl, #0
 800d7bc:	d00c      	beq.n	800d7d8 <_strtol_l.isra.0+0xfc>
 800d7be:	b122      	cbz	r2, 800d7ca <_strtol_l.isra.0+0xee>
 800d7c0:	3d01      	subs	r5, #1
 800d7c2:	f8ca 5000 	str.w	r5, [sl]
 800d7c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ca:	464d      	mov	r5, r9
 800d7cc:	e7f9      	b.n	800d7c2 <_strtol_l.isra.0+0xe6>
 800d7ce:	2430      	movs	r4, #48	; 0x30
 800d7d0:	2f00      	cmp	r7, #0
 800d7d2:	d1b3      	bne.n	800d73c <_strtol_l.isra.0+0x60>
 800d7d4:	2708      	movs	r7, #8
 800d7d6:	e7b1      	b.n	800d73c <_strtol_l.isra.0+0x60>
 800d7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7dc <_strtol_r>:
 800d7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7de:	4c06      	ldr	r4, [pc, #24]	; (800d7f8 <_strtol_r+0x1c>)
 800d7e0:	4d06      	ldr	r5, [pc, #24]	; (800d7fc <_strtol_r+0x20>)
 800d7e2:	6824      	ldr	r4, [r4, #0]
 800d7e4:	6a24      	ldr	r4, [r4, #32]
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	bf08      	it	eq
 800d7ea:	462c      	moveq	r4, r5
 800d7ec:	9400      	str	r4, [sp, #0]
 800d7ee:	f7ff ff75 	bl	800d6dc <_strtol_l.isra.0>
 800d7f2:	b003      	add	sp, #12
 800d7f4:	bd30      	pop	{r4, r5, pc}
 800d7f6:	bf00      	nop
 800d7f8:	200002dc 	.word	0x200002dc
 800d7fc:	20000340 	.word	0x20000340

0800d800 <_strtoul_l.isra.0>:
 800d800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d804:	4680      	mov	r8, r0
 800d806:	4689      	mov	r9, r1
 800d808:	4692      	mov	sl, r2
 800d80a:	461e      	mov	r6, r3
 800d80c:	460f      	mov	r7, r1
 800d80e:	463d      	mov	r5, r7
 800d810:	9808      	ldr	r0, [sp, #32]
 800d812:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d816:	f000 f8be 	bl	800d996 <__locale_ctype_ptr_l>
 800d81a:	4420      	add	r0, r4
 800d81c:	7843      	ldrb	r3, [r0, #1]
 800d81e:	f013 0308 	ands.w	r3, r3, #8
 800d822:	d10a      	bne.n	800d83a <_strtoul_l.isra.0+0x3a>
 800d824:	2c2d      	cmp	r4, #45	; 0x2d
 800d826:	d10a      	bne.n	800d83e <_strtoul_l.isra.0+0x3e>
 800d828:	782c      	ldrb	r4, [r5, #0]
 800d82a:	2301      	movs	r3, #1
 800d82c:	1cbd      	adds	r5, r7, #2
 800d82e:	b15e      	cbz	r6, 800d848 <_strtoul_l.isra.0+0x48>
 800d830:	2e10      	cmp	r6, #16
 800d832:	d113      	bne.n	800d85c <_strtoul_l.isra.0+0x5c>
 800d834:	2c30      	cmp	r4, #48	; 0x30
 800d836:	d009      	beq.n	800d84c <_strtoul_l.isra.0+0x4c>
 800d838:	e010      	b.n	800d85c <_strtoul_l.isra.0+0x5c>
 800d83a:	462f      	mov	r7, r5
 800d83c:	e7e7      	b.n	800d80e <_strtoul_l.isra.0+0xe>
 800d83e:	2c2b      	cmp	r4, #43	; 0x2b
 800d840:	bf04      	itt	eq
 800d842:	782c      	ldrbeq	r4, [r5, #0]
 800d844:	1cbd      	addeq	r5, r7, #2
 800d846:	e7f2      	b.n	800d82e <_strtoul_l.isra.0+0x2e>
 800d848:	2c30      	cmp	r4, #48	; 0x30
 800d84a:	d125      	bne.n	800d898 <_strtoul_l.isra.0+0x98>
 800d84c:	782a      	ldrb	r2, [r5, #0]
 800d84e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d852:	2a58      	cmp	r2, #88	; 0x58
 800d854:	d14a      	bne.n	800d8ec <_strtoul_l.isra.0+0xec>
 800d856:	786c      	ldrb	r4, [r5, #1]
 800d858:	2610      	movs	r6, #16
 800d85a:	3502      	adds	r5, #2
 800d85c:	f04f 31ff 	mov.w	r1, #4294967295
 800d860:	2700      	movs	r7, #0
 800d862:	fbb1 f1f6 	udiv	r1, r1, r6
 800d866:	fb06 fe01 	mul.w	lr, r6, r1
 800d86a:	ea6f 0e0e 	mvn.w	lr, lr
 800d86e:	4638      	mov	r0, r7
 800d870:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800d874:	2a09      	cmp	r2, #9
 800d876:	d811      	bhi.n	800d89c <_strtoul_l.isra.0+0x9c>
 800d878:	4614      	mov	r4, r2
 800d87a:	42a6      	cmp	r6, r4
 800d87c:	dd1d      	ble.n	800d8ba <_strtoul_l.isra.0+0xba>
 800d87e:	2f00      	cmp	r7, #0
 800d880:	db18      	blt.n	800d8b4 <_strtoul_l.isra.0+0xb4>
 800d882:	4281      	cmp	r1, r0
 800d884:	d316      	bcc.n	800d8b4 <_strtoul_l.isra.0+0xb4>
 800d886:	d101      	bne.n	800d88c <_strtoul_l.isra.0+0x8c>
 800d888:	45a6      	cmp	lr, r4
 800d88a:	db13      	blt.n	800d8b4 <_strtoul_l.isra.0+0xb4>
 800d88c:	fb00 4006 	mla	r0, r0, r6, r4
 800d890:	2701      	movs	r7, #1
 800d892:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d896:	e7eb      	b.n	800d870 <_strtoul_l.isra.0+0x70>
 800d898:	260a      	movs	r6, #10
 800d89a:	e7df      	b.n	800d85c <_strtoul_l.isra.0+0x5c>
 800d89c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800d8a0:	2a19      	cmp	r2, #25
 800d8a2:	d801      	bhi.n	800d8a8 <_strtoul_l.isra.0+0xa8>
 800d8a4:	3c37      	subs	r4, #55	; 0x37
 800d8a6:	e7e8      	b.n	800d87a <_strtoul_l.isra.0+0x7a>
 800d8a8:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800d8ac:	2a19      	cmp	r2, #25
 800d8ae:	d804      	bhi.n	800d8ba <_strtoul_l.isra.0+0xba>
 800d8b0:	3c57      	subs	r4, #87	; 0x57
 800d8b2:	e7e2      	b.n	800d87a <_strtoul_l.isra.0+0x7a>
 800d8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d8b8:	e7eb      	b.n	800d892 <_strtoul_l.isra.0+0x92>
 800d8ba:	2f00      	cmp	r7, #0
 800d8bc:	da09      	bge.n	800d8d2 <_strtoul_l.isra.0+0xd2>
 800d8be:	2322      	movs	r3, #34	; 0x22
 800d8c0:	f8c8 3000 	str.w	r3, [r8]
 800d8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c8:	f1ba 0f00 	cmp.w	sl, #0
 800d8cc:	d107      	bne.n	800d8de <_strtoul_l.isra.0+0xde>
 800d8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d2:	b103      	cbz	r3, 800d8d6 <_strtoul_l.isra.0+0xd6>
 800d8d4:	4240      	negs	r0, r0
 800d8d6:	f1ba 0f00 	cmp.w	sl, #0
 800d8da:	d00c      	beq.n	800d8f6 <_strtoul_l.isra.0+0xf6>
 800d8dc:	b127      	cbz	r7, 800d8e8 <_strtoul_l.isra.0+0xe8>
 800d8de:	3d01      	subs	r5, #1
 800d8e0:	f8ca 5000 	str.w	r5, [sl]
 800d8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e8:	464d      	mov	r5, r9
 800d8ea:	e7f9      	b.n	800d8e0 <_strtoul_l.isra.0+0xe0>
 800d8ec:	2430      	movs	r4, #48	; 0x30
 800d8ee:	2e00      	cmp	r6, #0
 800d8f0:	d1b4      	bne.n	800d85c <_strtoul_l.isra.0+0x5c>
 800d8f2:	2608      	movs	r6, #8
 800d8f4:	e7b2      	b.n	800d85c <_strtoul_l.isra.0+0x5c>
 800d8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d8fc <_strtoul_r>:
 800d8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8fe:	4c06      	ldr	r4, [pc, #24]	; (800d918 <_strtoul_r+0x1c>)
 800d900:	4d06      	ldr	r5, [pc, #24]	; (800d91c <_strtoul_r+0x20>)
 800d902:	6824      	ldr	r4, [r4, #0]
 800d904:	6a24      	ldr	r4, [r4, #32]
 800d906:	2c00      	cmp	r4, #0
 800d908:	bf08      	it	eq
 800d90a:	462c      	moveq	r4, r5
 800d90c:	9400      	str	r4, [sp, #0]
 800d90e:	f7ff ff77 	bl	800d800 <_strtoul_l.isra.0>
 800d912:	b003      	add	sp, #12
 800d914:	bd30      	pop	{r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	200002dc 	.word	0x200002dc
 800d91c:	20000340 	.word	0x20000340

0800d920 <__submore>:
 800d920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d924:	460c      	mov	r4, r1
 800d926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d92c:	4299      	cmp	r1, r3
 800d92e:	d11e      	bne.n	800d96e <__submore+0x4e>
 800d930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d934:	f7fe ffd4 	bl	800c8e0 <_malloc_r>
 800d938:	b918      	cbnz	r0, 800d942 <__submore+0x22>
 800d93a:	f04f 30ff 	mov.w	r0, #4294967295
 800d93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d946:	63a3      	str	r3, [r4, #56]	; 0x38
 800d948:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d94c:	6360      	str	r0, [r4, #52]	; 0x34
 800d94e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d952:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d956:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d95a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d95e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d962:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d966:	6020      	str	r0, [r4, #0]
 800d968:	2000      	movs	r0, #0
 800d96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d96e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d970:	0077      	lsls	r7, r6, #1
 800d972:	463a      	mov	r2, r7
 800d974:	f000 f84c 	bl	800da10 <_realloc_r>
 800d978:	4605      	mov	r5, r0
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d0dd      	beq.n	800d93a <__submore+0x1a>
 800d97e:	eb00 0806 	add.w	r8, r0, r6
 800d982:	4601      	mov	r1, r0
 800d984:	4632      	mov	r2, r6
 800d986:	4640      	mov	r0, r8
 800d988:	f7fe ff49 	bl	800c81e <memcpy>
 800d98c:	f8c4 8000 	str.w	r8, [r4]
 800d990:	6365      	str	r5, [r4, #52]	; 0x34
 800d992:	63a7      	str	r7, [r4, #56]	; 0x38
 800d994:	e7e8      	b.n	800d968 <__submore+0x48>

0800d996 <__locale_ctype_ptr_l>:
 800d996:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d99a:	4770      	bx	lr

0800d99c <__locale_ctype_ptr>:
 800d99c:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <__locale_ctype_ptr+0x14>)
 800d99e:	4a05      	ldr	r2, [pc, #20]	; (800d9b4 <__locale_ctype_ptr+0x18>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6a1b      	ldr	r3, [r3, #32]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	bf08      	it	eq
 800d9a8:	4613      	moveq	r3, r2
 800d9aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800d9ae:	4770      	bx	lr
 800d9b0:	200002dc 	.word	0x200002dc
 800d9b4:	20000340 	.word	0x20000340

0800d9b8 <__ascii_mbtowc>:
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	b901      	cbnz	r1, 800d9be <__ascii_mbtowc+0x6>
 800d9bc:	a901      	add	r1, sp, #4
 800d9be:	b142      	cbz	r2, 800d9d2 <__ascii_mbtowc+0x1a>
 800d9c0:	b14b      	cbz	r3, 800d9d6 <__ascii_mbtowc+0x1e>
 800d9c2:	7813      	ldrb	r3, [r2, #0]
 800d9c4:	600b      	str	r3, [r1, #0]
 800d9c6:	7812      	ldrb	r2, [r2, #0]
 800d9c8:	1c10      	adds	r0, r2, #0
 800d9ca:	bf18      	it	ne
 800d9cc:	2001      	movne	r0, #1
 800d9ce:	b002      	add	sp, #8
 800d9d0:	4770      	bx	lr
 800d9d2:	4610      	mov	r0, r2
 800d9d4:	e7fb      	b.n	800d9ce <__ascii_mbtowc+0x16>
 800d9d6:	f06f 0001 	mvn.w	r0, #1
 800d9da:	e7f8      	b.n	800d9ce <__ascii_mbtowc+0x16>

0800d9dc <memmove>:
 800d9dc:	4288      	cmp	r0, r1
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	eb01 0302 	add.w	r3, r1, r2
 800d9e4:	d803      	bhi.n	800d9ee <memmove+0x12>
 800d9e6:	1e42      	subs	r2, r0, #1
 800d9e8:	4299      	cmp	r1, r3
 800d9ea:	d10c      	bne.n	800da06 <memmove+0x2a>
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	4298      	cmp	r0, r3
 800d9f0:	d2f9      	bcs.n	800d9e6 <memmove+0xa>
 800d9f2:	1881      	adds	r1, r0, r2
 800d9f4:	1ad2      	subs	r2, r2, r3
 800d9f6:	42d3      	cmn	r3, r2
 800d9f8:	d100      	bne.n	800d9fc <memmove+0x20>
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da04:	e7f7      	b.n	800d9f6 <memmove+0x1a>
 800da06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da0e:	e7eb      	b.n	800d9e8 <memmove+0xc>

0800da10 <_realloc_r>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	4607      	mov	r7, r0
 800da14:	4614      	mov	r4, r2
 800da16:	460e      	mov	r6, r1
 800da18:	b921      	cbnz	r1, 800da24 <_realloc_r+0x14>
 800da1a:	4611      	mov	r1, r2
 800da1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da20:	f7fe bf5e 	b.w	800c8e0 <_malloc_r>
 800da24:	b922      	cbnz	r2, 800da30 <_realloc_r+0x20>
 800da26:	f7fe ff0d 	bl	800c844 <_free_r>
 800da2a:	4625      	mov	r5, r4
 800da2c:	4628      	mov	r0, r5
 800da2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da30:	f000 f821 	bl	800da76 <_malloc_usable_size_r>
 800da34:	4284      	cmp	r4, r0
 800da36:	d90f      	bls.n	800da58 <_realloc_r+0x48>
 800da38:	4621      	mov	r1, r4
 800da3a:	4638      	mov	r0, r7
 800da3c:	f7fe ff50 	bl	800c8e0 <_malloc_r>
 800da40:	4605      	mov	r5, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d0f2      	beq.n	800da2c <_realloc_r+0x1c>
 800da46:	4631      	mov	r1, r6
 800da48:	4622      	mov	r2, r4
 800da4a:	f7fe fee8 	bl	800c81e <memcpy>
 800da4e:	4631      	mov	r1, r6
 800da50:	4638      	mov	r0, r7
 800da52:	f7fe fef7 	bl	800c844 <_free_r>
 800da56:	e7e9      	b.n	800da2c <_realloc_r+0x1c>
 800da58:	4635      	mov	r5, r6
 800da5a:	e7e7      	b.n	800da2c <_realloc_r+0x1c>

0800da5c <__ascii_wctomb>:
 800da5c:	b149      	cbz	r1, 800da72 <__ascii_wctomb+0x16>
 800da5e:	2aff      	cmp	r2, #255	; 0xff
 800da60:	bf85      	ittet	hi
 800da62:	238a      	movhi	r3, #138	; 0x8a
 800da64:	6003      	strhi	r3, [r0, #0]
 800da66:	700a      	strbls	r2, [r1, #0]
 800da68:	f04f 30ff 	movhi.w	r0, #4294967295
 800da6c:	bf98      	it	ls
 800da6e:	2001      	movls	r0, #1
 800da70:	4770      	bx	lr
 800da72:	4608      	mov	r0, r1
 800da74:	4770      	bx	lr

0800da76 <_malloc_usable_size_r>:
 800da76:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f1a0 0004 	sub.w	r0, r0, #4
 800da80:	bfbc      	itt	lt
 800da82:	580b      	ldrlt	r3, [r1, r0]
 800da84:	18c0      	addlt	r0, r0, r3
 800da86:	4770      	bx	lr

0800da88 <atan>:
 800da88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	ec55 4b10 	vmov	r4, r5, d0
 800da90:	4bc7      	ldr	r3, [pc, #796]	; (800ddb0 <atan+0x328>)
 800da92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800da96:	429e      	cmp	r6, r3
 800da98:	46ab      	mov	fp, r5
 800da9a:	dd18      	ble.n	800dace <atan+0x46>
 800da9c:	4ac5      	ldr	r2, [pc, #788]	; (800ddb4 <atan+0x32c>)
 800da9e:	4296      	cmp	r6, r2
 800daa0:	dc01      	bgt.n	800daa6 <atan+0x1e>
 800daa2:	d109      	bne.n	800dab8 <atan+0x30>
 800daa4:	b144      	cbz	r4, 800dab8 <atan+0x30>
 800daa6:	4622      	mov	r2, r4
 800daa8:	462b      	mov	r3, r5
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7f2 fbed 	bl	800028c <__adddf3>
 800dab2:	4604      	mov	r4, r0
 800dab4:	460d      	mov	r5, r1
 800dab6:	e006      	b.n	800dac6 <atan+0x3e>
 800dab8:	f1bb 0f00 	cmp.w	fp, #0
 800dabc:	f300 813a 	bgt.w	800dd34 <atan+0x2ac>
 800dac0:	a59f      	add	r5, pc, #636	; (adr r5, 800dd40 <atan+0x2b8>)
 800dac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dac6:	ec45 4b10 	vmov	d0, r4, r5
 800daca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	4bba      	ldr	r3, [pc, #744]	; (800ddb8 <atan+0x330>)
 800dad0:	429e      	cmp	r6, r3
 800dad2:	dc14      	bgt.n	800dafe <atan+0x76>
 800dad4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dad8:	429e      	cmp	r6, r3
 800dada:	dc0d      	bgt.n	800daf8 <atan+0x70>
 800dadc:	a39a      	add	r3, pc, #616	; (adr r3, 800dd48 <atan+0x2c0>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	ee10 0a10 	vmov	r0, s0
 800dae6:	4629      	mov	r1, r5
 800dae8:	f7f2 fbd0 	bl	800028c <__adddf3>
 800daec:	2200      	movs	r2, #0
 800daee:	4bb3      	ldr	r3, [pc, #716]	; (800ddbc <atan+0x334>)
 800daf0:	f7f3 f80e 	bl	8000b10 <__aeabi_dcmpgt>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d1e6      	bne.n	800dac6 <atan+0x3e>
 800daf8:	f04f 3aff 	mov.w	sl, #4294967295
 800dafc:	e02b      	b.n	800db56 <atan+0xce>
 800dafe:	f000 f96b 	bl	800ddd8 <fabs>
 800db02:	4baf      	ldr	r3, [pc, #700]	; (800ddc0 <atan+0x338>)
 800db04:	429e      	cmp	r6, r3
 800db06:	ec55 4b10 	vmov	r4, r5, d0
 800db0a:	f300 80bf 	bgt.w	800dc8c <atan+0x204>
 800db0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db12:	429e      	cmp	r6, r3
 800db14:	f300 80a0 	bgt.w	800dc58 <atan+0x1d0>
 800db18:	ee10 2a10 	vmov	r2, s0
 800db1c:	ee10 0a10 	vmov	r0, s0
 800db20:	462b      	mov	r3, r5
 800db22:	4629      	mov	r1, r5
 800db24:	f7f2 fbb2 	bl	800028c <__adddf3>
 800db28:	2200      	movs	r2, #0
 800db2a:	4ba4      	ldr	r3, [pc, #656]	; (800ddbc <atan+0x334>)
 800db2c:	f7f2 fbac 	bl	8000288 <__aeabi_dsub>
 800db30:	2200      	movs	r2, #0
 800db32:	4606      	mov	r6, r0
 800db34:	460f      	mov	r7, r1
 800db36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db3a:	4620      	mov	r0, r4
 800db3c:	4629      	mov	r1, r5
 800db3e:	f7f2 fba5 	bl	800028c <__adddf3>
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4630      	mov	r0, r6
 800db48:	4639      	mov	r1, r7
 800db4a:	f7f2 fe7b 	bl	8000844 <__aeabi_ddiv>
 800db4e:	f04f 0a00 	mov.w	sl, #0
 800db52:	4604      	mov	r4, r0
 800db54:	460d      	mov	r5, r1
 800db56:	4622      	mov	r2, r4
 800db58:	462b      	mov	r3, r5
 800db5a:	4620      	mov	r0, r4
 800db5c:	4629      	mov	r1, r5
 800db5e:	f7f2 fd47 	bl	80005f0 <__aeabi_dmul>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	4680      	mov	r8, r0
 800db68:	4689      	mov	r9, r1
 800db6a:	f7f2 fd41 	bl	80005f0 <__aeabi_dmul>
 800db6e:	a378      	add	r3, pc, #480	; (adr r3, 800dd50 <atan+0x2c8>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	4606      	mov	r6, r0
 800db76:	460f      	mov	r7, r1
 800db78:	f7f2 fd3a 	bl	80005f0 <__aeabi_dmul>
 800db7c:	a376      	add	r3, pc, #472	; (adr r3, 800dd58 <atan+0x2d0>)
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	f7f2 fb83 	bl	800028c <__adddf3>
 800db86:	4632      	mov	r2, r6
 800db88:	463b      	mov	r3, r7
 800db8a:	f7f2 fd31 	bl	80005f0 <__aeabi_dmul>
 800db8e:	a374      	add	r3, pc, #464	; (adr r3, 800dd60 <atan+0x2d8>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fb7a 	bl	800028c <__adddf3>
 800db98:	4632      	mov	r2, r6
 800db9a:	463b      	mov	r3, r7
 800db9c:	f7f2 fd28 	bl	80005f0 <__aeabi_dmul>
 800dba0:	a371      	add	r3, pc, #452	; (adr r3, 800dd68 <atan+0x2e0>)
 800dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba6:	f7f2 fb71 	bl	800028c <__adddf3>
 800dbaa:	4632      	mov	r2, r6
 800dbac:	463b      	mov	r3, r7
 800dbae:	f7f2 fd1f 	bl	80005f0 <__aeabi_dmul>
 800dbb2:	a36f      	add	r3, pc, #444	; (adr r3, 800dd70 <atan+0x2e8>)
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f7f2 fb68 	bl	800028c <__adddf3>
 800dbbc:	4632      	mov	r2, r6
 800dbbe:	463b      	mov	r3, r7
 800dbc0:	f7f2 fd16 	bl	80005f0 <__aeabi_dmul>
 800dbc4:	a36c      	add	r3, pc, #432	; (adr r3, 800dd78 <atan+0x2f0>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f7f2 fb5f 	bl	800028c <__adddf3>
 800dbce:	4642      	mov	r2, r8
 800dbd0:	464b      	mov	r3, r9
 800dbd2:	f7f2 fd0d 	bl	80005f0 <__aeabi_dmul>
 800dbd6:	a36a      	add	r3, pc, #424	; (adr r3, 800dd80 <atan+0x2f8>)
 800dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbdc:	4680      	mov	r8, r0
 800dbde:	4689      	mov	r9, r1
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7f2 fd04 	bl	80005f0 <__aeabi_dmul>
 800dbe8:	a367      	add	r3, pc, #412	; (adr r3, 800dd88 <atan+0x300>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fb4b 	bl	8000288 <__aeabi_dsub>
 800dbf2:	4632      	mov	r2, r6
 800dbf4:	463b      	mov	r3, r7
 800dbf6:	f7f2 fcfb 	bl	80005f0 <__aeabi_dmul>
 800dbfa:	a365      	add	r3, pc, #404	; (adr r3, 800dd90 <atan+0x308>)
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	f7f2 fb42 	bl	8000288 <__aeabi_dsub>
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	f7f2 fcf2 	bl	80005f0 <__aeabi_dmul>
 800dc0c:	a362      	add	r3, pc, #392	; (adr r3, 800dd98 <atan+0x310>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	f7f2 fb39 	bl	8000288 <__aeabi_dsub>
 800dc16:	4632      	mov	r2, r6
 800dc18:	463b      	mov	r3, r7
 800dc1a:	f7f2 fce9 	bl	80005f0 <__aeabi_dmul>
 800dc1e:	a360      	add	r3, pc, #384	; (adr r3, 800dda0 <atan+0x318>)
 800dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc24:	f7f2 fb30 	bl	8000288 <__aeabi_dsub>
 800dc28:	4632      	mov	r2, r6
 800dc2a:	463b      	mov	r3, r7
 800dc2c:	f7f2 fce0 	bl	80005f0 <__aeabi_dmul>
 800dc30:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dc34:	4602      	mov	r2, r0
 800dc36:	460b      	mov	r3, r1
 800dc38:	d155      	bne.n	800dce6 <atan+0x25e>
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	f7f2 fb25 	bl	800028c <__adddf3>
 800dc42:	4622      	mov	r2, r4
 800dc44:	462b      	mov	r3, r5
 800dc46:	f7f2 fcd3 	bl	80005f0 <__aeabi_dmul>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4620      	mov	r0, r4
 800dc50:	4629      	mov	r1, r5
 800dc52:	f7f2 fb19 	bl	8000288 <__aeabi_dsub>
 800dc56:	e72c      	b.n	800dab2 <atan+0x2a>
 800dc58:	ee10 0a10 	vmov	r0, s0
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	4b57      	ldr	r3, [pc, #348]	; (800ddbc <atan+0x334>)
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fb11 	bl	8000288 <__aeabi_dsub>
 800dc66:	2200      	movs	r2, #0
 800dc68:	4606      	mov	r6, r0
 800dc6a:	460f      	mov	r7, r1
 800dc6c:	4b53      	ldr	r3, [pc, #332]	; (800ddbc <atan+0x334>)
 800dc6e:	4620      	mov	r0, r4
 800dc70:	4629      	mov	r1, r5
 800dc72:	f7f2 fb0b 	bl	800028c <__adddf3>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	f7f2 fde1 	bl	8000844 <__aeabi_ddiv>
 800dc82:	f04f 0a01 	mov.w	sl, #1
 800dc86:	4604      	mov	r4, r0
 800dc88:	460d      	mov	r5, r1
 800dc8a:	e764      	b.n	800db56 <atan+0xce>
 800dc8c:	4b4d      	ldr	r3, [pc, #308]	; (800ddc4 <atan+0x33c>)
 800dc8e:	429e      	cmp	r6, r3
 800dc90:	dc1d      	bgt.n	800dcce <atan+0x246>
 800dc92:	ee10 0a10 	vmov	r0, s0
 800dc96:	2200      	movs	r2, #0
 800dc98:	4b4b      	ldr	r3, [pc, #300]	; (800ddc8 <atan+0x340>)
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	f7f2 faf4 	bl	8000288 <__aeabi_dsub>
 800dca0:	2200      	movs	r2, #0
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	4b48      	ldr	r3, [pc, #288]	; (800ddc8 <atan+0x340>)
 800dca8:	4620      	mov	r0, r4
 800dcaa:	4629      	mov	r1, r5
 800dcac:	f7f2 fca0 	bl	80005f0 <__aeabi_dmul>
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4b42      	ldr	r3, [pc, #264]	; (800ddbc <atan+0x334>)
 800dcb4:	f7f2 faea 	bl	800028c <__adddf3>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	f7f2 fdc0 	bl	8000844 <__aeabi_ddiv>
 800dcc4:	f04f 0a02 	mov.w	sl, #2
 800dcc8:	4604      	mov	r4, r0
 800dcca:	460d      	mov	r5, r1
 800dccc:	e743      	b.n	800db56 <atan+0xce>
 800dcce:	462b      	mov	r3, r5
 800dcd0:	ee10 2a10 	vmov	r2, s0
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	493d      	ldr	r1, [pc, #244]	; (800ddcc <atan+0x344>)
 800dcd8:	f7f2 fdb4 	bl	8000844 <__aeabi_ddiv>
 800dcdc:	f04f 0a03 	mov.w	sl, #3
 800dce0:	4604      	mov	r4, r0
 800dce2:	460d      	mov	r5, r1
 800dce4:	e737      	b.n	800db56 <atan+0xce>
 800dce6:	4640      	mov	r0, r8
 800dce8:	4649      	mov	r1, r9
 800dcea:	f7f2 facf 	bl	800028c <__adddf3>
 800dcee:	4622      	mov	r2, r4
 800dcf0:	462b      	mov	r3, r5
 800dcf2:	f7f2 fc7d 	bl	80005f0 <__aeabi_dmul>
 800dcf6:	4e36      	ldr	r6, [pc, #216]	; (800ddd0 <atan+0x348>)
 800dcf8:	4b36      	ldr	r3, [pc, #216]	; (800ddd4 <atan+0x34c>)
 800dcfa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800dcfe:	4456      	add	r6, sl
 800dd00:	449a      	add	sl, r3
 800dd02:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd06:	f7f2 fabf 	bl	8000288 <__aeabi_dsub>
 800dd0a:	4622      	mov	r2, r4
 800dd0c:	462b      	mov	r3, r5
 800dd0e:	f7f2 fabb 	bl	8000288 <__aeabi_dsub>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd1a:	f7f2 fab5 	bl	8000288 <__aeabi_dsub>
 800dd1e:	f1bb 0f00 	cmp.w	fp, #0
 800dd22:	4604      	mov	r4, r0
 800dd24:	460d      	mov	r5, r1
 800dd26:	f6bf aece 	bge.w	800dac6 <atan+0x3e>
 800dd2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd2e:	4604      	mov	r4, r0
 800dd30:	461d      	mov	r5, r3
 800dd32:	e6c8      	b.n	800dac6 <atan+0x3e>
 800dd34:	a51c      	add	r5, pc, #112	; (adr r5, 800dda8 <atan+0x320>)
 800dd36:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd3a:	e6c4      	b.n	800dac6 <atan+0x3e>
 800dd3c:	f3af 8000 	nop.w
 800dd40:	54442d18 	.word	0x54442d18
 800dd44:	bff921fb 	.word	0xbff921fb
 800dd48:	8800759c 	.word	0x8800759c
 800dd4c:	7e37e43c 	.word	0x7e37e43c
 800dd50:	e322da11 	.word	0xe322da11
 800dd54:	3f90ad3a 	.word	0x3f90ad3a
 800dd58:	24760deb 	.word	0x24760deb
 800dd5c:	3fa97b4b 	.word	0x3fa97b4b
 800dd60:	a0d03d51 	.word	0xa0d03d51
 800dd64:	3fb10d66 	.word	0x3fb10d66
 800dd68:	c54c206e 	.word	0xc54c206e
 800dd6c:	3fb745cd 	.word	0x3fb745cd
 800dd70:	920083ff 	.word	0x920083ff
 800dd74:	3fc24924 	.word	0x3fc24924
 800dd78:	5555550d 	.word	0x5555550d
 800dd7c:	3fd55555 	.word	0x3fd55555
 800dd80:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd84:	bfa2b444 	.word	0xbfa2b444
 800dd88:	52defd9a 	.word	0x52defd9a
 800dd8c:	3fadde2d 	.word	0x3fadde2d
 800dd90:	af749a6d 	.word	0xaf749a6d
 800dd94:	3fb3b0f2 	.word	0x3fb3b0f2
 800dd98:	fe231671 	.word	0xfe231671
 800dd9c:	3fbc71c6 	.word	0x3fbc71c6
 800dda0:	9998ebc4 	.word	0x9998ebc4
 800dda4:	3fc99999 	.word	0x3fc99999
 800dda8:	54442d18 	.word	0x54442d18
 800ddac:	3ff921fb 	.word	0x3ff921fb
 800ddb0:	440fffff 	.word	0x440fffff
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	3fdbffff 	.word	0x3fdbffff
 800ddbc:	3ff00000 	.word	0x3ff00000
 800ddc0:	3ff2ffff 	.word	0x3ff2ffff
 800ddc4:	40037fff 	.word	0x40037fff
 800ddc8:	3ff80000 	.word	0x3ff80000
 800ddcc:	bff00000 	.word	0xbff00000
 800ddd0:	0800f1e8 	.word	0x0800f1e8
 800ddd4:	0800f208 	.word	0x0800f208

0800ddd8 <fabs>:
 800ddd8:	ec53 2b10 	vmov	r2, r3, d0
 800dddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dde0:	ec43 2b10 	vmov	d0, r2, r3
 800dde4:	4770      	bx	lr
	...

0800dde8 <sqrt>:
 800dde8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddec:	ed2d 8b02 	vpush	{d8}
 800ddf0:	b08b      	sub	sp, #44	; 0x2c
 800ddf2:	ec55 4b10 	vmov	r4, r5, d0
 800ddf6:	f000 f851 	bl	800de9c <__ieee754_sqrt>
 800ddfa:	4b26      	ldr	r3, [pc, #152]	; (800de94 <sqrt+0xac>)
 800ddfc:	eeb0 8a40 	vmov.f32	s16, s0
 800de00:	eef0 8a60 	vmov.f32	s17, s1
 800de04:	f993 6000 	ldrsb.w	r6, [r3]
 800de08:	1c73      	adds	r3, r6, #1
 800de0a:	d02a      	beq.n	800de62 <sqrt+0x7a>
 800de0c:	4622      	mov	r2, r4
 800de0e:	462b      	mov	r3, r5
 800de10:	4620      	mov	r0, r4
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 fe86 	bl	8000b24 <__aeabi_dcmpun>
 800de18:	4607      	mov	r7, r0
 800de1a:	bb10      	cbnz	r0, 800de62 <sqrt+0x7a>
 800de1c:	f04f 0800 	mov.w	r8, #0
 800de20:	f04f 0900 	mov.w	r9, #0
 800de24:	4642      	mov	r2, r8
 800de26:	464b      	mov	r3, r9
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	f7f2 fe52 	bl	8000ad4 <__aeabi_dcmplt>
 800de30:	b1b8      	cbz	r0, 800de62 <sqrt+0x7a>
 800de32:	2301      	movs	r3, #1
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	4b18      	ldr	r3, [pc, #96]	; (800de98 <sqrt+0xb0>)
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	9708      	str	r7, [sp, #32]
 800de3c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800de40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800de44:	b9b6      	cbnz	r6, 800de74 <sqrt+0x8c>
 800de46:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800de4a:	4668      	mov	r0, sp
 800de4c:	f000 f8d6 	bl	800dffc <matherr>
 800de50:	b1d0      	cbz	r0, 800de88 <sqrt+0xa0>
 800de52:	9b08      	ldr	r3, [sp, #32]
 800de54:	b11b      	cbz	r3, 800de5e <sqrt+0x76>
 800de56:	f000 f8d3 	bl	800e000 <__errno>
 800de5a:	9b08      	ldr	r3, [sp, #32]
 800de5c:	6003      	str	r3, [r0, #0]
 800de5e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800de62:	eeb0 0a48 	vmov.f32	s0, s16
 800de66:	eef0 0a68 	vmov.f32	s1, s17
 800de6a:	b00b      	add	sp, #44	; 0x2c
 800de6c:	ecbd 8b02 	vpop	{d8}
 800de70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de74:	4642      	mov	r2, r8
 800de76:	464b      	mov	r3, r9
 800de78:	4640      	mov	r0, r8
 800de7a:	4649      	mov	r1, r9
 800de7c:	f7f2 fce2 	bl	8000844 <__aeabi_ddiv>
 800de80:	2e02      	cmp	r6, #2
 800de82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de86:	d1e0      	bne.n	800de4a <sqrt+0x62>
 800de88:	f000 f8ba 	bl	800e000 <__errno>
 800de8c:	2321      	movs	r3, #33	; 0x21
 800de8e:	6003      	str	r3, [r0, #0]
 800de90:	e7df      	b.n	800de52 <sqrt+0x6a>
 800de92:	bf00      	nop
 800de94:	200004ac 	.word	0x200004ac
 800de98:	0800f228 	.word	0x0800f228

0800de9c <__ieee754_sqrt>:
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	ec55 4b10 	vmov	r4, r5, d0
 800dea4:	4e54      	ldr	r6, [pc, #336]	; (800dff8 <__ieee754_sqrt+0x15c>)
 800dea6:	43ae      	bics	r6, r5
 800dea8:	ee10 0a10 	vmov	r0, s0
 800deac:	462b      	mov	r3, r5
 800deae:	462a      	mov	r2, r5
 800deb0:	4621      	mov	r1, r4
 800deb2:	d113      	bne.n	800dedc <__ieee754_sqrt+0x40>
 800deb4:	ee10 2a10 	vmov	r2, s0
 800deb8:	462b      	mov	r3, r5
 800deba:	ee10 0a10 	vmov	r0, s0
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 fb96 	bl	80005f0 <__aeabi_dmul>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4620      	mov	r0, r4
 800deca:	4629      	mov	r1, r5
 800decc:	f7f2 f9de 	bl	800028c <__adddf3>
 800ded0:	4604      	mov	r4, r0
 800ded2:	460d      	mov	r5, r1
 800ded4:	ec45 4b10 	vmov	d0, r4, r5
 800ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dedc:	2d00      	cmp	r5, #0
 800dede:	dc10      	bgt.n	800df02 <__ieee754_sqrt+0x66>
 800dee0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dee4:	4330      	orrs	r0, r6
 800dee6:	d0f5      	beq.n	800ded4 <__ieee754_sqrt+0x38>
 800dee8:	b15d      	cbz	r5, 800df02 <__ieee754_sqrt+0x66>
 800deea:	ee10 2a10 	vmov	r2, s0
 800deee:	462b      	mov	r3, r5
 800def0:	4620      	mov	r0, r4
 800def2:	4629      	mov	r1, r5
 800def4:	f7f2 f9c8 	bl	8000288 <__aeabi_dsub>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	f7f2 fca2 	bl	8000844 <__aeabi_ddiv>
 800df00:	e7e6      	b.n	800ded0 <__ieee754_sqrt+0x34>
 800df02:	151b      	asrs	r3, r3, #20
 800df04:	d10c      	bne.n	800df20 <__ieee754_sqrt+0x84>
 800df06:	2a00      	cmp	r2, #0
 800df08:	d06d      	beq.n	800dfe6 <__ieee754_sqrt+0x14a>
 800df0a:	2000      	movs	r0, #0
 800df0c:	02d6      	lsls	r6, r2, #11
 800df0e:	d56e      	bpl.n	800dfee <__ieee754_sqrt+0x152>
 800df10:	1e44      	subs	r4, r0, #1
 800df12:	1b1b      	subs	r3, r3, r4
 800df14:	f1c0 0420 	rsb	r4, r0, #32
 800df18:	fa21 f404 	lsr.w	r4, r1, r4
 800df1c:	4322      	orrs	r2, r4
 800df1e:	4081      	lsls	r1, r0
 800df20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800df24:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800df28:	07dd      	lsls	r5, r3, #31
 800df2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800df2e:	bf42      	ittt	mi
 800df30:	0052      	lslmi	r2, r2, #1
 800df32:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800df36:	0049      	lslmi	r1, r1, #1
 800df38:	1058      	asrs	r0, r3, #1
 800df3a:	2500      	movs	r5, #0
 800df3c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800df40:	441a      	add	r2, r3
 800df42:	0049      	lsls	r1, r1, #1
 800df44:	2316      	movs	r3, #22
 800df46:	462c      	mov	r4, r5
 800df48:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800df4c:	19a7      	adds	r7, r4, r6
 800df4e:	4297      	cmp	r7, r2
 800df50:	bfde      	ittt	le
 800df52:	1bd2      	suble	r2, r2, r7
 800df54:	19bc      	addle	r4, r7, r6
 800df56:	19ad      	addle	r5, r5, r6
 800df58:	0052      	lsls	r2, r2, #1
 800df5a:	3b01      	subs	r3, #1
 800df5c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800df60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800df64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df68:	d1f0      	bne.n	800df4c <__ieee754_sqrt+0xb0>
 800df6a:	f04f 0e20 	mov.w	lr, #32
 800df6e:	469c      	mov	ip, r3
 800df70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800df74:	42a2      	cmp	r2, r4
 800df76:	eb06 070c 	add.w	r7, r6, ip
 800df7a:	dc02      	bgt.n	800df82 <__ieee754_sqrt+0xe6>
 800df7c:	d112      	bne.n	800dfa4 <__ieee754_sqrt+0x108>
 800df7e:	428f      	cmp	r7, r1
 800df80:	d810      	bhi.n	800dfa4 <__ieee754_sqrt+0x108>
 800df82:	2f00      	cmp	r7, #0
 800df84:	eb07 0c06 	add.w	ip, r7, r6
 800df88:	da34      	bge.n	800dff4 <__ieee754_sqrt+0x158>
 800df8a:	f1bc 0f00 	cmp.w	ip, #0
 800df8e:	db31      	blt.n	800dff4 <__ieee754_sqrt+0x158>
 800df90:	f104 0801 	add.w	r8, r4, #1
 800df94:	1b12      	subs	r2, r2, r4
 800df96:	428f      	cmp	r7, r1
 800df98:	bf88      	it	hi
 800df9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800df9e:	1bc9      	subs	r1, r1, r7
 800dfa0:	4433      	add	r3, r6
 800dfa2:	4644      	mov	r4, r8
 800dfa4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800dfa8:	f1be 0e01 	subs.w	lr, lr, #1
 800dfac:	443a      	add	r2, r7
 800dfae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dfb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dfb6:	d1dd      	bne.n	800df74 <__ieee754_sqrt+0xd8>
 800dfb8:	430a      	orrs	r2, r1
 800dfba:	d006      	beq.n	800dfca <__ieee754_sqrt+0x12e>
 800dfbc:	1c5c      	adds	r4, r3, #1
 800dfbe:	bf13      	iteet	ne
 800dfc0:	3301      	addne	r3, #1
 800dfc2:	3501      	addeq	r5, #1
 800dfc4:	4673      	moveq	r3, lr
 800dfc6:	f023 0301 	bicne.w	r3, r3, #1
 800dfca:	106a      	asrs	r2, r5, #1
 800dfcc:	085b      	lsrs	r3, r3, #1
 800dfce:	07e9      	lsls	r1, r5, #31
 800dfd0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dfd4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dfd8:	bf48      	it	mi
 800dfda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dfde:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800dfe2:	461c      	mov	r4, r3
 800dfe4:	e776      	b.n	800ded4 <__ieee754_sqrt+0x38>
 800dfe6:	0aca      	lsrs	r2, r1, #11
 800dfe8:	3b15      	subs	r3, #21
 800dfea:	0549      	lsls	r1, r1, #21
 800dfec:	e78b      	b.n	800df06 <__ieee754_sqrt+0x6a>
 800dfee:	0052      	lsls	r2, r2, #1
 800dff0:	3001      	adds	r0, #1
 800dff2:	e78b      	b.n	800df0c <__ieee754_sqrt+0x70>
 800dff4:	46a0      	mov	r8, r4
 800dff6:	e7cd      	b.n	800df94 <__ieee754_sqrt+0xf8>
 800dff8:	7ff00000 	.word	0x7ff00000

0800dffc <matherr>:
 800dffc:	2000      	movs	r0, #0
 800dffe:	4770      	bx	lr

0800e000 <__errno>:
 800e000:	4b01      	ldr	r3, [pc, #4]	; (800e008 <__errno+0x8>)
 800e002:	6818      	ldr	r0, [r3, #0]
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	200002dc 	.word	0x200002dc

0800e00c <_sbrk>:
 800e00c:	4b04      	ldr	r3, [pc, #16]	; (800e020 <_sbrk+0x14>)
 800e00e:	6819      	ldr	r1, [r3, #0]
 800e010:	4602      	mov	r2, r0
 800e012:	b909      	cbnz	r1, 800e018 <_sbrk+0xc>
 800e014:	4903      	ldr	r1, [pc, #12]	; (800e024 <_sbrk+0x18>)
 800e016:	6019      	str	r1, [r3, #0]
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	4402      	add	r2, r0
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	4770      	bx	lr
 800e020:	20000940 	.word	0x20000940
 800e024:	2000b0d4 	.word	0x2000b0d4

0800e028 <_init>:
 800e028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02a:	bf00      	nop
 800e02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e02e:	bc08      	pop	{r3}
 800e030:	469e      	mov	lr, r3
 800e032:	4770      	bx	lr

0800e034 <_fini>:
 800e034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e036:	bf00      	nop
 800e038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e03a:	bc08      	pop	{r3}
 800e03c:	469e      	mov	lr, r3
 800e03e:	4770      	bx	lr
