
knee_can_impedance_position_control_new_store_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800e168  0800e168  0001e168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e890  0800e890  0001e890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e898  0800e898  0001e898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e89c  0800e89c  0001e89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000047c  20000000  0800e8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002047c  2**0
                  CONTENTS
  8 .bss          0000a96c  20000480  20000480  00020480  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  2000adec  2000adec  00020480  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005a6c2  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009692  00000000  00000000  0007ab6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001c959  00000000  00000000  00084200  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f70  00000000  00000000  000a0b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000037d0  00000000  00000000  000a2ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001a05d  00000000  00000000  000a62a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b5a7  00000000  00000000  000c02fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000cb8a4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006ac4  00000000  00000000  000cb920  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000d23e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000480 	.word	0x20000480
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e150 	.word	0x0800e150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000484 	.word	0x20000484
 80001cc:	0800e150 	.word	0x0800e150

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <CAN_configure>:
//
//// CNF3: CONFIGURATION 3 REGISTER (ADDRESS: 28h)
//MCP_write(0x28,0x05);
//}
/*configuration for 1mbps: https://www.kvaser.com/support/calculators/bit-timing-calculator/ */
void CAN_configure() {
 8000f90:	b508      	push	{r3, lr}
// CNF1: CONFIGURATION 1 REGISTER (ADDRESS: 2Ah)
	MCP_write(0x2A, 0xC0);
 8000f92:	21c0      	movs	r1, #192	; 0xc0
 8000f94:	202a      	movs	r0, #42	; 0x2a
 8000f96:	f001 ff0f 	bl	8002db8 <MCP_write>

// CNF2: CONFIGURATION 2 REGISTER (ADDRESS: 29h)
	MCP_write(0x29, 0x89);
 8000f9a:	2189      	movs	r1, #137	; 0x89
 8000f9c:	2029      	movs	r0, #41	; 0x29
 8000f9e:	f001 ff0b 	bl	8002db8 <MCP_write>

// CNF3: CONFIGURATION 3 REGISTER (ADDRESS: 28h)
	MCP_write(0x28, 0x04);
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	2028      	movs	r0, #40	; 0x28
}
 8000fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MCP_write(0x28, 0x04);
 8000faa:	f001 bf05 	b.w	8002db8 <MCP_write>

08000fae <CAN_mode>:

// sets the CAN operation mode
void CAN_mode() {
// CANCTRL: CAN CONTROL REGISTER (ADDRESS: XFh)
	MCP_write(0x0F, 0x08);
 8000fae:	2108      	movs	r1, #8
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	f001 bf01 	b.w	8002db8 <MCP_write>

08000fb6 <CAN_transmit>:
// CANSTAT: CAN STATUS REGISTER (ADDRESS: XEh)
//MCP_read(0x0E);
}

// Sends the apropriate message information to the transmit buffers and then flags them for transmittal
void CAN_transmit(int CAN_ID, int CAN_message[]) {
 8000fb6:	b538      	push	{r3, r4, r5, lr}
 8000fb8:	460c      	mov	r4, r1
 8000fba:	4605      	mov	r5, r0
	SIDH = CAN_ID >> 3;
	SIDL = CAN_ID << 5;

//  TXBxSIDH: TRANSMIT BUFFER x STANDARD IDENTIFIER HIGH REGISTER
// (ADDRESS: 31h, 41h, 51h)
	MCP_write(0x51, SIDH);
 8000fbc:	10c1      	asrs	r1, r0, #3
 8000fbe:	2051      	movs	r0, #81	; 0x51
 8000fc0:	f001 fefa 	bl	8002db8 <MCP_write>

// TXBxSIDL: TRANSMIT BUFFER x STANDARD IDENTIFIER LOW REGISTER
// (ADDRESS: 32h, 42h, 52h)
	MCP_write(0x52, SIDL);
 8000fc4:	0169      	lsls	r1, r5, #5
 8000fc6:	2052      	movs	r0, #82	; 0x52
 8000fc8:	f001 fef6 	bl	8002db8 <MCP_write>

//  TXBxDLC: TRANSMIT BUFFER x DATA LENGTH CODE REGISTER
// (ADDRESS: 35h, 45h, 55h)
	MCP_write(0x55, 0x08);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	2055      	movs	r0, #85	; 0x55
 8000fd0:	f001 fef2 	bl	8002db8 <MCP_write>

// TXBxDn: TRANSMIT BUFFER x DATA BYTE n REGISTER
// (ADDRESS: 36h-3Dh, 46h-4Dh, 56h-5Dh)
// The data to be loaded into the transmit buffer for sending
	MCP_write(0x56, CAN_message[0]);
 8000fd4:	6821      	ldr	r1, [r4, #0]
 8000fd6:	2056      	movs	r0, #86	; 0x56
 8000fd8:	f001 feee 	bl	8002db8 <MCP_write>
	MCP_write(0x57, CAN_message[1]);
 8000fdc:	6861      	ldr	r1, [r4, #4]
 8000fde:	2057      	movs	r0, #87	; 0x57
 8000fe0:	f001 feea 	bl	8002db8 <MCP_write>
	MCP_write(0x58, CAN_message[2]);
 8000fe4:	68a1      	ldr	r1, [r4, #8]
 8000fe6:	2058      	movs	r0, #88	; 0x58
 8000fe8:	f001 fee6 	bl	8002db8 <MCP_write>
	MCP_write(0x59, CAN_message[3]);
 8000fec:	68e1      	ldr	r1, [r4, #12]
 8000fee:	2059      	movs	r0, #89	; 0x59
 8000ff0:	f001 fee2 	bl	8002db8 <MCP_write>
	MCP_write(0x5A, CAN_message[4]);
 8000ff4:	6921      	ldr	r1, [r4, #16]
 8000ff6:	205a      	movs	r0, #90	; 0x5a
 8000ff8:	f001 fede 	bl	8002db8 <MCP_write>
	MCP_write(0x5B, CAN_message[5]);
 8000ffc:	6961      	ldr	r1, [r4, #20]
 8000ffe:	205b      	movs	r0, #91	; 0x5b
 8001000:	f001 feda 	bl	8002db8 <MCP_write>
	MCP_write(0x5C, CAN_message[6]);
 8001004:	69a1      	ldr	r1, [r4, #24]
 8001006:	205c      	movs	r0, #92	; 0x5c
 8001008:	f001 fed6 	bl	8002db8 <MCP_write>
	MCP_write(0x5D, CAN_message[7]);
 800100c:	69e1      	ldr	r1, [r4, #28]
 800100e:	205d      	movs	r0, #93	; 0x5d
 8001010:	f001 fed2 	bl	8002db8 <MCP_write>

// Setting the TXREQ bit high in the TXBxCRTL (0x30) register iniates message sending
// This bit remains high until the message is sent
	MCP_write(0x50, 0x0F);
 8001014:	210f      	movs	r1, #15
 8001016:	2050      	movs	r0, #80	; 0x50
}
 8001018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MCP_write(0x50, 0x0F);
 800101c:	f001 becc 	b.w	8002db8 <MCP_write>

08001020 <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(int data[],int object, int subindex, int value){
 8001020:	b510      	push	{r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
    data[1] = (0x00 | object); //Index LowByte
    data[2] = (0x00 | (object >> 8)); //Index HighByte
    data[3] = subindex; //subindex
 8001022:	60c2      	str	r2, [r0, #12]
    data[4] = (0x00 | value); //SDO Byte 0
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8001024:	121a      	asrs	r2, r3, #8
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8001026:	2422      	movs	r4, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 8001028:	6041      	str	r1, [r0, #4]
    data[4] = (0x00 | value); //SDO Byte 0
 800102a:	6103      	str	r3, [r0, #16]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 800102c:	1209      	asrs	r1, r1, #8
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 800102e:	6142      	str	r2, [r0, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8001030:	141a      	asrs	r2, r3, #16
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8001032:	161b      	asrs	r3, r3, #24
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8001034:	6004      	str	r4, [r0, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001036:	6081      	str	r1, [r0, #8]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8001038:	6182      	str	r2, [r0, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800103a:	61c3      	str	r3, [r0, #28]
 800103c:	bd10      	pop	{r4, pc}

0800103e <EPOS4_set_operation_mode>:
}

void EPOS4_set_operation_mode(int CAN_ID, int mode){
 800103e:	b510      	push	{r4, lr}
 8001040:	b088      	sub	sp, #32
    int data[8];
    int object = 0x6060;
    int subindex = 0x00;
    int value = mode;
    EPOS4_data_framer(data,object,subindex,value);
 8001042:	460b      	mov	r3, r1
 8001044:	2200      	movs	r2, #0
void EPOS4_set_operation_mode(int CAN_ID, int mode){
 8001046:	4604      	mov	r4, r0
    EPOS4_data_framer(data,object,subindex,value);
 8001048:	f246 0160 	movw	r1, #24672	; 0x6060
 800104c:	4668      	mov	r0, sp
 800104e:	f7ff ffe7 	bl	8001020 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, data);
 8001052:	4669      	mov	r1, sp
 8001054:	4620      	mov	r0, r4
 8001056:	f7ff ffae 	bl	8000fb6 <CAN_transmit>
    delay_us(10000);
 800105a:	f242 7010 	movw	r0, #10000	; 0x2710
 800105e:	f003 f90f 	bl	8004280 <delay_us>
}
 8001062:	b008      	add	sp, #32
 8001064:	bd10      	pop	{r4, pc}

08001066 <EPOS4_PVM_start>:

    CAN_transmit(CAN_ID, data);
    delay_us(10000);
}

void EPOS4_PVM_start(int CAN_ID){
 8001066:	b500      	push	{lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001068:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_PVM_start(int CAN_ID){
 800106c:	b089      	sub	sp, #36	; 0x24
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 800106e:	2222      	movs	r2, #34	; 0x22
 8001070:	f246 0340 	movw	r3, #24640	; 0x6040
 8001074:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    int object = 0x6040;
    int subindex = 0x00;
    int value = 0x000F;
    EPOS4_data_framer(data,object,subindex,value);

    CAN_transmit(CAN_ID, data);
 8001078:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 800107a:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 800107c:	220f      	movs	r2, #15
    data[3] = subindex; //subindex
 800107e:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 8001080:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8001082:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8001084:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8001086:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 8001088:	f7ff ff95 	bl	8000fb6 <CAN_transmit>
    delay_us(10000);
 800108c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001090:	f003 f8f6 	bl	8004280 <delay_us>
}
 8001094:	b009      	add	sp, #36	; 0x24
 8001096:	f85d fb04 	ldr.w	pc, [sp], #4

0800109a <EPOS4_enable>:
void EPOS4_enable(int CAN_ID){
 800109a:	b510      	push	{r4, lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 800109c:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_enable(int CAN_ID){
 80010a0:	b088      	sub	sp, #32
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80010a2:	2222      	movs	r2, #34	; 0x22
 80010a4:	f246 0340 	movw	r3, #24640	; 0x6040
 80010a8:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    CAN_transmit(CAN_ID, data);
 80010ac:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 80010ae:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 80010b0:	2206      	movs	r2, #6
void EPOS4_enable(int CAN_ID){
 80010b2:	4604      	mov	r4, r0
    data[3] = subindex; //subindex
 80010b4:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 80010b6:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 80010b8:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 80010ba:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 80010bc:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 80010be:	f7ff ff7a 	bl	8000fb6 <CAN_transmit>
    delay_us(10000);
 80010c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80010c6:	f003 f8db 	bl	8004280 <delay_us>
    EPOS4_enable2(CAN_ID);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ffcb 	bl	8001066 <EPOS4_PVM_start>
}
 80010d0:	b008      	add	sp, #32
 80010d2:	bd10      	pop	{r4, pc}

080010d4 <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(int CAN_ID, int torque){
 80010d4:	b510      	push	{r4, lr}
 80010d6:	b088      	sub	sp, #32
    }
    else{

    }

    EPOS4_data_framer(data,object,subindex,value);
 80010d8:	460b      	mov	r3, r1
 80010da:	2200      	movs	r2, #0
void EPOS4_CST_apply_torque(int CAN_ID, int torque){
 80010dc:	4604      	mov	r4, r0
    EPOS4_data_framer(data,object,subindex,value);
 80010de:	f246 0171 	movw	r1, #24689	; 0x6071
 80010e2:	4668      	mov	r0, sp
 80010e4:	f7ff ff9c 	bl	8001020 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, data);
 80010e8:	4669      	mov	r1, sp
 80010ea:	4620      	mov	r0, r4
 80010ec:	f7ff ff63 	bl	8000fb6 <CAN_transmit>
    delay_us(50); //1500
 80010f0:	2032      	movs	r0, #50	; 0x32
 80010f2:	f003 f8c5 	bl	8004280 <delay_us>
}
 80010f6:	b008      	add	sp, #32
 80010f8:	bd10      	pop	{r4, pc}

080010fa <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, data);
    delay_us(1500);
}

void EPOS4_clear_errors(int CAN_ID){
 80010fa:	b500      	push	{lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80010fc:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_clear_errors(int CAN_ID){
 8001100:	b089      	sub	sp, #36	; 0x24
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001102:	2222      	movs	r2, #34	; 0x22
 8001104:	f246 0340 	movw	r3, #24640	; 0x6040
 8001108:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    int object = 0x6040;
    int subindex = 0x00;
    int value = 0x0080;
    EPOS4_data_framer(data,object,subindex,value);

    CAN_transmit(CAN_ID, data);
 800110c:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 800110e:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 8001110:	2280      	movs	r2, #128	; 0x80
    data[3] = subindex; //subindex
 8001112:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 8001114:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8001116:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8001118:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800111a:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 800111c:	f7ff ff4b 	bl	8000fb6 <CAN_transmit>
//    delay_us(200);
//    delay_us(1500); // testing by commenting it
}
 8001120:	b009      	add	sp, #36	; 0x24
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4

08001126 <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8001126:	b530      	push	{r4, r5, lr}
    
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 8001128:	ec53 2b10 	vmov	r2, r3, d0
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 800112c:	b087      	sub	sp, #28
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 800112e:	ec51 0b14 	vmov	r0, r1, d4
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8001132:	ed8d 1b04 	vstr	d1, [sp, #16]
 8001136:	ed8d 3b00 	vstr	d3, [sp]
 800113a:	ed8d 2b02 	vstr	d2, [sp, #8]
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 800113e:	f7ff f8a3 	bl	8000288 <__aeabi_dsub>
 8001142:	ed9d 2b02 	vldr	d2, [sp, #8]
 8001146:	ec53 2b12 	vmov	r2, r3, d2
 800114a:	f7ff fa51 	bl	80005f0 <__aeabi_dmul>
 800114e:	ed9d 1b04 	vldr	d1, [sp, #16]
 8001152:	ed9d 3b00 	vldr	d3, [sp]
 8001156:	ec53 2b11 	vmov	r2, r3, d1
 800115a:	4604      	mov	r4, r0
 800115c:	460d      	mov	r5, r1
 800115e:	ec51 0b13 	vmov	r0, r1, d3
 8001162:	f7ff fa45 	bl	80005f0 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4620      	mov	r0, r4
 800116c:	4629      	mov	r1, r5
 800116e:	f7ff f88b 	bl	8000288 <__aeabi_dsub>
 8001172:	4602      	mov	r2, r0
 8001174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
}
 8001178:	ec43 2b10 	vmov	d0, r2, r3
 800117c:	b007      	add	sp, #28
 800117e:	bd30      	pop	{r4, r5, pc}

08001180 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8001180:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8001182:	2301      	movs	r3, #1
 8001184:	f88d 3007 	strb.w	r3, [sp, #7]
  
//  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
//  {
//   status = SD_NOT_PRESENT;
//  }
  return status;
 8001188:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800118c:	b002      	add	sp, #8
 800118e:	4770      	bx	lr

08001190 <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 8001190:	4801      	ldr	r0, [pc, #4]	; (8001198 <BSP_SD_IRQHandler+0x8>)
 8001192:	f005 bdf9 	b.w	8006d88 <HAL_SD_IRQHandler>
 8001196:	bf00      	nop
 8001198:	20008660 	.word	0x20008660

0800119c <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 800119c:	4b01      	ldr	r3, [pc, #4]	; (80011a4 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 800119e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80011a0:	f004 ba3c 	b.w	800561c <HAL_DMA_IRQHandler>
 80011a4:	20008660 	.word	0x20008660

080011a8 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80011a8:	4b01      	ldr	r3, [pc, #4]	; (80011b0 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80011aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80011ac:	f004 ba36 	b.w	800561c <HAL_DMA_IRQHandler>
 80011b0:	20008660 	.word	0x20008660

080011b4 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <BSP_SD_GetStatus+0x8>)
 80011b6:	f006 ba35 	b.w	8007624 <HAL_SD_GetStatus>
 80011ba:	bf00      	nop
 80011bc:	20008660 	.word	0x20008660

080011c0 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80011c0:	4601      	mov	r1, r0
 80011c2:	4801      	ldr	r0, [pc, #4]	; (80011c8 <BSP_SD_GetCardInfo+0x8>)
 80011c4:	f005 be40 	b.w	8006e48 <HAL_SD_Get_CardInfo>
 80011c8:	20008660 	.word	0x20008660

080011cc <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80011cc:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80011ce:	4c15      	ldr	r4, [pc, #84]	; (8001224 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80011d0:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80011d2:	2307      	movs	r3, #7
 80011d4:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80011da:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ea:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80011ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011f0:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80011f2:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <SD_DMAConfigRx+0x5c>)
 80011f6:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80011f8:	4620      	mov	r0, r4
 80011fa:	f004 f9f1 	bl	80055e0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80011fe:	4620      	mov	r0, r4
 8001200:	f004 f968 	bl	80054d4 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8001204:	4620      	mov	r0, r4
 8001206:	f004 f8f5 	bl	80053f4 <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <SD_DMAConfigRx+0x60>)
 800120c:	2230      	movs	r2, #48	; 0x30
 800120e:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 8001212:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001214:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001218:	605a      	str	r2, [r3, #4]
}
 800121a:	bf14      	ite	ne
 800121c:	2029      	movne	r0, #41	; 0x29
 800121e:	2000      	moveq	r0, #0
 8001220:	bd10      	pop	{r4, pc}
 8001222:	bf00      	nop
 8001224:	2000049c 	.word	0x2000049c
 8001228:	40020444 	.word	0x40020444
 800122c:	e000e100 	.word	0xe000e100

08001230 <BSP_SD_ReadBlocks_DMA>:
{
 8001230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 8001232:	4c10      	ldr	r4, [pc, #64]	; (8001274 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 8001234:	4605      	mov	r5, r0
 8001236:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001238:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 800123a:	2300      	movs	r3, #0
{
 800123c:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 800123e:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001240:	f7ff ffc4 	bl	80011cc <SD_DMAConfigRx>
  if(state == MSD_OK)
 8001244:	b998      	cbnz	r0, 800126e <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9b08      	ldr	r3, [sp, #32]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4632      	mov	r2, r6
 8001250:	463b      	mov	r3, r7
 8001252:	4629      	mov	r1, r5
 8001254:	4620      	mov	r0, r4
 8001256:	f005 fc9d 	bl	8006b94 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 800125a:	b940      	cbnz	r0, 800126e <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 800125c:	4906      	ldr	r1, [pc, #24]	; (8001278 <BSP_SD_ReadBlocks_DMA+0x48>)
 800125e:	4620      	mov	r0, r4
 8001260:	f006 f9af 	bl	80075c2 <HAL_SD_CheckReadOperation>
 8001264:	3000      	adds	r0, #0
 8001266:	bf18      	it	ne
 8001268:	2001      	movne	r0, #1
}
 800126a:	b003      	add	sp, #12
 800126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800126e:	2001      	movs	r0, #1
 8001270:	e7fb      	b.n	800126a <BSP_SD_ReadBlocks_DMA+0x3a>
 8001272:	bf00      	nop
 8001274:	20008660 	.word	0x20008660
 8001278:	00989680 	.word	0x00989680

0800127c <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 800127c:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800127e:	4c15      	ldr	r4, [pc, #84]	; (80012d4 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8001280:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8001282:	2307      	movs	r3, #7
 8001284:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001286:	2310      	movs	r3, #16
 8001288:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001296:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800129c:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800129e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012a2:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80012a4:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <SD_DMAConfigTx+0x5c>)
 80012a8:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80012aa:	4620      	mov	r0, r4
 80012ac:	f004 f998 	bl	80055e0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f004 f90f 	bl	80054d4 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f004 f89c 	bl	80053f4 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <SD_DMAConfigTx+0x60>)
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80012c4:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ca:	605a      	str	r2, [r3, #4]
}
 80012cc:	bf14      	ite	ne
 80012ce:	2029      	movne	r0, #41	; 0x29
 80012d0:	2000      	moveq	r0, #0
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	200004e4 	.word	0x200004e4
 80012d8:	40020444 	.word	0x40020444
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <BSP_SD_Init>:
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 80012e2:	2214      	movs	r2, #20
{
 80012e4:	b08b      	sub	sp, #44	; 0x2c
  uSdHandle.Instance = SDMMC1;
 80012e6:	4c38      	ldr	r4, [pc, #224]	; (80013c8 <BSP_SD_Init+0xe8>)
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <BSP_SD_Init+0xec>)
 80012ea:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80012ec:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 80012ee:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 80012f0:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80012f4:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80012f6:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80012f8:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80012fa:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80012fc:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 80012fe:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001300:	f00a f8a5 	bl	800b44e <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <BSP_SD_Init+0xf0>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001306:	4833      	ldr	r0, [pc, #204]	; (80013d4 <BSP_SD_Init+0xf4>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001308:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800130a:	4e33      	ldr	r6, [pc, #204]	; (80013d8 <BSP_SD_Init+0xf8>)
 800130c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001310:	661a      	str	r2, [r3, #96]	; 0x60
 8001312:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001314:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 800131c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800131e:	f042 0202 	orr.w	r2, r2, #2
 8001322:	649a      	str	r2, [r3, #72]	; 0x48
 8001324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001326:	f002 0202 	and.w	r2, r2, #2
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001330:	f042 0204 	orr.w	r2, r2, #4
 8001334:	64da      	str	r2, [r3, #76]	; 0x4c
 8001336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001338:	f002 0204 	and.w	r2, r2, #4
 800133c:	9202      	str	r2, [sp, #8]
 800133e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001342:	f042 0208 	orr.w	r2, r2, #8
 8001346:	64da      	str	r2, [r3, #76]	; 0x4c
 8001348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800134a:	f002 0208 	and.w	r2, r2, #8
 800134e:	9203      	str	r2, [sp, #12]
 8001350:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8001352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001354:	432a      	orrs	r2, r5
 8001356:	64da      	str	r2, [r3, #76]	; 0x4c
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 800135a:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 800135c:	402b      	ands	r3, r5
 800135e:	9304      	str	r3, [sp, #16]
 8001360:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800136a:	230c      	movs	r3, #12
 800136c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800136e:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001370:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001374:	9305      	str	r3, [sp, #20]
 8001376:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800137a:	f004 f997 	bl	80056ac <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 800137e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <BSP_SD_Init+0xfc>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 8001382:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8001384:	a905      	add	r1, sp, #20
 8001386:	f004 f991 	bl	80056ac <HAL_GPIO_Init>
 800138a:	6077      	str	r7, [r6, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff ff75 	bl	800127c <SD_DMAConfigTx>
 8001392:	b900      	cbnz	r0, 8001396 <BSP_SD_Init+0xb6>
 8001394:	6077      	str	r7, [r6, #4]
  __IO uint8_t status = SD_PRESENT;
 8001396:	f88d 5014 	strb.w	r5, [sp, #20]
  return status;
 800139a:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d002      	beq.n	80013a8 <BSP_SD_Init+0xc8>
    return MSD_ERROR;
 80013a2:	2001      	movs	r0, #1
}
 80013a4:	b00b      	add	sp, #44	; 0x2c
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80013a8:	490d      	ldr	r1, [pc, #52]	; (80013e0 <BSP_SD_Init+0x100>)
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <BSP_SD_Init+0xe8>)
 80013ac:	f005 fe86 	bl	80070bc <HAL_SD_Init>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1f6      	bne.n	80013a2 <BSP_SD_Init+0xc2>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80013b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <BSP_SD_Init+0xe8>)
 80013ba:	f006 f857 	bl	800746c <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80013be:	3000      	adds	r0, #0
 80013c0:	bf18      	it	ne
 80013c2:	2001      	movne	r0, #1
 80013c4:	e7ee      	b.n	80013a4 <BSP_SD_Init+0xc4>
 80013c6:	bf00      	nop
 80013c8:	20008660 	.word	0x20008660
 80013cc:	40012800 	.word	0x40012800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000800 	.word	0x48000800
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	20000530 	.word	0x20000530

080013e4 <BSP_SD_WriteBlocks_DMA>:
{
 80013e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 80013e6:	4c10      	ldr	r4, [pc, #64]	; (8001428 <BSP_SD_WriteBlocks_DMA+0x44>)
{
 80013e8:	4605      	mov	r5, r0
 80013ea:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 80013ec:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 80013ee:	2300      	movs	r3, #0
{
 80013f0:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 80013f2:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 80013f4:	f7ff ff42 	bl	800127c <SD_DMAConfigTx>
  if(state == MSD_OK)
 80013f8:	b998      	cbnz	r0, 8001422 <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80013fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	9b08      	ldr	r3, [sp, #32]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4632      	mov	r2, r6
 8001404:	463b      	mov	r3, r7
 8001406:	4629      	mov	r1, r5
 8001408:	4620      	mov	r0, r4
 800140a:	f005 fc3d 	bl	8006c88 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 800140e:	b940      	cbnz	r0, 8001422 <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <BSP_SD_WriteBlocks_DMA+0x48>)
 8001412:	4620      	mov	r0, r4
 8001414:	f006 f92b 	bl	800766e <HAL_SD_CheckWriteOperation>
 8001418:	3000      	adds	r0, #0
 800141a:	bf18      	it	ne
 800141c:	2001      	movne	r0, #1
}
 800141e:	b003      	add	sp, #12
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001422:	2001      	movs	r0, #1
 8001424:	e7fb      	b.n	800141e <BSP_SD_WriteBlocks_DMA+0x3a>
 8001426:	bf00      	nop
 8001428:	20008660 	.word	0x20008660
 800142c:	00989680 	.word	0x00989680

08001430 <controller_impedance>:
// Greg end

//struct st_impedance controller_impedance(float angle, float knee_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float knee_velocity,float Heel_pressure, float Toe_pressure,float IMU_acceleration,float hip_joint_angle)
{
 8001430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    switch (state)
 8001434:	4f3c      	ldr	r7, [pc, #240]	; (8001528 <controller_impedance+0xf8>)
 8001436:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800153c <controller_impedance+0x10c>
 800143a:	783b      	ldrb	r3, [r7, #0]
 800143c:	4c3b      	ldr	r4, [pc, #236]	; (800152c <controller_impedance+0xfc>)
{
 800143e:	4606      	mov	r6, r0
 8001440:	ee10 5a10 	vmov	r5, s0
 8001444:	ee10 0a90 	vmov	r0, s1
    switch (state)
 8001448:	b19b      	cbz	r3, 8001472 <controller_impedance+0x42>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d03f      	beq.n	80014ce <controller_impedance+0x9e>
//
//        break;
    // Greg end comment
    }

    my_st_impedance.st = state;
 800144e:	4d38      	ldr	r5, [pc, #224]	; (8001530 <controller_impedance+0x100>)
 8001450:	783b      	ldrb	r3, [r7, #0]
 8001452:	602b      	str	r3, [r5, #0]
    my_st_impedance.desired_torque = d_torque;
 8001454:	e9d8 0100 	ldrd	r0, r1, [r8]
 8001458:	f7ff fbc2 	bl	8000be0 <__aeabi_d2f>
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 800145c:	6823      	ldr	r3, [r4, #0]
    my_st_impedance.desired_torque = d_torque;
 800145e:	6068      	str	r0, [r5, #4]
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 8001460:	60ab      	str	r3, [r5, #8]
    return my_st_impedance;
 8001462:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001466:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
 800146a:	4630      	mov	r0, r6
 800146c:	b002      	add	sp, #8
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	d_torque = Impedance(angle, knee_velocity, ST_stiffness, ST_damping, ST_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8001472:	f7ff f869 	bl	8000548 <__aeabi_f2d>
 8001476:	e9cd 0100 	strd	r0, r1, [sp]
 800147a:	4628      	mov	r0, r5
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 80014f8 <controller_impedance+0xc8>
 8001484:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8001500 <controller_impedance+0xd0>
 8001488:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8001508 <controller_impedance+0xd8>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 800148c:	ed9d 1b00 	vldr	d1, [sp]
 8001490:	ec41 0b10 	vmov	d0, r0, r1
 8001494:	f7ff fe47 	bl	8001126 <Impedance>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8001498:	a31d      	add	r3, pc, #116	; (adr r3, 8001510 <controller_impedance+0xe0>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 800149e:	ec51 0b10 	vmov	r0, r1, d0
 80014a2:	ed88 0b00 	vstr	d0, [r8]
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 80014a6:	f7ff f9cd 	bl	8000844 <__aeabi_ddiv>
 80014aa:	2200      	movs	r2, #0
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <controller_impedance+0x104>)
 80014ae:	f7ff f89f 	bl	80005f0 <__aeabi_dmul>
 80014b2:	f7ff fb4d 	bl	8000b50 <__aeabi_d2iz>
    		if (CST_CMD_EPOS_contrl>=max_CST_CMD_EPOS)
 80014b6:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
 80014ba:	db16      	blt.n	80014ea <controller_impedance+0xba>
    			CST_CMD_EPOS_contrl=max_CST_CMD_EPOS;
 80014bc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80014c0:	6023      	str	r3, [r4, #0]
    		EPOS4_CST_apply_torque(0x601,CST_CMD_EPOS_contrl); //100 means 10% +ve is extension -ve is flexion
 80014c2:	6821      	ldr	r1, [r4, #0]
 80014c4:	f240 6001 	movw	r0, #1537	; 0x601
 80014c8:	f7ff fe04 	bl	80010d4 <EPOS4_CST_apply_torque>
    		break;
 80014cc:	e7bf      	b.n	800144e <controller_impedance+0x1e>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	e9cd 0100 	strd	r0, r1, [sp]
 80014d6:	4628      	mov	r0, r5
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8001518 <controller_impedance+0xe8>
 80014e0:	ed9f 3b07 	vldr	d3, [pc, #28]	; 8001500 <controller_impedance+0xd0>
 80014e4:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001520 <controller_impedance+0xf0>
 80014e8:	e7d0      	b.n	800148c <controller_impedance+0x5c>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <controller_impedance+0x108>)
 80014ec:	4298      	cmp	r0, r3
 80014ee:	bfac      	ite	ge
 80014f0:	6020      	strge	r0, [r4, #0]
 80014f2:	6023      	strlt	r3, [r4, #0]
 80014f4:	e7e5      	b.n	80014c2 <controller_impedance+0x92>
 80014f6:	bf00      	nop
 80014f8:	8f5c28f6 	.word	0x8f5c28f6
 80014fc:	c013f5c2 	.word	0xc013f5c2
	...
 800150c:	40040000 	.word	0x40040000
 8001510:	66666666 	.word	0x66666666
 8001514:	403e6666 	.word	0x403e6666
 8001518:	00000000 	.word	0x00000000
 800151c:	c0418000 	.word	0xc0418000
 8001520:	cccccccd 	.word	0xcccccccd
 8001524:	3fe4cccc 	.word	0x3fe4cccc
 8001528:	20000598 	.word	0x20000598
 800152c:	20000588 	.word	0x20000588
 8001530:	200086c0 	.word	0x200086c0
 8001534:	408f4000 	.word	0x408f4000
 8001538:	fffffb50 	.word	0xfffffb50
 800153c:	20000590 	.word	0x20000590

08001540 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8001540:	2000      	movs	r0, #0
 8001542:	4770      	bx	lr

08001544 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <LL_AHB2_GRP1_EnableClock+0x18>)
 8001546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001548:	4302      	orrs	r2, r0
 800154a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800154e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001550:	4018      	ands	r0, r3
 8001552:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001554:	9b01      	ldr	r3, [sp, #4]
}
 8001556:	b002      	add	sp, #8
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 8001560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001564:	2004      	movs	r0, #4
 8001566:	f7ff ffed 	bl	8001544 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800156a:	2080      	movs	r0, #128	; 0x80
 800156c:	f7ff ffea 	bl	8001544 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001570:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8001572:	4c6a      	ldr	r4, [pc, #424]	; (800171c <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001720 <MX_GPIO_Init+0x1c0>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8001578:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8001724 <MX_GPIO_Init+0x1c4>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800157c:	f7ff ffe2 	bl	8001544 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001580:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001582:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 8001586:	f7ff ffdd 	bl	8001544 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800158a:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800158c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800158e:	2601      	movs	r6, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8001590:	f7ff ffd8 	bl	8001544 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8001594:	270c      	movs	r7, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	4621      	mov	r1, r4
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 800159c:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800159e:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015a0:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a2:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a4:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f006 fc05 	bl	8007db4 <LL_GPIO_Init>
 80015aa:	f8c9 7028 	str.w	r7, [r9, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = LED_B_PIN;
 80015b0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED_B_PIN;
 80015b6:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015b8:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015ba:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015bc:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015be:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f006 fbf8 	bl	8007db4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80015cc:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80015ce:	e884 0028 	stmia.w	r4, {r3, r5}
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80015d2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015d4:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015d8:	6123      	str	r3, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80015da:	f006 fbeb 	bl	8007db4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 80015de:	2240      	movs	r2, #64	; 0x40
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 80015e0:	4621      	mov	r1, r4
 80015e2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 80015e4:	6022      	str	r2, [r4, #0]
 80015e6:	9201      	str	r2, [sp, #4]

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 80015e8:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ec:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015f0:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015f2:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 80015f4:	f006 fbde 	bl	8007db4 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015f8:	2302      	movs	r3, #2
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 80015fa:	4621      	mov	r1, r4
 80015fc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015fe:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8001600:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001604:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8001606:	f006 fbd5 	bl	8007db4 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800160a:	4621      	mov	r1, r4
 800160c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 800160e:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001612:	6066      	str	r6, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8001614:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800161a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800161c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800161e:	f006 fbc9 	bl	8007db4 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8001622:	4621      	mov	r1, r4
 8001624:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8001626:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800162a:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800162e:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001630:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8001632:	f006 fbbf 	bl	8007db4 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001636:	f8c9 b018 	str.w	fp, [r9, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 800163a:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 800163c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8001640:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 8001642:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001646:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800164a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800164c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 800164e:	f006 fbb1 	bl	8007db4 <LL_GPIO_Init>
 8001652:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8001656:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8001728 <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 800165a:	6026      	str	r6, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 800165c:	4621      	mov	r1, r4
 800165e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001660:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001664:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001666:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8001668:	f006 fba4 	bl	8007db4 <LL_GPIO_Init>
 800166c:	f8cb 6018 	str.w	r6, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8001670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8001674:	4621      	mov	r1, r4
 8001676:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8001678:	6023      	str	r3, [r4, #0]
 800167a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800167c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001680:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001682:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8001684:	f006 fb96 	bl	8007db4 <LL_GPIO_Init>
 8001688:	9b00      	ldr	r3, [sp, #0]
 800168a:	f8c9 3018 	str.w	r3, [r9, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 800168e:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8001690:	2302      	movs	r3, #2
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8001692:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001698:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800169a:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 800169c:	f006 fb8a 	bl	8007db4 <LL_GPIO_Init>
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8cb 3018 	str.w	r3, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80016a6:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 80016a8:	f04f 0b10 	mov.w	fp, #16
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80016ac:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80016ae:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 80016b0:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016b4:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80016b6:	f006 fb7d 	bl	8007db4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80016ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	4621      	mov	r1, r4
 80016c0:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016c2:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016c6:	6126      	str	r6, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f006 fb74 	bl	8007db4 <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 80016cc:	9a01      	ldr	r2, [sp, #4]
 80016ce:	6022      	str	r2, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	4621      	mov	r1, r4
 80016d2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 80016d4:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016d6:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016da:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016dc:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f006 fb69 	bl	8007db4 <LL_GPIO_Init>
 80016e2:	9a00      	ldr	r2, [sp, #0]
 80016e4:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	4621      	mov	r1, r4
 80016ea:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 80016ec:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016f0:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016f4:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016f6:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f006 fb5c 	bl	8007db4 <LL_GPIO_Init>
//  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
//  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);

  // Measure interrupt speed
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80016fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	4621      	mov	r1, r4
 8001702:	4640      	mov	r0, r8
 8001704:	f8ca b018 	str.w	fp, [sl, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800170c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800170e:	6125      	str	r5, [r4, #16]
  // Greg end
}
 8001710:	b003      	add	sp, #12
 8001712:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f006 bb4d 	b.w	8007db4 <LL_GPIO_Init>
 800171a:	bf00      	nop
 800171c:	200086cc 	.word	0x200086cc
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48001c00 	.word	0x48001c00

0800172c <BLUE_LED_OFF>:
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <BLUE_LED_OFF+0xc>)
 800172e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001732:	619a      	str	r2, [r3, #24]
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	48000400 	.word	0x48000400

0800173c <ALL_LED_OFF>:
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <ALL_LED_OFF+0x18>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001748:	2204      	movs	r2, #4
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	2208      	movs	r2, #8
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	48000400 	.word	0x48000400

08001758 <GREEN_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800175c:	2204      	movs	r2, #4
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <GREEN_LED_ONLY+0x18>)
 8001762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001766:	6191      	str	r1, [r2, #24]
 8001768:	2208      	movs	r2, #8
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	48000400 	.word	0x48000400

08001774 <RED_LED_OFF>:
 8001774:	4770      	bx	lr

08001776 <GREEN_LED_OFF>:
 8001776:	4770      	bx	lr

08001778 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800177c:	2208      	movs	r2, #8
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <RED_LED_ONLY+0x18>)
 8001782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001786:	6191      	str	r1, [r2, #24]
 8001788:	2204      	movs	r2, #4
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	48000400 	.word	0x48000400

08001794 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <BLUE_LED_ONLY+0x18>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800179c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017a0:	2204      	movs	r2, #4
 80017a2:	619a      	str	r2, [r3, #24]
 80017a4:	2208      	movs	r2, #8
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	48000400 	.word	0x48000400

080017b0 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <VIOLET_LED_ONLY+0x18>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017bc:	2204      	movs	r2, #4
 80017be:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80017c0:	2208      	movs	r2, #8
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	48000400 	.word	0x48000400

080017cc <CYAN_LED_ONLY>:
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <CYAN_LED_ONLY+0x18>)
 80017ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
 80017d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017d8:	2204      	movs	r2, #4
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
 80017dc:	2208      	movs	r2, #8
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	48000400 	.word	0x48000400

080017e8 <ALL_LED_ON>:
 80017e8:	f7ff bff0 	b.w	80017cc <CYAN_LED_ONLY>

080017ec <SD_POWER_ON>:
 80017ec:	4770      	bx	lr

080017ee <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 80017ee:	4770      	bx	lr

080017f0 <processKnee>:
uint16_t Loadcell_top_m2;
uint16_t Loadcell_top_m1 ;
float Loadcell_top_filtered_m2;
float Loadcell_top_filtered_m1;

void processKnee() {
 80017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f4:	ed2d 8b02 	vpush	{d8}
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 80017f8:	4bd7      	ldr	r3, [pc, #860]	; (8001b58 <processKnee+0x368>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
void processKnee() {
 80017fe:	b08d      	sub	sp, #52	; 0x34
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8001800:	f040 81f5 	bne.w	8001bee <processKnee+0x3fe>
			{

//					angle_eq=30;

		angle_now = knee_angle();
 8001804:	f002 fac8 	bl	8003d98 <knee_angle>
//					phase=1;
		/* velocity calculation*/
		angular_velocity = (float) (2 * (angle_now - angle_old)
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001808:	4bd4      	ldr	r3, [pc, #848]	; (8001b5c <processKnee+0x36c>)
 800180a:	4ad5      	ldr	r2, [pc, #852]	; (8001b60 <processKnee+0x370>)
 800180c:	edd3 5a00 	vldr	s11, [r3]
 8001810:	4bd4      	ldr	r3, [pc, #848]	; (8001b64 <processKnee+0x374>)
 8001812:	ed92 5a00 	vldr	s10, [r2]
 8001816:	ed93 7a00 	vldr	s14, [r3]
		angular_velocity = (float) (2 * (angle_now - angle_old)
 800181a:	4bd3      	ldr	r3, [pc, #844]	; (8001b68 <processKnee+0x378>)
 800181c:	49d3      	ldr	r1, [pc, #844]	; (8001b6c <processKnee+0x37c>)
 800181e:	ed93 6a00 	vldr	s12, [r3]
		angle_now = knee_angle();
 8001822:	4cd3      	ldr	r4, [pc, #844]	; (8001b70 <processKnee+0x380>)
		old_angular_velocity = (float) angular_velocity;
		angle_old = (float) angle_now;
 8001824:	ed83 0a00 	vstr	s0, [r3]
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001828:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800182c:	eef0 7a47 	vmov.f32	s15, s14
 8001830:	eed5 7aa6 	vfnms.f32	s15, s11, s13

		Loadcell_front = Read_Loadcell1();
 8001834:	4dcf      	ldr	r5, [pc, #828]	; (8001b74 <processKnee+0x384>)
		Loadcell_back = Read_Loadcell2();

		/*Filter*/
		Loadcell_back_filtered = coeff_y * Loadcell_back_filtered_old
 8001836:	4fd0      	ldr	r7, [pc, #832]	; (8001b78 <processKnee+0x388>)
		angle_now = knee_angle();
 8001838:	ed84 0a00 	vstr	s0, [r4]
		angular_velocity = (float) (2 * (angle_now - angle_old)
 800183c:	ee30 6a46 	vsub.f32	s12, s0, s12
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001840:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001844:	eea5 7aa6 	vfma.f32	s14, s11, s13
				+ coeff_x * Loadcell_back + coeff_x * Loadcell_back_old;
 8001848:	f8df a370 	ldr.w	sl, [pc, #880]	; 8001bbc <processKnee+0x3cc>
		angular_velocity = (float) (2 * (angle_now - angle_old)
 800184c:	eee6 7a26 	vfma.f32	s15, s12, s13
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001850:	eec7 6a87 	vdiv.f32	s13, s15, s14
		old_angular_velocity = (float) angular_velocity;
 8001854:	edc2 6a00 	vstr	s13, [r2]
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001858:	edc1 6a00 	vstr	s13, [r1]
		Loadcell_front = Read_Loadcell1();
 800185c:	f001 faf6 	bl	8002e4c <Read_Loadcell1>
 8001860:	8028      	strh	r0, [r5, #0]
		Loadcell_back = Read_Loadcell2();
 8001862:	f001 fb1f 	bl	8002ea4 <Read_Loadcell2>
 8001866:	4bc5      	ldr	r3, [pc, #788]	; (8001b7c <processKnee+0x38c>)
 8001868:	b286      	uxth	r6, r0
 800186a:	801e      	strh	r6, [r3, #0]
		Loadcell_back_filtered = coeff_y * Loadcell_back_filtered_old
 800186c:	8838      	ldrh	r0, [r7, #0]
 800186e:	f7fe fe59 	bl	8000524 <__aeabi_i2d>
 8001872:	a3a9      	add	r3, pc, #676	; (adr r3, 8001b18 <processKnee+0x328>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe feba 	bl	80005f0 <__aeabi_dmul>
 800187c:	4680      	mov	r8, r0
				+ coeff_x * Loadcell_back + coeff_x * Loadcell_back_old;
 800187e:	4630      	mov	r0, r6
		Loadcell_back_filtered = coeff_y * Loadcell_back_filtered_old
 8001880:	4689      	mov	r9, r1
				+ coeff_x * Loadcell_back + coeff_x * Loadcell_back_old;
 8001882:	f7fe fe4f 	bl	8000524 <__aeabi_i2d>
 8001886:	a3a6      	add	r3, pc, #664	; (adr r3, 8001b20 <processKnee+0x330>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe feb0 	bl	80005f0 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4640      	mov	r0, r8
 8001896:	4649      	mov	r1, r9
 8001898:	f7fe fcf8 	bl	800028c <__adddf3>
 800189c:	4680      	mov	r8, r0
 800189e:	f8ba 0000 	ldrh.w	r0, [sl]
 80018a2:	4689      	mov	r9, r1
 80018a4:	f7fe fe3e 	bl	8000524 <__aeabi_i2d>
 80018a8:	a39d      	add	r3, pc, #628	; (adr r3, 8001b20 <processKnee+0x330>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fe9f 	bl	80005f0 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4640      	mov	r0, r8
 80018b8:	4649      	mov	r1, r9
 80018ba:	f7fe fce7 	bl	800028c <__adddf3>
		Loadcell_back_filtered = coeff_y * Loadcell_back_filtered_old
 80018be:	f7ff f96f 	bl	8000ba0 <__aeabi_d2uiz>
 80018c2:	4baf      	ldr	r3, [pc, #700]	; (8001b80 <processKnee+0x390>)
		Loadcell_back_filtered_old = Loadcell_back_filtered;
		Loadcell_back_old = Loadcell_back;
 80018c4:	f8aa 6000 	strh.w	r6, [sl]
		Loadcell_back_filtered = coeff_y * Loadcell_back_filtered_old
 80018c8:	b280      	uxth	r0, r0
 80018ca:	8018      	strh	r0, [r3, #0]
//					Loadcell_front_old=Loadcell_front;
		// Greg start end comment

		// Greg start
		uint16_t Loadcell_top = Loadcell_front;
		float Loadcell_top_filtered = 1.6556 * Loadcell_top_filtered_m1
 80018cc:	4bad      	ldr	r3, [pc, #692]	; (8001b84 <processKnee+0x394>)
		Loadcell_back_filtered_old = Loadcell_back_filtered;
 80018ce:	8038      	strh	r0, [r7, #0]
		float Loadcell_top_filtered = 1.6556 * Loadcell_top_filtered_m1
 80018d0:	f8d3 b000 	ldr.w	fp, [r3]
				- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
				+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 80018d4:	4bac      	ldr	r3, [pc, #688]	; (8001b88 <processKnee+0x398>)
				- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 80018d6:	4ead      	ldr	r6, [pc, #692]	; (8001b8c <processKnee+0x39c>)
				+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 80018d8:	881f      	ldrh	r7, [r3, #0]
		uint16_t Loadcell_top = Loadcell_front;
 80018da:	f8b5 a000 	ldrh.w	sl, [r5]
		float Loadcell_top_filtered = 1.6556 * Loadcell_top_filtered_m1
 80018de:	4658      	mov	r0, fp
 80018e0:	f7fe fe32 	bl	8000548 <__aeabi_f2d>
 80018e4:	a390      	add	r3, pc, #576	; (adr r3, 8001b28 <processKnee+0x338>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe81 	bl	80005f0 <__aeabi_dmul>
 80018ee:	4680      	mov	r8, r0
				- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 80018f0:	6830      	ldr	r0, [r6, #0]
		float Loadcell_top_filtered = 1.6556 * Loadcell_top_filtered_m1
 80018f2:	4689      	mov	r9, r1
				- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 80018f4:	f7fe fe28 	bl	8000548 <__aeabi_f2d>
 80018f8:	a38d      	add	r3, pc, #564	; (adr r3, 8001b30 <processKnee+0x340>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe77 	bl	80005f0 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4640      	mov	r0, r8
 8001908:	4649      	mov	r1, r9
 800190a:	f7fe fcbd 	bl	8000288 <__aeabi_dsub>
 800190e:	4680      	mov	r8, r0
 8001910:	4650      	mov	r0, sl
 8001912:	4689      	mov	r9, r1
 8001914:	f7fe fe06 	bl	8000524 <__aeabi_i2d>
 8001918:	a387      	add	r3, pc, #540	; (adr r3, 8001b38 <processKnee+0x348>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe67 	bl	80005f0 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe fcaf 	bl	800028c <__adddf3>
 800192e:	4680      	mov	r8, r0
				+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001930:	4638      	mov	r0, r7
				- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8001932:	4689      	mov	r9, r1
				+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001934:	f7fe fdf6 	bl	8000524 <__aeabi_i2d>
 8001938:	a381      	add	r3, pc, #516	; (adr r3, 8001b40 <processKnee+0x350>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fe57 	bl	80005f0 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4640      	mov	r0, r8
 8001948:	4649      	mov	r1, r9
 800194a:	f7fe fc9f 	bl	800028c <__adddf3>
 800194e:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8001bc0 <processKnee+0x3d0>
//
//
//						  	  	  GREEN_LED();
		// Greg end comment out

		my_st_impedance = controller_impedance(angle_now, angular_velocity,
 8001952:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8001bc4 <processKnee+0x3d4>
				+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800195a:	f8b8 0000 	ldrh.w	r0, [r8]
 800195e:	f7fe fde1 	bl	8000524 <__aeabi_i2d>
 8001962:	a375      	add	r3, pc, #468	; (adr r3, 8001b38 <processKnee+0x348>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe42 	bl	80005f0 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001974:	f7fe fc8a 	bl	800028c <__adddf3>
		float Loadcell_top_filtered = 1.6556 * Loadcell_top_filtered_m1
 8001978:	f7ff f932 	bl	8000be0 <__aeabi_d2f>
		Loadcell_top_m1 = Loadcell_top;
 800197c:	4b82      	ldr	r3, [pc, #520]	; (8001b88 <processKnee+0x398>)
		Loadcell_top_m2 = Loadcell_top_m1;
 800197e:	f8a8 7000 	strh.w	r7, [r8]
		Loadcell_top_m1 = Loadcell_top;
 8001982:	f8a3 a000 	strh.w	sl, [r3]
		Loadcell_top_filtered_m1 = Loadcell_top_filtered;
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <processKnee+0x394>)
		imu_data_now = IMU1_read();
 8001988:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8001bc8 <processKnee+0x3d8>
		Loadcell_top_filtered_m1 = Loadcell_top_filtered;
 800198c:	6018      	str	r0, [r3, #0]
		float Loadcell_top_filtered = 1.6556 * Loadcell_top_filtered_m1
 800198e:	ee08 0a90 	vmov	s17, r0
		imu_data_now = IMU1_read();
 8001992:	a808      	add	r0, sp, #32
		Loadcell_top_filtered_m2 = Loadcell_top_filtered_m1;
 8001994:	f8c6 b000 	str.w	fp, [r6]
		imu_data_now = IMU1_read();
 8001998:	f001 ff9c 	bl	80038d4 <IMU1_read>
 800199c:	9b08      	ldr	r3, [sp, #32]
 800199e:	f8c8 3000 	str.w	r3, [r8]
 80019a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a4:	f8c8 3004 	str.w	r3, [r8, #4]
		imu_angle_now = IMU_orientation(imu_data_now, imu_angle_past, 0.002);
 80019a8:	4e79      	ldr	r6, [pc, #484]	; (8001b90 <processKnee+0x3a0>)
		imu_data_now = IMU1_read();
 80019aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019ac:	f8c8 3008 	str.w	r3, [r8, #8]
		imu_angle_now = IMU_orientation(imu_data_now, imu_angle_past, 0.002);
 80019b0:	ed96 0a00 	vldr	s0, [r6]
 80019b4:	edd6 0a01 	vldr	s1, [r6, #4]
 80019b8:	ed96 1a02 	vldr	s2, [r6, #8]
 80019bc:	eddf 1a75 	vldr	s3, [pc, #468]	; 8001b94 <processKnee+0x3a4>
 80019c0:	f8d8 0000 	ldr.w	r0, [r8]
 80019c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80019c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80019cc:	f002 f9fc 	bl	8003dc8 <IMU_orientation>
 80019d0:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <processKnee+0x3a8>)
		hip_angle = (imu_angle_now.x * rad2deg) - angle_now;
 80019d2:	f8d4 a000 	ldr.w	sl, [r4]
		imu_angle_now = IMU_orientation(imu_data_now, imu_angle_past, 0.002);
 80019d6:	ed83 0a00 	vstr	s0, [r3]
 80019da:	edc3 0a01 	vstr	s1, [r3, #4]
 80019de:	ed83 1a02 	vstr	s2, [r3, #8]
		imu_angle_past = imu_angle_now;
 80019e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
		IMU_acc = -imu_data_now.AY;
 80019e6:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80019ea:	425b      	negs	r3, r3
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
		hip_angle = (imu_angle_now.x * rad2deg) - angle_now;
 80019f4:	eddf 7a69 	vldr	s15, [pc, #420]	; 8001b9c <processKnee+0x3ac>
		IMU_acc = -imu_data_now.AY;
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <processKnee+0x3b0>)
		hip_angle = (imu_angle_now.x * rad2deg) - angle_now;
 80019fa:	ee60 7a27 	vmul.f32	s15, s0, s15
		imu_angle_past = imu_angle_now;
 80019fe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		IMU_acc = -imu_data_now.AY;
 8001a02:	ed83 8a00 	vstr	s16, [r3]
		hip_angle = (imu_angle_now.x * rad2deg) - angle_now;
 8001a06:	ee17 0a90 	vmov	r0, s15
 8001a0a:	f7fe fd9d 	bl	8000548 <__aeabi_f2d>
 8001a0e:	a34e      	add	r3, pc, #312	; (adr r3, 8001b48 <processKnee+0x358>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe ff16 	bl	8000844 <__aeabi_ddiv>
 8001a18:	4606      	mov	r6, r0
 8001a1a:	4650      	mov	r0, sl
 8001a1c:	460f      	mov	r7, r1
 8001a1e:	f7fe fd93 	bl	8000548 <__aeabi_f2d>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4630      	mov	r0, r6
 8001a28:	4639      	mov	r1, r7
 8001a2a:	f7fe fc2d 	bl	8000288 <__aeabi_dsub>
 8001a2e:	f7ff f8d7 	bl	8000be0 <__aeabi_d2f>
		my_st_impedance = controller_impedance(angle_now, angular_velocity,
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <processKnee+0x3b4>)
		hip_angle = (imu_angle_now.x * rad2deg) - angle_now;
 8001a34:	4f5c      	ldr	r7, [pc, #368]	; (8001ba8 <processKnee+0x3b8>)
		my_st_impedance = controller_impedance(angle_now, angular_velocity,
 8001a36:	881b      	ldrh	r3, [r3, #0]
		hip_angle = (imu_angle_now.x * rad2deg) - angle_now;
 8001a38:	6038      	str	r0, [r7, #0]
		my_st_impedance = controller_impedance(angle_now, angular_velocity,
 8001a3a:	ee01 3a90 	vmov	s3, r3
 8001a3e:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <processKnee+0x390>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	ee01 3a10 	vmov	s2, r3
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <processKnee+0x37c>)
 8001a48:	ae04      	add	r6, sp, #16
 8001a4a:	ee02 0a90 	vmov	s5, r0
 8001a4e:	eeb0 2a48 	vmov.f32	s4, s16
 8001a52:	edd3 0a00 	vldr	s1, [r3]
 8001a56:	eef8 1a61 	vcvt.f32.u32	s3, s3
 8001a5a:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8001a5e:	ee00 aa10 	vmov	s0, sl
 8001a62:	4630      	mov	r0, r6
 8001a64:	f7ff fce4 	bl	8001430 <controller_impedance>
 8001a68:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a6c:	e889 0007 	stmia.w	r9, {r0, r1, r2}

		// Greg start comment out
//			LL_GPIO_TogglePin(ENC1_CS_GPIO_PORT,ENC1_CS_PIN);
		// Greg end comment out

		F_Sensor_ADC_Store();
 8001a70:	f001 fa44 	bl	8002efc <F_Sensor_ADC_Store>
		Mag_Enc2_Store();
 8001a74:	f002 f90c 	bl	8003c90 <Mag_Enc2_Store>
		// Greg Start Comment Out
//			Knee_data_storeIMU(100*hip_angle,1,IMU_acc,1,1,1); //previous 1-6: hip_angle=1, IMU_acc=3
		// Greg End Comment Out

		// Greg Start
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ,
 8001a78:	f9b8 600a 	ldrsh.w	r6, [r8, #10]
 8001a7c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8001a80:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8001a84:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8001a88:	f9b8 0000 	ldrsh.w	r0, [r8]
 8001a8c:	9601      	str	r6, [sp, #4]
 8001a8e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8001a92:	9600      	str	r6, [sp, #0]
 8001a94:	f001 ff60 	bl	8003958 <Knee_data_storeIMU>
		// Greg Start Comment Out
//			Knee_data_store(100*angle_now,angular_velocity,my_st_impedance.CST_CMD_now,my_st_impedance.st);  //previous 7-10,
		// Greg End Comment Out

		// Greg Start
		Knee_data_store(angle_now / 0.088, hip_angle, Loadcell_front,
 8001a98:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <processKnee+0x38c>)
 8001a9a:	ed97 8a00 	vldr	s16, [r7]
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	881e      	ldrh	r6, [r3, #0]
 8001aa2:	882d      	ldrh	r5, [r5, #0]
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8001aac:	a328      	add	r3, pc, #160	; (adr r3, 8001b50 <processKnee+0x360>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fec7 	bl	8000844 <__aeabi_ddiv>
 8001ab6:	f7ff f84b 	bl	8000b50 <__aeabi_d2iz>
 8001aba:	4633      	mov	r3, r6
 8001abc:	462a      	mov	r2, r5
 8001abe:	ee18 1a10 	vmov	r1, s16
 8001ac2:	f001 ff87 	bl	80039d4 <Knee_data_store>
		// Greg start comment out
//			Knee_data_store1(100*my_st_impedance.desired_torque,Loadcell_front_filtered,Loadcell_back_filtered,IMU_acc);  //previous 11-14,
		// Greg end comment out

		// Greg start
		Knee_data_store1(Loadcell_top_filtered, 12, 13, 14);
 8001ac6:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8001aca:	230e      	movs	r3, #14
 8001acc:	220d      	movs	r2, #13
 8001ace:	210c      	movs	r1, #12
 8001ad0:	ee17 0a90 	vmov	r0, s15
 8001ad4:	f001 ffae 	bl	8003a34 <Knee_data_store1>
		//			Knee_data_store1(100*hip_angle,100*my_st_impedance.desired_torque,1,1); //imu_angle_now.x

//			Knee_data_store1(100*hip_angle,100*my_st_impedance.desired_torque);
//			Knee_data_store2(1,1);

		if (Sub_cnt == 5) {
 8001ad8:	4b34      	ldr	r3, [pc, #208]	; (8001bac <processKnee+0x3bc>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2a05      	cmp	r2, #5
 8001ade:	d175      	bne.n	8001bcc <processKnee+0x3dc>
			//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
			BSbuffer[s_flag].RTC_Time = (uint32_t) (RTC->TR & 0x007F7F7F);
 8001ae0:	4d33      	ldr	r5, [pc, #204]	; (8001bb0 <processKnee+0x3c0>)
 8001ae2:	4c34      	ldr	r4, [pc, #208]	; (8001bb4 <processKnee+0x3c4>)
 8001ae4:	7828      	ldrb	r0, [r5, #0]
 8001ae6:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <processKnee+0x3c8>)
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 8001aee:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8001af2:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8001af6:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001afa:	5182      	str	r2, [r0, r6]
			BSbuffer[s_flag].RTC_Date = (uint32_t) (RTC->DR & 0x00FFFF3F);
 8001afc:	7828      	ldrb	r0, [r5, #0]
 8001afe:	6862      	ldr	r2, [r4, #4]
 8001b00:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8001b04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001b08:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 8001b0c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001b10:	500a      	str	r2, [r1, r0]
 8001b12:	e05b      	b.n	8001bcc <processKnee+0x3dc>
 8001b14:	f3af 8000 	nop.w
 8001b18:	bd3c3611 	.word	0xbd3c3611
 8001b1c:	3feb9652 	.word	0x3feb9652
 8001b20:	2eb1c433 	.word	0x2eb1c433
 8001b24:	3fb1a36e 	.word	0x3fb1a36e
 8001b28:	6cf41f21 	.word	0x6cf41f21
 8001b2c:	3ffa7d56 	.word	0x3ffa7d56
 8001b30:	089a0275 	.word	0x089a0275
 8001b34:	3fe69e1b 	.word	0x3fe69e1b
 8001b38:	eb1c432d 	.word	0xeb1c432d
 8001b3c:	3f8a36e2 	.word	0x3f8a36e2
 8001b40:	eb1c432d 	.word	0xeb1c432d
 8001b44:	3f9a36e2 	.word	0x3f9a36e2
 8001b48:	51eb851f 	.word	0x51eb851f
 8001b4c:	40091eb8 	.word	0x40091eb8
 8001b50:	020c49ba 	.word	0x020c49ba
 8001b54:	3fb6872b 	.word	0x3fb6872b
 8001b58:	20008708 	.word	0x20008708
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	200005cc 	.word	0x200005cc
 8001b64:	20000004 	.word	0x20000004
 8001b68:	200005bc 	.word	0x200005bc
 8001b6c:	200005c0 	.word	0x200005c0
 8001b70:	200005b8 	.word	0x200005b8
 8001b74:	200005a8 	.word	0x200005a8
 8001b78:	200005a4 	.word	0x200005a4
 8001b7c:	200005a0 	.word	0x200005a0
 8001b80:	200005a2 	.word	0x200005a2
 8001b84:	200086f0 	.word	0x200086f0
 8001b88:	200086ec 	.word	0x200086ec
 8001b8c:	200086e8 	.word	0x200086e8
 8001b90:	20008714 	.word	0x20008714
 8001b94:	3b03126f 	.word	0x3b03126f
 8001b98:	2000899c 	.word	0x2000899c
 8001b9c:	43340000 	.word	0x43340000
 8001ba0:	2000059c 	.word	0x2000059c
 8001ba4:	200005aa 	.word	0x200005aa
 8001ba8:	200005c4 	.word	0x200005c4
 8001bac:	200005b0 	.word	0x200005b0
 8001bb0:	200005d0 	.word	0x200005d0
 8001bb4:	40002800 	.word	0x40002800
 8001bb8:	2000061c 	.word	0x2000061c
 8001bbc:	200005a6 	.word	0x200005a6
 8001bc0:	200086e4 	.word	0x200086e4
 8001bc4:	200086c0 	.word	0x200086c0
 8001bc8:	20008720 	.word	0x20008720

		}

// Switching Buffer code starts here
		if (Sub_cnt == Highest_sensor_count) // Total samples to be stored in a 16KB buffer
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8001bd2:	d114      	bne.n	8001bfe <processKnee+0x40e>
				{
			Sub_cnt = 0;           // Reset Counter of sensor element
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	6019      	str	r1, [r3, #0]
			SD_write_Flag = 1;   // Flag set to write filled buffer content
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <processKnee+0x418>)
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <processKnee+0x41c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
			// Changing Buffer
			if (s_flag == 0)       // if current storgae_buffer was 0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <processKnee+0x420>)
 8001be2:	781c      	ldrb	r4, [r3, #0]
 8001be4:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8001be8:	b934      	cbnz	r4, 8001bf8 <processKnee+0x408>
					{
				w_flag = 0;           // write_buffer to be saved in SD card = 0
 8001bea:	7005      	strb	r5, [r0, #0]
				s_flag = 1;            // current storgae_buffer is set 1
 8001bec:	701a      	strb	r2, [r3, #0]
			Sub_cnt++;              // Increment Counter of sensor element
		} /*Switching Buffer code Ends here */

	}  // Data log at timer interrupt ends here

}
 8001bee:	b00d      	add	sp, #52	; 0x34
 8001bf0:	ecbd 8b02 	vpop	{d8}
 8001bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				w_flag = 1;           // write_buffer to be saved in SD card = 1
 8001bf8:	7002      	strb	r2, [r0, #0]
				s_flag = 0;           // current storgae_buffer is set 0
 8001bfa:	7019      	strb	r1, [r3, #0]
 8001bfc:	e7f7      	b.n	8001bee <processKnee+0x3fe>
			Sub_cnt++;              // Increment Counter of sensor element
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	3201      	adds	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	e7f3      	b.n	8001bee <processKnee+0x3fe>
 8001c06:	bf00      	nop
 8001c08:	20008710 	.word	0x20008710
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	200005d0 	.word	0x200005d0

08001c14 <main>:

uint8_t isProcessKneeRequired = 0;
// Greg end


int main(void) {
 8001c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Pros_state = LP_STOP;                  // Default state after power ON reset
 8001c18:	4c82      	ldr	r4, [pc, #520]	; (8001e24 <main+0x210>)
 8001c1a:	2501      	movs	r5, #1
 8001c1c:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	// Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8001c1e:	f002 fb71 	bl	8004304 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
	if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8001c22:	4629      	mov	r1, r5
 8001c24:	4880      	ldr	r0, [pc, #512]	; (8001e28 <main+0x214>)
 8001c26:	f000 fe0d 	bl	8002844 <RTC_BAK_GetRegister>
 8001c2a:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001c2e:	4298      	cmp	r0, r3
 8001c30:	d001      	beq.n	8001c36 <main+0x22>
	{
		MX_RTC_Init();   // Set RTC clock source and parameters
 8001c32:	f000 fd75 	bl	8002720 <MX_RTC_Init>
	CAN_mode();

	//Transmits a message over can
//clear state

	EPOS4_enable(CAN_ID);
 8001c36:	4d7d      	ldr	r5, [pc, #500]	; (8001e2c <main+0x218>)
//EPOS4_enable2(CAN_ID);

	/* remove spikes from the beginning part*/
	int jj;
	for (jj = 1; jj < 1000; ++jj) {
		angle_now = knee_angle();
 8001c38:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8001e70 <main+0x25c>
//					phase=1;
		/* velocity calculation*/
		angular_velocity = (float) (2 * (angle_now - angle_old)
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001c3c:	4f7c      	ldr	r7, [pc, #496]	; (8001e30 <main+0x21c>)
 8001c3e:	4e7d      	ldr	r6, [pc, #500]	; (8001e34 <main+0x220>)
	MX_GPIO_Init();
 8001c40:	f7ff fc8e 	bl	8001560 <MX_GPIO_Init>
	HAL_Init(); // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8001c44:	f003 fb32 	bl	80052ac <HAL_Init>
	DFU_Bypass();
 8001c48:	f000 fb0e 	bl	8002268 <DFU_Bypass>
	Configure_USART_1();  // Debug with PC
 8001c4c:	f001 fad0 	bl	80031f0 <Configure_USART_1>
	sprintf(PrintBuf, "Hello");
 8001c50:	4979      	ldr	r1, [pc, #484]	; (8001e38 <main+0x224>)
 8001c52:	487a      	ldr	r0, [pc, #488]	; (8001e3c <main+0x228>)
 8001c54:	f009 fd10 	bl	800b678 <strcpy>
	USART1_wr_print(PrintBuf, sizeof(PrintBuf));
 8001c58:	2132      	movs	r1, #50	; 0x32
 8001c5a:	4878      	ldr	r0, [pc, #480]	; (8001e3c <main+0x228>)
 8001c5c:	f001 fb02 	bl	8003264 <USART1_wr_print>
	P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 8001c60:	f002 f808 	bl	8003c74 <P_IMU1_SPI1_Initialization_at_reset>
	P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 8001c64:	f001 f834 	bl	8002cd0 <P_ADC_Sensor_GPIO_Init>
	MCP_SPI2_Initialization_at_reset();
 8001c68:	f001 fab0 	bl	80031cc <MCP_SPI2_Initialization_at_reset>
	CAN_configure();
 8001c6c:	f7ff f990 	bl	8000f90 <CAN_configure>
	CAN_mode();
 8001c70:	f7ff f99d 	bl	8000fae <CAN_mode>
	EPOS4_enable(CAN_ID);
 8001c74:	6828      	ldr	r0, [r5, #0]
 8001c76:	f7ff fa10 	bl	800109a <EPOS4_enable>
	EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 8001c7a:	210a      	movs	r1, #10
 8001c7c:	6828      	ldr	r0, [r5, #0]
 8001c7e:	f7ff f9de 	bl	800103e <EPOS4_set_operation_mode>
	EPOS4_clear_errors(CAN_ID);
 8001c82:	6828      	ldr	r0, [r5, #0]
 8001c84:	f7ff fa39 	bl	80010fa <EPOS4_clear_errors>
	delay_us(1500);
 8001c88:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c8c:	f002 faf8 	bl	8004280 <delay_us>
	EPOS4_enable(CAN_ID);
 8001c90:	6828      	ldr	r0, [r5, #0]
 8001c92:	f7ff fa02 	bl	800109a <EPOS4_enable>
 8001c96:	f240 35e7 	movw	r5, #999	; 0x3e7
		angle_now = knee_angle();
 8001c9a:	f002 f87d 	bl	8003d98 <knee_angle>
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001c9e:	ed96 7a00 	vldr	s14, [r6]
 8001ca2:	edd7 5a00 	vldr	s11, [r7]
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001ca6:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <main+0x22c>)
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001ca8:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <main+0x230>)
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001caa:	ed93 6a00 	vldr	s12, [r3]
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001cae:	ed92 5a00 	vldr	s10, [r2]
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001cb2:	4965      	ldr	r1, [pc, #404]	; (8001e48 <main+0x234>)
		angle_now = knee_angle();
 8001cb4:	ed88 0a00 	vstr	s0, [r8]
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001cb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cbc:	eef0 7a47 	vmov.f32	s15, s14
 8001cc0:	eed5 7aa6 	vfnms.f32	s15, s11, s13
	for (jj = 1; jj < 1000; ++jj) {
 8001cc4:	3d01      	subs	r5, #1
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001cc6:	ee30 6a46 	vsub.f32	s12, s0, s12
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001cca:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001cce:	eea5 7aa6 	vfma.f32	s14, s11, s13
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001cd2:	eee6 7a26 	vfma.f32	s15, s12, s13
		old_angular_velocity = (float) angular_velocity;
		angle_old = (float) angle_now;
 8001cd6:	ed83 0a00 	vstr	s0, [r3]
				+ (2 * tau - T) * old_angular_velocity) / (T + 2 * tau);
 8001cda:	eec7 6a87 	vdiv.f32	s13, s15, s14
		angular_velocity = (float) (2 * (angle_now - angle_old)
 8001cde:	edc1 6a00 	vstr	s13, [r1]
		old_angular_velocity = (float) angular_velocity;
 8001ce2:	edc2 6a00 	vstr	s13, [r2]
	for (jj = 1; jj < 1000; ++jj) {
 8001ce6:	d1d8      	bne.n	8001c9a <main+0x86>

	}

	imu_angle_past.x = 0;
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <main+0x238>)
	// Note: Data collection is stopped in Power on Reset. Send the command from PC LabVIEW software in USB VCP Mode to start data collection.
	// Data collection will resume after USB disconnect.
	// Only way to stop Data collection is by accessing SD card from PC LabVIEW program

	while (1) {
		if (isProcessKneeRequired) {
 8001cea:	4f59      	ldr	r7, [pc, #356]	; (8001e50 <main+0x23c>)
		case Dormant_Idle_Stop: // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

			EnterStop();   // Enter Stop Mode
			// Wake Up after STOP Mode only by USB EXTI Int

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001cec:	4d59      	ldr	r5, [pc, #356]	; (8001e54 <main+0x240>)
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001cee:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001e74 <main+0x260>
	imu_angle_past.x = 0;
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
	imu_angle_past.y = 0;
 8001cf6:	605a      	str	r2, [r3, #4]
	USB_PA9_EXTI_conf(); // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 8001cf8:	f000 fda8 	bl	800284c <USB_PA9_EXTI_conf>
	Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8001cfc:	f002 fb72 	bl	80043e4 <Configure_LPTIM2_Int>
	Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8001d00:	f000 fa60 	bl	80021c4 <Configure_Interrupt>
	Power_on_reset();            // Following reset is found by troubleshooting
 8001d04:	f000 fa50 	bl	80021a8 <Power_on_reset>
	AIM_DataStart_at_Reset();
 8001d08:	f001 fdb6 	bl	8003878 <AIM_DataStart_at_Reset>
	GREEN_LED_ONLY();
 8001d0c:	f7ff fd24 	bl	8001758 <GREEN_LED_ONLY>
			isProcessKneeRequired = 0;
 8001d10:	2600      	movs	r6, #0
		if (isProcessKneeRequired) {
 8001d12:	783b      	ldrb	r3, [r7, #0]
 8001d14:	b113      	cbz	r3, 8001d1c <main+0x108>
			processKnee();
 8001d16:	f7ff fd6b 	bl	80017f0 <processKnee>
			isProcessKneeRequired = 0;
 8001d1a:	703e      	strb	r6, [r7, #0]
		switch (Pros_state) {
 8001d1c:	7823      	ldrb	r3, [r4, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d8f6      	bhi.n	8001d12 <main+0xfe>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <main+0x118>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d49 	.word	0x08001d49
 8001d30:	08001d83 	.word	0x08001d83
 8001d34:	08001d13 	.word	0x08001d13
 8001d38:	08001e09 	.word	0x08001e09
 8001d3c:	08001da1 	.word	0x08001da1
 8001d40:	08001e0f 	.word	0x08001e0f
 8001d44:	08001dbd 	.word	0x08001dbd
			EnterStop();   // Enter Stop Mode
 8001d48:	f002 fac6 	bl	80042d8 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001d4c:	782b      	ldrb	r3, [r5, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d104      	bne.n	8001d5c <main+0x148>
					Pros_state = USB_MSC_VCP_Mode; // Next State USB_MSC_Mode Mode
 8001d52:	2304      	movs	r3, #4
 8001d54:	7023      	strb	r3, [r4, #0]
					USB_Present_ = 0;             // Reset Flag to avoid looping
 8001d56:	2300      	movs	r3, #0
 8001d58:	702b      	strb	r3, [r5, #0]
 8001d5a:	e7d9      	b.n	8001d10 <main+0xfc>
			} else if (FATAL_Error == 1)         // Triggered from Error_Handler
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <main+0x244>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <main+0x15c>
				FATAL_Error = 0;                  // Reset Flag to avoid looping
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <main+0x244>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
				Pros_state = Fatal_Error_State;  // Next State Fatal_Error_State
 8001d6a:	2307      	movs	r3, #7
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8001d6c:	7023      	strb	r3, [r4, #0]
 8001d6e:	e7cf      	b.n	8001d10 <main+0xfc>
			} else if (SD_write_Flag == 1) // When BUffer full to store in SD card
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <main+0x248>)
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	2a01      	cmp	r2, #1
 8001d76:	d111      	bne.n	8001d9c <main+0x188>
				Pros_state = Sensor_FATFS_Write; // Next State Sensor_FATFS_Write Mode
 8001d78:	2202      	movs	r2, #2
 8001d7a:	7022      	strb	r2, [r4, #0]
				SD_write_Flag = 0;                // Reset Flag to avoid looping
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e7c6      	b.n	8001d10 <main+0xfc>
			Battery_ADC_Value = 2500;
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <main+0x24c>)
 8001d84:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001d88:	801a      	strh	r2, [r3, #0]
				SD_Sensor_write();             // Write Sensor Buffer to SD card
 8001d8a:	f001 fd35 	bl	80037f8 <SD_Sensor_write>
				if (USB_Present_ == 1) // If USB attachment detected here via EXTI_5 int
 8001d8e:	782b      	ldrb	r3, [r5, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d0de      	beq.n	8001d52 <main+0x13e>
				} else if (FATAL_Error == 1)     // Triggered from Error_Handler
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <main+0x244>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d0e3      	beq.n	8001d64 <main+0x150>
				Pros_state = LP_STOP; // Return to Low Power Mode Data collection
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e7e5      	b.n	8001d6c <main+0x158>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <main+0x250>)
 8001da2:	2204      	movs	r2, #4
 8001da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			ALL_LED_OFF();
 8001da8:	f7ff fcc8 	bl	800173c <ALL_LED_OFF>
			Shut_Down_SD();
 8001dac:	f000 fc9c 	bl	80026e8 <Shut_Down_SD>
			Reset_Variables_for_LowBattery();
 8001db0:	f000 fa90 	bl	80022d4 <Reset_Variables_for_LowBattery>
			Prepare_Goto_Dormant_Mode();
 8001db4:	f000 fa84 	bl	80022c0 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8001db8:	2306      	movs	r3, #6
 8001dba:	e7d7      	b.n	8001d6c <main+0x158>
			RED_LED_ONLY();
 8001dbc:	f7ff fcdc 	bl	8001778 <RED_LED_ONLY>
			FATFS_Logstart_Delete();
 8001dc0:	f000 fb44 	bl	800244c <FATFS_Logstart_Delete>
			Data_log_Start_Resume = 0;
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <main+0x254>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <main+0x258>)
 8001dc8:	2600      	movs	r6, #0
 8001dca:	701e      	strb	r6, [r3, #0]
			SD_write_Flag = 0;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <main+0x248>)
 8001dce:	701e      	strb	r6, [r3, #0]
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <main+0x250>)
 8001dd2:	f04f 0904 	mov.w	r9, #4
 8001dd6:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 8001dda:	6893      	ldr	r3, [r2, #8]
 8001ddc:	f023 0302 	bic.w	r3, r3, #2
 8001de0:	6093      	str	r3, [r2, #8]
			SD_POWER_OFF();
 8001de2:	f7ff fd04 	bl	80017ee <SD_POWER_OFF>
 8001de6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001dee:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
			EnterStop();   // Enter Stop Mode
 8001df2:	f002 fa71 	bl	80042d8 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001df6:	782b      	ldrb	r3, [r5, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d1dd      	bne.n	8001db8 <main+0x1a4>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8001dfc:	f884 9000 	strb.w	r9, [r4]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 8001e00:	702e      	strb	r6, [r5, #0]
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
				USB_Present_ = 0;                 // Reset Flag to avoid looping
				SD_POWER_ON();               				// Power on SD CARD
 8001e02:	f7ff fcf3 	bl	80017ec <SD_POWER_ON>
 8001e06:	e783      	b.n	8001d10 <main+0xfc>
			USB_Init_Start(); // Initialize USB and Stay USB mode as long as USB cable connected
 8001e08:	f001 fc88 	bl	800371c <USB_Init_Start>
			break;
 8001e0c:	e780      	b.n	8001d10 <main+0xfc>
			EnterStop();   // Enter Stop Mode
 8001e0e:	f002 fa63 	bl	80042d8 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001e12:	782b      	ldrb	r3, [r5, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d1cf      	bne.n	8001db8 <main+0x1a4>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8001e18:	2304      	movs	r3, #4
 8001e1a:	7023      	strb	r3, [r4, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	702b      	strb	r3, [r5, #0]
 8001e20:	e7ef      	b.n	8001e02 <main+0x1ee>
 8001e22:	bf00      	nop
 8001e24:	2000865c 	.word	0x2000865c
 8001e28:	40002800 	.word	0x40002800
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000004 	.word	0x20000004
 8001e38:	0800e174 	.word	0x0800e174
 8001e3c:	200089b0 	.word	0x200089b0
 8001e40:	200005bc 	.word	0x200005bc
 8001e44:	200005cc 	.word	0x200005cc
 8001e48:	200005c0 	.word	0x200005c0
 8001e4c:	20008714 	.word	0x20008714
 8001e50:	200005c8 	.word	0x200005c8
 8001e54:	200005b4 	.word	0x200005b4
 8001e58:	20008d3c 	.word	0x20008d3c
 8001e5c:	20008710 	.word	0x20008710
 8001e60:	20008d18 	.word	0x20008d18
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	20008708 	.word	0x20008708
 8001e6c:	40009400 	.word	0x40009400
 8001e70:	200005b8 	.word	0x200005b8
 8001e74:	40021000 	.word	0x40021000

08001e78 <LPTIM2_IRQHandler>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <LPTIM2_IRQHandler+0x28>)
 8001e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e7e:	619a      	str	r2, [r3, #24]
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8001e80:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <LPTIM2_IRQHandler+0x2c>)
 8001e82:	6811      	ldr	r1, [r2, #0]
	// Greg start
	// Measure interrupt speed start
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);
	// Greg end

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001e84:	0789      	lsls	r1, r1, #30
 8001e86:	d506      	bpl.n	8001e96 <LPTIM2_IRQHandler+0x1e>
	{
		isProcessKneeRequired = 1;
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <LPTIM2_IRQHandler+0x30>)
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	7008      	strb	r0, [r1, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001e8e:	6851      	ldr	r1, [r2, #4]
 8001e90:	f041 0102 	orr.w	r1, r1, #2
 8001e94:	6051      	str	r1, [r2, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	40009400 	.word	0x40009400
 8001ea8:	200005c8 	.word	0x200005c8

08001eac <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <EXTI9_5_IRQHandler+0x18>)
 8001eae:	695a      	ldr	r2, [r3, #20]

}

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001eb0:	0592      	lsls	r2, r2, #22
 8001eb2:	d505      	bpl.n	8001ec0 <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <EXTI9_5_IRQHandler+0x1c>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	200005b4 	.word	0x200005b4

08001ecc <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ecc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ed0:	4905      	ldr	r1, [pc, #20]	; (8001ee8 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ed4:	68ca      	ldr	r2, [r1, #12]
 8001ed6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60cb      	str	r3, [r1, #12]
 8001ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001ee2:	bf00      	nop
 8001ee4:	e7fd      	b.n	8001ee2 <NVIC_SystemReset+0x16>
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00
 8001eec:	05fa0004 	.word	0x05fa0004

08001ef0 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef0:	6883      	ldr	r3, [r0, #8]
 8001ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6083      	str	r3, [r0, #8]
 8001f00:	4770      	bx	lr
	...

08001f04 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LL_AHB2_GRP1_EnableClock+0x18>)
 8001f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f08:	4302      	orrs	r2, r0
 8001f0a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8001f0e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f10:	4018      	ands	r0, r3
 8001f12:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001f14:	9b01      	ldr	r3, [sp, #4]
}
 8001f16:	b002      	add	sp, #8
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000

08001f20 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LL_APB2_GRP1_EnableClock+0x18>)
 8001f22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f24:	4302      	orrs	r2, r0
 8001f26:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8001f2a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f2c:	4018      	ands	r0, r3
 8001f2e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001f30:	9b01      	ldr	r3, [sp, #4]
}
 8001f32:	b002      	add	sp, #8
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_GPIO_SetPinMode>:
{
 8001f3c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f3e:	6803      	ldr	r3, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	fa91 f4a1 	rbit	r4, r1
 8001f44:	fab4 f484 	clz	r4, r4
 8001f48:	fa91 f1a1 	rbit	r1, r1
 8001f4c:	2503      	movs	r5, #3
 8001f4e:	fab1 f181 	clz	r1, r1
 8001f52:	0064      	lsls	r4, r4, #1
 8001f54:	fa05 f404 	lsl.w	r4, r5, r4
 8001f58:	0049      	lsls	r1, r1, #1
 8001f5a:	ea23 0304 	bic.w	r3, r3, r4
 8001f5e:	fa02 f101 	lsl.w	r1, r2, r1
 8001f62:	4319      	orrs	r1, r3
 8001f64:	6001      	str	r1, [r0, #0]
 8001f66:	bd30      	pop	{r4, r5, pc}

08001f68 <LL_ADC_REG_SetSequencerRanks>:
{
 8001f68:	b530      	push	{r4, r5, lr}
 8001f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f6e:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8001f7a:	40dc      	lsrs	r4, r3
 8001f7c:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 8001f7e:	f001 011f 	and.w	r1, r1, #31
 8001f82:	231f      	movs	r3, #31
 8001f84:	fa03 f501 	lsl.w	r5, r3, r1
 8001f88:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8001f8c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001f90:	f1c1 011a 	rsb	r1, r1, #26
 8001f94:	ea23 0305 	bic.w	r3, r3, r5
 8001f98:	fa22 f101 	lsr.w	r1, r2, r1
 8001f9c:	4319      	orrs	r1, r3
 8001f9e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8001fa2:	bd30      	pop	{r4, r5, pc}

08001fa4 <LL_ADC_SetChannelSamplingTime>:
{
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001faa:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001fae:	fab6 f386 	clz	r3, r6
 8001fb2:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8001fb6:	40de      	lsrs	r6, r3
 8001fb8:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8001fba:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001fbe:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001fc2:	fa93 f5a3 	rbit	r5, r3
 8001fc6:	fab5 f585 	clz	r5, r5
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	2407      	movs	r4, #7
 8001fd0:	fa21 f505 	lsr.w	r5, r1, r5
 8001fd4:	fa04 f505 	lsl.w	r5, r4, r5
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001fe0:	40d9      	lsrs	r1, r3
 8001fe2:	ea24 0405 	bic.w	r4, r4, r5
 8001fe6:	fa02 f101 	lsl.w	r1, r2, r1
 8001fea:	4321      	orrs	r1, r4
 8001fec:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}

08001ff2 <LL_GPIO_SetAFPin_0_7>:
{
 8001ff2:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001ff4:	6a03      	ldr	r3, [r0, #32]
 8001ff6:	fa91 f4a1 	rbit	r4, r1
 8001ffa:	fab4 f484 	clz	r4, r4
 8001ffe:	fa91 f1a1 	rbit	r1, r1
 8002002:	250f      	movs	r5, #15
 8002004:	fab1 f181 	clz	r1, r1
 8002008:	00a4      	lsls	r4, r4, #2
 800200a:	fa05 f404 	lsl.w	r4, r5, r4
 800200e:	0089      	lsls	r1, r1, #2
 8002010:	ea23 0304 	bic.w	r3, r3, r4
 8002014:	fa02 f101 	lsl.w	r1, r2, r1
 8002018:	4319      	orrs	r1, r3
 800201a:	6201      	str	r1, [r0, #32]
 800201c:	bd30      	pop	{r4, r5, pc}

0800201e <LL_GPIO_SetPinPull>:
{
 800201e:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002020:	68c3      	ldr	r3, [r0, #12]
 8002022:	fa91 f4a1 	rbit	r4, r1
 8002026:	fab4 f484 	clz	r4, r4
 800202a:	fa91 f1a1 	rbit	r1, r1
 800202e:	2503      	movs	r5, #3
 8002030:	fab1 f181 	clz	r1, r1
 8002034:	0064      	lsls	r4, r4, #1
 8002036:	fa05 f404 	lsl.w	r4, r5, r4
 800203a:	0049      	lsls	r1, r1, #1
 800203c:	ea23 0304 	bic.w	r3, r3, r4
 8002040:	fa02 f101 	lsl.w	r1, r2, r1
 8002044:	4319      	orrs	r1, r3
 8002046:	60c1      	str	r1, [r0, #12]
 8002048:	bd30      	pop	{r4, r5, pc}

0800204a <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800204a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800204c:	6882      	ldr	r2, [r0, #8]
 800204e:	fa91 f3a1 	rbit	r3, r1
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	fa91 f1a1 	rbit	r1, r1
 800205a:	2403      	movs	r4, #3
 800205c:	fab1 f181 	clz	r1, r1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa04 f303 	lsl.w	r3, r4, r3
 8002066:	0049      	lsls	r1, r1, #1
 8002068:	ea22 0303 	bic.w	r3, r2, r3
 800206c:	fa04 f101 	lsl.w	r1, r4, r1
 8002070:	4319      	orrs	r1, r3
 8002072:	6081      	str	r1, [r0, #8]
 8002074:	bd10      	pop	{r4, pc}
	...

08002078 <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 800207a:	2030      	movs	r0, #48	; 0x30
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	fa90 f0a0 	rbit	r0, r0
 8002082:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8002084:	fab0 f080 	clz	r0, r0
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	fa21 f000 	lsr.w	r0, r1, r0
 800209c:	40d3      	lsrs	r3, r2
}
 800209e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80020a2:	4770      	bx	lr
 80020a4:	40002800 	.word	0x40002800

080020a8 <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 80020aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	fa90 f0a0 	rbit	r0, r0
 80020b4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 80020b8:	fab0 f080 	clz	r0, r0
 80020bc:	fa92 f2a2 	rbit	r2, r2
 80020c0:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020cc:	fa21 f000 	lsr.w	r0, r1, r0
 80020d0:	40d3      	lsrs	r3, r2
}
 80020d2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80020d6:	4770      	bx	lr
 80020d8:	40002800 	.word	0x40002800

080020dc <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 80020de:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	fa90 f0a0 	rbit	r0, r0
 80020e8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 80020ec:	fab0 f080 	clz	r0, r0
 80020f0:	fa92 f2a2 	rbit	r2, r2
 80020f4:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002100:	fa21 f000 	lsr.w	r0, r1, r0
 8002104:	40d3      	lsrs	r3, r2
}
 8002106:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800210a:	4770      	bx	lr
 800210c:	40002800 	.word	0x40002800

08002110 <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 8002112:	2070      	movs	r0, #112	; 0x70
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	fa90 f0a0 	rbit	r0, r0
 800211a:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 800211c:	fab0 f080 	clz	r0, r0
 8002120:	fa92 f2a2 	rbit	r2, r2
 8002124:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8002128:	fab2 f282 	clz	r2, r2
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	fa21 f000 	lsr.w	r0, r1, r0
 8002134:	40d3      	lsrs	r3, r2
}
 8002136:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800213a:	4770      	bx	lr
 800213c:	40002800 	.word	0x40002800

08002140 <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 8002142:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa90 f0a0 	rbit	r0, r0
 800214c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8002150:	fab0 f080 	clz	r0, r0
 8002154:	fa92 f2a2 	rbit	r2, r2
 8002158:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002164:	fa21 f000 	lsr.w	r0, r1, r0
 8002168:	40d3      	lsrs	r3, r2
}
 800216a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800216e:	4770      	bx	lr
 8002170:	40002800 	.word	0x40002800

08002174 <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 8002176:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa90 f0a0 	rbit	r0, r0
 8002180:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8002184:	fab0 f080 	clz	r0, r0
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002198:	fa21 f000 	lsr.w	r0, r1, r0
 800219c:	40d3      	lsrs	r3, r2
}
 800219e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80021a2:	4770      	bx	lr
 80021a4:	40002800 	.word	0x40002800

080021a8 <Power_on_reset>:

	}

}

void Power_on_reset(void) {
 80021a8:	b508      	push	{r3, lr}
	if (*Reset_Ram_Key_Address != Reset_Key_Value) {
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <Power_on_reset+0x14>)
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <Power_on_reset+0x18>)
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	4291      	cmp	r1, r2
 80021b2:	d002      	beq.n	80021ba <Power_on_reset+0x12>
		*Reset_Ram_Key_Address = Reset_Key_Value;
 80021b4:	601a      	str	r2, [r3, #0]
		NVIC_SystemReset();
 80021b6:	f7ff fe89 	bl	8001ecc <NVIC_SystemReset>
 80021ba:	bd08      	pop	{r3, pc}
 80021bc:	20017ef0 	.word	0x20017ef0
 80021c0:	deadbeef 	.word	0xdeadbeef

080021c4 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <Configure_Interrupt+0x2c>)
 80021c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021d8:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <Configure_Interrupt+0x30>)
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 80021e8:	2210      	movs	r2, #16
 80021ea:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <Shut_Down_USB+0x2c>)
 80021fa:	6853      	ldr	r3, [r2, #4]
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void) {
 80021fc:	b510      	push	{r4, lr}
 80021fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                     // Disable VDDUSB supply for USB
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8002202:	4c09      	ldr	r4, [pc, #36]	; (8002228 <Shut_Down_USB+0x30>)
 8002204:	6053      	str	r3, [r2, #4]
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <Shut_Down_USB+0x34>)
 8002208:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800220a:	4620      	mov	r0, r4
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 800220c:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800220e:	f007 f940 	bl	8009492 <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8002212:	4620      	mov	r0, r4
 8002214:	f007 f91f 	bl	8009456 <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE()
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <Shut_Down_USB+0x38>)
 800221a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002222:	bd10      	pop	{r4, pc}
 8002224:	40007000 	.word	0x40007000
 8002228:	20008738 	.word	0x20008738
 800222c:	200005b4 	.word	0x200005b4
 8002230:	40021000 	.word	0x40021000

08002234 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <USB_Clock_Ready+0x2c>)
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void USB_Clock_Ready(void) {
 800223c:	b082      	sub	sp, #8
 800223e:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8002240:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                       // Enable VDDUSB supply for USB
	while (!LL_PWR_IsEnabledVddUSB())
 8002242:	0552      	lsls	r2, r2, #21
 8002244:	d5fc      	bpl.n	8002240 <USB_Clock_Ready+0xc>
		;                       // Wait for VDDUSB supply to activate
	__HAL_RCC_USB_OTG_FS_CLK_ENABLE()
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <USB_Clock_Ready+0x30>)
 8002248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800224a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800224e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9b01      	ldr	r3, [sp, #4]
	;     // Enable USB Clock
}
 800225a:	b002      	add	sp, #8
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000
 8002264:	40021000 	.word	0x40021000

08002268 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
int check;
void DFU_Bypass(void) {

	uint32_t i = 0;

	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <DFU_Bypass+0x48>)
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8002274:	f3c2 2240 	ubfx	r2, r2, #9, #1
void DFU_Bypass(void) {
 8002278:	b570      	push	{r4, r5, r6, lr}
	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 800227a:	6002      	str	r2, [r0, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
	// if(check == 1)
	//	 CYAN_LED_ONLY();
	while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800227e:	0592      	lsls	r2, r2, #22
 8002280:	d4fc      	bmi.n	800227c <DFU_Bypass+0x14>
		;  // Wait until USB cable disconnect from Charger
	if (*LP_Ram_Key_Address != Reset_Key_Value) {
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <DFU_Bypass+0x4c>)
 8002284:	4c0c      	ldr	r4, [pc, #48]	; (80022b8 <DFU_Bypass+0x50>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	42a2      	cmp	r2, r4
 800228a:	d010      	beq.n	80022ae <DFU_Bypass+0x46>
		*LP_Ram_Key_Address = Reset_Key_Value;
 800228c:	601c      	str	r4, [r3, #0]
		if (check == 1) {
 800228e:	b171      	cbz	r1, 80022ae <DFU_Bypass+0x46>
 8002290:	2505      	movs	r5, #5
 8002292:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
			/* Toggle IO in during 2s (10*200ms) */
			for (i = 0; i < 5; i++) {
				//   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				LL_mDelay(200);
 8002296:	20c8      	movs	r0, #200	; 0xc8
 8002298:	f006 fc3c 	bl	8008b14 <LL_mDelay>
 800229c:	6933      	ldr	r3, [r6, #16]
				if (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY)) {
 800229e:	059b      	lsls	r3, r3, #22
 80022a0:	d503      	bpl.n	80022aa <DFU_Bypass+0x42>
					*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <DFU_Bypass+0x54>)
 80022a4:	601c      	str	r4, [r3, #0]
					NVIC_SystemReset();        // System reset
 80022a6:	f7ff fe11 	bl	8001ecc <NVIC_SystemReset>
			for (i = 0; i < 5; i++) {
 80022aa:	3d01      	subs	r5, #1
 80022ac:	d1f3      	bne.n	8002296 <DFU_Bypass+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	20008acc 	.word	0x20008acc
 80022b4:	20017cf0 	.word	0x20017cf0
 80022b8:	deadbeef 	.word	0xdeadbeef
 80022bc:	20017ff0 	.word	0x20017ff0

080022c0 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <Prepare_Goto_Dormant_Mode+0x10>)
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	f023 0302 	bic.w	r3, r3, #2
 80022c8:	6093      	str	r3, [r2, #8]
	}
}

void Prepare_Goto_Dormant_Mode(void) {
	LL_LPTIM_DisableIT_ARRM(LPTIM2); // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 80022ca:	f7ff ba90 	b.w	80017ee <SD_POWER_OFF>
 80022ce:	bf00      	nop
 80022d0:	40009400 	.word	0x40009400

080022d4 <Reset_Variables_for_LowBattery>:
}

void Reset_Variables_for_LowBattery(void) // Reset all variables needed to Sensor logging in Double Buffer System
{

	SD_write_Flag = 0;
 80022d4:	4b01      	ldr	r3, [pc, #4]	; (80022dc <Reset_Variables_for_LowBattery+0x8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	4770      	bx	lr
 80022dc:	20008710 	.word	0x20008710

080022e0 <GetNextIndex>:
	}

}

int GetNextIndex(char *path) // Read SD card content to save next value in auto increment format
{
 80022e0:	b530      	push	{r4, r5, lr}
 80022e2:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	DIR dir;
	FILINFO fno;
	int i, index = -1;

	if (f_opendir(&dir, path) == FR_OK) {
 80022e6:	4601      	mov	r1, r0
 80022e8:	a808      	add	r0, sp, #32
 80022ea:	f008 ff3c 	bl	800b166 <f_opendir>
 80022ee:	f04f 34ff 	mov.w	r4, #4294967295
 80022f2:	b9e0      	cbnz	r0, 800232e <GetNextIndex+0x4e>

		while (1) {
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
				break;

			if ((strstr(fno.fname, ".BIN") != NULL)
 80022f4:	4d10      	ldr	r5, [pc, #64]	; (8002338 <GetNextIndex+0x58>)
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
 80022f6:	a902      	add	r1, sp, #8
 80022f8:	a808      	add	r0, sp, #32
 80022fa:	f008 ff82 	bl	800b202 <f_readdir>
 80022fe:	b9b0      	cbnz	r0, 800232e <GetNextIndex+0x4e>
 8002300:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002304:	b19b      	cbz	r3, 800232e <GetNextIndex+0x4e>
			if ((strstr(fno.fname, ".BIN") != NULL)
 8002306:	4629      	mov	r1, r5
 8002308:	f10d 0011 	add.w	r0, sp, #17
 800230c:	f009 f9bc 	bl	800b688 <strstr>
 8002310:	2800      	cmp	r0, #0
 8002312:	d0f0      	beq.n	80022f6 <GetNextIndex+0x16>
					&& (sscanf(fno.fname, "%d", &i) == 1)) // Searcing for .BIN file and determining highest index
 8002314:	aa01      	add	r2, sp, #4
 8002316:	4909      	ldr	r1, [pc, #36]	; (800233c <GetNextIndex+0x5c>)
 8002318:	f10d 0011 	add.w	r0, sp, #17
 800231c:	f009 f980 	bl	800b620 <siscanf>
 8002320:	2801      	cmp	r0, #1
 8002322:	d1e8      	bne.n	80022f6 <GetNextIndex+0x16>
 8002324:	9b01      	ldr	r3, [sp, #4]
 8002326:	429c      	cmp	r4, r3
 8002328:	bfb8      	it	lt
 800232a:	461c      	movlt	r4, r3
 800232c:	e7e3      	b.n	80022f6 <GetNextIndex+0x16>
				if (i > index)
					index = i;
		}
	}
	return (index + 1);
}
 800232e:	1c60      	adds	r0, r4, #1
 8002330:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8002334:	bd30      	pop	{r4, r5, pc}
 8002336:	bf00      	nop
 8002338:	0800e1a8 	.word	0x0800e1a8
 800233c:	0800e1a1 	.word	0x0800e1a1

08002340 <Try_FATFS_Mount>:
	}
	return 0;
}

void Try_FATFS_Mount(void) {
	if (Fat_mnt_fail == 1) {
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <Try_FATFS_Mount+0x44>)
void Try_FATFS_Mount(void) {
 8002342:	b510      	push	{r4, lr}
	if (Fat_mnt_fail == 1) {
 8002344:	681c      	ldr	r4, [r3, #0]
 8002346:	2c01      	cmp	r4, #1
 8002348:	d11a      	bne.n	8002380 <Try_FATFS_Mount+0x40>
		Fat_mnt_fail = 0;
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
		SD_POWER_OFF();
 800234e:	f7ff fa4e 	bl	80017ee <SD_POWER_OFF>
		delay_us(10000); // wait 10 msec
 8002352:	f242 7010 	movw	r0, #10000	; 0x2710
 8002356:	f001 ff93 	bl	8004280 <delay_us>
		SD_POWER_ON();
 800235a:	f7ff fa47 	bl	80017ec <SD_POWER_ON>
		delay_us(1000000); // wait 1 sec
 800235e:	480a      	ldr	r0, [pc, #40]	; (8002388 <Try_FATFS_Mount+0x48>)
 8002360:	f001 ff8e 	bl	8004280 <delay_us>
		//Retry FATFS link

		if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002364:	4909      	ldr	r1, [pc, #36]	; (800238c <Try_FATFS_Mount+0x4c>)
 8002366:	480a      	ldr	r0, [pc, #40]	; (8002390 <Try_FATFS_Mount+0x50>)
 8002368:	f009 f812 	bl	800b390 <FATFS_LinkDriver>
 800236c:	b928      	cbnz	r0, 800237a <Try_FATFS_Mount+0x3a>
				{
			if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800236e:	4622      	mov	r2, r4
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <Try_FATFS_Mount+0x4c>)
 8002372:	4808      	ldr	r0, [pc, #32]	; (8002394 <Try_FATFS_Mount+0x54>)
 8002374:	f008 fb3a 	bl	800a9ec <f_mount>
 8002378:	b110      	cbz	r0, 8002380 <Try_FATFS_Mount+0x40>
					{
				Skip_FATFS = 1;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <Try_FATFS_Mount+0x58>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	bd10      	pop	{r4, pc}
 8002382:	bf00      	nop
 8002384:	200089e4 	.word	0x200089e4
 8002388:	000f4240 	.word	0x000f4240
 800238c:	20008ad9 	.word	0x20008ad9
 8002390:	0800e410 	.word	0x0800e410
 8002394:	20008ae8 	.word	0x20008ae8
 8002398:	20008d3d 	.word	0x20008d3d

0800239c <file_reopen_sync>:
		}
	}

}

void file_reopen_sync(void) {
 800239c:	b508      	push	{r3, lr}
	f_close(&MyFile);
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <file_reopen_sync+0x20>)
 80023a0:	f008 fd81 	bl	800aea6 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80023a4:	2212      	movs	r2, #18
 80023a6:	4906      	ldr	r1, [pc, #24]	; (80023c0 <file_reopen_sync+0x24>)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <file_reopen_sync+0x20>)
 80023aa:	f008 fb55 	bl	800aa58 <f_open>
	if (res != FR_OK) {
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <file_reopen_sync+0x28>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b113      	cbz	r3, 80023ba <file_reopen_sync+0x1e>
		Fat_sync_read_fail = 1;
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <file_reopen_sync+0x2c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	bd08      	pop	{r3, pc}
 80023bc:	20008d48 	.word	0x20008d48
 80023c0:	20008a2c 	.word	0x20008a2c
 80023c4:	20008fca 	.word	0x20008fca
 80023c8:	200089ec 	.word	0x200089ec

080023cc <file_reopen>:
	}
}

void file_reopen(void) {
 80023cc:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80023ce:	4807      	ldr	r0, [pc, #28]	; (80023ec <file_reopen+0x20>)
 80023d0:	f008 fd69 	bl	800aea6 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80023d4:	2212      	movs	r2, #18
 80023d6:	4906      	ldr	r1, [pc, #24]	; (80023f0 <file_reopen+0x24>)
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <file_reopen+0x20>)
 80023da:	f008 fb3d 	bl	800aa58 <f_open>
	if (res != FR_OK) {
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <file_reopen+0x28>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b113      	cbz	r3, 80023ea <file_reopen+0x1e>
		Fat_write_read_fail = 1;
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <file_reopen+0x2c>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	bd08      	pop	{r3, pc}
 80023ec:	20008d48 	.word	0x20008d48
 80023f0:	20008a2c 	.word	0x20008a2c
 80023f4:	20008fca 	.word	0x20008fca
 80023f8:	200089e8 	.word	0x200089e8

080023fc <file_mnt_reopen>:
	}
}

void file_mnt_reopen(void) {
 80023fc:	b508      	push	{r3, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80023fe:	490c      	ldr	r1, [pc, #48]	; (8002430 <file_mnt_reopen+0x34>)
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <file_mnt_reopen+0x38>)
 8002402:	f008 ffc5 	bl	800b390 <FATFS_LinkDriver>
 8002406:	b928      	cbnz	r0, 8002414 <file_mnt_reopen+0x18>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8002408:	2201      	movs	r2, #1
 800240a:	4909      	ldr	r1, [pc, #36]	; (8002430 <file_mnt_reopen+0x34>)
 800240c:	480a      	ldr	r0, [pc, #40]	; (8002438 <file_mnt_reopen+0x3c>)
 800240e:	f008 faed 	bl	800a9ec <f_mount>
 8002412:	b118      	cbz	r0, 800241c <file_mnt_reopen+0x20>
				{
			Fat_read_mnt_fail = 1;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <file_mnt_reopen+0x40>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	bd08      	pop	{r3, pc}
		} else  // Good to Go
		{
			res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800241c:	2212      	movs	r2, #18
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <file_mnt_reopen+0x44>)
 8002420:	4808      	ldr	r0, [pc, #32]	; (8002444 <file_mnt_reopen+0x48>)
 8002422:	f008 fb19 	bl	800aa58 <f_open>
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <file_mnt_reopen+0x4c>)
 8002428:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) {
 800242a:	2800      	cmp	r0, #0
 800242c:	d1f2      	bne.n	8002414 <file_mnt_reopen+0x18>
 800242e:	bd08      	pop	{r3, pc}
 8002430:	20008ad9 	.word	0x20008ad9
 8002434:	0800e410 	.word	0x0800e410
 8002438:	20008ae8 	.word	0x20008ae8
 800243c:	20008a90 	.word	0x20008a90
 8002440:	20008a2c 	.word	0x20008a2c
 8002444:	20008d48 	.word	0x20008d48
 8002448:	20008fca 	.word	0x20008fca

0800244c <FATFS_Logstart_Delete>:
		}
		delay_us(100);
	}
}

void FATFS_Logstart_Delete(void) {
 800244c:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <FATFS_Logstart_Delete+0x38>)
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <FATFS_Logstart_Delete+0x3c>)
 8002452:	f008 ff9d 	bl	800b390 <FATFS_LinkDriver>
 8002456:	b958      	cbnz	r0, 8002470 <FATFS_Logstart_Delete+0x24>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8002458:	2201      	movs	r2, #1
 800245a:	490a      	ldr	r1, [pc, #40]	; (8002484 <FATFS_Logstart_Delete+0x38>)
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <FATFS_Logstart_Delete+0x40>)
 800245e:	f008 fac5 	bl	800a9ec <f_mount>
 8002462:	b910      	cbnz	r0, 800246a <FATFS_Logstart_Delete+0x1e>
				{     // Initialization Error Debugging
			//		 RED_LED_ON();
		}

		else {
			if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <FATFS_Logstart_Delete+0x44>)
 8002466:	f008 fef7 	bl	800b258 <f_unlink>
			}
		}
		delay_us(100);
 800246a:	2064      	movs	r0, #100	; 0x64
 800246c:	f001 ff08 	bl	8004280 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8002470:	2200      	movs	r2, #0
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <FATFS_Logstart_Delete+0x48>)
 8002474:	4610      	mov	r0, r2
 8002476:	f008 fab9 	bl	800a9ec <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800247a:	4802      	ldr	r0, [pc, #8]	; (8002484 <FATFS_Logstart_Delete+0x38>)
}
 800247c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8002480:	f008 bfa2 	b.w	800b3c8 <FATFS_UnLinkDriver>
 8002484:	20008ad9 	.word	0x20008ad9
 8002488:	0800e410 	.word	0x0800e410
 800248c:	20008ae8 	.word	0x20008ae8
 8002490:	0800e194 	.word	0x0800e194
 8002494:	0800e33b 	.word	0x0800e33b

08002498 <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void) {
 8002498:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800249a:	4910      	ldr	r1, [pc, #64]	; (80024dc <FATFS_Logstart_Ready+0x44>)
 800249c:	4810      	ldr	r0, [pc, #64]	; (80024e0 <FATFS_Logstart_Ready+0x48>)
 800249e:	f008 ff77 	bl	800b390 <FATFS_LinkDriver>
 80024a2:	b988      	cbnz	r0, 80024c8 <FATFS_Logstart_Ready+0x30>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 80024a4:	2201      	movs	r2, #1
 80024a6:	490d      	ldr	r1, [pc, #52]	; (80024dc <FATFS_Logstart_Ready+0x44>)
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <FATFS_Logstart_Ready+0x4c>)
 80024aa:	f008 fa9f 	bl	800a9ec <f_mount>
 80024ae:	b940      	cbnz	r0, 80024c2 <FATFS_Logstart_Ready+0x2a>
				{     // Initialization Error Debugging

		}

		else {
			if (f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE)
 80024b0:	2212      	movs	r2, #18
 80024b2:	490d      	ldr	r1, [pc, #52]	; (80024e8 <FATFS_Logstart_Ready+0x50>)
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <FATFS_Logstart_Ready+0x54>)
 80024b6:	f008 facf 	bl	800aa58 <f_open>
 80024ba:	b910      	cbnz	r0, 80024c2 <FATFS_Logstart_Ready+0x2a>
					!= FR_OK) // Create and Open a new text file object with write access
					{

			} else {

				f_close(&MyFile);
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <FATFS_Logstart_Ready+0x54>)
 80024be:	f008 fcf2 	bl	800aea6 <f_close>
			}
		}
		delay_us(100);
 80024c2:	2064      	movs	r0, #100	; 0x64
 80024c4:	f001 fedc 	bl	8004280 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80024c8:	2200      	movs	r2, #0
 80024ca:	4909      	ldr	r1, [pc, #36]	; (80024f0 <FATFS_Logstart_Ready+0x58>)
 80024cc:	4610      	mov	r0, r2
 80024ce:	f008 fa8d 	bl	800a9ec <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80024d2:	4802      	ldr	r0, [pc, #8]	; (80024dc <FATFS_Logstart_Ready+0x44>)
}
 80024d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80024d8:	f008 bf76 	b.w	800b3c8 <FATFS_UnLinkDriver>
 80024dc:	20008ad9 	.word	0x20008ad9
 80024e0:	0800e410 	.word	0x0800e410
 80024e4:	20008ae8 	.word	0x20008ae8
 80024e8:	0800e194 	.word	0x0800e194
 80024ec:	20008d48 	.word	0x20008d48
 80024f0:	0800e33b 	.word	0x0800e33b

080024f4 <USB_MSC_Init_Start>:
	}
#endif
}

void USB_MSC_Init_Start(void)                         // Initialize USB MSC mode
{
 80024f4:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);             // USB MSC initialization
 80024f6:	4c0b      	ldr	r4, [pc, #44]	; (8002524 <USB_MSC_Init_Start+0x30>)
 80024f8:	490b      	ldr	r1, [pc, #44]	; (8002528 <USB_MSC_Init_Start+0x34>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	4620      	mov	r0, r4
 80024fe:	f006 ff8e 	bl	800941e <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);  // USB class registration
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <USB_MSC_Init_Start+0x38>)
 8002504:	4620      	mov	r0, r4
 8002506:	f006 ffb8 	bl	800947a <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 800250a:	4909      	ldr	r1, [pc, #36]	; (8002530 <USB_MSC_Init_Start+0x3c>)
 800250c:	4620      	mov	r0, r4
 800250e:	f006 fbde 	bl	8008cce <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8002512:	4620      	mov	r0, r4
 8002514:	f006 ffb8 	bl	8009488 <USBD_Start>

	delay_us(1000000);
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <USB_MSC_Init_Start+0x40>)

}
 800251a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 800251e:	f001 beaf 	b.w	8004280 <delay_us>
 8002522:	bf00      	nop
 8002524:	20008738 	.word	0x20008738
 8002528:	20000014 	.word	0x20000014
 800252c:	20000200 	.word	0x20000200
 8002530:	200001e0 	.word	0x200001e0
 8002534:	000f4240 	.word	0x000f4240

08002538 <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void) {
 8002538:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &VCP_Desc, 0);             // USB VCP initialization
 800253a:	4c0b      	ldr	r4, [pc, #44]	; (8002568 <USB_VCP_Init_Start+0x30>)
 800253c:	490b      	ldr	r1, [pc, #44]	; (800256c <USB_VCP_Init_Start+0x34>)
 800253e:	2200      	movs	r2, #0
 8002540:	4620      	mov	r0, r4
 8002542:	f006 ff6c 	bl	800941e <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);  // USB class registration
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <USB_VCP_Init_Start+0x38>)
 8002548:	4620      	mov	r0, r4
 800254a:	f006 ff96 	bl	800947a <USBD_RegisterClass>
	USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 800254e:	4909      	ldr	r1, [pc, #36]	; (8002574 <USB_VCP_Init_Start+0x3c>)
 8002550:	4620      	mov	r0, r4
 8002552:	f002 fc03 	bl	8004d5c <USBD_CDC_RegisterInterface>
	USBD_Start(&USBD_Device);                                 // Start USB VCP
 8002556:	4620      	mov	r0, r4
 8002558:	f006 ff96 	bl	8009488 <USBD_Start>
	delay_us(1000000);
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <USB_VCP_Init_Start+0x40>)
}
 800255e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8002562:	f001 be8d 	b.w	8004280 <delay_us>
 8002566:	bf00      	nop
 8002568:	20008738 	.word	0x20008738
 800256c:	20000078 	.word	0x20000078
 8002570:	200000c0 	.word	0x200000c0
 8002574:	200001d0 	.word	0x200001d0
 8002578:	000f4240 	.word	0x000f4240

0800257c <Read_RTC_Timestamp>:
			__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)),
			2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}

void Read_RTC_Timestamp(void)       // Read RTC timestamp and store in variables
{
 800257c:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

	Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800257e:	f7ff fdf9 	bl	8002174 <LL_RTC_TIME_GetHour.constprop.13>
 8002582:	4604      	mov	r4, r0
 8002584:	f7ff fdf6 	bl	8002174 <LL_RTC_TIME_GetHour.constprop.13>
 8002588:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <Read_RTC_Timestamp+0xc0>)
 800258e:	f000 000f 	and.w	r0, r0, #15
 8002592:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002596:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800259a:	7013      	strb	r3, [r2, #0]
	Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800259c:	f7ff fdd0 	bl	8002140 <LL_RTC_TIME_GetMinute.constprop.12>
 80025a0:	4604      	mov	r4, r0
 80025a2:	f7ff fdcd 	bl	8002140 <LL_RTC_TIME_GetMinute.constprop.12>
 80025a6:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <Read_RTC_Timestamp+0xc4>)
 80025ac:	f000 000f 	and.w	r0, r0, #15
 80025b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025b8:	7013      	strb	r3, [r2, #0]
	Sec = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80025ba:	f7ff fda9 	bl	8002110 <LL_RTC_TIME_GetSecond.constprop.11>
 80025be:	4604      	mov	r4, r0
 80025c0:	f7ff fda6 	bl	8002110 <LL_RTC_TIME_GetSecond.constprop.11>
 80025c4:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025c8:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <Read_RTC_Timestamp+0xc8>)
 80025ca:	f000 000f 	and.w	r0, r0, #15
 80025ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025d6:	7013      	strb	r3, [r2, #0]

	Mon = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80025d8:	f7ff fd66 	bl	80020a8 <LL_RTC_DATE_GetMonth.constprop.9>
 80025dc:	4604      	mov	r4, r0
 80025de:	f7ff fd63 	bl	80020a8 <LL_RTC_DATE_GetMonth.constprop.9>
 80025e2:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <Read_RTC_Timestamp+0xcc>)
 80025e8:	f000 000f 	and.w	r0, r0, #15
 80025ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025f4:	7013      	strb	r3, [r2, #0]
	Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80025f6:	f7ff fd3f 	bl	8002078 <LL_RTC_DATE_GetDay.constprop.8>
 80025fa:	4604      	mov	r4, r0
 80025fc:	f7ff fd3c 	bl	8002078 <LL_RTC_DATE_GetDay.constprop.8>
 8002600:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <Read_RTC_Timestamp+0xd0>)
 8002606:	f000 000f 	and.w	r0, r0, #15
 800260a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800260e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002612:	7013      	strb	r3, [r2, #0]
	Year = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8002614:	f7ff fd62 	bl	80020dc <LL_RTC_DATE_GetYear.constprop.10>
 8002618:	4604      	mov	r4, r0
 800261a:	f7ff fd5f 	bl	80020dc <LL_RTC_DATE_GetYear.constprop.10>
 800261e:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <Read_RTC_Timestamp+0xd4>)
 8002624:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002628:	f000 000f 	and.w	r0, r0, #15
 800262c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002630:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
	(void) RTC->DR;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <Read_RTC_Timestamp+0xd8>)
 8002634:	685a      	ldr	r2, [r3, #4]
	(void) RTC->TR;
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	bd10      	pop	{r4, pc}
 800263a:	bf00      	nop
 800263c:	20008a3e 	.word	0x20008a3e
 8002640:	200089fc 	.word	0x200089fc
 8002644:	20008a48 	.word	0x20008a48
 8002648:	20008d2c 	.word	0x20008d2c
 800264c:	20008d1a 	.word	0x20008d1a
 8002650:	20008d45 	.word	0x20008d45
 8002654:	40002800 	.word	0x40002800

08002658 <update_FATFS_time>:
{
 8002658:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();         // Read RTC time-stamps and store in variables
 800265a:	f7ff ff8f 	bl	800257c <Read_RTC_Timestamp>
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <update_FATFS_time+0x44>)
 8002660:	490f      	ldr	r1, [pc, #60]	; (80026a0 <update_FATFS_time+0x48>)
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 8002666:	4810      	ldr	r0, [pc, #64]	; (80026a8 <update_FATFS_time+0x50>)
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <update_FATFS_time+0x54>)
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	3214      	adds	r2, #20
 8002674:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8002678:	808b      	strh	r3, [r1, #4]
	fno.ftime = (WORD) (Hour << 11 | Min << 5 | Sec / 2); // Extracting values from RTC registers
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <update_FATFS_time+0x58>)
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <update_FATFS_time+0x5c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	015b      	lsls	r3, r3, #5
 8002684:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <update_FATFS_time+0x60>)
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8002690:	80cb      	strh	r3, [r1, #6]
}
 8002692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 8002696:	f008 be30 	b.w	800b2fa <f_utime>
 800269a:	bf00      	nop
 800269c:	20008d2c 	.word	0x20008d2c
 80026a0:	20008a10 	.word	0x20008a10
 80026a4:	20008d1a 	.word	0x20008d1a
 80026a8:	20008a2c 	.word	0x20008a2c
 80026ac:	20008d45 	.word	0x20008d45
 80026b0:	20008a3e 	.word	0x20008a3e
 80026b4:	200089fc 	.word	0x200089fc
 80026b8:	20008a48 	.word	0x20008a48

080026bc <File_Close_Update_Unlink>:
void File_Close_Update_Unlink(void) {
 80026bc:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80026be:	4807      	ldr	r0, [pc, #28]	; (80026dc <File_Close_Update_Unlink+0x20>)
 80026c0:	f008 fbf1 	bl	800aea6 <f_close>
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80026c4:	f7ff ffc8 	bl	8002658 <update_FATFS_time>
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
 80026c8:	2200      	movs	r2, #0
 80026ca:	4905      	ldr	r1, [pc, #20]	; (80026e0 <File_Close_Update_Unlink+0x24>)
 80026cc:	4610      	mov	r0, r2
 80026ce:	f008 f98d 	bl	800a9ec <f_mount>
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 80026d2:	4804      	ldr	r0, [pc, #16]	; (80026e4 <File_Close_Update_Unlink+0x28>)
}
 80026d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 80026d8:	f008 be76 	b.w	800b3c8 <FATFS_UnLinkDriver>
 80026dc:	20008d48 	.word	0x20008d48
 80026e0:	0800e33b 	.word	0x0800e33b
 80026e4:	20008ad9 	.word	0x20008ad9

080026e8 <Shut_Down_SD>:
 80026e8:	f7ff bfe8 	b.w	80026bc <File_Close_Update_Unlink>

080026ec <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void) // Function needed before writing on RTC registers
{
	RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <Enter_RTC_InitMode+0x10>)
 80026ee:	f04f 32ff 	mov.w	r2, #4294967295
 80026f2:	60da      	str	r2, [r3, #12]
	while (((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF))
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	0652      	lsls	r2, r2, #25
 80026f8:	d5fc      	bpl.n	80026f4 <Enter_RTC_InitMode+0x8>
		; // Wait to enter Init mode
}
 80026fa:	4770      	bx	lr
 80026fc:	40002800 	.word	0x40002800

08002700 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)   // Function needed after writing on RTC registers
{
	RTC->ISR = (uint32_t) ~RTC_ISR_INIT; // Disable RTC init mode
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <Exit_RTC_InitMode+0x1c>)
 8002702:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002706:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR,
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800270e:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8002712:	60da      	str	r2, [r3, #12]
			(~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
	while (((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF))
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	0692      	lsls	r2, r2, #26
 8002718:	d5fc      	bpl.n	8002714 <Exit_RTC_InitMode+0x14>
		;  // Wait the registers to be synchronised
}
 800271a:	4770      	bx	lr
 800271c:	40002800 	.word	0x40002800

08002720 <MX_RTC_Init>:

void MX_RTC_Init(void)                // RTC initialization after Power on reset
{
 8002720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <MX_RTC_Init+0xa8>)
 8002724:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002728:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800272c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002730:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002734:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800273c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002748:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	LL_RTC_InitTypeDef RTC_InitStruct;

	LL_RCC_ForceBackupDomainReset();            // Reset Backup domain registers
	LL_RCC_ReleaseBackupDomainReset();
	LL_RCC_LSE_Enable();                    // Configure LSE as RTC source clock
	while (LL_RCC_LSE_IsReady() != 1)
 800274c:	0792      	lsls	r2, r2, #30
 800274e:	d5fb      	bpl.n	8002748 <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002750:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		;
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
	LL_RCC_EnableRTC();                           // RTC clock

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 8002754:	4c1d      	ldr	r4, [pc, #116]	; (80027cc <MX_RTC_Init+0xac>)
 8002756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800275a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800275e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002762:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8002766:	a904      	add	r1, sp, #16
 8002768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002770:	2300      	movs	r3, #0
 8002772:	f841 3d0c 	str.w	r3, [r1, #-12]!
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 8002776:	4620      	mov	r0, r4
 8002778:	f005 fc96 	bl	80080a8 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800277c:	23ca      	movs	r3, #202	; 0xca
 800277e:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002780:	2353      	movs	r3, #83	; 0x53
 8002782:	6263      	str	r3, [r4, #36]	; 0x24

	LL_RTC_DisableWriteProtection(RTC);
	Enter_RTC_InitMode();     // Enter RTC initialization mode to set parameters
 8002784:	f7ff ffb2 	bl	80026ec <Enter_RTC_InitMode>

	// Calender set up
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A,
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800278e:	fa92 f2a2 	rbit	r2, r2
 8002792:	217f      	movs	r1, #127	; 0x7f
 8002794:	fab2 f282 	clz	r2, r2
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027a0:	4313      	orrs	r3, r2
 80027a2:	6123      	str	r3, [r4, #16]
			0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);         // SYNC prediv= 0xFF
 80027a4:	6923      	ldr	r3, [r4, #16]
 80027a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027ae:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80027b2:	6123      	str	r3, [r4, #16]

	Exit_RTC_InitMode();
 80027b4:	f7ff ffa4 	bl	8002700 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80027b8:	23ff      	movs	r3, #255	; 0xff
 80027ba:	6263      	str	r3, [r4, #36]	; 0x24

	tmp = (uint32_t) (&(RTCx->BKP0R));
	tmp += (BackupRegister * 4U);

	/* Write the specified register */
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <MX_RTC_Init+0xb0>)
 80027be:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80027c2:	605a      	str	r2, [r3, #4]
}
 80027c4:	b004      	add	sp, #16
 80027c6:	bd10      	pop	{r4, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40002800 	.word	0x40002800
 80027d0:	40002850 	.word	0x40002850

080027d4 <Set_RTC_Calendar>:
		uint8_t Min, uint8_t Sec) {
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80027d6:	4c19      	ldr	r4, [pc, #100]	; (800283c <Set_RTC_Calendar+0x68>)
 80027d8:	460f      	mov	r7, r1
 80027da:	4619      	mov	r1, r3
 80027dc:	23ca      	movs	r3, #202	; 0xca
 80027de:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80027e0:	2353      	movs	r3, #83	; 0x53
 80027e2:	b085      	sub	sp, #20
 80027e4:	6263      	str	r3, [r4, #36]	; 0x24
 80027e6:	4606      	mov	r6, r0
 80027e8:	4615      	mov	r5, r2
	Enter_RTC_InitMode();
 80027ea:	f7ff ff7f 	bl	80026ec <Enter_RTC_InitMode>
	RTC_TimeStruct.Minutes = Min;
 80027ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	RTC_TimeStruct.Hours = Hour;
 80027f2:	f88d 100c 	strb.w	r1, [sp, #12]
	RTC_TimeStruct.Minutes = Min;
 80027f6:	f88d 300d 	strb.w	r3, [sp, #13]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80027fa:	aa02      	add	r2, sp, #8
	RTC_TimeStruct.Seconds = Sec;
 80027fc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002800:	f88d 300e 	strb.w	r3, [sp, #14]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8002804:	2100      	movs	r1, #0
 8002806:	4620      	mov	r0, r4
 8002808:	f005 fcbe 	bl	8008188 <LL_RTC_TIME_Init>
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 800280c:	2301      	movs	r3, #1
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800280e:	aa01      	add	r2, sp, #4
 8002810:	2100      	movs	r1, #0
 8002812:	4620      	mov	r0, r4
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002814:	f88d 3004 	strb.w	r3, [sp, #4]
	RTC_DateStruct.Month = Month;
 8002818:	f88d 7005 	strb.w	r7, [sp, #5]
	RTC_DateStruct.Year = Year;
 800281c:	f88d 6007 	strb.w	r6, [sp, #7]
	RTC_DateStruct.Day = Day;
 8002820:	f88d 5006 	strb.w	r5, [sp, #6]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002824:	f005 fcf4 	bl	8008210 <LL_RTC_DATE_Init>
	Exit_RTC_InitMode();
 8002828:	f7ff ff6a 	bl	8002700 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800282c:	23ff      	movs	r3, #255	; 0xff
 800282e:	6263      	str	r3, [r4, #36]	; 0x24
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <Set_RTC_Calendar+0x6c>)
 8002832:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002836:	605a      	str	r2, [r3, #4]
}
 8002838:	b005      	add	sp, #20
 800283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283c:	40002800 	.word	0x40002800
 8002840:	40002850 	.word	0x40002850

08002844 <RTC_BAK_GetRegister>:

// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister) {
	register uint32_t tmp = 0U;

	tmp = (uint32_t) (&(RTCx->BKP0R));
 8002844:	3050      	adds	r0, #80	; 0x50
	tmp += (BackupRegister * 4U);

	/* Read the specified register */
	return (*(__IO uint32_t *) tmp);
 8002846:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 800284a:	4770      	bx	lr

0800284c <USB_PA9_EXTI_conf>:
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_10);    // Enable PA10 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10); // Interrupt configured for falling edge
}

void USB_PA9_EXTI_conf(void) // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 800284c:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <USB_PA9_EXTI_conf+0x34>)
 8002850:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002854:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG); // Enable Sysconfig clock to enable EXTI pin interrupts
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff fb62 	bl	8001f20 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <USB_PA9_EXTI_conf+0x38>)
 800285e:	6913      	ldr	r3, [r2, #16]
 8002860:	21f0      	movs	r1, #240	; 0xf0
 8002862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002866:	fa91 f1a1 	rbit	r1, r1
 800286a:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <USB_PA9_EXTI_conf+0x3c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	bd08      	pop	{r3, pc}
 8002880:	e000e100 	.word	0xe000e100
 8002884:	40010000 	.word	0x40010000
 8002888:	40010400 	.word	0x40010400

0800288c <MCP_reset>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MCP_reset+0x28>)
 800288e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
}

void MCP_reset() {
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

	while (!(SPI2->SR & SPI_SR_TXE))
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <MCP_reset+0x2c>)
 8002896:	461a      	mov	r2, r3
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	0789      	lsls	r1, r1, #30
 800289c:	d5fc      	bpl.n	8002898 <MCP_reset+0xc>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800289e:	21c0      	movs	r1, #192	; 0xc0
 80028a0:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI2, 0xC0);
	while (!(SPI2->SR & SPI_SR_RXNE))
 80028a2:	6893      	ldr	r3, [r2, #8]
 80028a4:	07db      	lsls	r3, r3, #31
 80028a6:	d5fc      	bpl.n	80028a2 <MCP_reset+0x16>
  return (uint8_t)(READ_REG(SPIx->DR));
 80028a8:	68d3      	ldr	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80028aa:	4b02      	ldr	r3, [pc, #8]	; (80028b4 <MCP_reset+0x28>)
 80028ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028b0:	619a      	str	r2, [r3, #24]
 80028b2:	4770      	bx	lr
 80028b4:	48000400 	.word	0x48000400
 80028b8:	40003800 	.word	0x40003800

080028bc <Wait_for_ADC_timeout_While_Datalog>:
	}
}

void Wait_for_ADC_timeout_While_Datalog(void) // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	3201      	adds	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
	if (ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <Wait_for_ADC_timeout_While_Datalog+0x20>)
 80028c8:	4291      	cmp	r1, r2
 80028ca:	d904      	bls.n	80028d6 <Wait_for_ADC_timeout_While_Datalog+0x1a>
	{
		ADC_TimeOut_Count_Buf = 0;
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf = 1;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	4770      	bx	lr
 80028d8:	20008a0c 	.word	0x20008a0c
 80028dc:	00493e00 	.word	0x00493e00
 80028e0:	20008fcb 	.word	0x20008fcb

080028e4 <Wait_for_ADC_TimeOut_>:
		SPI_Error = 1;
	}
}

void Wait_for_ADC_TimeOut_(void) {
	ADC_TimeOut_Count++;
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <Wait_for_ADC_TimeOut_+0x1c>)
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80028e6:	4907      	ldr	r1, [pc, #28]	; (8002904 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	3301      	adds	r3, #1
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80028ec:	428b      	cmp	r3, r1
	{
		ADC_TimeOut_Count = 0;
 80028ee:	bf83      	ittte	hi
 80028f0:	2300      	movhi	r3, #0
 80028f2:	6013      	strhi	r3, [r2, #0]
		ADC_Error = 1;
 80028f4:	4b04      	ldrhi	r3, [pc, #16]	; (8002908 <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 80028f6:	6013      	strls	r3, [r2, #0]
		ADC_Error = 1;
 80028f8:	bf84      	itt	hi
 80028fa:	2201      	movhi	r2, #1
 80028fc:	701a      	strbhi	r2, [r3, #0]
 80028fe:	4770      	bx	lr
 8002900:	20008fcc 	.word	0x20008fcc
 8002904:	00493e00 	.word	0x00493e00
 8002908:	20008fc2 	.word	0x20008fc2

0800290c <P_Activate_ADC3>:
void P_Activate_ADC3(void) {
 800290c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800290e:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002910:	482c      	ldr	r0, [pc, #176]	; (80029c4 <P_Activate_ADC3+0xb8>)
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <P_Activate_ADC3+0xbc>)
 8002918:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800291c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002920:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8002922:	6883      	ldr	r3, [r0, #8]
 8002924:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6083      	str	r3, [r0, #8]
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <P_Activate_ADC3+0xc0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fbb3 f3f2 	udiv	r3, r3, r2
 800293a:	220a      	movs	r2, #10
 800293c:	4353      	muls	r3, r2
 800293e:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 8002942:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002944:	9a01      	ldr	r2, [sp, #4]
 8002946:	2a00      	cmp	r2, #0
 8002948:	d12f      	bne.n	80029aa <P_Activate_ADC3+0x9e>
  MODIFY_REG(ADCx->CR,
 800294a:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800294c:	4d20      	ldr	r5, [pc, #128]	; (80029d0 <P_Activate_ADC3+0xc4>)
	ADC_Error = 0;
 800294e:	4c21      	ldr	r4, [pc, #132]	; (80029d4 <P_Activate_ADC3+0xc8>)
 8002950:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800295c:	6083      	str	r3, [r0, #8]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800295e:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002962:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002964:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002966:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding
 8002968:	2b00      	cmp	r3, #0
 800296a:	db04      	blt.n	8002976 <P_Activate_ADC3+0x6a>
 800296c:	6933      	ldr	r3, [r6, #16]
 800296e:	0599      	lsls	r1, r3, #22
 8002970:	d401      	bmi.n	8002976 <P_Activate_ADC3+0x6a>
			&& (ADC_Error == 0)) {
 8002972:	7823      	ldrb	r3, [r4, #0]
 8002974:	b1e3      	cbz	r3, 80029b0 <P_Activate_ADC3+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8002976:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 8002978:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800297a:	9a01      	ldr	r2, [sp, #4]
 800297c:	b9da      	cbnz	r2, 80029b6 <P_Activate_ADC3+0xaa>
  MODIFY_REG(ADCx->CR,
 800297e:	6883      	ldr	r3, [r0, #8]
 8002980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800298e:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002990:	7022      	strb	r2, [r4, #0]
 8002992:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002996:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0) && !Error_preceding
 8002998:	07da      	lsls	r2, r3, #31
 800299a:	d404      	bmi.n	80029a6 <P_Activate_ADC3+0x9a>
 800299c:	692b      	ldr	r3, [r5, #16]
 800299e:	059b      	lsls	r3, r3, #22
 80029a0:	d401      	bmi.n	80029a6 <P_Activate_ADC3+0x9a>
			&& (ADC_Error == 0)) {
 80029a2:	7823      	ldrb	r3, [r4, #0]
 80029a4:	b153      	cbz	r3, 80029bc <P_Activate_ADC3+0xb0>
}
 80029a6:	b002      	add	sp, #8
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	e7c8      	b.n	8002942 <P_Activate_ADC3+0x36>
		Wait_for_ADC_TimeOut_();
 80029b0:	f7ff ff98 	bl	80028e4 <Wait_for_ADC_TimeOut_>
 80029b4:	e7d7      	b.n	8002966 <P_Activate_ADC3+0x5a>
		wait_loop_index--;
 80029b6:	9b01      	ldr	r3, [sp, #4]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	e7dd      	b.n	8002978 <P_Activate_ADC3+0x6c>
		Wait_for_ADC_TimeOut_();
 80029bc:	f7ff ff92 	bl	80028e4 <Wait_for_ADC_TimeOut_>
 80029c0:	e7e9      	b.n	8002996 <P_Activate_ADC3+0x8a>
 80029c2:	bf00      	nop
 80029c4:	50040200 	.word	0x50040200
 80029c8:	000186a0 	.word	0x000186a0
 80029cc:	20000010 	.word	0x20000010
 80029d0:	20008fcc 	.word	0x20008fcc
 80029d4:	20008fc2 	.word	0x20008fc2

080029d8 <P_Activate_ADC2>:
void P_Activate_ADC2(void) {
 80029d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 80029da:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029dc:	482c      	ldr	r0, [pc, #176]	; (8002a90 <P_Activate_ADC2+0xb8>)
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <P_Activate_ADC2+0xbc>)
 80029e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ec:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80029ee:	6883      	ldr	r3, [r0, #8]
 80029f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6083      	str	r3, [r0, #8]
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <P_Activate_ADC2+0xc0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a06:	220a      	movs	r2, #10
 8002a08:	4353      	muls	r3, r2
 8002a0a:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 8002a0e:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002a10:	9a01      	ldr	r2, [sp, #4]
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	d12f      	bne.n	8002a76 <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 8002a16:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 8002a18:	4d20      	ldr	r5, [pc, #128]	; (8002a9c <P_Activate_ADC2+0xc4>)
	ADC_Error = 0;
 8002a1a:	4c21      	ldr	r4, [pc, #132]	; (8002aa0 <P_Activate_ADC2+0xc8>)
 8002a1c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a28:	6083      	str	r3, [r0, #8]
 8002a2a:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002a2e:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002a30:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002a32:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db04      	blt.n	8002a42 <P_Activate_ADC2+0x6a>
 8002a38:	6933      	ldr	r3, [r6, #16]
 8002a3a:	0599      	lsls	r1, r3, #22
 8002a3c:	d401      	bmi.n	8002a42 <P_Activate_ADC2+0x6a>
			&& (ADC_Error == 0)) {
 8002a3e:	7823      	ldrb	r3, [r4, #0]
 8002a40:	b1e3      	cbz	r3, 8002a7c <P_Activate_ADC2+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8002a42:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 8002a44:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002a46:	9a01      	ldr	r2, [sp, #4]
 8002a48:	b9da      	cbnz	r2, 8002a82 <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 8002a4a:	6883      	ldr	r3, [r0, #8]
 8002a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 8002a5a:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002a5c:	7022      	strb	r2, [r4, #0]
 8002a5e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002a62:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0) && !Error_preceding
 8002a64:	07da      	lsls	r2, r3, #31
 8002a66:	d404      	bmi.n	8002a72 <P_Activate_ADC2+0x9a>
 8002a68:	692b      	ldr	r3, [r5, #16]
 8002a6a:	059b      	lsls	r3, r3, #22
 8002a6c:	d401      	bmi.n	8002a72 <P_Activate_ADC2+0x9a>
			&& (ADC_Error == 0)) {
 8002a6e:	7823      	ldrb	r3, [r4, #0]
 8002a70:	b153      	cbz	r3, 8002a88 <P_Activate_ADC2+0xb0>
}
 8002a72:	b002      	add	sp, #8
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	e7c8      	b.n	8002a0e <P_Activate_ADC2+0x36>
		Wait_for_ADC_TimeOut_();
 8002a7c:	f7ff ff32 	bl	80028e4 <Wait_for_ADC_TimeOut_>
 8002a80:	e7d7      	b.n	8002a32 <P_Activate_ADC2+0x5a>
		wait_loop_index--;
 8002a82:	9b01      	ldr	r3, [sp, #4]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	e7dd      	b.n	8002a44 <P_Activate_ADC2+0x6c>
		Wait_for_ADC_TimeOut_();
 8002a88:	f7ff ff2c 	bl	80028e4 <Wait_for_ADC_TimeOut_>
 8002a8c:	e7e9      	b.n	8002a62 <P_Activate_ADC2+0x8a>
 8002a8e:	bf00      	nop
 8002a90:	50040100 	.word	0x50040100
 8002a94:	000186a0 	.word	0x000186a0
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	20008fcc 	.word	0x20008fcc
 8002aa0:	20008fc2 	.word	0x20008fc2

08002aa4 <P_Activate_ADC1>:
void P_Activate_ADC1(void) {
 8002aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <P_Activate_ADC1+0xbc>)
			* (SystemCoreClock / 100000) / 10);
 8002aac:	492d      	ldr	r1, [pc, #180]	; (8002b64 <P_Activate_ADC1+0xc0>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002ab4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ab8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8002ac0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ac4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <P_Activate_ADC1+0xc4>)
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	fbb2 f2f1 	udiv	r2, r2, r1
 8002ad2:	210a      	movs	r1, #10
 8002ad4:	434a      	muls	r2, r1
 8002ad6:	fbb2 f2f1 	udiv	r2, r2, r1
		wait_loop_index--;
 8002ada:	9201      	str	r2, [sp, #4]
	while (wait_loop_index != 0) {
 8002adc:	9901      	ldr	r1, [sp, #4]
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d132      	bne.n	8002b48 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 8002ae2:	689a      	ldr	r2, [r3, #8]
	ADC_TimeOut_Count = 0;
 8002ae4:	4c21      	ldr	r4, [pc, #132]	; (8002b6c <P_Activate_ADC1+0xc8>)
	ADC_Error = 0;
 8002ae6:	4822      	ldr	r0, [pc, #136]	; (8002b70 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002ae8:	4d1d      	ldr	r5, [pc, #116]	; (8002b60 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 8002aea:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002aee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002af2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002afc:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 8002afe:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002b00:	68ab      	ldr	r3, [r5, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db04      	blt.n	8002b10 <P_Activate_ADC1+0x6c>
 8002b06:	6933      	ldr	r3, [r6, #16]
 8002b08:	0599      	lsls	r1, r3, #22
 8002b0a:	d401      	bmi.n	8002b10 <P_Activate_ADC1+0x6c>
			&& (ADC_Error == 0)) {
 8002b0c:	7803      	ldrb	r3, [r0, #0]
 8002b0e:	b1f3      	cbz	r3, 8002b4e <P_Activate_ADC1+0xaa>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8002b10:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 8002b12:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002b14:	9901      	ldr	r1, [sp, #4]
 8002b16:	b9e9      	cbnz	r1, 8002b54 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8002b18:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <P_Activate_ADC1+0xbc>)
 8002b1a:	6893      	ldr	r3, [r2, #8]
 8002b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002b2e:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 8002b30:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002b32:	4614      	mov	r4, r2
 8002b34:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0) && !Error_preceding
 8002b36:	07da      	lsls	r2, r3, #31
 8002b38:	d404      	bmi.n	8002b44 <P_Activate_ADC1+0xa0>
 8002b3a:	692b      	ldr	r3, [r5, #16]
 8002b3c:	059b      	lsls	r3, r3, #22
 8002b3e:	d401      	bmi.n	8002b44 <P_Activate_ADC1+0xa0>
			&& (ADC_Error == 0)) {
 8002b40:	7803      	ldrb	r3, [r0, #0]
 8002b42:	b153      	cbz	r3, 8002b5a <P_Activate_ADC1+0xb6>
}
 8002b44:	b002      	add	sp, #8
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 8002b48:	9a01      	ldr	r2, [sp, #4]
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	e7c5      	b.n	8002ada <P_Activate_ADC1+0x36>
		Wait_for_ADC_TimeOut_();
 8002b4e:	f7ff fec9 	bl	80028e4 <Wait_for_ADC_TimeOut_>
 8002b52:	e7d5      	b.n	8002b00 <P_Activate_ADC1+0x5c>
		wait_loop_index--;
 8002b54:	9b01      	ldr	r3, [sp, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	e7db      	b.n	8002b12 <P_Activate_ADC1+0x6e>
		Wait_for_ADC_TimeOut_();
 8002b5a:	f7ff fec3 	bl	80028e4 <Wait_for_ADC_TimeOut_>
 8002b5e:	e7e9      	b.n	8002b34 <P_Activate_ADC1+0x90>
 8002b60:	50040000 	.word	0x50040000
 8002b64:	000186a0 	.word	0x000186a0
 8002b68:	20000010 	.word	0x20000010
 8002b6c:	20008fcc 	.word	0x20008fcc
 8002b70:	20008fc2 	.word	0x20008fc2

08002b74 <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <P_ADC1_conf_strain+0x140>)
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
void P_ADC1_conf_strain(void) {
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b82:	4d4d      	ldr	r5, [pc, #308]	; (8002cb8 <P_ADC1_conf_strain+0x144>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002b84:	4c4d      	ldr	r4, [pc, #308]	; (8002cbc <P_ADC1_conf_strain+0x148>)
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 8002b86:	4e4e      	ldr	r6, [pc, #312]	; (8002cc0 <P_ADC1_conf_strain+0x14c>)
 8002b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8002b8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b92:	f7ff f9b7 	bl	8001f04 <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b96:	68ab      	ldr	r3, [r5, #8]
 8002b98:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba0:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002baa:	68e3      	ldr	r3, [r4, #12]
 8002bac:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002bb0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002bb2:	68e3      	ldr	r3, [r4, #12]
 8002bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bb8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002bba:	68e3      	ldr	r3, [r4, #12]
 8002bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bc0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002bc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bc4:	f023 030f 	bic.w	r3, r3, #15
 8002bc8:	6323      	str	r3, [r4, #48]	; 0x30
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4632      	mov	r2, r6
 8002bce:	2106      	movs	r1, #6
 8002bd0:	f7ff f9ca 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	4631      	mov	r1, r6
 8002bd8:	2207      	movs	r2, #7
 8002bda:	f7ff f9e3 	bl	8001fa4 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bde:	68ab      	ldr	r3, [r5, #8]
	LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002be0:	4e38      	ldr	r6, [pc, #224]	; (8002cc4 <P_ADC1_conf_strain+0x150>)
 8002be2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002be6:	f504 7480 	add.w	r4, r4, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bee:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002bf0:	68e3      	ldr	r3, [r4, #12]
 8002bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002bf8:	68e3      	ldr	r3, [r4, #12]
 8002bfa:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002bfe:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002c00:	68e3      	ldr	r3, [r4, #12]
 8002c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c06:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002c08:	68e3      	ldr	r3, [r4, #12]
 8002c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c0e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002c10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	6323      	str	r3, [r4, #48]	; 0x30
 8002c18:	4632      	mov	r2, r6
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	2106      	movs	r1, #6
 8002c1e:	f7ff f9a3 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4,
 8002c22:	4631      	mov	r1, r6
 8002c24:	4620      	mov	r0, r4
 8002c26:	2207      	movs	r2, #7
 8002c28:	f7ff f9bc 	bl	8001fa4 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c2c:	68ab      	ldr	r3, [r5, #8]
 8002c2e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c36:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002c38:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002c3c:	4d22      	ldr	r5, [pc, #136]	; (8002cc8 <P_ADC1_conf_strain+0x154>)
 8002c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c42:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002c46:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002c4a:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002c4e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002c52:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002c5e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002c62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c66:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002c6a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8002c6e:	f023 030f 	bic.w	r3, r3, #15
 8002c72:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002c76:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8002c7a:	462a      	mov	r2, r5
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	2106      	movs	r1, #6
 8002c80:	f7ff f972 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 8002c84:	4629      	mov	r1, r5
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002c86:	4d11      	ldr	r5, [pc, #68]	; (8002ccc <P_ADC1_conf_strain+0x158>)
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 8002c88:	4620      	mov	r0, r4
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	f7ff f98a 	bl	8001fa4 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002c90:	462a      	mov	r2, r5
 8002c92:	4620      	mov	r0, r4
 8002c94:	2106      	movs	r1, #6
 8002c96:	f7ff f967 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1,
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	f7ff f980 	bl	8001fa4 <LL_ADC_SetChannelSamplingTime>
	P_Activate_ADC3();
 8002ca4:	f7ff fe32 	bl	800290c <P_Activate_ADC3>
	P_Activate_ADC2();
 8002ca8:	f7ff fe96 	bl	80029d8 <P_Activate_ADC2>
}
 8002cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	P_Activate_ADC1();
 8002cb0:	f7ff bef8 	b.w	8002aa4 <P_Activate_ADC1>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	50040300 	.word	0x50040300
 8002cbc:	50040000 	.word	0x50040000
 8002cc0:	0c900008 	.word	0x0c900008
 8002cc4:	10c00010 	.word	0x10c00010
 8002cc8:	08600004 	.word	0x08600004
 8002ccc:	04300002 	.word	0x04300002

08002cd0 <P_ADC_Sensor_GPIO_Init>:
void P_ADC_Sensor_GPIO_Init(void) {
 8002cd0:	b510      	push	{r4, lr}
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002cd2:	4c16      	ldr	r4, [pc, #88]	; (8002d2c <P_ADC_Sensor_GPIO_Init+0x5c>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002cd4:	2004      	movs	r0, #4
 8002cd6:	f7ff f915 	bl	8001f04 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	2203      	movs	r2, #3
 8002cde:	2104      	movs	r1, #4
 8002ce0:	f7ff f92c 	bl	8001f3c <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8002ce4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8002cec:	4620      	mov	r0, r4
 8002cee:	2203      	movs	r2, #3
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	f7ff f923 	bl	8001f3c <LL_GPIO_SetPinMode>
 8002cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	2203      	movs	r2, #3
 8002d02:	2102      	movs	r1, #2
 8002d04:	f7ff f91a 	bl	8001f3c <LL_GPIO_SetPinMode>
 8002d08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8002d10:	4620      	mov	r0, r4
 8002d12:	2203      	movs	r2, #3
 8002d14:	2101      	movs	r1, #1
 8002d16:	f7ff f911 	bl	8001f3c <LL_GPIO_SetPinMode>
 8002d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	P_ADC1_conf_strain();
 8002d26:	f7ff bf25 	b.w	8002b74 <P_ADC1_conf_strain>
 8002d2a:	bf00      	nop
 8002d2c:	48000800 	.word	0x48000800

08002d30 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d34:	f44f 7280 	mov.w	r2, #256	; 0x100
	delay_us(5);
	LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
	return temp_val;
}

unsigned int WriteReg1(uint8_t adress, uint8_t data) {
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <WriteReg1+0x40>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	6894      	ldr	r4, [r2, #8]
 8002d42:	07a4      	lsls	r4, r4, #30
 8002d44:	d5fc      	bpl.n	8002d40 <WriteReg1+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d46:	7310      	strb	r0, [r2, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	07d4      	lsls	r4, r2, #31
 8002d4c:	d5fc      	bpl.n	8002d48 <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d4e:	68da      	ldr	r2, [r3, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	0790      	lsls	r0, r2, #30
 8002d54:	d5fc      	bpl.n	8002d50 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d56:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <WriteReg1+0x40>)
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	07d2      	lsls	r2, r2, #31
 8002d5e:	d5fc      	bpl.n	8002d5a <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d60:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6a:	619a      	str	r2, [r3, #24]
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
	return temp_val;
}
 8002d6c:	b2c0      	uxtb	r0, r0
 8002d6e:	bd10      	pop	{r4, pc}
 8002d70:	40013000 	.word	0x40013000

08002d74 <WriteReg1_imu2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000

unsigned int WriteReg1_imu2(uint8_t adress, uint8_t data) {
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <WriteReg1_imu2+0x40>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	6894      	ldr	r4, [r2, #8]
 8002d86:	07a4      	lsls	r4, r4, #30
 8002d88:	d5fc      	bpl.n	8002d84 <WriteReg1_imu2+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d8a:	7310      	strb	r0, [r2, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	07d4      	lsls	r4, r2, #31
 8002d90:	d5fc      	bpl.n	8002d8c <WriteReg1_imu2+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d92:	68da      	ldr	r2, [r3, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	0790      	lsls	r0, r2, #30
 8002d98:	d5fc      	bpl.n	8002d94 <WriteReg1_imu2+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d9a:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <WriteReg1_imu2+0x40>)
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	07d2      	lsls	r2, r2, #31
 8002da2:	d5fc      	bpl.n	8002d9e <WriteReg1_imu2+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002da4:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002da6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002daa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dae:	619a      	str	r2, [r3, #24]
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_IMU2_CS_Pin);
	return temp_val;
}
 8002db0:	b2c0      	uxtb	r0, r0
 8002db2:	bd10      	pop	{r4, pc}
 8002db4:	40013000 	.word	0x40013000

08002db8 <MCP_write>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002db8:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <MCP_write+0x38>)
 8002dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000

//void MCP_write(uint8_t adress, uint8_t data)
void MCP_write(int adress, int data) {
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

	while (!(SPI2->SR & SPI_SR_TXE))
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <MCP_write+0x3c>)
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	689c      	ldr	r4, [r3, #8]
 8002dc8:	07a4      	lsls	r4, r4, #30
 8002dca:	d5fc      	bpl.n	8002dc6 <MCP_write+0xe>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002dcc:	2402      	movs	r4, #2
 8002dce:	731c      	strb	r4, [r3, #12]
	LL_SPI_TransmitData8(SPI2, 0x02);
//	while (!(SPI2->SR & SPI_SR_RXNE))
//		; //data received?
//	LL_SPI_ReceiveData8(SPI2);

	while (!(SPI2->SR & SPI_SR_TXE))
 8002dd0:	6893      	ldr	r3, [r2, #8]
 8002dd2:	079c      	lsls	r4, r3, #30
 8002dd4:	d5fc      	bpl.n	8002dd0 <MCP_write+0x18>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI2, adress);
 8002dd6:	b2c0      	uxtb	r0, r0
//	while (!(SPI2->SR & SPI_SR_RXNE))
//		; //data received?
//	LL_SPI_ReceiveData8(SPI2);

	while (!(SPI2->SR & SPI_SR_TXE))
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <MCP_write+0x3c>)
 8002dda:	7310      	strb	r0, [r2, #12]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	0792      	lsls	r2, r2, #30
 8002de0:	d5fc      	bpl.n	8002ddc <MCP_write+0x24>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI2, data);
 8002de2:	b2c9      	uxtb	r1, r1
 8002de4:	7319      	strb	r1, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002de6:	4b02      	ldr	r3, [pc, #8]	; (8002df0 <MCP_write+0x38>)
 8002de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dec:	619a      	str	r2, [r3, #24]
 8002dee:	bd10      	pop	{r4, pc}
 8002df0:	48000400 	.word	0x48000400
 8002df4:	40003800 	.word	0x40003800

08002df8 <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002df8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PC4 CS SET Active Low

}

void ReadRegs1(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes) {
 8002dfc:	b530      	push	{r4, r5, lr}
 8002dfe:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002e02:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while (!(SPI1->SR & SPI_SR_TXE))
 8002e04:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <ReadRegs1+0x50>)
 8002e06:	461c      	mov	r4, r3
 8002e08:	689d      	ldr	r5, [r3, #8]
 8002e0a:	07ad      	lsls	r5, r5, #30
 8002e0c:	d5fc      	bpl.n	8002e08 <ReadRegs1+0x10>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80)); // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8002e0e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002e12:	7318      	strb	r0, [r3, #12]
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	07db      	lsls	r3, r3, #31
 8002e18:	d5fc      	bpl.n	8002e14 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002e1a:	68e3      	ldr	r3, [r4, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++) {
		while (!(SPI1->SR & SPI_SR_TXE))
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <ReadRegs1+0x50>)
 8002e1e:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002e20:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++) {
 8002e22:	4291      	cmp	r1, r2
 8002e24:	d105      	bne.n	8002e32 <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	619a      	str	r2, [r3, #24]
 8002e30:	bd30      	pop	{r4, r5, pc}
		while (!(SPI1->SR & SPI_SR_TXE))
 8002e32:	689c      	ldr	r4, [r3, #8]
 8002e34:	07a5      	lsls	r5, r4, #30
 8002e36:	d5fc      	bpl.n	8002e32 <ReadRegs1+0x3a>
 8002e38:	7318      	strb	r0, [r3, #12]
			; //transmit buffer empty?
		LL_SPI_TransmitData8(SPI1, 0x00);

		while (!(SPI1->SR & SPI_SR_RXNE))
 8002e3a:	689c      	ldr	r4, [r3, #8]
 8002e3c:	07e4      	lsls	r4, r4, #31
 8002e3e:	d5fc      	bpl.n	8002e3a <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002e40:	68dc      	ldr	r4, [r3, #12]
 8002e42:	f801 4b01 	strb.w	r4, [r1], #1
 8002e46:	e7ec      	b.n	8002e22 <ReadRegs1+0x2a>
 8002e48:	40013000 	.word	0x40013000

08002e4c <Read_Loadcell1>:
//
//return Load1;
//	  // ADC3 Ch2 PC1 read
//}

int Read_Loadcell1(void) {
 8002e4c:	b508      	push	{r3, lr}
	int Load1;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <Read_Loadcell1+0x44>)
 8002e50:	4810      	ldr	r0, [pc, #64]	; (8002e94 <Read_Loadcell1+0x48>)
 8002e52:	2106      	movs	r1, #6
 8002e54:	f7ff f888 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC2);
 8002e58:	480f      	ldr	r0, [pc, #60]	; (8002e98 <Read_Loadcell1+0x4c>)
 8002e5a:	f7ff f849 	bl	8001ef0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <Read_Loadcell1+0x50>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002e60:	480d      	ldr	r0, [pc, #52]	; (8002e98 <Read_Loadcell1+0x4c>)
 8002e62:	2300      	movs	r3, #0
 8002e64:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <Read_Loadcell1+0x54>)
 8002e68:	7013      	strb	r3, [r2, #0]
 8002e6a:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 8002e6c:	075b      	lsls	r3, r3, #29
 8002e6e:	d50b      	bpl.n	8002e88 <Read_Loadcell1+0x3c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e70:	2304      	movs	r3, #4
 8002e72:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002e74:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	Load1 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 8002e76:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002e7a:	b280      	uxth	r0, r0
 8002e7c:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B); // Toe

	return Load1;
	// ADC3 Ch2 PC1 read
}
 8002e7e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002e82:	fbb3 f0f0 	udiv	r0, r3, r0
 8002e86:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 8002e88:	f7ff fd18 	bl	80028bc <Wait_for_ADC_timeout_While_Datalog>
 8002e8c:	e7ed      	b.n	8002e6a <Read_Loadcell1+0x1e>
 8002e8e:	bf00      	nop
 8002e90:	04300002 	.word	0x04300002
 8002e94:	50040200 	.word	0x50040200
 8002e98:	50040100 	.word	0x50040100
 8002e9c:	20008a0c 	.word	0x20008a0c
 8002ea0:	20008fcb 	.word	0x20008fcb

08002ea4 <Read_Loadcell2>:

int Read_Loadcell2(void) {
 8002ea4:	b508      	push	{r3, lr}
	int Load2;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <Read_Loadcell2+0x44>)
 8002ea8:	4810      	ldr	r0, [pc, #64]	; (8002eec <Read_Loadcell2+0x48>)
 8002eaa:	2106      	movs	r1, #6
 8002eac:	f7ff f85c 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC1);
 8002eb0:	480f      	ldr	r0, [pc, #60]	; (8002ef0 <Read_Loadcell2+0x4c>)
 8002eb2:	f7ff f81d 	bl	8001ef0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <Read_Loadcell2+0x50>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <Read_Loadcell2+0x4c>)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <Read_Loadcell2+0x54>)
 8002ec0:	7013      	strb	r3, [r2, #0]
 8002ec2:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 8002ec4:	075b      	lsls	r3, r3, #29
 8002ec6:	d50b      	bpl.n	8002ee0 <Read_Loadcell2+0x3c>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002ec8:	2304      	movs	r3, #4
 8002eca:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002ecc:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	Load2 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 8002ece:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002ed2:	b280      	uxth	r0, r0
 8002ed4:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B); //Heel

	return Load2;
	// ADC3 Ch2 PC1 read
}
 8002ed6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002eda:	fbb3 f0f0 	udiv	r0, r3, r0
 8002ede:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 8002ee0:	f7ff fcec 	bl	80028bc <Wait_for_ADC_timeout_While_Datalog>
 8002ee4:	e7ed      	b.n	8002ec2 <Read_Loadcell2+0x1e>
 8002ee6:	bf00      	nop
 8002ee8:	04300002 	.word	0x04300002
 8002eec:	50040200 	.word	0x50040200
 8002ef0:	50040000 	.word	0x50040000
 8002ef4:	20008a0c 	.word	0x20008a0c
 8002ef8:	20008fcb 	.word	0x20008fcb

08002efc <F_Sensor_ADC_Store>:

void F_Sensor_ADC_Store(void) {
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002efe:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <F_Sensor_ADC_Store+0xa4>)
 8002f00:	4828      	ldr	r0, [pc, #160]	; (8002fa4 <F_Sensor_ADC_Store+0xa8>)

	LL_ADC_REG_StartConversion(ADC2);
	ADC_TimeOut_Count_Buf = 0;
 8002f02:	4d29      	ldr	r5, [pc, #164]	; (8002fa8 <F_Sensor_ADC_Store+0xac>)
	ADC_Error_Buf = 0;
 8002f04:	4c29      	ldr	r4, [pc, #164]	; (8002fac <F_Sensor_ADC_Store+0xb0>)
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002f06:	2106      	movs	r1, #6
 8002f08:	f7ff f82e 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_REG_StartConversion(ADC2);
 8002f0c:	4828      	ldr	r0, [pc, #160]	; (8002fb0 <F_Sensor_ADC_Store+0xb4>)
 8002f0e:	f7fe ffef 	bl	8001ef0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 8002f12:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002f14:	4826      	ldr	r0, [pc, #152]	; (8002fb0 <F_Sensor_ADC_Store+0xb4>)
 8002f16:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 8002f18:	7023      	strb	r3, [r4, #0]
 8002f1a:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 8002f1c:	075a      	lsls	r2, r3, #29
 8002f1e:	d539      	bpl.n	8002f94 <F_Sensor_ADC_Store+0x98>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f20:	2304      	movs	r3, #4
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8002f22:	4f24      	ldr	r7, [pc, #144]	; (8002fb4 <F_Sensor_ADC_Store+0xb8>)
 8002f24:	4e24      	ldr	r6, [pc, #144]	; (8002fb8 <F_Sensor_ADC_Store+0xbc>)
 8002f26:	6003      	str	r3, [r0, #0]
 8002f28:	f897 e000 	ldrb.w	lr, [r7]
 8002f2c:	6833      	ldr	r3, [r6, #0]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <F_Sensor_ADC_Store+0xc0>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002f30:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002f32:	eb03 334e 	add.w	r3, r3, lr, lsl #13
 8002f36:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f40:	b280      	uxth	r0, r0
 8002f42:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8002f46:	4341      	muls	r1, r0
 8002f48:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002f4c:	fbb1 f1f0 	udiv	r1, r1, r0
			VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2),
			LL_ADC_RESOLUTION_12B);  // Toe

	LL_ADC_REG_StartConversion(ADC1);
 8002f50:	481b      	ldr	r0, [pc, #108]	; (8002fc0 <F_Sensor_ADC_Store+0xc4>)
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8002f52:	8059      	strh	r1, [r3, #2]
	LL_ADC_REG_StartConversion(ADC1);
 8002f54:	f7fe ffcc 	bl	8001ef0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 8002f5c:	7023      	strb	r3, [r4, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002f5e:	4c18      	ldr	r4, [pc, #96]	; (8002fc0 <F_Sensor_ADC_Store+0xc4>)
 8002f60:	4610      	mov	r0, r2
 8002f62:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 8002f64:	075b      	lsls	r3, r3, #29
 8002f66:	d518      	bpl.n	8002f9a <F_Sensor_ADC_Store+0x9e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f68:	2304      	movs	r3, #4
 8002f6a:	6023      	str	r3, [r4, #0]
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	BSbuffer[s_flag].Loadcel2[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8002f6c:	7839      	ldrb	r1, [r7, #0]
 8002f6e:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002f70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f72:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8002f76:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f80:	b291      	uxth	r1, r2
 8002f82:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8002f86:	434a      	muls	r2, r1
 8002f88:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002f8c:	fbb2 f2f1 	udiv	r2, r2, r1
 8002f90:	809a      	strh	r2, [r3, #4]
 8002f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Wait_for_ADC_timeout_While_Datalog();
 8002f94:	f7ff fc92 	bl	80028bc <Wait_for_ADC_timeout_While_Datalog>
 8002f98:	e7bf      	b.n	8002f1a <F_Sensor_ADC_Store+0x1e>
		Wait_for_ADC_timeout_While_Datalog();
 8002f9a:	f7ff fc8f 	bl	80028bc <Wait_for_ADC_timeout_While_Datalog>
 8002f9e:	e7e0      	b.n	8002f62 <F_Sensor_ADC_Store+0x66>
 8002fa0:	04300002 	.word	0x04300002
 8002fa4:	50040200 	.word	0x50040200
 8002fa8:	20008a0c 	.word	0x20008a0c
 8002fac:	20008fcb 	.word	0x20008fcb
 8002fb0:	50040100 	.word	0x50040100
 8002fb4:	200005d0 	.word	0x200005d0
 8002fb8:	200005b0 	.word	0x200005b0
 8002fbc:	2000061c 	.word	0x2000061c
 8002fc0:	50040000 	.word	0x50040000

08002fc4 <ACC_GPIO_INIT>:
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0); // Set PC0 pin EXTI interrupt in EXTI9-5 line
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);      // Enable PC0 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_0); // Interrupt configured for Falling edge
}

void ACC_GPIO_INIT(void) {
 8002fc4:	b510      	push	{r4, lr}
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	2120      	movs	r1, #32
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002fce:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8002fd2:	f7fe ffb3 	bl	8001f3c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	2120      	movs	r1, #32
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fde:	f7ff f808 	bl	8001ff2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe8:	f7ff f82f 	bl	800204a <LL_GPIO_SetPinSpeed.constprop.6>
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	f023 0320 	bic.w	r3, r3, #32
 8002ff2:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	f7ff f810 	bl	800201e <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8002ffe:	4620      	mov	r0, r4
 8003000:	2202      	movs	r2, #2
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	f7fe ff9a 	bl	8001f3c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8003008:	2205      	movs	r2, #5
 800300a:	4620      	mov	r0, r4
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	f7fe fff0 	bl	8001ff2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8003012:	4620      	mov	r0, r4
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	f7ff f818 	bl	800204a <LL_GPIO_SetPinSpeed.constprop.6>
 800301a:	6863      	ldr	r3, [r4, #4]
 800301c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003020:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8003022:	4620      	mov	r0, r4
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	f7fe fff9 	bl	800201e <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 800302c:	4620      	mov	r0, r4
 800302e:	2202      	movs	r2, #2
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	f7fe ff83 	bl	8001f3c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 8003036:	2205      	movs	r2, #5
 8003038:	4620      	mov	r0, r4
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	f7fe ffd9 	bl	8001ff2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8003040:	4620      	mov	r0, r4
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	f7ff f801 	bl	800204a <LL_GPIO_SetPinSpeed.constprop.6>
 8003048:	6863      	ldr	r3, [r4, #4]
 800304a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304e:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8003050:	4620      	mov	r0, r4
 8003052:	2200      	movs	r2, #0
 8003054:	2180      	movs	r1, #128	; 0x80
}
 8003056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 800305a:	f7fe bfe0 	b.w	800201e <LL_GPIO_SetPinPull>
	...

08003060 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_15, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}

void P_IMU1_SPI1_Init(void)  //MPU9250
{
 8003060:	b508      	push	{r3, lr}

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003062:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003066:	f7fe ff5b 	bl	8001f20 <LL_APB2_GRP1_EnableClock>

	ACC_GPIO_INIT();
 800306a:	f7ff ffab 	bl	8002fc4 <ACC_GPIO_INIT>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <P_IMU1_SPI1_Init+0x7c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003076:	f042 0208 	orr.w	r2, r2, #8
 800307a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8003082:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f042 0202 	orr.w	r2, r2, #2
 8003092:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80030a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80030a6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030be:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 80030c6:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	bd08      	pop	{r3, pc}
 80030da:	bf00      	nop
 80030dc:	40013000 	.word	0x40013000

080030e0 <P_IMU3_SPI2_Init>:
	delay_us(10000);

}

/* SPI2 init function */
void P_IMU3_SPI2_Init(void) {
 80030e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_SPI_InitTypeDef SPI_InitStruct;

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80030e4:	2004      	movs	r0, #4
void P_IMU3_SPI2_Init(void) {
 80030e6:	b092      	sub	sp, #72	; 0x48
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80030e8:	f7fe ff0c 	bl	8001f04 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80030ec:	2002      	movs	r0, #2
 80030ee:	f7fe ff09 	bl	8001f04 <LL_AHB2_GRP1_EnableClock>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80030f2:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <P_IMU3_SPI2_Init+0xe0>)
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80030f4:	4e33      	ldr	r6, [pc, #204]	; (80031c4 <P_IMU3_SPI2_Init+0xe4>)
 80030f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030fc:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003104:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003106:	2400      	movs	r4, #0
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003108:	2502      	movs	r5, #2
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800310e:	2705      	movs	r7, #5
  (void)tmpreg;
 8003110:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003112:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8003114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003118:	a902      	add	r1, sp, #8
 800311a:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 800311c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800311e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003120:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003122:	f8cd 8010 	str.w	r8, [sp, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003126:	9707      	str	r7, [sp, #28]
	LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003128:	f004 fe44 	bl	8007db4 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 800312c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003130:	a902      	add	r1, sp, #8
 8003132:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8003134:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003136:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003138:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800313a:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	f8cd 8010 	str.w	r8, [sp, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003140:	9707      	str	r7, [sp, #28]
	LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003142:	f004 fe37 	bl	8007db4 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800314a:	a902      	add	r1, sp, #8
 800314c:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 800314e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003150:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003152:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003154:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	f8cd 8010 	str.w	r8, [sp, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800315a:	9707      	str	r7, [sp, #28]
	LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800315c:	f004 fe2a 	bl	8007db4 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003160:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003164:	9309      	str	r3, [sp, #36]	; 0x24
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003166:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800316a:	930a      	str	r3, [sp, #40]	; 0x28
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800316c:	2301      	movs	r3, #1
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800316e:	9408      	str	r4, [sp, #32]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003170:	930c      	str	r3, [sp, #48]	; 0x30
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003172:	940f      	str	r4, [sp, #60]	; 0x3c
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003174:	9410      	str	r4, [sp, #64]	; 0x40
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003176:	f44f 7300 	mov.w	r3, #512	; 0x200
	SPI_InitStruct.CRCPoly = 7;
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 800317a:	4c13      	ldr	r4, [pc, #76]	; (80031c8 <P_IMU3_SPI2_Init+0xe8>)
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800317c:	930d      	str	r3, [sp, #52]	; 0x34
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800317e:	2308      	movs	r3, #8
 8003180:	930e      	str	r3, [sp, #56]	; 0x38
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003182:	a908      	add	r1, sp, #32
	SPI_InitStruct.CRCPoly = 7;
 8003184:	2307      	movs	r3, #7
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003186:	4620      	mov	r0, r4
	SPI_InitStruct.CRCPoly = 7;
 8003188:	9311      	str	r3, [sp, #68]	; 0x44
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800318a:	950b      	str	r5, [sp, #44]	; 0x2c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 800318c:	f005 f8e0 	bl	8008350 <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	f023 0308 	bic.w	r3, r3, #8
 8003196:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003198:	6863      	ldr	r3, [r4, #4]
 800319a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800319e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ae:	6023      	str	r3, [r4, #0]

	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
	LL_SPI_DisableIT_RXNE(SPI2);
	LL_SPI_Enable(SPI2);

	delay_us(10000);
 80031b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80031b4:	f001 f864 	bl	8004280 <delay_us>

}
 80031b8:	b012      	add	sp, #72	; 0x48
 80031ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	48000400 	.word	0x48000400
 80031c8:	40003800 	.word	0x40003800

080031cc <MCP_SPI2_Initialization_at_reset>:
void MCP_SPI2_Initialization_at_reset(void) {
 80031cc:	b508      	push	{r3, lr}
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <MCP_SPI2_Initialization_at_reset+0x1c>)
 80031d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d4:	619a      	str	r2, [r3, #24]
	MCP_setup();
 80031d6:	f7ff ff83 	bl	80030e0 <P_IMU3_SPI2_Init>
	MCP_reset();
 80031da:	f7ff fb57 	bl	800288c <MCP_reset>
	delay_us(70000);
 80031de:	4803      	ldr	r0, [pc, #12]	; (80031ec <MCP_SPI2_Initialization_at_reset+0x20>)
}
 80031e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(70000);
 80031e4:	f001 b84c 	b.w	8004280 <delay_us>
 80031e8:	48000400 	.word	0x48000400
 80031ec:	00011170 	.word	0x00011170

080031f0 <Configure_USART_1>:

void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 80031f0:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 80031f2:	4c18      	ldr	r4, [pc, #96]	; (8003254 <Configure_USART_1+0x64>)
 80031f4:	2202      	movs	r2, #2
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fe fe9f 	bl	8001f3c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 80031fe:	2207      	movs	r2, #7
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	4620      	mov	r0, r4
 8003204:	f7fe fef5 	bl	8001ff2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8003208:	2140      	movs	r1, #64	; 0x40
 800320a:	4620      	mov	r0, r4
 800320c:	f7fe ff1d 	bl	800204a <LL_GPIO_SetPinSpeed.constprop.6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003216:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8003218:	2201      	movs	r2, #1
 800321a:	2140      	movs	r1, #64	; 0x40
 800321c:	4620      	mov	r0, r4
 800321e:	f7fe fefe 	bl	800201e <LL_GPIO_SetPinPull>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <Configure_USART_1+0x68>)
 8003224:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322a:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

	MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE,
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <Configure_USART_1+0x6c>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	f042 020c 	orr.w	r2, r2, #12
 8003234:	601a      	str	r2, [r3, #0]
			(USART_CR1_TE |USART_CR1_RE)); // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX

	USART1->BRR =
			(uint16_t) (__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200)); // Baud rate 115200
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <Configure_USART_1+0x70>)
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800323e:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8003242:	fbb2 f2f1 	udiv	r2, r2, r1
	USART1->BRR =
 8003246:	60da      	str	r2, [r3, #12]

	USART1->CR1 |= USART_CR1_UE;  // Unable USART1
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	bd10      	pop	{r4, pc}
 8003252:	bf00      	nop
 8003254:	48000400 	.word	0x48000400
 8003258:	40021000 	.word	0x40021000
 800325c:	40013800 	.word	0x40013800
 8003260:	20000010 	.word	0x20000010

08003264 <USART1_wr_print>:

}

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes) {
	for (int i = 0; i < nBytes; i++) {
		while (!(USART1->ISR & USART_ISR_TXE))
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <USART1_wr_print+0x28>)
 8003266:	4401      	add	r1, r0
	for (int i = 0; i < nBytes; i++) {
 8003268:	4288      	cmp	r0, r1
 800326a:	d100      	bne.n	800326e <USART1_wr_print+0xa>

		while (!(USART1->ISR & USART_ISR_TC))
			;
		USART1->ISR &= ~USART_ISR_TC;
	}
}
 800326c:	4770      	bx	lr
		while (!(USART1->ISR & USART_ISR_TXE))
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	0612      	lsls	r2, r2, #24
 8003272:	d5fc      	bpl.n	800326e <USART1_wr_print+0xa>
		USART1->TDR = buffer[i] & 0xFF;
 8003274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART1->ISR & USART_ISR_TC))
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	0652      	lsls	r2, r2, #25
 800327e:	d5fc      	bpl.n	800327a <USART1_wr_print+0x16>
		USART1->ISR &= ~USART_ISR_TC;
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003286:	61da      	str	r2, [r3, #28]
 8003288:	e7ee      	b.n	8003268 <USART1_wr_print+0x4>
 800328a:	bf00      	nop
 800328c:	40013800 	.word	0x40013800

08003290 <Clear_ErrorTimestamp_Buffer>:
}

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void) {
	ErrorCodeBuf = 0;
 8003290:	4a02      	ldr	r2, [pc, #8]	; (800329c <Clear_ErrorTimestamp_Buffer+0xc>)
 8003292:	2300      	movs	r3, #0
 8003294:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf = 0;
 8003296:	4a02      	ldr	r2, [pc, #8]	; (80032a0 <Clear_ErrorTimestamp_Buffer+0x10>)
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4770      	bx	lr
 800329c:	20008730 	.word	0x20008730
 80032a0:	20008734 	.word	0x20008734

080032a4 <Reset_All>:
{
 80032a4:	b508      	push	{r3, lr}
	last_file = 0;
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <Reset_All+0x38>)
 80032a8:	2100      	movs	r1, #0
 80032aa:	6019      	str	r1, [r3, #0]
	Sub_cnt = 0;         // Array Index count in a single buffer to store values
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <Reset_All+0x3c>)
 80032ae:	6019      	str	r1, [r3, #0]
	w_flag = 1; // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <Reset_All+0x40>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
	s_flag = 0; // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <Reset_All+0x44>)
 80032b8:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0; // Flag to indicates whether a buffer a full and ready to write in SD card
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <Reset_All+0x48>)
 80032bc:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0; // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <Reset_All+0x4c>)
 80032c0:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 80032c2:	f7ff ffe5 	bl	8003290 <Clear_ErrorTimestamp_Buffer>
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <Reset_All+0x50>)
		Error_reg_log.Error[indxE] = 0;
 80032c8:	460a      	mov	r2, r1
 80032ca:	f1a3 0008 	sub.w	r0, r3, #8
 80032ce:	540a      	strb	r2, [r1, r0]
	for (int indxE = 0; indxE < 10; indxE++) {
 80032d0:	3101      	adds	r1, #1
 80032d2:	290a      	cmp	r1, #10
		Error_reg_log.ErrorTime[indxE] = 0;
 80032d4:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int indxE = 0; indxE < 10; indxE++) {
 80032d8:	d1f9      	bne.n	80032ce <Reset_All+0x2a>
}
 80032da:	bd08      	pop	{r3, pc}
 80032dc:	20008d40 	.word	0x20008d40
 80032e0:	200005b0 	.word	0x200005b0
 80032e4:	2000000c 	.word	0x2000000c
 80032e8:	200005d0 	.word	0x200005d0
 80032ec:	20008710 	.word	0x20008710
 80032f0:	200005ac 	.word	0x200005ac
 80032f4:	20008628 	.word	0x20008628

080032f8 <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf = ErrorCode;
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <Save_ErrorTimestamp_Buffer+0x88>)
void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 80032fc:	4606      	mov	r6, r0
	ErrorCodeBuf = ErrorCode;
 80032fe:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf =
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 8003300:	f7fe ff38 	bl	8002174 <LL_RTC_TIME_GetHour.constprop.13>
 8003304:	4604      	mov	r4, r0
 8003306:	f7fe ff35 	bl	8002174 <LL_RTC_TIME_GetHour.constprop.13>
 800330a:	4605      	mov	r5, r0
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800330c:	f7fe ff18 	bl	8002140 <LL_RTC_TIME_GetMinute.constprop.12>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 8003310:	f3c4 1403 	ubfx	r4, r4, #4, #4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003314:	4607      	mov	r7, r0
 8003316:	f7fe ff13 	bl	8002140 <LL_RTC_TIME_GetMinute.constprop.12>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800331a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800331e:	f005 040f 	and.w	r4, r5, #15
 8003322:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003326:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800332a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800332e:	f000 000f 	and.w	r0, r0, #15
 8003332:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003336:	b2c0      	uxtb	r0, r0
 8003338:	2364      	movs	r3, #100	; 0x64
 800333a:	fb10 f003 	smulbb	r0, r0, r3
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800333e:	b2e4      	uxtb	r4, r4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003340:	f242 7310 	movw	r3, #10000	; 0x2710
 8003344:	fb03 0404 	mla	r4, r3, r4, r0
 8003348:	f7fe fee2 	bl	8002110 <LL_RTC_TIME_GetSecond.constprop.11>
 800334c:	4605      	mov	r5, r0
 800334e:	f7fe fedf 	bl	8002110 <LL_RTC_TIME_GetSecond.constprop.11>
 8003352:	f3c5 1303 	ubfx	r3, r5, #4, #4
 8003356:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800335a:	f000 000f 	and.w	r0, r0, #15
 800335e:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx] = ErrorCode;
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf =
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx] = ErrorCode;
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <Save_ErrorTimestamp_Buffer+0x94>)
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003368:	fa54 f480 	uxtab	r4, r4, r0
	ErrorTimeStampBuf =
 800336c:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx] = ErrorCode;
 800336e:	780b      	ldrb	r3, [r1, #0]
 8003370:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 8003372:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 8003376:	3301      	adds	r3, #1
 8003378:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 800337a:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 800337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337e:	bf00      	nop
 8003380:	20008730 	.word	0x20008730
 8003384:	20008a42 	.word	0x20008a42
 8003388:	20008734 	.word	0x20008734
 800338c:	20008620 	.word	0x20008620

08003390 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code) {
	switch (AIM_Error_Code) {
 8003390:	3801      	subs	r0, #1
void AIM_Error_Handler(int AIM_Error_Code) {
 8003392:	b510      	push	{r4, lr}
	switch (AIM_Error_Code) {
 8003394:	280f      	cmp	r0, #15
 8003396:	d862      	bhi.n	800345e <AIM_Error_Handler+0xce>
 8003398:	e8df f000 	tbb	[pc, r0]
 800339c:	392e611e 	.word	0x392e611e
 80033a0:	4661610f 	.word	0x4661610f
 80033a4:	54616161 	.word	0x54616161
 80033a8:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 80033ac:	2010      	movs	r0, #16
 80033ae:	f7ff ffa3 	bl	80032f8 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 80033b2:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <AIM_Error_Handler+0xd0>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]

		break;
 80033b8:	bd10      	pop	{r4, pc}

	case f_write_E:
		file_reopen();
 80033ba:	f7ff f807 	bl	80023cc <file_reopen>
		if (Fat_write_read_fail == 1) // Could not solve write issue by reopening file
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <AIM_Error_Handler+0xd4>)
 80033c0:	681c      	ldr	r4, [r3, #0]
 80033c2:	2c01      	cmp	r4, #1
 80033c4:	d14b      	bne.n	800345e <AIM_Error_Handler+0xce>
				{
			Fat_read_mnt_fail = 0;
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <AIM_Error_Handler+0xd8>)
 80033c8:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_write_E);
 80033ca:	2005      	movs	r0, #5
			Fat_read_mnt_fail = 0;
 80033cc:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_write_E);
 80033ce:	f7ff ff93 	bl	80032f8 <Save_ErrorTimestamp_Buffer>
			File_Sensor_write_issue = 1;
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <AIM_Error_Handler+0xdc>)
		file_reopen_sync();
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
				{
			Fat_sync_read_fail = 0;
			Save_ErrorTimestamp_Buffer(f_sync_E);
			File_Sensor_close_issue = 1;
 80033d4:	701c      	strb	r4, [r3, #0]
 80033d6:	e018      	b.n	800340a <AIM_Error_Handler+0x7a>
		file_mnt_reopen();
 80033d8:	f7ff f810 	bl	80023fc <file_mnt_reopen>
		if (Fat_read_mnt_fail == 1) // Could not solve read issue by FATFS mount
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <AIM_Error_Handler+0xd8>)
 80033de:	681c      	ldr	r4, [r3, #0]
 80033e0:	2c01      	cmp	r4, #1
 80033e2:	d13c      	bne.n	800345e <AIM_Error_Handler+0xce>
			Fat_read_mnt_fail = 0;
 80033e4:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_open_E);
 80033e6:	4620      	mov	r0, r4
			Fat_read_mnt_fail = 0;
 80033e8:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_open_E);
 80033ea:	f7ff ff85 	bl	80032f8 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <AIM_Error_Handler+0xd0>)
 80033f0:	701c      	strb	r4, [r3, #0]
			Skip_FATFS = 1;
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <AIM_Error_Handler+0xe0>)
			FATAL_Error = 1;
 80033f4:	701c      	strb	r4, [r3, #0]
 80033f6:	bd10      	pop	{r4, pc}
		Try_FATFS_Mount();
 80033f8:	f7fe ffa2 	bl	8002340 <Try_FATFS_Mount>
		if (Skip_FATFS == 1)  // Could not solve FATFS mount
 80033fc:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <AIM_Error_Handler+0xe0>)
 80033fe:	781c      	ldrb	r4, [r3, #0]
 8003400:	2c01      	cmp	r4, #1
 8003402:	d12c      	bne.n	800345e <AIM_Error_Handler+0xce>
			Save_ErrorTimestamp_Buffer(f_mount_E);
 8003404:	2003      	movs	r0, #3
 8003406:	f7ff ff77 	bl	80032f8 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <AIM_Error_Handler+0xd0>)
 800340c:	e7f2      	b.n	80033f4 <AIM_Error_Handler+0x64>
		file_reopen_sync();
 800340e:	f7fe ffc5 	bl	800239c <file_reopen_sync>
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <AIM_Error_Handler+0xe4>)
 8003414:	681c      	ldr	r4, [r3, #0]
 8003416:	2c01      	cmp	r4, #1
 8003418:	d121      	bne.n	800345e <AIM_Error_Handler+0xce>
			Fat_sync_read_fail = 0;
 800341a:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_sync_E);
 800341c:	2004      	movs	r0, #4
			Fat_sync_read_fail = 0;
 800341e:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_sync_E);
 8003420:	f7ff ff6a 	bl	80032f8 <Save_ErrorTimestamp_Buffer>
			File_Sensor_close_issue = 1;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <AIM_Error_Handler+0xe8>)
 8003426:	e7d5      	b.n	80033d4 <AIM_Error_Handler+0x44>

		break;

	case SPI_Acc_Error:

		if (SPI_ErrorCnt > 3) {
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <AIM_Error_Handler+0xec>)
 800342a:	7813      	ldrb	r3, [r2, #0]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d914      	bls.n	800345a <AIM_Error_Handler+0xca>
			SPI_ErrorCnt = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <AIM_Error_Handler+0xd0>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 800343a:	2008      	movs	r0, #8
	default:

		break;

	}
}
 800343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 8003440:	f7ff bf5a 	b.w	80032f8 <Save_ErrorTimestamp_Buffer>
		if (ADC_ErrorCnt > 3) {
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <AIM_Error_Handler+0xf0>)
 8003446:	7813      	ldrb	r3, [r2, #0]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d906      	bls.n	800345a <AIM_Error_Handler+0xca>
			ADC_ErrorCnt = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <AIM_Error_Handler+0xd0>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 8003456:	200c      	movs	r0, #12
 8003458:	e7f0      	b.n	800343c <AIM_Error_Handler+0xac>
			ADC_ErrorCnt++;
 800345a:	3301      	adds	r3, #1
 800345c:	7013      	strb	r3, [r2, #0]
 800345e:	bd10      	pop	{r4, pc}
 8003460:	20008d3c 	.word	0x20008d3c
 8003464:	200089e8 	.word	0x200089e8
 8003468:	20008a90 	.word	0x20008a90
 800346c:	20008a08 	.word	0x20008a08
 8003470:	20008d3d 	.word	0x20008d3d
 8003474:	200089ec 	.word	0x200089ec
 8003478:	20008ad2 	.word	0x20008ad2
 800347c:	20008fd0 	.word	0x20008fd0
 8003480:	20008d44 	.word	0x20008d44

08003484 <FATFS_Init>:
void FATFS_Init(void) {
 8003484:	b510      	push	{r4, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003486:	490b      	ldr	r1, [pc, #44]	; (80034b4 <FATFS_Init+0x30>)
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <FATFS_Init+0x34>)
 800348a:	4c0c      	ldr	r4, [pc, #48]	; (80034bc <FATFS_Init+0x38>)
 800348c:	f007 ff80 	bl	800b390 <FATFS_LinkDriver>
 8003490:	b928      	cbnz	r0, 800349e <FATFS_Init+0x1a>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8003492:	2201      	movs	r2, #1
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <FATFS_Init+0x30>)
 8003496:	480a      	ldr	r0, [pc, #40]	; (80034c0 <FATFS_Init+0x3c>)
 8003498:	f007 faa8 	bl	800a9ec <f_mount>
 800349c:	b108      	cbz	r0, 80034a2 <FATFS_Init+0x1e>
			Fat_mnt_fail = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	6023      	str	r3, [r4, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d104      	bne.n	80034b2 <FATFS_Init+0x2e>
		AIM_Error_Handler(f_mount_E);
 80034a8:	2003      	movs	r0, #3
}
 80034aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		AIM_Error_Handler(f_mount_E);
 80034ae:	f7ff bf6f 	b.w	8003390 <AIM_Error_Handler>
 80034b2:	bd10      	pop	{r4, pc}
 80034b4:	20008ad9 	.word	0x20008ad9
 80034b8:	0800e410 	.word	0x0800e410
 80034bc:	200089e4 	.word	0x200089e4
 80034c0:	20008ae8 	.word	0x20008ae8

080034c4 <Check_SD_Command_File>:
void Check_SD_Command_File(void) {
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Data_log_Start_Resume = 0;
 80034c6:	4c31      	ldr	r4, [pc, #196]	; (800358c <Check_SD_Command_File+0xc8>)
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80034c8:	4931      	ldr	r1, [pc, #196]	; (8003590 <Check_SD_Command_File+0xcc>)
 80034ca:	4832      	ldr	r0, [pc, #200]	; (8003594 <Check_SD_Command_File+0xd0>)
 80034cc:	4e32      	ldr	r6, [pc, #200]	; (8003598 <Check_SD_Command_File+0xd4>)
	Data_log_Start_Resume = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	7023      	strb	r3, [r4, #0]
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80034d2:	f007 ff5d 	bl	800b390 <FATFS_LinkDriver>
 80034d6:	b930      	cbnz	r0, 80034e6 <Check_SD_Command_File+0x22>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 80034d8:	2201      	movs	r2, #1
 80034da:	492d      	ldr	r1, [pc, #180]	; (8003590 <Check_SD_Command_File+0xcc>)
 80034dc:	482f      	ldr	r0, [pc, #188]	; (800359c <Check_SD_Command_File+0xd8>)
 80034de:	f007 fa85 	bl	800a9ec <f_mount>
 80034e2:	4605      	mov	r5, r0
 80034e4:	b148      	cbz	r0, 80034fa <Check_SD_Command_File+0x36>
			Fat_mnt_fail = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	6033      	str	r3, [r6, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 80034ea:	6833      	ldr	r3, [r6, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d14b      	bne.n	8003588 <Check_SD_Command_File+0xc4>
		AIM_Error_Handler(f_mount_E);
 80034f0:	2003      	movs	r0, #3
}
 80034f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		AIM_Error_Handler(f_mount_E);
 80034f6:	f7ff bf4b 	b.w	8003390 <AIM_Error_Handler>
			if (f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 80034fa:	2201      	movs	r2, #1
 80034fc:	4928      	ldr	r1, [pc, #160]	; (80035a0 <Check_SD_Command_File+0xdc>)
 80034fe:	4829      	ldr	r0, [pc, #164]	; (80035a4 <Check_SD_Command_File+0xe0>)
 8003500:	f007 faaa 	bl	800aa58 <f_open>
 8003504:	4607      	mov	r7, r0
 8003506:	b360      	cbz	r0, 8003562 <Check_SD_Command_File+0x9e>
				if (f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 8003508:	2201      	movs	r2, #1
 800350a:	4927      	ldr	r1, [pc, #156]	; (80035a8 <Check_SD_Command_File+0xe4>)
 800350c:	4825      	ldr	r0, [pc, #148]	; (80035a4 <Check_SD_Command_File+0xe0>)
 800350e:	f007 faa3 	bl	800aa58 <f_open>
 8003512:	b1f0      	cbz	r0, 8003552 <Check_SD_Command_File+0x8e>
					if (Logstart_Delete == 1) {
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <Check_SD_Command_File+0xe8>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2a01      	cmp	r2, #1
 800351a:	d104      	bne.n	8003526 <Check_SD_Command_File+0x62>
						if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 800351c:	4824      	ldr	r0, [pc, #144]	; (80035b0 <Check_SD_Command_File+0xec>)
						Logstart_Delete = 0;
 800351e:	601d      	str	r5, [r3, #0]
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 8003520:	f007 fe9a 	bl	800b258 <f_unlink>
 8003524:	e006      	b.n	8003534 <Check_SD_Command_File+0x70>
						if (f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 8003526:	2201      	movs	r2, #1
 8003528:	4921      	ldr	r1, [pc, #132]	; (80035b0 <Check_SD_Command_File+0xec>)
 800352a:	481e      	ldr	r0, [pc, #120]	; (80035a4 <Check_SD_Command_File+0xe0>)
 800352c:	f007 fa94 	bl	800aa58 <f_open>
 8003530:	b148      	cbz	r0, 8003546 <Check_SD_Command_File+0x82>
							Data_log_Start_Resume = 0;         // Data Log Stops
 8003532:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003534:	2200      	movs	r2, #0
 8003536:	491f      	ldr	r1, [pc, #124]	; (80035b4 <Check_SD_Command_File+0xf0>)
 8003538:	4610      	mov	r0, r2
 800353a:	f007 fa57 	bl	800a9ec <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800353e:	4814      	ldr	r0, [pc, #80]	; (8003590 <Check_SD_Command_File+0xcc>)
 8003540:	f007 ff42 	bl	800b3c8 <FATFS_UnLinkDriver>
 8003544:	e7d1      	b.n	80034ea <Check_SD_Command_File+0x26>
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 8003546:	2301      	movs	r3, #1
							f_close(&MyFile);
 8003548:	4816      	ldr	r0, [pc, #88]	; (80035a4 <Check_SD_Command_File+0xe0>)
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 800354a:	7023      	strb	r3, [r4, #0]
							f_close(&MyFile);
 800354c:	f007 fcab 	bl	800aea6 <f_close>
 8003550:	e7f0      	b.n	8003534 <Check_SD_Command_File+0x70>
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <Check_SD_Command_File+0xf4>)
					Data_log_Start_Resume = 0;          // Data Log Stops
 8003554:	7020      	strb	r0, [r4, #0]
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 8003556:	7018      	strb	r0, [r3, #0]
					f_close(&MyFile);
 8003558:	4812      	ldr	r0, [pc, #72]	; (80035a4 <Check_SD_Command_File+0xe0>)
 800355a:	f007 fca4 	bl	800aea6 <f_close>
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 800355e:	4812      	ldr	r0, [pc, #72]	; (80035a8 <Check_SD_Command_File+0xe4>)
 8003560:	e7de      	b.n	8003520 <Check_SD_Command_File+0x5c>
				f_close(&MyFile);
 8003562:	4810      	ldr	r0, [pc, #64]	; (80035a4 <Check_SD_Command_File+0xe0>)
 8003564:	f007 fc9f 	bl	800aea6 <f_close>
				if (f_unlink("EnterDFU.txt") == FR_OK) { // If EnterDFU.txt file present, delete the file
 8003568:	480d      	ldr	r0, [pc, #52]	; (80035a0 <Check_SD_Command_File+0xdc>)
 800356a:	f007 fe75 	bl	800b258 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800356e:	463a      	mov	r2, r7
 8003570:	4910      	ldr	r1, [pc, #64]	; (80035b4 <Check_SD_Command_File+0xf0>)
 8003572:	4638      	mov	r0, r7
 8003574:	f007 fa3a 	bl	800a9ec <f_mount>
				FATFS_UnLinkDriver(SDPath); //  unlink SD card driver if necessary
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <Check_SD_Command_File+0xcc>)
 800357a:	f007 ff25 	bl	800b3c8 <FATFS_UnLinkDriver>
				*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <Check_SD_Command_File+0xf8>)
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <Check_SD_Command_File+0xfc>)
 8003582:	601a      	str	r2, [r3, #0]
				NVIC_SystemReset();        // System reset
 8003584:	f7fe fca2 	bl	8001ecc <NVIC_SystemReset>
 8003588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358a:	bf00      	nop
 800358c:	20008708 	.word	0x20008708
 8003590:	20008ad9 	.word	0x20008ad9
 8003594:	0800e410 	.word	0x0800e410
 8003598:	200089e4 	.word	0x200089e4
 800359c:	20008ae8 	.word	0x20008ae8
 80035a0:	0800e17a 	.word	0x0800e17a
 80035a4:	20008d48 	.word	0x20008d48
 80035a8:	0800e187 	.word	0x0800e187
 80035ac:	200094dc 	.word	0x200094dc
 80035b0:	0800e194 	.word	0x0800e194
 80035b4:	0800e33b 	.word	0x0800e33b
 80035b8:	20009008 	.word	0x20009008
 80035bc:	20017ff0 	.word	0x20017ff0
 80035c0:	deadbeef 	.word	0xdeadbeef

080035c4 <Execute_VCP_Command>:
	if (EnterReset_Create == 1) {
 80035c4:	4a10      	ldr	r2, [pc, #64]	; (8003608 <Execute_VCP_Command+0x44>)
 80035c6:	6811      	ldr	r1, [r2, #0]
void Execute_VCP_Command(void) {
 80035c8:	b538      	push	{r3, r4, r5, lr}
	Data_log_Start_Resume = 0;
 80035ca:	4c10      	ldr	r4, [pc, #64]	; (800360c <Execute_VCP_Command+0x48>)
 80035cc:	2300      	movs	r3, #0
	if (EnterReset_Create == 1) {
 80035ce:	2901      	cmp	r1, #1
	Data_log_Start_Resume = 0;
 80035d0:	7023      	strb	r3, [r4, #0]
	if (EnterReset_Create == 1) {
 80035d2:	d102      	bne.n	80035da <Execute_VCP_Command+0x16>
		EnterReset_Create = 0;
 80035d4:	6013      	str	r3, [r2, #0]
		NVIC_SystemReset();    // System reset
 80035d6:	f7fe fc79 	bl	8001ecc <NVIC_SystemReset>
	if (EnterDFU_Create == 1) {
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <Execute_VCP_Command+0x4c>)
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	2901      	cmp	r1, #1
 80035e0:	d104      	bne.n	80035ec <Execute_VCP_Command+0x28>
		EnterDFU_Create = 0;
 80035e2:	6013      	str	r3, [r2, #0]
		*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <Execute_VCP_Command+0x50>)
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <Execute_VCP_Command+0x54>)
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e7f4      	b.n	80035d6 <Execute_VCP_Command+0x12>
	if (Logstart_Create == 1) {
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <Execute_VCP_Command+0x58>)
 80035ee:	6815      	ldr	r5, [r2, #0]
 80035f0:	2d01      	cmp	r5, #1
 80035f2:	d107      	bne.n	8003604 <Execute_VCP_Command+0x40>
		Logstart_Create = 0;
 80035f4:	6013      	str	r3, [r2, #0]
		FATFS_Logstart_Ready();
 80035f6:	f7fe ff4f 	bl	8002498 <FATFS_Logstart_Ready>
		Data_log_Start_Resume = 1;
 80035fa:	7025      	strb	r5, [r4, #0]
}
 80035fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Check_SD_Command_File();
 8003600:	f7ff bf60 	b.w	80034c4 <Check_SD_Command_File>
 8003604:	bd38      	pop	{r3, r4, r5, pc}
 8003606:	bf00      	nop
 8003608:	20009dc8 	.word	0x20009dc8
 800360c:	20008708 	.word	0x20008708
 8003610:	2000a9b8 	.word	0x2000a9b8
 8003614:	20017ff0 	.word	0x20017ff0
 8003618:	deadbeef 	.word	0xdeadbeef
 800361c:	20009558 	.word	0x20009558

08003620 <Open_File_For_Sensor_Write>:
void Open_File_For_Sensor_Write(void) {
 8003620:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS == 0) {
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <Open_File_For_Sensor_Write+0x58>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	bb2b      	cbnz	r3, 8003674 <Open_File_For_Sensor_Write+0x54>
		last_file = GetNextIndex("");
 8003628:	4814      	ldr	r0, [pc, #80]	; (800367c <Open_File_For_Sensor_Write+0x5c>)
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800362a:	4c15      	ldr	r4, [pc, #84]	; (8003680 <Open_File_For_Sensor_Write+0x60>)
 800362c:	4d15      	ldr	r5, [pc, #84]	; (8003684 <Open_File_For_Sensor_Write+0x64>)
		last_file = GetNextIndex("");
 800362e:	f7fe fe57 	bl	80022e0 <GetNextIndex>
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <Open_File_For_Sensor_Write+0x68>)
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 8003634:	4915      	ldr	r1, [pc, #84]	; (800368c <Open_File_For_Sensor_Write+0x6c>)
		last_file = GetNextIndex("");
 8003636:	6018      	str	r0, [r3, #0]
 8003638:	4602      	mov	r2, r0
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 800363a:	4815      	ldr	r0, [pc, #84]	; (8003690 <Open_File_For_Sensor_Write+0x70>)
 800363c:	f007 ffcc 	bl	800b5d8 <siprintf>
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8003640:	2212      	movs	r2, #18
 8003642:	4913      	ldr	r1, [pc, #76]	; (8003690 <Open_File_For_Sensor_Write+0x70>)
 8003644:	4620      	mov	r0, r4
 8003646:	f007 fa07 	bl	800aa58 <f_open>
 800364a:	7028      	strb	r0, [r5, #0]
		if (res != FR_OK) // Create and Open a new text file object with write access
 800364c:	b140      	cbz	r0, 8003660 <Open_File_For_Sensor_Write+0x40>
			AIM_Error_Handler(f_open_E);
 800364e:	2001      	movs	r0, #1
 8003650:	f7ff fe9e 	bl	8003390 <AIM_Error_Handler>
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 8003654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8003658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800365c:	f000 be10 	b.w	8004280 <delay_us>
			f_lseek(&MyFile, MyFile.fsize); // Increase File Size when big file to write
 8003660:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8003664:	4620      	mov	r0, r4
 8003666:	f007 fc2f 	bl	800aec8 <f_lseek>
			res = f_sync(&MyFile);
 800366a:	4620      	mov	r0, r4
 800366c:	f007 fbbb 	bl	800ade6 <f_sync>
 8003670:	7028      	strb	r0, [r5, #0]
 8003672:	e7ef      	b.n	8003654 <Open_File_For_Sensor_Write+0x34>
 8003674:	bd38      	pop	{r3, r4, r5, pc}
 8003676:	bf00      	nop
 8003678:	20008d3d 	.word	0x20008d3d
 800367c:	0800e33b 	.word	0x0800e33b
 8003680:	20008d48 	.word	0x20008d48
 8003684:	20008fca 	.word	0x20008fca
 8003688:	20008d40 	.word	0x20008d40
 800368c:	0800e1a4 	.word	0x0800e1a4
 8003690:	20008a2c 	.word	0x20008a2c

08003694 <Datalog_Sensor_Initialization>:
void Datalog_Sensor_Initialization(void) {
 8003694:	b508      	push	{r3, lr}
	FATFS_Init();
 8003696:	f7ff fef5 	bl	8003484 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800369a:	f7ff ffc1 	bl	8003620 <Open_File_For_Sensor_Write>
	if (Skip_FATFS == 0) {
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <Datalog_Sensor_Initialization+0x1c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b91b      	cbnz	r3, 80036ac <Datalog_Sensor_Initialization+0x18>
}
 80036a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();         // Reset All Buffer parameters for FATFS SDIO write
 80036a8:	f7ff bdfc 	b.w	80032a4 <Reset_All>
 80036ac:	bd08      	pop	{r3, pc}
 80036ae:	bf00      	nop
 80036b0:	20008d3d 	.word	0x20008d3d

080036b4 <Prepare_Data_Log_State>:
void Prepare_Data_Log_State(void) {
 80036b4:	b510      	push	{r4, lr}
	if (Skip_FATFS == 0)   // If there's no FATFS SD error
 80036b6:	4c12      	ldr	r4, [pc, #72]	; (8003700 <Prepare_Data_Log_State+0x4c>)
 80036b8:	7821      	ldrb	r1, [r4, #0]
 80036ba:	b9d9      	cbnz	r1, 80036f4 <Prepare_Data_Log_State+0x40>
		Battery_ADC_Value = 2500;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <Prepare_Data_Log_State+0x50>)
 80036be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036c2:	801a      	strh	r2, [r3, #0]
			if (Data_log_Start_Resume == 1) // Continue Data Log after USB disconnect
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <Prepare_Data_Log_State+0x54>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10c      	bne.n	80036e6 <Prepare_Data_Log_State+0x32>
				Datalog_Sensor_Initialization();
 80036cc:	f7ff ffe2 	bl	8003694 <Datalog_Sensor_Initialization>
				if (Skip_FATFS == 0)   // If there's no FATFS SD error
 80036d0:	7823      	ldrb	r3, [r4, #0]
 80036d2:	b97b      	cbnz	r3, 80036f4 <Prepare_Data_Log_State+0x40>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <Prepare_Data_Log_State+0x58>)
 80036d6:	6893      	ldr	r3, [r2, #8]
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <Prepare_Data_Log_State+0x5c>)
 80036e0:	2204      	movs	r2, #4
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	bd10      	pop	{r4, pc}
			else if (VCP_Bypass == 1) {
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <Prepare_Data_Log_State+0x60>)
 80036e8:	4c0b      	ldr	r4, [pc, #44]	; (8003718 <Prepare_Data_Log_State+0x64>)
 80036ea:	7813      	ldrb	r3, [r2, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <Prepare_Data_Log_State+0x42>
				VCP_Bypass = 0;
 80036f0:	7011      	strb	r1, [r2, #0]
				Pros_state = Dormant_Idle_Stop;
 80036f2:	7023      	strb	r3, [r4, #0]
 80036f4:	bd10      	pop	{r4, pc}
				Prepare_Goto_Dormant_Mode();
 80036f6:	f7fe fde3 	bl	80022c0 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop;
 80036fa:	2306      	movs	r3, #6
 80036fc:	e7f9      	b.n	80036f2 <Prepare_Data_Log_State+0x3e>
 80036fe:	bf00      	nop
 8003700:	20008d3d 	.word	0x20008d3d
 8003704:	20008d18 	.word	0x20008d18
 8003708:	20008708 	.word	0x20008708
 800370c:	40009400 	.word	0x40009400
 8003710:	e000e100 	.word	0xe000e100
 8003714:	20008ae5 	.word	0x20008ae5
 8003718:	2000865c 	.word	0x2000865c

0800371c <USB_Init_Start>:
void USB_Init_Start(void) {
 800371c:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 800371e:	f7fe f865 	bl	80017ec <SD_POWER_ON>
	Pros_state = LP_STOP;                  // Next state
 8003722:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <USB_Init_Start+0xbc>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003724:	492d      	ldr	r1, [pc, #180]	; (80037dc <USB_Init_Start+0xc0>)
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 8003726:	4d2e      	ldr	r5, [pc, #184]	; (80037e0 <USB_Init_Start+0xc4>)
	Pros_state = LP_STOP;                  // Next state
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	2304      	movs	r3, #4
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	USB_Clock_Ready();
 8003732:	f7fe fd7f 	bl	8002234 <USB_Clock_Ready>
 8003736:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800373a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 800373e:	782a      	ldrb	r2, [r5, #0]
 8003740:	2a01      	cmp	r2, #1
 8003742:	d101      	bne.n	8003748 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 8003744:	f7fe ffba 	bl	80026bc <File_Close_Update_Unlink>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8003748:	4e26      	ldr	r6, [pc, #152]	; (80037e4 <USB_Init_Start+0xc8>)
	Data_log_Start_Resume = 0;
 800374a:	2400      	movs	r4, #0
 800374c:	702c      	strb	r4, [r5, #0]
	HAL_ResumeTick();      // Before entering USB mode, SYS_tick needs to enable
 800374e:	f001 fddb 	bl	8005308 <HAL_ResumeTick>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8003752:	7833      	ldrb	r3, [r6, #0]
 8003754:	4d24      	ldr	r5, [pc, #144]	; (80037e8 <USB_Init_Start+0xcc>)
 8003756:	2b01      	cmp	r3, #1
 8003758:	d118      	bne.n	800378c <USB_Init_Start+0x70>
		VIOLET_LED_ONLY();
 800375a:	f7fe f829 	bl	80017b0 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 800375e:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 8003760:	f7fe fec8 	bl	80024f4 <USB_MSC_Init_Start>
		FATAL_Error = 0;
 8003764:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003766:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800376a:	6914      	ldr	r4, [r2, #16]
		while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800376c:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 8003770:	d1fb      	bne.n	800376a <USB_Init_Start+0x4e>
		ALL_LED_OFF();
 8003772:	f7fd ffe3 	bl	800173c <ALL_LED_OFF>
		Shut_Down_USB();
 8003776:	f7fe fd3f 	bl	80021f8 <Shut_Down_USB>
		Enter_Into_DFU = 0;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <USB_Init_Start+0xd0>)
 800377c:	701c      	strb	r4, [r3, #0]
				Prepare_Data_Log_State();         // Prepare for Data collection
 800377e:	f7ff ff99 	bl	80036b4 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <USB_Init_Start+0xc0>)
 8003784:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	bd70      	pop	{r4, r5, r6, pc}
		CYAN_LED_ONLY();
 800378c:	f7fe f81e 	bl	80017cc <CYAN_LED_ONLY>
		USB_VCP_Init_Start();
 8003790:	f7fe fed2 	bl	8002538 <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK) // USB Battery charging mode
 8003794:	4816      	ldr	r0, [pc, #88]	; (80037f0 <USB_Init_Start+0xd4>)
 8003796:	f005 fe57 	bl	8009448 <Battey_Charge_Mode>
 800379a:	b960      	cbnz	r0, 80037b6 <USB_Init_Start+0x9a>
			FATAL_Error = 0;
 800379c:	7028      	strb	r0, [r5, #0]
 800379e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80037a2:	6913      	ldr	r3, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 80037a4:	059b      	lsls	r3, r3, #22
 80037a6:	d4fc      	bmi.n	80037a2 <USB_Init_Start+0x86>
			Shut_Down_USB();
 80037a8:	f7fe fd26 	bl	80021f8 <Shut_Down_USB>
			ALL_LED_OFF();
 80037ac:	f7fd ffc6 	bl	800173c <ALL_LED_OFF>
			Check_SD_Command_File();
 80037b0:	f7ff fe88 	bl	80034c4 <Check_SD_Command_File>
 80037b4:	e7e3      	b.n	800377e <USB_Init_Start+0x62>
			FATAL_Error = 0;
 80037b6:	702c      	strb	r4, [r5, #0]
 80037b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80037bc:	6914      	ldr	r4, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 80037be:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 80037c2:	d1fb      	bne.n	80037bc <USB_Init_Start+0xa0>
			Shut_Down_USB();
 80037c4:	f7fe fd18 	bl	80021f8 <Shut_Down_USB>
			ALL_LED_OFF();
 80037c8:	f7fd ffb8 	bl	800173c <ALL_LED_OFF>
				VCP_continue = 0;               // Variable reset, aviod looping
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <USB_Init_Start+0xd8>)
 80037ce:	701c      	strb	r4, [r3, #0]
				Execute_VCP_Command();
 80037d0:	f7ff fef8 	bl	80035c4 <Execute_VCP_Command>
 80037d4:	e7d3      	b.n	800377e <USB_Init_Start+0x62>
 80037d6:	bf00      	nop
 80037d8:	2000865c 	.word	0x2000865c
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	20008708 	.word	0x20008708
 80037e4:	20009008 	.word	0x20009008
 80037e8:	20008d3c 	.word	0x20008d3c
 80037ec:	20008ae6 	.word	0x20008ae6
 80037f0:	20008738 	.word	0x20008738
 80037f4:	20008a72 	.word	0x20008a72

080037f8 <SD_Sensor_write>:
{
 80037f8:	b538      	push	{r3, r4, r5, lr}
	res = f_write(&MyFile, &BSbuffer[w_flag], (8192 * 2), &BytesWritten2);
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <SD_Sensor_write+0x60>)
 80037fc:	4917      	ldr	r1, [pc, #92]	; (800385c <SD_Sensor_write+0x64>)
 80037fe:	7818      	ldrb	r0, [r3, #0]
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <SD_Sensor_write+0x68>)
 8003802:	4c18      	ldr	r4, [pc, #96]	; (8003864 <SD_Sensor_write+0x6c>)
 8003804:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8003808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800380c:	4816      	ldr	r0, [pc, #88]	; (8003868 <SD_Sensor_write+0x70>)
 800380e:	f007 f9fb 	bl	800ac08 <f_write>
 8003812:	7020      	strb	r0, [r4, #0]
	if (res != FR_OK)   // Write the sensor Buffer content to .BIN file
 8003814:	b1b8      	cbz	r0, 8003846 <SD_Sensor_write+0x4e>
		AIM_Error_Handler(f_write_E);
 8003816:	2005      	movs	r0, #5
 8003818:	f7ff fdba 	bl	8003390 <AIM_Error_Handler>
	if (File_Sensor_write_issue == 0) {
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <SD_Sensor_write+0x74>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b9c3      	cbnz	r3, 8003854 <SD_Sensor_write+0x5c>
		if (SD_Write_Count == SD_cnt_limit) // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <SD_Sensor_write+0x78>)
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <SD_Sensor_write+0x7c>)
 8003826:	7811      	ldrb	r1, [r2, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4299      	cmp	r1, r3
 800382c:	4615      	mov	r5, r2
 800382e:	d10d      	bne.n	800384c <SD_Sensor_write+0x54>
			res = f_sync(&MyFile);
 8003830:	480d      	ldr	r0, [pc, #52]	; (8003868 <SD_Sensor_write+0x70>)
 8003832:	f007 fad8 	bl	800ade6 <f_sync>
 8003836:	7020      	strb	r0, [r4, #0]
			if (res != FR_OK) {
 8003838:	b110      	cbz	r0, 8003840 <SD_Sensor_write+0x48>
				AIM_Error_Handler(f_sync_E);
 800383a:	2004      	movs	r0, #4
 800383c:	f7ff fda8 	bl	8003390 <AIM_Error_Handler>
			SD_Write_Count = 0;                       // Reset SD write counters
 8003840:	2300      	movs	r3, #0
 8003842:	702b      	strb	r3, [r5, #0]
 8003844:	bd38      	pop	{r3, r4, r5, pc}
		GREEN_LED_OFF();               // Sensor write Completed
 8003846:	f7fd ff96 	bl	8001776 <GREEN_LED_OFF>
 800384a:	e7e7      	b.n	800381c <SD_Sensor_write+0x24>
			SD_Write_Count++;                      // Increment SD write counter
 800384c:	7813      	ldrb	r3, [r2, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	7013      	strb	r3, [r2, #0]
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c
 800385c:	2000061c 	.word	0x2000061c
 8003860:	20008a44 	.word	0x20008a44
 8003864:	20008fca 	.word	0x20008fca
 8003868:	20008d48 	.word	0x20008d48
 800386c:	20008a08 	.word	0x20008a08
 8003870:	200005ac 	.word	0x200005ac
 8003874:	20008998 	.word	0x20008998

08003878 <AIM_DataStart_at_Reset>:

void AIM_DataStart_at_Reset(void) {
 8003878:	b510      	push	{r4, lr}
	SD_POWER_ON();
 800387a:	f7fd ffb7 	bl	80017ec <SD_POWER_ON>
	SD_cnt_limit = 3;                    // After 50 write, File will Sync
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <AIM_DataStart_at_Reset+0x44>)
 8003880:	2203      	movs	r2, #3
 8003882:	601a      	str	r2, [r3, #0]
	Data_log_Start_Resume = 1;
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <AIM_DataStart_at_Reset+0x48>)
 8003886:	2401      	movs	r4, #1
 8003888:	701c      	strb	r4, [r3, #0]
	FATFS_Init();
 800388a:	f7ff fdfb 	bl	8003484 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800388e:	f7ff fec7 	bl	8003620 <Open_File_For_Sensor_Write>
	Reset_All();
 8003892:	f7ff fd07 	bl	80032a4 <Reset_All>
//	  Start_LPTIMCounter2(0x10); //0xFF //0x4032768
	// Greg end comment

	// Greg start
	// Start interrupt (speed = 32,768 Hz / hex_value, i.e. 0x40 = 64 so speed = 32,768/64 = 512 Hz)
	Start_LPTIMCounter2(0x40);
 8003896:	2040      	movs	r0, #64	; 0x40
 8003898:	f000 fcfc 	bl	8004294 <Start_LPTIMCounter2>
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <AIM_DataStart_at_Reset+0x4c>)
 800389e:	6893      	ldr	r3, [r2, #8]
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	6093      	str	r3, [r2, #8]
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <AIM_DataStart_at_Reset+0x50>)
 80038a8:	2204      	movs	r2, #4
 80038aa:	609a      	str	r2, [r3, #8]
	// Greg end

	LL_LPTIM_EnableIT_ARRM(LPTIM2);
	NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <AIM_DataStart_at_Reset+0x54>)
 80038ae:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <AIM_DataStart_at_Reset+0x58>)
 80038b2:	7014      	strb	r4, [r2, #0]
 80038b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	bd10      	pop	{r4, pc}
 80038bc:	20008998 	.word	0x20008998
 80038c0:	20008708 	.word	0x20008708
 80038c4:	40009400 	.word	0x40009400
 80038c8:	e000e100 	.word	0xe000e100
 80038cc:	2000865c 	.word	0x2000865c
 80038d0:	20009008 	.word	0x20009008

080038d4 <IMU1_read>:
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];

	return data_az;
}

struct imu_data IMU1_read(void) {
 80038d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct imu_data IMU1;
	uint8_t response[21];
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 80038d6:	218c      	movs	r1, #140	; 0x8c
struct imu_data IMU1_read(void) {
 80038d8:	b087      	sub	sp, #28
 80038da:	4604      	mov	r4, r0
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 80038dc:	2025      	movs	r0, #37	; 0x25
 80038de:	f7ff fa27 	bl	8002d30 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL); // I2C slave 0 register address from where to begin data transfer
 80038e2:	2103      	movs	r1, #3
 80038e4:	2026      	movs	r0, #38	; 0x26
 80038e6:	f7ff fa23 	bl	8002d30 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87); // Read 7 bytes from the magnetometer
 80038ea:	2187      	movs	r1, #135	; 0x87
 80038ec:	2027      	movs	r0, #39	; 0x27
 80038ee:	f7ff fa1f 	bl	8002d30 <WriteReg1>

	ReadRegs1(MPUREG_ACCEL_XOUT_H, response, 21);
 80038f2:	4669      	mov	r1, sp
 80038f4:	2215      	movs	r2, #21
 80038f6:	203b      	movs	r0, #59	; 0x3b
 80038f8:	f7ff fa7e 	bl	8002df8 <ReadRegs1>

	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 80038fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003900:	f89d 5003 	ldrb.w	r5, [sp, #3]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 8003904:	f89d 0005 	ldrb.w	r0, [sp, #5]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 8003908:	f89d 1009 	ldrb.w	r1, [sp, #9]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800390c:	f89d 200b 	ldrb.w	r2, [sp, #11]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 8003910:	f89d 600c 	ldrb.w	r6, [sp, #12]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 8003914:	f89d 7000 	ldrb.w	r7, [sp]
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 8003918:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800391c:	f89d 3004 	ldrb.w	r3, [sp, #4]

	return IMU1;
 8003920:	8065      	strh	r5, [r4, #2]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 8003922:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 8003926:	f89d 3008 	ldrb.w	r3, [sp, #8]
	return IMU1;
 800392a:	80a0      	strh	r0, [r4, #4]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800392c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 8003930:	f89d 300a 	ldrb.w	r3, [sp, #10]
	return IMU1;
 8003934:	80e1      	strh	r1, [r4, #6]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 8003936:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800393a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	return IMU1;
 800393e:	8122      	strh	r2, [r4, #8]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 8003940:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 8003944:	f89d 6001 	ldrb.w	r6, [sp, #1]
	return IMU1;
 8003948:	8163      	strh	r3, [r4, #10]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800394a:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
}
 800394e:	4620      	mov	r0, r4
	return IMU1;
 8003950:	8026      	strh	r6, [r4, #0]
}
 8003952:	b007      	add	sp, #28
 8003954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003958 <Knee_data_storeIMU>:

void Knee_data_storeIMU(int value1, int value2, int value3, int value4,
		int value5, int value6) {
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}

	BSbuffer[s_flag].AX1[Sub_cnt] = value1;
 800395a:	4e1b      	ldr	r6, [pc, #108]	; (80039c8 <Knee_data_storeIMU+0x70>)
 800395c:	4d1b      	ldr	r5, [pc, #108]	; (80039cc <Knee_data_storeIMU+0x74>)
 800395e:	f896 e000 	ldrb.w	lr, [r6]
 8003962:	682f      	ldr	r7, [r5, #0]
 8003964:	4c1a      	ldr	r4, [pc, #104]	; (80039d0 <Knee_data_storeIMU+0x78>)
 8003966:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800396a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800396e:	82f8      	strh	r0, [r7, #22]
	BSbuffer[s_flag].AY1[Sub_cnt] = value2;
 8003970:	7837      	ldrb	r7, [r6, #0]
 8003972:	6828      	ldr	r0, [r5, #0]
 8003974:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8003978:	f500 70f6 	add.w	r0, r0, #492	; 0x1ec
 800397c:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
	BSbuffer[s_flag].AZ1[Sub_cnt] = value3;
 8003980:	7830      	ldrb	r0, [r6, #0]
 8003982:	6829      	ldr	r1, [r5, #0]
 8003984:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003988:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800398c:	f8a1 279a 	strh.w	r2, [r1, #1946]	; 0x79a
	BSbuffer[s_flag].GX1[Sub_cnt] = value4;
 8003990:	7831      	ldrb	r1, [r6, #0]
 8003992:	682a      	ldr	r2, [r5, #0]
 8003994:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003998:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800399c:	f8a2 3b5c 	strh.w	r3, [r2, #2908]	; 0xb5c
	BSbuffer[s_flag].GY1[Sub_cnt] = value5;
 80039a0:	7832      	ldrb	r2, [r6, #0]
 80039a2:	682b      	ldr	r3, [r5, #0]
 80039a4:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 80039a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80039ac:	9a05      	ldr	r2, [sp, #20]
 80039ae:	f8a3 2f1e 	strh.w	r2, [r3, #3870]	; 0xf1e
	BSbuffer[s_flag].GZ1[Sub_cnt] = value6;
 80039b2:	7832      	ldrb	r2, [r6, #0]
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 80039ba:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 80039be:	9a06      	ldr	r2, [sp, #24]
 80039c0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 80039c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200005d0 	.word	0x200005d0
 80039cc:	200005b0 	.word	0x200005b0
 80039d0:	2000061c 	.word	0x2000061c

080039d4 <Knee_data_store>:
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
//
//
//}

void Knee_data_store(int val1, int val2, int val3, int val4) {
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	BSbuffer[s_flag].data1[Sub_cnt] = val1;
 80039d6:	4e14      	ldr	r6, [pc, #80]	; (8003a28 <Knee_data_store+0x54>)
 80039d8:	4d14      	ldr	r5, [pc, #80]	; (8003a2c <Knee_data_store+0x58>)
 80039da:	f896 e000 	ldrb.w	lr, [r6]
 80039de:	682f      	ldr	r7, [r5, #0]
 80039e0:	4c13      	ldr	r4, [pc, #76]	; (8003a30 <Knee_data_store+0x5c>)
 80039e2:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 80039e6:	f507 6735 	add.w	r7, r7, #2896	; 0xb50
 80039ea:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 80039ee:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data2[Sub_cnt] = val2;
 80039f0:	7837      	ldrb	r7, [r6, #0]
 80039f2:	6828      	ldr	r0, [r5, #0]
 80039f4:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 80039f8:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
 80039fc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8003a00:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data3[Sub_cnt] = val3;
 8003a02:	7830      	ldrb	r0, [r6, #0]
 8003a04:	6829      	ldr	r1, [r5, #0]
 8003a06:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003a0a:	f501 6171 	add.w	r1, r1, #3856	; 0xf10
 8003a0e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003a12:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data4[Sub_cnt] = val4;
 8003a14:	7831      	ldrb	r1, [r6, #0]
 8003a16:	682a      	ldr	r2, [r5, #0]
 8003a18:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003a1c:	f502 5287 	add.w	r2, r2, #4320	; 0x10e0
 8003a20:	3214      	adds	r2, #20
 8003a22:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8003a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a28:	200005d0 	.word	0x200005d0
 8003a2c:	200005b0 	.word	0x200005b0
 8003a30:	2000061c 	.word	0x2000061c

08003a34 <Knee_data_store1>:
//	BSbuffer[s_flag].data6[Sub_cnt]=val6;
//	BSbuffer[s_flag].data7[Sub_cnt]=val7;
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
}

void Knee_data_store1(int val5, int val6, int val7, int val8) {
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
//	BSbuffer[s_flag].data1[Sub_cnt]=val1;
//	BSbuffer[s_flag].data2[Sub_cnt]=val2;
//	BSbuffer[s_flag].data3[Sub_cnt]=val3;
//	BSbuffer[s_flag].data4[Sub_cnt]=val4;
	BSbuffer[s_flag].data5[Sub_cnt] = val5;
 8003a36:	4e16      	ldr	r6, [pc, #88]	; (8003a90 <Knee_data_store1+0x5c>)
 8003a38:	4d16      	ldr	r5, [pc, #88]	; (8003a94 <Knee_data_store1+0x60>)
 8003a3a:	f896 e000 	ldrb.w	lr, [r6]
 8003a3e:	682f      	ldr	r7, [r5, #0]
 8003a40:	4c15      	ldr	r4, [pc, #84]	; (8003a98 <Knee_data_store1+0x64>)
 8003a42:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 8003a46:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8003a50:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data6[Sub_cnt] = val6;
 8003a52:	7837      	ldrb	r7, [r6, #0]
 8003a54:	6828      	ldr	r0, [r5, #0]
 8003a56:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8003a5a:	f500 50a5 	add.w	r0, r0, #5280	; 0x14a0
 8003a5e:	3014      	adds	r0, #20
 8003a60:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8003a64:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data7[Sub_cnt] = val7;
 8003a66:	7830      	ldrb	r0, [r6, #0]
 8003a68:	6829      	ldr	r1, [r5, #0]
 8003a6a:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003a6e:	f501 51b4 	add.w	r1, r1, #5760	; 0x1680
 8003a72:	3114      	adds	r1, #20
 8003a74:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003a78:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data8[Sub_cnt] = val8;
 8003a7a:	7831      	ldrb	r1, [r6, #0]
 8003a7c:	682a      	ldr	r2, [r5, #0]
 8003a7e:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003a82:	f502 52c3 	add.w	r2, r2, #6240	; 0x1860
 8003a86:	3218      	adds	r2, #24
 8003a88:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200005d0 	.word	0x200005d0
 8003a94:	200005b0 	.word	0x200005b0
 8003a98:	2000061c 	.word	0x2000061c

08003a9c <MPU1_SPI1_init>:
		data = (float) mag_data_raw[i - 7];
		mag_data[i - 7] = data * Magnetometer_ASA[i - 7];
	}
}

void MPU1_SPI1_init(void) {
 8003a9c:	b530      	push	{r4, r5, lr}
 8003a9e:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = { { BIT_H_RESET,
 8003aa0:	226b      	movs	r2, #107	; 0x6b
 8003aa2:	f88d 2005 	strb.w	r2, [sp, #5]
 8003aa6:	f88d 2007 	strb.w	r2, [sp, #7]
 8003aaa:	226c      	movs	r2, #108	; 0x6c
 8003aac:	f88d 2009 	strb.w	r2, [sp, #9]
 8003ab0:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <MPU1_SPI1_init+0xe4>)
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	f88d 200a 	strb.w	r2, [sp, #10]
 8003ab8:	221a      	movs	r2, #26
 8003aba:	f88d 200b 	strb.w	r2, [sp, #11]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	f88d 200c 	strb.w	r2, [sp, #12]
 8003ac4:	f88d 200e 	strb.w	r2, [sp, #14]
 8003ac8:	221c      	movs	r2, #28
 8003aca:	f88d 200f 	strb.w	r2, [sp, #15]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <MPU1_SPI1_init+0xe8>)
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	f88d 2010 	strb.w	r2, [sp, #16]
 8003ad6:	221d      	movs	r2, #29
 8003ad8:	f88d 2011 	strb.w	r2, [sp, #17]
 8003adc:	2212      	movs	r2, #18
 8003ade:	f88d 2012 	strb.w	r2, [sp, #18]
 8003ae2:	2237      	movs	r2, #55	; 0x37
 8003ae4:	f88d 2013 	strb.w	r2, [sp, #19]
 8003ae8:	2230      	movs	r2, #48	; 0x30
 8003aea:	f88d 2014 	strb.w	r2, [sp, #20]
 8003aee:	226a      	movs	r2, #106	; 0x6a
 8003af0:	f88d 2015 	strb.w	r2, [sp, #21]
 8003af4:	220d      	movs	r2, #13
 8003af6:	f88d 2016 	strb.w	r2, [sp, #22]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f88d 2017 	strb.w	r2, [sp, #23]
 8003b00:	220c      	movs	r2, #12
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	f88d 2018 	strb.w	r2, [sp, #24]
 8003b08:	2225      	movs	r2, #37	; 0x25
 8003b0a:	f88d 3004 	strb.w	r3, [sp, #4]
 8003b0e:	211b      	movs	r1, #27
 8003b10:	2301      	movs	r3, #1
 8003b12:	f88d 2019 	strb.w	r2, [sp, #25]
 8003b16:	220b      	movs	r2, #11
 8003b18:	2026      	movs	r0, #38	; 0x26
 8003b1a:	f88d 3006 	strb.w	r3, [sp, #6]
 8003b1e:	f88d 100d 	strb.w	r1, [sp, #13]
 8003b22:	f88d 201a 	strb.w	r2, [sp, #26]
 8003b26:	f88d 301c 	strb.w	r3, [sp, #28]
 8003b2a:	2163      	movs	r1, #99	; 0x63
 8003b2c:	2281      	movs	r2, #129	; 0x81
 8003b2e:	2327      	movs	r3, #39	; 0x27
 8003b30:	250a      	movs	r5, #10
 8003b32:	2400      	movs	r4, #0
 8003b34:	f88d 001b 	strb.w	r0, [sp, #27]
 8003b38:	f88d 5020 	strb.w	r5, [sp, #32]
 8003b3c:	f88d 4008 	strb.w	r4, [sp, #8]
 8003b40:	f88d 101d 	strb.w	r1, [sp, #29]
 8003b44:	f88d 201e 	strb.w	r2, [sp, #30]
 8003b48:	f88d 301f 	strb.w	r3, [sp, #31]
 8003b4c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003b50:	2016      	movs	r0, #22
 8003b52:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003b56:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003b5a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003b5e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
			{ 0x81, MPUREG_I2C_SLV0_CTRL }  //Enable I2C and set 1 byte

	};

	for (i = 0; i < MPU_InitRegNum; i++) {
		WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8003b62:	ad01      	add	r5, sp, #4
 8003b64:	192b      	adds	r3, r5, r4
 8003b66:	5d29      	ldrb	r1, [r5, r4]
 8003b68:	7858      	ldrb	r0, [r3, #1]
 8003b6a:	f7ff f8e1 	bl	8002d30 <WriteReg1>
 8003b6e:	3402      	adds	r4, #2
		delay_us(1000); // I2C must slow down the write speed, otherwise it won't work
 8003b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b74:	f000 fb84 	bl	8004280 <delay_us>
	for (i = 0; i < MPU_InitRegNum; i++) {
 8003b78:	2c22      	cmp	r4, #34	; 0x22
 8003b7a:	d1f3      	bne.n	8003b64 <MPU1_SPI1_init+0xc8>
	//   set_gyro_scale(BITS_FS_250DPS);

	//   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	//   return 0;

}
 8003b7c:	b00b      	add	sp, #44	; 0x2c
 8003b7e:	bd30      	pop	{r4, r5, pc}
 8003b80:	2000000d 	.word	0x2000000d
 8003b84:	2000000e 	.word	0x2000000e

08003b88 <MPU2_SPI1_init>:

void MPU2_SPI1_init(void) {
 8003b88:	b530      	push	{r4, r5, lr}
 8003b8a:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = { { BIT_H_RESET,
 8003b8c:	226b      	movs	r2, #107	; 0x6b
 8003b8e:	f88d 2005 	strb.w	r2, [sp, #5]
 8003b92:	f88d 2007 	strb.w	r2, [sp, #7]
 8003b96:	226c      	movs	r2, #108	; 0x6c
 8003b98:	f88d 2009 	strb.w	r2, [sp, #9]
 8003b9c:	4a33      	ldr	r2, [pc, #204]	; (8003c6c <MPU2_SPI1_init+0xe4>)
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	f88d 200a 	strb.w	r2, [sp, #10]
 8003ba4:	221a      	movs	r2, #26
 8003ba6:	f88d 200b 	strb.w	r2, [sp, #11]
 8003baa:	2210      	movs	r2, #16
 8003bac:	f88d 200c 	strb.w	r2, [sp, #12]
 8003bb0:	f88d 200e 	strb.w	r2, [sp, #14]
 8003bb4:	221c      	movs	r2, #28
 8003bb6:	f88d 200f 	strb.w	r2, [sp, #15]
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <MPU2_SPI1_init+0xe8>)
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	f88d 2010 	strb.w	r2, [sp, #16]
 8003bc2:	221d      	movs	r2, #29
 8003bc4:	f88d 2011 	strb.w	r2, [sp, #17]
 8003bc8:	2212      	movs	r2, #18
 8003bca:	f88d 2012 	strb.w	r2, [sp, #18]
 8003bce:	2237      	movs	r2, #55	; 0x37
 8003bd0:	f88d 2013 	strb.w	r2, [sp, #19]
 8003bd4:	2230      	movs	r2, #48	; 0x30
 8003bd6:	f88d 2014 	strb.w	r2, [sp, #20]
 8003bda:	226a      	movs	r2, #106	; 0x6a
 8003bdc:	f88d 2015 	strb.w	r2, [sp, #21]
 8003be0:	220d      	movs	r2, #13
 8003be2:	f88d 2016 	strb.w	r2, [sp, #22]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f88d 2017 	strb.w	r2, [sp, #23]
 8003bec:	220c      	movs	r2, #12
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	f88d 2018 	strb.w	r2, [sp, #24]
 8003bf4:	2225      	movs	r2, #37	; 0x25
 8003bf6:	f88d 3004 	strb.w	r3, [sp, #4]
 8003bfa:	211b      	movs	r1, #27
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f88d 2019 	strb.w	r2, [sp, #25]
 8003c02:	220b      	movs	r2, #11
 8003c04:	2026      	movs	r0, #38	; 0x26
 8003c06:	f88d 3006 	strb.w	r3, [sp, #6]
 8003c0a:	f88d 100d 	strb.w	r1, [sp, #13]
 8003c0e:	f88d 201a 	strb.w	r2, [sp, #26]
 8003c12:	f88d 301c 	strb.w	r3, [sp, #28]
 8003c16:	2163      	movs	r1, #99	; 0x63
 8003c18:	2281      	movs	r2, #129	; 0x81
 8003c1a:	2327      	movs	r3, #39	; 0x27
 8003c1c:	250a      	movs	r5, #10
 8003c1e:	2400      	movs	r4, #0
 8003c20:	f88d 001b 	strb.w	r0, [sp, #27]
 8003c24:	f88d 5020 	strb.w	r5, [sp, #32]
 8003c28:	f88d 4008 	strb.w	r4, [sp, #8]
 8003c2c:	f88d 101d 	strb.w	r1, [sp, #29]
 8003c30:	f88d 201e 	strb.w	r2, [sp, #30]
 8003c34:	f88d 301f 	strb.w	r3, [sp, #31]
 8003c38:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003c3c:	2016      	movs	r0, #22
 8003c3e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003c42:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003c46:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003c4a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
			{ 0x81, MPUREG_I2C_SLV0_CTRL }  //Enable I2C and set 1 byte

	};

	for (i = 0; i < MPU_InitRegNum; i++) {
		WriteReg1_imu2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8003c4e:	ad01      	add	r5, sp, #4
 8003c50:	192b      	adds	r3, r5, r4
 8003c52:	5d29      	ldrb	r1, [r5, r4]
 8003c54:	7858      	ldrb	r0, [r3, #1]
 8003c56:	f7ff f88d 	bl	8002d74 <WriteReg1_imu2>
 8003c5a:	3402      	adds	r4, #2
		delay_us(1000); // I2C must slow down the write speed, otherwise it won't work
 8003c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c60:	f000 fb0e 	bl	8004280 <delay_us>
	for (i = 0; i < MPU_InitRegNum; i++) {
 8003c64:	2c22      	cmp	r4, #34	; 0x22
 8003c66:	d1f3      	bne.n	8003c50 <MPU2_SPI1_init+0xc8>
	//   set_gyro_scale(BITS_FS_250DPS);

	//   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	//   return 0;

}
 8003c68:	b00b      	add	sp, #44	; 0x2c
 8003c6a:	bd30      	pop	{r4, r5, pc}
 8003c6c:	2000000d 	.word	0x2000000d
 8003c70:	2000000e 	.word	0x2000000e

08003c74 <P_IMU1_SPI1_Initialization_at_reset>:
{
 8003c74:	b508      	push	{r3, lr}
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 8003c76:	f7ff f9f3 	bl	8003060 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8003c7a:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003c7e:	f000 faff 	bl	8004280 <delay_us>
	MPU1_SPI1_init();
 8003c82:	f7ff ff0b 	bl	8003a9c <MPU1_SPI1_init>
}
 8003c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU2_SPI1_init();
 8003c8a:	f7ff bf7d 	b.w	8003b88 <MPU2_SPI1_init>
	...

08003c90 <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <Mag_Enc2_Store+0x80>)
//
////	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
	// Greg end comment out
}

void Mag_Enc2_Store(void) {
 8003c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c96:	2240      	movs	r2, #64	; 0x40
 8003c98:	2780      	movs	r7, #128	; 0x80
 8003c9a:	4e1e      	ldr	r6, [pc, #120]	; (8003d14 <Mag_Enc2_Store+0x84>)
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for (i = 11; i >= 0; i--) {
 8003c9e:	240b      	movs	r4, #11
	int tempPosition = 0;
 8003ca0:	2500      	movs	r5, #0
 8003ca2:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003caa:	f000 fae9 	bl	8004280 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003cae:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003cb0:	200a      	movs	r0, #10
 8003cb2:	f000 fae5 	bl	8004280 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <Mag_Enc2_Store+0x80>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 8003cbe:	40a3      	lsls	r3, r4
	for (i = 11; i >= 0; i--) {
 8003cc0:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 8003cc4:	ea45 0503 	orr.w	r5, r5, r3
	for (i = 11; i >= 0; i--) {
 8003cc8:	d2ec      	bcs.n	8003ca4 <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8003cca:	2780      	movs	r7, #128	; 0x80
 8003ccc:	4e11      	ldr	r6, [pc, #68]	; (8003d14 <Mag_Enc2_Store+0x84>)
 8003cce:	2406      	movs	r4, #6
 8003cd0:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003cd2:	200a      	movs	r0, #10
 8003cd4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003cd8:	f000 fad2 	bl	8004280 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003cdc:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003cde:	200a      	movs	r0, #10
 8003ce0:	f000 face 	bl	8004280 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <Mag_Enc2_Store+0x80>)
	for (i = 0; i < 6; i++) {
 8003ce6:	3c01      	subs	r4, #1
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	d1f2      	bne.n	8003cd2 <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead) << i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt] = tempPosition;
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <Mag_Enc2_Store+0x88>)
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <Mag_Enc2_Store+0x8c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8003cfc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003d00:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <Mag_Enc2_Store+0x90>)
 8003d02:	3318      	adds	r3, #24
 8003d04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003d08:	80dd      	strh	r5, [r3, #6]
 8003d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0e:	bf00      	nop
 8003d10:	48000800 	.word	0x48000800
 8003d14:	48000400 	.word	0x48000400
 8003d18:	200005d0 	.word	0x200005d0
 8003d1c:	200005b0 	.word	0x200005b0
 8003d20:	2000061c 	.word	0x2000061c

08003d24 <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <Enc2_GetPosition+0x6c>)
 8003d26:	2240      	movs	r2, #64	; 0x40
}

int Enc2_GetPosition(void) {
 8003d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(1);
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d30:	f000 faa6 	bl	8004280 <delay_us>
 8003d34:	2780      	movs	r7, #128	; 0x80
 8003d36:	4e17      	ldr	r6, [pc, #92]	; (8003d94 <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for (i = DataPrecision - 1; i >= 0; i--) {
 8003d38:	240b      	movs	r4, #11
	int tempPosition = 0;
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003d44:	f000 fa9c 	bl	8004280 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d48:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f000 fa98 	bl	8004280 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <Enc2_GetPosition+0x6c>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 8003d58:	40a3      	lsls	r3, r4
	for (i = DataPrecision - 1; i >= 0; i--) {
 8003d5a:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 8003d5e:	ea45 0503 	orr.w	r5, r5, r3
	for (i = DataPrecision - 1; i >= 0; i--) {
 8003d62:	d2ec      	bcs.n	8003d3e <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d64:	2780      	movs	r7, #128	; 0x80
 8003d66:	4e0b      	ldr	r6, [pc, #44]	; (8003d94 <Enc2_GetPosition+0x70>)
 8003d68:	2406      	movs	r4, #6
 8003d6a:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003d72:	f000 fa85 	bl	8004280 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d76:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f000 fa81 	bl	8004280 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d7e:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <Enc2_GetPosition+0x6c>)
	for (i = 0; i < 6; i++) {
 8003d80:	3c01      	subs	r4, #1
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	d1f2      	bne.n	8003d6c <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d90:	48000800 	.word	0x48000800
 8003d94:	48000400 	.word	0x48000400

08003d98 <knee_angle>:

float knee_angle(void) {
 8003d98:	b508      	push	{r3, lr}
	float knee_position;
// Greg start comment
//knee_position= -(Enc2_GetPosition()*0.088)+125; //-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)

// Greg end comment
	knee_position = (Enc2_GetPosition() - 2249) * 0.088;
 8003d9a:	f7ff ffc3 	bl	8003d24 <Enc2_GetPosition>
 8003d9e:	f6a0 00c9 	subw	r0, r0, #2249	; 0x8c9
 8003da2:	f7fc fbbf 	bl	8000524 <__aeabi_i2d>
 8003da6:	a306      	add	r3, pc, #24	; (adr r3, 8003dc0 <knee_angle+0x28>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fc20 	bl	80005f0 <__aeabi_dmul>
 8003db0:	f7fc ff16 	bl	8000be0 <__aeabi_d2f>
// Greg start

	return knee_position;
}
 8003db4:	ee00 0a10 	vmov	s0, r0
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop
 8003dbc:	f3af 8000 	nop.w
 8003dc0:	020c49ba 	.word	0x020c49ba
 8003dc4:	3fb6872b 	.word	0x3fb6872b

08003dc8 <IMU_orientation>:

struct imu_angle IMU_orientation(struct imu_data imuMyData,
		struct imu_angle last_angle, float dt_s) {
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	ed2d 8b08 	vpush	{d8-d11}
 8003dd0:	b099      	sub	sp, #100	; 0x64
 8003dd2:	ab11      	add	r3, sp, #68	; 0x44
 8003dd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float alpha = 0.1; //0.1; // t/(t+dt) dt is 0.014 ms t is 1 sec alpha = 0.986

	accel.x = (float) imuMyData.AX / 4096; //g
	accel.y = (float) imuMyData.AY / 4096;
	accel.z = (float) imuMyData.AZ / 4096;
	gyro.x = (float) imuMyData.GX / 16.375 * DEGREES_TO_RADIANS; //deg/sec
 8003dd8:	f9bd 004a 	ldrsh.w	r0, [sp, #74]	; 0x4a
	accel.z = (float) imuMyData.AZ / 4096;
 8003ddc:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
		struct imu_angle last_angle, float dt_s) {
 8003de0:	edcd 1a02 	vstr	s3, [sp, #8]
	gyro.x = (float) imuMyData.GX / 16.375 * DEGREES_TO_RADIANS; //deg/sec
 8003de4:	ee07 0a90 	vmov	s15, r0
 8003de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		struct imu_angle last_angle, float dt_s) {
 8003dec:	eef0 9a40 	vmov.f32	s19, s0
	gyro.x = (float) imuMyData.GX / 16.375 * DEGREES_TO_RADIANS; //deg/sec
 8003df0:	ee17 0a90 	vmov	r0, s15
		struct imu_angle last_angle, float dt_s) {
 8003df4:	eeb0 9a60 	vmov.f32	s18, s1
	accel.z = (float) imuMyData.AZ / 4096;
 8003df8:	ee08 3a10 	vmov	s16, r3
	gyro.x = (float) imuMyData.GX / 16.375 * DEGREES_TO_RADIANS; //deg/sec
 8003dfc:	f7fc fba4 	bl	8000548 <__aeabi_f2d>
 8003e00:	a3ab      	add	r3, pc, #684	; (adr r3, 80040b0 <IMU_orientation+0x2e8>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fd1d 	bl	8000844 <__aeabi_ddiv>
 8003e0a:	a3ab      	add	r3, pc, #684	; (adr r3, 80040b8 <IMU_orientation+0x2f0>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc fbee 	bl	80005f0 <__aeabi_dmul>
 8003e14:	f7fc fee4 	bl	8000be0 <__aeabi_d2f>
 8003e18:	4683      	mov	fp, r0
	gyro.y = (float) imuMyData.GY / 16.375 * DEGREES_TO_RADIANS;
 8003e1a:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
	accel.z = (float) imuMyData.AZ / 4096;
 8003e1e:	eddf 8aa8 	vldr	s17, [pc, #672]	; 80040c0 <IMU_orientation+0x2f8>
	gyro.y = (float) imuMyData.GY / 16.375 * DEGREES_TO_RADIANS;
 8003e22:	ee07 0a90 	vmov	s15, r0
 8003e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel.z = (float) imuMyData.AZ / 4096;
 8003e2a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	gyro.y = (float) imuMyData.GY / 16.375 * DEGREES_TO_RADIANS;
 8003e2e:	ee17 0a90 	vmov	r0, s15
 8003e32:	f7fc fb89 	bl	8000548 <__aeabi_f2d>
 8003e36:	a39e      	add	r3, pc, #632	; (adr r3, 80040b0 <IMU_orientation+0x2e8>)
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f7fc fd02 	bl	8000844 <__aeabi_ddiv>
 8003e40:	a39d      	add	r3, pc, #628	; (adr r3, 80040b8 <IMU_orientation+0x2f0>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7fc fbd3 	bl	80005f0 <__aeabi_dmul>
 8003e4a:	f7fc fec9 	bl	8000be0 <__aeabi_d2f>
 8003e4e:	4682      	mov	sl, r0
	gyro.z = (float) imuMyData.GZ / 16.375 * DEGREES_TO_RADIANS;
 8003e50:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
 8003e54:	ee07 0a90 	vmov	s15, r0
 8003e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel.z = (float) imuMyData.AZ / 4096;
 8003e5c:	ee28 8a28 	vmul.f32	s16, s16, s17
	gyro.z = (float) imuMyData.GZ / 16.375 * DEGREES_TO_RADIANS;
 8003e60:	ee17 0a90 	vmov	r0, s15
 8003e64:	f7fc fb70 	bl	8000548 <__aeabi_f2d>
 8003e68:	a391      	add	r3, pc, #580	; (adr r3, 80040b0 <IMU_orientation+0x2e8>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fce9 	bl	8000844 <__aeabi_ddiv>
 8003e72:	a391      	add	r3, pc, #580	; (adr r3, 80040b8 <IMU_orientation+0x2f0>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc fbba 	bl	80005f0 <__aeabi_dmul>
 8003e7c:	f7fc feb0 	bl	8000be0 <__aeabi_d2f>
	accel.x = (float) imuMyData.AX / 4096; //g
 8003e80:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
	gyro.z = (float) imuMyData.GZ / 16.375 * DEGREES_TO_RADIANS;
 8003e84:	9009      	str	r0, [sp, #36]	; 0x24
	accel.x = (float) imuMyData.AX / 4096; //g
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
//    gyro_angle.y = (float) last_angle.y + dt_s * (cos(last_angle.x) * gyro.y - sin(last_angle.x) * gyro.z);
	// Greg end comment

	// Greg start
	accel_angle.x = (float) atan(
			accel.x / sqrt(pow(-accel.z, 2) + pow(-accel.y, 2)));
 8003e8e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003e92:	ee17 0a90 	vmov	r0, s15
 8003e96:	f7fc fb57 	bl	8000548 <__aeabi_f2d>
 8003e9a:	eef1 7a48 	vneg.f32	s15, s16
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	ee17 0a90 	vmov	r0, s15
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	f7fc fb4f 	bl	8000548 <__aeabi_f2d>
	accel.y = (float) imuMyData.AY / 4096;
 8003eaa:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			accel.x / sqrt(pow(-accel.z, 2) + pow(-accel.y, 2)));
 8003eb6:	4680      	mov	r8, r0
 8003eb8:	ee68 7ae7 	vnmul.f32	s15, s17, s15
 8003ebc:	4689      	mov	r9, r1
 8003ebe:	ee17 0a90 	vmov	r0, s15
 8003ec2:	f7fc fb41 	bl	8000548 <__aeabi_f2d>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	f7fc fb91 	bl	80005f0 <__aeabi_dmul>
 8003ece:	4642      	mov	r2, r8
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	4649      	mov	r1, r9
 8003eda:	f7fc fb89 	bl	80005f0 <__aeabi_dmul>
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f7fc f9d3 	bl	800028c <__adddf3>
 8003ee6:	ec41 0b10 	vmov	d0, r0, r1
 8003eea:	f008 fe49 	bl	800cb80 <sqrt>
	accel_angle.x = (float) atan(
 8003eee:	4630      	mov	r0, r6
 8003ef0:	ec53 2b10 	vmov	r2, r3, d0
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	f7fc fca5 	bl	8000844 <__aeabi_ddiv>
 8003efa:	ec41 0b10 	vmov	d0, r0, r1
 8003efe:	f008 fbd3 	bl	800c6a8 <atan>
	accel_angle.y = (float) atan(
			accel.z / sqrt(pow(accel.x, 2) + pow(-accel.y, 2)));
 8003f02:	4632      	mov	r2, r6
 8003f04:	463b      	mov	r3, r7
 8003f06:	4630      	mov	r0, r6
 8003f08:	4639      	mov	r1, r7
	accel_angle.x = (float) atan(
 8003f0a:	eeb0 ba40 	vmov.f32	s22, s0
 8003f0e:	eef0 ba60 	vmov.f32	s23, s1
			accel.z / sqrt(pow(accel.x, 2) + pow(-accel.y, 2)));
 8003f12:	f7fc fb6d 	bl	80005f0 <__aeabi_dmul>
 8003f16:	4622      	mov	r2, r4
 8003f18:	462b      	mov	r3, r5
 8003f1a:	f7fc f9b7 	bl	800028c <__adddf3>
 8003f1e:	ec41 0b10 	vmov	d0, r0, r1
 8003f22:	f008 fe2d 	bl	800cb80 <sqrt>
 8003f26:	ec53 2b10 	vmov	r2, r3, d0
 8003f2a:	ee18 0a10 	vmov	r0, s16
 8003f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f32:	f7fc fb09 	bl	8000548 <__aeabi_f2d>
	accel_angle.y = (float) atan(
 8003f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f3a:	f7fc fc83 	bl	8000844 <__aeabi_ddiv>
 8003f3e:	ec41 0b10 	vmov	d0, r0, r1
 8003f42:	f008 fbb1 	bl	800c6a8 <atan>
	accel_angle.z = 0;

	gyro_angle.x = (float) last_angle.x
 8003f46:	ee19 0a90 	vmov	r0, s19
	accel_angle.y = (float) atan(
 8003f4a:	eeb0 aa40 	vmov.f32	s20, s0
 8003f4e:	eef0 aa60 	vmov.f32	s21, s1
	gyro_angle.x = (float) last_angle.x
 8003f52:	f7fc faf9 	bl	8000548 <__aeabi_f2d>
			+ dt_s
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003f56:	eddd 1a02 	vldr	s3, [sp, #8]
	gyro_angle.x = (float) last_angle.x
 8003f5a:	ec41 0b18 	vmov	d8, r0, r1
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003f5e:	ee11 0a90 	vmov	r0, s3
 8003f62:	f7fc faf1 	bl	8000548 <__aeabi_f2d>
 8003f66:	eeb0 0a48 	vmov.f32	s0, s16
 8003f6a:	eef0 0a68 	vmov.f32	s1, s17
 8003f6e:	4680      	mov	r8, r0
 8003f70:	4689      	mov	r9, r1
 8003f72:	f008 fd8d 	bl	800ca90 <sin>
 8003f76:	ee19 0a10 	vmov	r0, s18
 8003f7a:	ed8d 0b00 	vstr	d0, [sp]
 8003f7e:	f7fc fae3 	bl	8000548 <__aeabi_f2d>
 8003f82:	ec41 0b10 	vmov	d0, r0, r1
 8003f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f8a:	f008 fdc9 	bl	800cb20 <tan>
 8003f8e:	4658      	mov	r0, fp
 8003f90:	ec57 6b10 	vmov	r6, r7, d0
 8003f94:	f7fc fad8 	bl	8000548 <__aeabi_f2d>
							+ cos(last_angle.x) * tan(last_angle.y) * -gyro.y);
 8003f98:	eeb0 0a48 	vmov.f32	s0, s16
 8003f9c:	eef0 0a68 	vmov.f32	s1, s17
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
							+ cos(last_angle.x) * tan(last_angle.y) * -gyro.y);
 8003fa4:	f008 fd28 	bl	800c9f8 <cos>
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003fa8:	4632      	mov	r2, r6
 8003faa:	463b      	mov	r3, r7
 8003fac:	e9dd 0100 	ldrd	r0, r1, [sp]
							+ cos(last_angle.x) * tan(last_angle.y) * -gyro.y);
 8003fb0:	ed8d 0b06 	vstr	d0, [sp, #24]
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003fb4:	f7fc fb1c 	bl	80005f0 <__aeabi_dmul>
 8003fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbc:	f7fc fb18 	bl	80005f0 <__aeabi_dmul>
 8003fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gyro_angle.y = (float) last_angle.y
			+ dt_s * (cos(last_angle.x) * gyro.x - sin(last_angle.x) * -gyro.y);
	// Greg end

	imu_angle1.x = (float) ((1 - alpha) * gyro_angle.x + alpha * accel_angle.x);
 8003fc2:	ed9f 9a40 	vldr	s18, [pc, #256]	; 80040c4 <IMU_orientation+0x2fc>
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	f083 4000 	eor.w	r0, r3, #2147483648	; 0x80000000
 8003fcc:	460d      	mov	r5, r1
 8003fce:	f7fc fabb 	bl	8000548 <__aeabi_f2d>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f7fc f957 	bl	800028c <__adddf3>
							+ cos(last_angle.x) * tan(last_angle.y) * -gyro.y);
 8003fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	460d      	mov	r5, r1
							+ cos(last_angle.x) * tan(last_angle.y) * -gyro.y);
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	4639      	mov	r1, r7
 8003fea:	f7fc fb01 	bl	80005f0 <__aeabi_dmul>
 8003fee:	4606      	mov	r6, r0
 8003ff0:	f08a 4000 	eor.w	r0, sl, #2147483648	; 0x80000000
 8003ff4:	460f      	mov	r7, r1
 8003ff6:	f7fc faa7 	bl	8000548 <__aeabi_f2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4630      	mov	r0, r6
 8004000:	4639      	mov	r1, r7
 8004002:	f7fc faf5 	bl	80005f0 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f93d 	bl	800028c <__adddf3>
					* (-gyro.z + sin(last_angle.x) * tan(last_angle.y) * gyro.x
 8004012:	4642      	mov	r2, r8
 8004014:	464b      	mov	r3, r9
 8004016:	f7fc faeb 	bl	80005f0 <__aeabi_dmul>
			+ dt_s
 800401a:	ec53 2b18 	vmov	r2, r3, d8
 800401e:	f7fc f935 	bl	800028c <__adddf3>
 8004022:	f7fc fddd 	bl	8000be0 <__aeabi_d2f>
 8004026:	ee09 0a90 	vmov	s19, r0
	accel_angle.x = (float) atan(
 800402a:	ec51 0b1b 	vmov	r0, r1, d11
 800402e:	f7fc fdd7 	bl	8000be0 <__aeabi_d2f>
	imu_angle1.x = (float) ((1 - alpha) * gyro_angle.x + alpha * accel_angle.x);
 8004032:	ed9f 8a25 	vldr	s16, [pc, #148]	; 80040c8 <IMU_orientation+0x300>
 8004036:	ee07 0a90 	vmov	s15, r0
			+ dt_s * (cos(last_angle.x) * gyro.x - sin(last_angle.x) * -gyro.y);
 800403a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800403e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
	imu_angle1.x = (float) ((1 - alpha) * gyro_angle.x + alpha * accel_angle.x);
 8004042:	ee67 8a88 	vmul.f32	s17, s15, s16
			+ dt_s * (cos(last_angle.x) * gyro.x - sin(last_angle.x) * -gyro.y);
 8004046:	f7fc fad3 	bl	80005f0 <__aeabi_dmul>
 800404a:	4604      	mov	r4, r0
 800404c:	4650      	mov	r0, sl
 800404e:	460d      	mov	r5, r1
 8004050:	f7fc fa7a 	bl	8000548 <__aeabi_f2d>
 8004054:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004058:	f7fc faca 	bl	80005f0 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4620      	mov	r0, r4
 8004062:	4629      	mov	r1, r5
 8004064:	f7fc f912 	bl	800028c <__adddf3>
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	f7fc fac0 	bl	80005f0 <__aeabi_dmul>
 8004070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004074:	f7fc f90a 	bl	800028c <__adddf3>
 8004078:	f7fc fdb2 	bl	8000be0 <__aeabi_d2f>
	imu_angle1.x = (float) ((1 - alpha) * gyro_angle.x + alpha * accel_angle.x);
 800407c:	eee9 8a89 	vfma.f32	s17, s19, s18
			+ dt_s * (cos(last_angle.x) * gyro.x - sin(last_angle.x) * -gyro.y);
 8004080:	ee09 0a90 	vmov	s19, r0
	accel_angle.y = (float) atan(
 8004084:	ec51 0b1a 	vmov	r0, r1, d10
 8004088:	f7fc fdaa 	bl	8000be0 <__aeabi_d2f>
	imu_angle1.y = (float) ((1 - alpha) * gyro_angle.y + alpha * accel_angle.y);
 800408c:	ee07 0a90 	vmov	s15, r0
 8004090:	ee67 0a88 	vmul.f32	s1, s15, s16

	imu_angle1.x = imu_angle1.x;
	return (imu_angle1);
}
 8004094:	ed9d 1a17 	vldr	s2, [sp, #92]	; 0x5c
 8004098:	eee9 0a89 	vfma.f32	s1, s19, s18
 800409c:	eeb0 0a68 	vmov.f32	s0, s17
 80040a0:	b019      	add	sp, #100	; 0x64
 80040a2:	ecbd 8b08 	vpop	{d8-d11}
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w
 80040b0:	00000000 	.word	0x00000000
 80040b4:	40306000 	.word	0x40306000
 80040b8:	a0000000 	.word	0xa0000000
 80040bc:	3f91df45 	.word	0x3f91df45
 80040c0:	39800000 	.word	0x39800000
 80040c4:	3f666666 	.word	0x3f666666
 80040c8:	3dcccccd 	.word	0x3dcccccd

080040cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040cc:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_MspInit+0x88>)
{
 80040ce:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60
 80040d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040da:	f002 0201 	and.w	r2, r2, #1
 80040de:	9200      	str	r2, [sp, #0]
 80040e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040e8:	659a      	str	r2, [r3, #88]	; 0x58
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f2:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f6:	f001 f90f 	bl	8005318 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80040fa:	2200      	movs	r2, #0
 80040fc:	4611      	mov	r1, r2
 80040fe:	f06f 000b 	mvn.w	r0, #11
 8004102:	f001 f91b 	bl	800533c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004106:	2200      	movs	r2, #0
 8004108:	4611      	mov	r1, r2
 800410a:	f06f 000a 	mvn.w	r0, #10
 800410e:	f001 f915 	bl	800533c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	4611      	mov	r1, r2
 8004116:	f06f 0009 	mvn.w	r0, #9
 800411a:	f001 f90f 	bl	800533c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	4611      	mov	r1, r2
 8004122:	f06f 0004 	mvn.w	r0, #4
 8004126:	f001 f909 	bl	800533c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	4611      	mov	r1, r2
 800412e:	f06f 0003 	mvn.w	r0, #3
 8004132:	f001 f903 	bl	800533c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	4611      	mov	r1, r2
 800413a:	f06f 0001 	mvn.w	r0, #1
 800413e:	f001 f8fd 	bl	800533c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004142:	2200      	movs	r2, #0
 8004144:	4611      	mov	r1, r2
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	f001 f8f7 	bl	800533c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800414e:	b003      	add	sp, #12
 8004150:	f85d fb04 	ldr.w	pc, [sp], #4
 8004154:	40021000 	.word	0x40021000

08004158 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004158:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800415a:	6802      	ldr	r2, [r0, #0]
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_SD_MspInit+0x5c>)
 800415e:	429a      	cmp	r2, r3
{
 8004160:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8004162:	d124      	bne.n	80041ae <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004164:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004168:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800416a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416c:	4812      	ldr	r0, [pc, #72]	; (80041b8 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800416e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004182:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004186:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004188:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800418a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800418c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004192:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004194:	f001 fa8a 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004198:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800419a:	eb0d 0103 	add.w	r1, sp, r3
 800419e:	4807      	ldr	r0, [pc, #28]	; (80041bc <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80041a8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041aa:	f001 fa7f 	bl	80056ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80041ae:	b007      	add	sp, #28
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40012800 	.word	0x40012800
 80041b8:	48000800 	.word	0x48000800
 80041bc:	48000c00 	.word	0x48000c00

080041c0 <NMI_Handler>:
 80041c0:	4770      	bx	lr

080041c2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80041c2:	e7fe      	b.n	80041c2 <HardFault_Handler>

080041c4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80041c4:	e7fe      	b.n	80041c4 <MemManage_Handler>

080041c6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80041c6:	e7fe      	b.n	80041c6 <BusFault_Handler>

080041c8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80041c8:	e7fe      	b.n	80041c8 <UsageFault_Handler>

080041ca <SVC_Handler>:
 80041ca:	4770      	bx	lr

080041cc <DebugMon_Handler>:
 80041cc:	4770      	bx	lr

080041ce <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80041ce:	4770      	bx	lr

080041d0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80041d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041d2:	f001 f877 	bl	80052c4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80041da:	f001 b906 	b.w	80053ea <HAL_SYSTICK_IRQHandler>
	...

080041e0 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <OTG_FS_IRQHandler+0x8>)
 80041e2:	f001 bc03 	b.w	80059ec <HAL_PCD_IRQHandler>
 80041e6:	bf00      	nop
 80041e8:	2000900c 	.word	0x2000900c

080041ec <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <DMA2_Channel4_IRQHandler+0x14>)
 80041ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041f0:	2a01      	cmp	r2, #1
 80041f2:	d001      	beq.n	80041f8 <DMA2_Channel4_IRQHandler+0xc>
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	b90b      	cbnz	r3, 80041fc <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 80041f8:	f7fc bfd6 	b.w	80011a8 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 80041fc:	f7fc bfce 	b.w	800119c <BSP_SD_DMA_Tx_IRQHandler>
 8004200:	20008660 	.word	0x20008660

08004204 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 8004204:	f7fc bfc4 	b.w	8001190 <BSP_SD_IRQHandler>

08004208 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004208:	490f      	ldr	r1, [pc, #60]	; (8004248 <SystemInit+0x40>)
 800420a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800420e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <SystemInit+0x44>)
 8004218:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800421a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004222:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800422a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800422e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8004230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004234:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800423c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800423e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004244:	608b      	str	r3, [r1, #8]
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00
 800424c:	40021000 	.word	0x40021000

08004250 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <LL_APB1_GRP1_EnableClock+0x18>)
 8004252:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004254:	4302      	orrs	r2, r0
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800425a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800425c:	4018      	ands	r0, r3
 800425e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004260:	9b01      	ldr	r3, [sp, #4]
}
 8004262:	b002      	add	sp, #8
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000

0800426c <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 800426c:	4a03      	ldr	r2, [pc, #12]	; (800427c <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 800426e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004272:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8004276:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800427a:	4770      	bx	lr
 800427c:	40021000 	.word	0x40021000

08004280 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 8004280:	2300      	movs	r3, #0
 8004282:	4283      	cmp	r3, r0
 8004284:	d100      	bne.n	8004288 <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 8004286:	4770      	bx	lr
 8004288:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 800428a:	bf00      	nop
    	for(i=0;i<11;i++)
 800428c:	3a01      	subs	r2, #1
 800428e:	d1fc      	bne.n	800428a <delay_us+0xa>
    for(k=0;k<us;k++)
 8004290:	3301      	adds	r3, #1
 8004292:	e7f6      	b.n	8004282 <delay_us+0x2>

08004294 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <Start_LPTIMCounter2+0x24>)
 8004296:	6913      	ldr	r3, [r2, #16]
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800429e:	6993      	ldr	r3, [r2, #24]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	4318      	orrs	r0, r3
 80042a6:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80042a8:	6913      	ldr	r3, [r2, #16]
 80042aa:	f023 0306 	bic.w	r3, r3, #6
 80042ae:	f043 0304 	orr.w	r3, r3, #4
 80042b2:	6113      	str	r3, [r2, #16]
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40009400 	.word	0x40009400

080042bc <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <LSE_ON+0x18>)
 80042be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 80042ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042ce:	0792      	lsls	r2, r2, #30
 80042d0:	d5fb      	bpl.n	80042ca <LSE_ON+0xe>

}
 80042d2:	4770      	bx	lr
 80042d4:	40021000 	.word	0x40021000

080042d8 <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 80042d8:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 80042da:	f001 f80d 	bl	80052f8 <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <EnterStop+0x24>)
 80042e0:	6813      	ldr	r3, [r2, #0]
 80042e2:	f023 0307 	bic.w	r3, r3, #7
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <EnterStop+0x28>)
 80042ee:	6913      	ldr	r3, [r2, #16]
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80042f6:	bf30      	wfi
 80042f8:	bd08      	pop	{r3, pc}
 80042fa:	bf00      	nop
 80042fc:	40007000 	.word	0x40007000
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 8004304:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8004306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 800430a:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800430c:	f7ff ffa0 	bl	8004250 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <SystemClock_Config_MSI_80MHz+0xd4>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004318:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004320:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8004322:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8004324:	0552      	lsls	r2, r2, #21
 8004326:	d5fc      	bpl.n	8004322 <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004328:	2310      	movs	r3, #16
 800432a:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800432c:	2301      	movs	r3, #1
 800432e:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8004330:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 8004332:	2306      	movs	r3, #6
 8004334:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 8004336:	2328      	movs	r3, #40	; 0x28
 8004338:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800433a:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800433c:	4c27      	ldr	r4, [pc, #156]	; (80043dc <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800433e:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004340:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004342:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004344:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004346:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800434a:	2202      	movs	r2, #2
 800434c:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800434e:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8004350:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004352:	f002 f89f 	bl	8006494 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004356:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800435a:	f023 0320 	bic.w	r3, r3, #32
 800435e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 8004362:	69a3      	ldr	r3, [r4, #24]
 8004364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004368:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 800436a:	f7ff ffa7 	bl	80042bc <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 800436e:	f002 fb05 	bl	800697c <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 8004372:	f7ff ff7b 	bl	800426c <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 8004376:	f7ff ff79 	bl	800426c <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004380:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800438e:	68a3      	ldr	r3, [r4, #8]
 8004390:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004394:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004398:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <SystemClock_Config_MSI_80MHz+0xdc>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	f022 0207 	bic.w	r2, r2, #7
 80043aa:	f042 0204 	orr.w	r2, r2, #4
 80043ae:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 80043b6:	2a04      	cmp	r2, #4
 80043b8:	d1fa      	bne.n	80043b0 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043c0:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 80043c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80043ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	9b00      	ldr	r3, [sp, #0]

		}
 80043d4:	b012      	add	sp, #72	; 0x48
 80043d6:	bd10      	pop	{r4, pc}
 80043d8:	40007000 	.word	0x40007000
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40022000 	.word	0x40022000

080043e4 <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <Configure_LPTIM2_Int+0x40>)
 80043e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043ea:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 80043ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 80043f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f4:	f042 0220 	orr.w	r2, r2, #32
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 80043fc:	b082      	sub	sp, #8
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004404:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <Configure_LPTIM2_Int+0x44>)
 8004408:	2204      	movs	r2, #4
 800440a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <Configure_LPTIM2_Int+0x48>)
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	f022 0202 	bic.w	r2, r2, #2
 8004416:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 8004420:	b002      	add	sp, #8
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000
 8004428:	e000e100 	.word	0xe000e100
 800442c:	40009400 	.word	0x40009400

08004430 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004430:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004432:	4c1d      	ldr	r4, [pc, #116]	; (80044a8 <HAL_PCD_MspInit+0x78>)
 8004434:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800443c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800443e:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004448:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800444c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004454:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004456:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004458:	a903      	add	r1, sp, #12
 800445a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004462:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004464:	f001 f922 	bl	80056ac <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800446c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800446e:	2312      	movs	r3, #18
 8004470:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004472:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004474:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800447a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800447c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447e:	f001 f915 	bl	80056ac <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004482:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004488:	64e3      	str	r3, [r4, #76]	; 0x4c
 800448a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800448c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004490:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8004492:	462a      	mov	r2, r5
 8004494:	2107      	movs	r1, #7
 8004496:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004498:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800449a:	f000 ff4f 	bl	800533c <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800449e:	2043      	movs	r0, #67	; 0x43
 80044a0:	f000 ff80 	bl	80053a4 <HAL_NVIC_EnableIRQ>
    
}
 80044a4:	b008      	add	sp, #32
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_PCD_MspDeInit+0x14>)
 80044ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044b4:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 80044b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60
 80044be:	4770      	bx	lr
 80044c0:	40021000 	.word	0x40021000

080044c4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80044c4:	f500 7162 	add.w	r1, r0, #904	; 0x388
 80044c8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044cc:	f004 bfff 	b.w	80094ce <USBD_LL_SetupStage>

080044d0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80044d0:	231c      	movs	r3, #28
 80044d2:	fb03 0301 	mla	r3, r3, r1, r0
 80044d6:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044da:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80044de:	f005 b823 	b.w	8009528 <USBD_LL_DataOutStage>

080044e2 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80044e2:	231c      	movs	r3, #28
 80044e4:	fb03 0301 	mla	r3, r3, r1, r0
 80044e8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ee:	f005 b84d 	b.w	800958c <USBD_LL_DataInStage>

080044f2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80044f2:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044f6:	f005 b8c9 	b.w	800968c <USBD_LL_SOF>

080044fa <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80044fa:	b510      	push	{r4, lr}
 80044fc:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80044fe:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004502:	f005 f892 	bl	800962a <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004506:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 800450a:	2101      	movs	r1, #1
}
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004510:	f005 b8aa 	b.w	8009668 <USBD_LL_SetSpeed>

08004514 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 8004514:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004518:	f005 b8a9 	b.w	800966e <USBD_LL_Suspend>

0800451c <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 800451c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004520:	f005 b8ae 	b.w	8009680 <USBD_LL_Resume>

08004524 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8004524:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004528:	f005 b8be 	b.w	80096a8 <USBD_LL_IsoOUTIncomplete>

0800452c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800452c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004530:	f005 b8b8 	b.w	80096a4 <USBD_LL_IsoINIncomplete>

08004534 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8004534:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004538:	f005 b8b8 	b.w	80096ac <USBD_LL_DevConnected>

0800453c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 800453c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004540:	f005 b8b6 	b.w	80096b0 <USBD_LL_DevDisconnected>

08004544 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8004546:	4c15      	ldr	r4, [pc, #84]	; (800459c <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8004548:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 800454a:	2305      	movs	r3, #5
 800454c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004550:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8004552:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 8004556:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 8004558:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800455c:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 800455e:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 8004562:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8004564:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 8004566:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8004568:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 800456a:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 800456c:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800456e:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 8004570:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8004572:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8004574:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 8004576:	f001 f975 	bl	8005864 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	4620      	mov	r0, r4
 800457e:	f001 fe86 	bl	800628e <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8004582:	463a      	mov	r2, r7
 8004584:	4629      	mov	r1, r5
 8004586:	4620      	mov	r0, r4
 8004588:	f001 fe60 	bl	800624c <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 800458c:	2280      	movs	r2, #128	; 0x80
 800458e:	4631      	mov	r1, r6
 8004590:	4620      	mov	r0, r4
 8004592:	f001 fe5b 	bl	800624c <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 8004596:	4628      	mov	r0, r5
 8004598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800459a:	bf00      	nop
 800459c:	2000900c 	.word	0x2000900c

080045a0 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 80045a0:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 80045a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045a6:	f001 fa0f 	bl	80059c8 <HAL_PCD_DeInit>
  return USBD_OK;
}
 80045aa:	2000      	movs	r0, #0
 80045ac:	bd08      	pop	{r3, pc}

080045ae <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80045ae:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80045b0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045b4:	f001 f9db 	bl	800596e <HAL_PCD_Start>
  return USBD_OK;
}
 80045b8:	2000      	movs	r0, #0
 80045ba:	bd08      	pop	{r3, pc}

080045bc <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80045bc:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 80045be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045c2:	f001 f9e9 	bl	8005998 <HAL_PCD_Stop>
  return USBD_OK;
}
 80045c6:	2000      	movs	r0, #0
 80045c8:	bd08      	pop	{r3, pc}

080045ca <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80045ca:	b510      	push	{r4, lr}
 80045cc:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 80045ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045d2:	4613      	mov	r3, r2
 80045d4:	4622      	mov	r2, r4
 80045d6:	f001 fd2d 	bl	8006034 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80045da:	2000      	movs	r0, #0
 80045dc:	bd10      	pop	{r4, pc}

080045de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045de:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80045e0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045e4:	f001 fd4b 	bl	800607e <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80045e8:	2000      	movs	r0, #0
 80045ea:	bd08      	pop	{r3, pc}

080045ec <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045ec:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80045ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045f2:	f001 fe11 	bl	8006218 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 80045f6:	2000      	movs	r0, #0
 80045f8:	bd08      	pop	{r3, pc}

080045fa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045fa:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80045fc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004600:	f001 fdb9 	bl	8006176 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8004604:	2000      	movs	r0, #0
 8004606:	bd08      	pop	{r3, pc}

08004608 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004608:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800460a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800460e:	f001 fdde 	bl	80061ce <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8004612:	2000      	movs	r0, #0
 8004614:	bd08      	pop	{r3, pc}

08004616 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004616:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800461a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800461e:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004622:	bf1b      	ittet	ne
 8004624:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8004628:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800462c:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004630:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004634:	bf08      	it	eq
 8004636:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 800463a:	4770      	bx	lr

0800463c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800463c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800463e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004642:	f001 fce3 	bl	800600c <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8004646:	2000      	movs	r0, #0
 8004648:	bd08      	pop	{r3, pc}

0800464a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800464a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800464c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004650:	f001 fd6a 	bl	8006128 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8004654:	2000      	movs	r0, #0
 8004656:	bd08      	pop	{r3, pc}

08004658 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8004658:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800465a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800465e:	f001 fd31 	bl	80060c4 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004662:	2000      	movs	r0, #0
 8004664:	bd08      	pop	{r3, pc}

08004666 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004666:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8004668:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800466c:	f001 fd54 	bl	8006118 <HAL_PCD_EP_GetRxCount>
}
 8004670:	bd08      	pop	{r3, pc}
	...

08004674 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 8004674:	2312      	movs	r3, #18
 8004676:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 8004678:	4800      	ldr	r0, [pc, #0]	; (800467c <USBD_VCP_DeviceDescriptor+0x8>)
 800467a:	4770      	bx	lr
 800467c:	20000044 	.word	0x20000044

08004680 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8004680:	2312      	movs	r3, #18
 8004682:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8004684:	4800      	ldr	r0, [pc, #0]	; (8004688 <USBD_MSC_DeviceDescriptor+0x8>)
 8004686:	4770      	bx	lr
 8004688:	20000030 	.word	0x20000030

0800468c <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800468c:	2304      	movs	r3, #4
 800468e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8004690:	4800      	ldr	r0, [pc, #0]	; (8004694 <USBD_MSC_LangIDStrDescriptor+0x8>)
 8004692:	4770      	bx	lr
 8004694:	20000058 	.word	0x20000058

08004698 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004698:	2300      	movs	r3, #0
{
 800469a:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800469c:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 800469e:	b2dc      	uxtb	r4, r3
 80046a0:	42a2      	cmp	r2, r4
 80046a2:	d800      	bhi.n	80046a6 <IntToUnicode+0xe>
  }
}
 80046a4:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 80046a6:	0f04      	lsrs	r4, r0, #28
 80046a8:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80046aa:	bf94      	ite	ls
 80046ac:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80046ae:	3437      	addhi	r4, #55	; 0x37
 80046b0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 80046b4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80046b8:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 80046ba:	7065      	strb	r5, [r4, #1]
 80046bc:	3301      	adds	r3, #1
 80046be:	e7ee      	b.n	800469e <IntToUnicode+0x6>

080046c0 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80046c0:	231a      	movs	r3, #26
{
 80046c2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80046c4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <USBD_VCP_SerialStrDescriptor+0x2c>)
 80046c8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 80046ca:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80046cc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80046ce:	18c0      	adds	r0, r0, r3
 80046d0:	d00a      	beq.n	80046e8 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80046d4:	4907      	ldr	r1, [pc, #28]	; (80046f4 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 80046d6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80046d8:	2208      	movs	r2, #8
 80046da:	f7ff ffdd 	bl	8004698 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80046de:	2204      	movs	r2, #4
 80046e0:	4905      	ldr	r1, [pc, #20]	; (80046f8 <USBD_VCP_SerialStrDescriptor+0x38>)
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7ff ffd8 	bl	8004698 <IntToUnicode>
}
 80046e8:	4804      	ldr	r0, [pc, #16]	; (80046fc <USBD_VCP_SerialStrDescriptor+0x3c>)
 80046ea:	bd10      	pop	{r4, pc}
 80046ec:	1fff7a30 	.word	0x1fff7a30
 80046f0:	1fff7a34 	.word	0x1fff7a34
 80046f4:	2000005e 	.word	0x2000005e
 80046f8:	2000006e 	.word	0x2000006e
 80046fc:	2000005c 	.word	0x2000005c

08004700 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004700:	231a      	movs	r3, #26
{
 8004702:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004704:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <USBD_MSC_SerialStrDescriptor+0x2c>)
 8004708:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800470a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800470c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800470e:	18c0      	adds	r0, r0, r3
 8004710:	d00a      	beq.n	8004728 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004716:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8004718:	2208      	movs	r2, #8
 800471a:	f7ff ffbd 	bl	8004698 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800471e:	2204      	movs	r2, #4
 8004720:	4905      	ldr	r1, [pc, #20]	; (8004738 <USBD_MSC_SerialStrDescriptor+0x38>)
 8004722:	4620      	mov	r0, r4
 8004724:	f7ff ffb8 	bl	8004698 <IntToUnicode>
}
 8004728:	4804      	ldr	r0, [pc, #16]	; (800473c <USBD_MSC_SerialStrDescriptor+0x3c>)
 800472a:	bd10      	pop	{r4, pc}
 800472c:	1fff7a10 	.word	0x1fff7a10
 8004730:	1fff7a14 	.word	0x1fff7a14
 8004734:	2000005e 	.word	0x2000005e
 8004738:	2000006e 	.word	0x2000006e
 800473c:	2000005c 	.word	0x2000005c

08004740 <USBD_VCP_ProductStrDescriptor>:
{
 8004740:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 8004742:	4c04      	ldr	r4, [pc, #16]	; (8004754 <USBD_VCP_ProductStrDescriptor+0x14>)
 8004744:	4804      	ldr	r0, [pc, #16]	; (8004758 <USBD_VCP_ProductStrDescriptor+0x18>)
 8004746:	460a      	mov	r2, r1
 8004748:	4621      	mov	r1, r4
 800474a:	f005 f95b 	bl	8009a04 <USBD_GetString>
}
 800474e:	4620      	mov	r0, r4
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	200093d8 	.word	0x200093d8
 8004758:	0800e255 	.word	0x0800e255

0800475c <USBD_MSC_ProductStrDescriptor>:
{
 800475c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800475e:	4c04      	ldr	r4, [pc, #16]	; (8004770 <USBD_MSC_ProductStrDescriptor+0x14>)
 8004760:	4804      	ldr	r0, [pc, #16]	; (8004774 <USBD_MSC_ProductStrDescriptor+0x18>)
 8004762:	460a      	mov	r2, r1
 8004764:	4621      	mov	r1, r4
 8004766:	f005 f94d 	bl	8009a04 <USBD_GetString>
}
 800476a:	4620      	mov	r0, r4
 800476c:	bd10      	pop	{r4, pc}
 800476e:	bf00      	nop
 8004770:	200093d8 	.word	0x200093d8
 8004774:	0800e224 	.word	0x0800e224

08004778 <USBD_MSC_ManufacturerStrDescriptor>:
{
 8004778:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800477a:	4c04      	ldr	r4, [pc, #16]	; (800478c <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 800477c:	4804      	ldr	r0, [pc, #16]	; (8004790 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 800477e:	460a      	mov	r2, r1
 8004780:	4621      	mov	r1, r4
 8004782:	f005 f93f 	bl	8009a04 <USBD_GetString>
}
 8004786:	4620      	mov	r0, r4
 8004788:	bd10      	pop	{r4, pc}
 800478a:	bf00      	nop
 800478c:	200093d8 	.word	0x200093d8
 8004790:	0800e211 	.word	0x0800e211

08004794 <USBD_VCP_ConfigStrDescriptor>:
{
 8004794:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 8004796:	4c04      	ldr	r4, [pc, #16]	; (80047a8 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8004798:	4804      	ldr	r0, [pc, #16]	; (80047ac <USBD_VCP_ConfigStrDescriptor+0x18>)
 800479a:	460a      	mov	r2, r1
 800479c:	4621      	mov	r1, r4
 800479e:	f005 f931 	bl	8009a04 <USBD_GetString>
}
 80047a2:	4620      	mov	r0, r4
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
 80047a8:	200093d8 	.word	0x200093d8
 80047ac:	0800e23c 	.word	0x0800e23c

080047b0 <USBD_MSC_ConfigStrDescriptor>:
{
 80047b0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80047b2:	4c04      	ldr	r4, [pc, #16]	; (80047c4 <USBD_MSC_ConfigStrDescriptor+0x14>)
 80047b4:	4804      	ldr	r0, [pc, #16]	; (80047c8 <USBD_MSC_ConfigStrDescriptor+0x18>)
 80047b6:	460a      	mov	r2, r1
 80047b8:	4621      	mov	r1, r4
 80047ba:	f005 f923 	bl	8009a04 <USBD_GetString>
}
 80047be:	4620      	mov	r0, r4
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	bf00      	nop
 80047c4:	200093d8 	.word	0x200093d8
 80047c8:	0800e1f8 	.word	0x0800e1f8

080047cc <USBD_VCP_InterfaceStrDescriptor>:
{
 80047cc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 80047ce:	4c04      	ldr	r4, [pc, #16]	; (80047e0 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 80047d0:	4804      	ldr	r0, [pc, #16]	; (80047e4 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 80047d2:	460a      	mov	r2, r1
 80047d4:	4621      	mov	r1, r4
 80047d6:	f005 f915 	bl	8009a04 <USBD_GetString>
}
 80047da:	4620      	mov	r0, r4
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	200093d8 	.word	0x200093d8
 80047e4:	0800e247 	.word	0x0800e247

080047e8 <USBD_MSC_InterfaceStrDescriptor>:
{
 80047e8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80047ea:	4c04      	ldr	r4, [pc, #16]	; (80047fc <USBD_MSC_InterfaceStrDescriptor+0x14>)
 80047ec:	4804      	ldr	r0, [pc, #16]	; (8004800 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 80047ee:	460a      	mov	r2, r1
 80047f0:	4621      	mov	r1, r4
 80047f2:	f005 f907 	bl	8009a04 <USBD_GetString>
}
 80047f6:	4620      	mov	r0, r4
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	bf00      	nop
 80047fc:	200093d8 	.word	0x200093d8
 8004800:	0800e203 	.word	0x0800e203

08004804 <USBD_VCP_LangIDStrDescriptor>:
 8004804:	2304      	movs	r3, #4
 8004806:	800b      	strh	r3, [r1, #0]
 8004808:	4800      	ldr	r0, [pc, #0]	; (800480c <USBD_VCP_LangIDStrDescriptor+0x8>)
 800480a:	4770      	bx	lr
 800480c:	20000058 	.word	0x20000058

08004810 <USBD_VCP_ManufacturerStrDescriptor>:
 8004810:	b510      	push	{r4, lr}
 8004812:	4c04      	ldr	r4, [pc, #16]	; (8004824 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8004814:	4804      	ldr	r0, [pc, #16]	; (8004828 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8004816:	460a      	mov	r2, r1
 8004818:	4621      	mov	r1, r4
 800481a:	f005 f8f3 	bl	8009a04 <USBD_GetString>
 800481e:	4620      	mov	r0, r4
 8004820:	bd10      	pop	{r4, pc}
 8004822:	bf00      	nop
 8004824:	200093d8 	.word	0x200093d8
 8004828:	0800e211 	.word	0x0800e211

0800482c <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 800482c:	2000      	movs	r0, #0
 800482e:	4770      	bx	lr

08004830 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 8004830:	2000      	movs	r0, #0
 8004832:	4770      	bx	lr

08004834 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004834:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 8004838:	b11b      	cbz	r3, 8004842 <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 800483a:	2000      	movs	r0, #0
 800483c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004840:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004842:	2002      	movs	r0, #2
  }
}
 8004844:	4770      	bx	lr

08004846 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004846:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 800484a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800484c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004850:	b15b      	cbz	r3, 800486a <USBD_CDC_EP0_RxReady+0x24>
 8004852:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004856:	28ff      	cmp	r0, #255	; 0xff
 8004858:	d007      	beq.n	800486a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004860:	4621      	mov	r1, r4
 8004862:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 8004864:	23ff      	movs	r3, #255	; 0xff
 8004866:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800486a:	2000      	movs	r0, #0
 800486c:	bd10      	pop	{r4, pc}
	...

08004870 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004870:	2343      	movs	r3, #67	; 0x43
 8004872:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004874:	4800      	ldr	r0, [pc, #0]	; (8004878 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004876:	4770      	bx	lr
 8004878:	200000f8 	.word	0x200000f8

0800487c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800487c:	2343      	movs	r3, #67	; 0x43
 800487e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004880:	4800      	ldr	r0, [pc, #0]	; (8004884 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004882:	4770      	bx	lr
 8004884:	2000013c 	.word	0x2000013c

08004888 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004888:	2343      	movs	r3, #67	; 0x43
 800488a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800488c:	4800      	ldr	r0, [pc, #0]	; (8004890 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800488e:	4770      	bx	lr
 8004890:	2000018c 	.word	0x2000018c

08004894 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004894:	230a      	movs	r3, #10
 8004896:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004898:	4800      	ldr	r0, [pc, #0]	; (800489c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800489a:	4770      	bx	lr
 800489c:	20000180 	.word	0x20000180

080048a0 <STORAGE_Init>:
{
 80048a0:	b508      	push	{r3, lr}
  BSP_SD_Init();
 80048a2:	f7fc fd1d 	bl	80012e0 <BSP_SD_Init>
}
 80048a6:	2000      	movs	r0, #0
 80048a8:	bd08      	pop	{r3, pc}

080048aa <STORAGE_GetCapacity>:
{
 80048aa:	b530      	push	{r4, r5, lr}
 80048ac:	b097      	sub	sp, #92	; 0x5c
 80048ae:	460d      	mov	r5, r1
 80048b0:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80048b2:	f7fc fc65 	bl	8001180 <BSP_SD_IsDetected>
 80048b6:	b178      	cbz	r0, 80048d8 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 80048b8:	4668      	mov	r0, sp
 80048ba:	f7fc fc81 	bl	80011c0 <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 80048be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048c2:	0a5b      	lsrs	r3, r3, #9
 80048c4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80048c8:	3b01      	subs	r3, #1
 80048ca:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 80048cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d0:	8023      	strh	r3, [r4, #0]
    ret = 0;
 80048d2:	2000      	movs	r0, #0
}
 80048d4:	b017      	add	sp, #92	; 0x5c
 80048d6:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e7fa      	b.n	80048d4 <STORAGE_GetCapacity+0x2a>

080048de <STORAGE_Read>:
{
 80048de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048e0:	460c      	mov	r4, r1
 80048e2:	4615      	mov	r5, r2
 80048e4:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80048e6:	f7fc fc4b 	bl	8001180 <BSP_SD_IsDetected>
 80048ea:	b158      	cbz	r0, 8004904 <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 80048ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	9601      	str	r6, [sp, #4]
 80048f4:	026a      	lsls	r2, r5, #9
 80048f6:	2300      	movs	r3, #0
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7fc fc99 	bl	8001230 <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 80048fe:	2000      	movs	r0, #0
}
 8004900:	b002      	add	sp, #8
 8004902:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e7fa      	b.n	8004900 <STORAGE_Read+0x22>

0800490a <STORAGE_Write>:
{
 800490a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800490c:	460c      	mov	r4, r1
 800490e:	4615      	mov	r5, r2
 8004910:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004912:	f7fc fc35 	bl	8001180 <BSP_SD_IsDetected>
 8004916:	b158      	cbz	r0, 8004930 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8004918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	9601      	str	r6, [sp, #4]
 8004920:	026a      	lsls	r2, r5, #9
 8004922:	2300      	movs	r3, #0
 8004924:	4620      	mov	r0, r4
 8004926:	f7fc fd5d 	bl	80013e4 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 800492a:	2000      	movs	r0, #0
}
 800492c:	b002      	add	sp, #8
 800492e:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e7fa      	b.n	800492c <STORAGE_Write+0x22>

08004936 <USBD_CDC_DataOut>:
{
 8004936:	b538      	push	{r3, r4, r5, lr}
 8004938:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800493a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800493e:	f7ff fe92 	bl	8004666 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8004942:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004946:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800494a:	b14b      	cbz	r3, 8004960 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800494c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004950:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800495a:	4798      	blx	r3
    return USBD_OK;
 800495c:	2000      	movs	r0, #0
 800495e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004960:	2002      	movs	r0, #2
}
 8004962:	bd38      	pop	{r3, r4, r5, pc}

08004964 <USBD_CDC_Setup>:
{
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004966:	780f      	ldrb	r7, [r1, #0]
 8004968:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800496c:	4606      	mov	r6, r0
 800496e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004970:	d023      	beq.n	80049ba <USBD_CDC_Setup+0x56>
 8004972:	2b20      	cmp	r3, #32
 8004974:	d119      	bne.n	80049aa <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8004976:	88ca      	ldrh	r2, [r1, #6]
 8004978:	784b      	ldrb	r3, [r1, #1]
 800497a:	b1c2      	cbz	r2, 80049ae <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800497c:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800497e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8004982:	d50b      	bpl.n	800499c <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004984:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004988:	4618      	mov	r0, r3
 800498a:	688f      	ldr	r7, [r1, #8]
 800498c:	4629      	mov	r1, r5
 800498e:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 8004990:	88e2      	ldrh	r2, [r4, #6]
 8004992:	4629      	mov	r1, r5
 8004994:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8004996:	f005 f851 	bl	8009a3c <USBD_CtlSendData>
      break;
 800499a:	e006      	b.n	80049aa <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 800499c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80049a0:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 80049a4:	4629      	mov	r1, r5
 80049a6:	f005 f85e 	bl	8009a66 <USBD_CtlPrepareRx>
}
 80049aa:	2000      	movs	r0, #0
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049ae:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80049b2:	6884      	ldr	r4, [r0, #8]
 80049b4:	4618      	mov	r0, r3
 80049b6:	47a0      	blx	r4
 80049b8:	e7f7      	b.n	80049aa <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80049ba:	784b      	ldrb	r3, [r1, #1]
 80049bc:	2b0a      	cmp	r3, #10
 80049be:	d1f4      	bne.n	80049aa <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80049c0:	2201      	movs	r2, #1
 80049c2:	4901      	ldr	r1, [pc, #4]	; (80049c8 <USBD_CDC_Setup+0x64>)
 80049c4:	e7e7      	b.n	8004996 <USBD_CDC_Setup+0x32>
 80049c6:	bf00      	nop
 80049c8:	200005d8 	.word	0x200005d8

080049cc <USBD_CDC_DeInit>:
{
 80049cc:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80049ce:	2183      	movs	r1, #131	; 0x83
{
 80049d0:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80049d2:	f7ff fe04 	bl	80045de <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80049d6:	2103      	movs	r1, #3
 80049d8:	4620      	mov	r0, r4
 80049da:	f7ff fe00 	bl	80045de <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80049de:	2182      	movs	r1, #130	; 0x82
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff fdfc 	bl	80045de <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80049e6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80049ea:	b153      	cbz	r3, 8004a02 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80049ec:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80049f4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80049f8:	f006 fd16 	bl	800b428 <free>
    pdev->pClassData = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8004a02:	2000      	movs	r0, #0
 8004a04:	bd10      	pop	{r4, pc}

08004a06 <USBD_CDC_Init>:
{
 8004a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a08:	7c03      	ldrb	r3, [r0, #16]
{
 8004a0a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a0c:	bb7b      	cbnz	r3, 8004a6e <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8004a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a12:	2202      	movs	r2, #2
 8004a14:	2183      	movs	r1, #131	; 0x83
 8004a16:	f7ff fdd8 	bl	80045ca <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8004a1e:	2202      	movs	r2, #2
 8004a20:	2103      	movs	r1, #3
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff fdd1 	bl	80045ca <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8004a28:	2308      	movs	r3, #8
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	2182      	movs	r1, #130	; 0x82
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff fdcb 	bl	80045ca <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004a34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a38:	f006 fcee 	bl	800b418 <malloc>
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8004a42:	b320      	cbz	r0, 8004a8e <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a44:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a4c:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8004a4e:	2500      	movs	r5, #0
 8004a50:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8004a54:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a58:	b987      	cbnz	r7, 8004a7c <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8004a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004a62:	2103      	movs	r1, #3
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff fdf7 	bl	8004658 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8004a6e:	2340      	movs	r3, #64	; 0x40
 8004a70:	2202      	movs	r2, #2
 8004a72:	2183      	movs	r1, #131	; 0x83
 8004a74:	f7ff fda9 	bl	80045ca <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	e7d0      	b.n	8004a1e <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8004a7c:	2340      	movs	r3, #64	; 0x40
 8004a7e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004a82:	2103      	movs	r1, #3
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff fde7 	bl	8004658 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 8004a8e:	2001      	movs	r0, #1
}
 8004a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a94 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 8004a94:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004a96:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <CDC_Itf_DeInit+0xc>)
 8004a98:	f002 feac 	bl	80077f4 <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	bd08      	pop	{r3, pc}
 8004aa0:	200094e8 	.word	0x200094e8

08004aa4 <CDC_Itf_Init>:
{
 8004aa4:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 8004aa8:	4c18      	ldr	r4, [pc, #96]	; (8004b0c <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004aaa:	4e19      	ldr	r6, [pc, #100]	; (8004b10 <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004aac:	2500      	movs	r5, #0
 8004aae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004ab2:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004ab6:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004ab8:	230c      	movs	r3, #12
 8004aba:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8004abc:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8004abe:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004ac0:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004ac2:	f003 f945 	bl	8007d50 <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8004acc:	4c11      	ldr	r4, [pc, #68]	; (8004b14 <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004ace:	f002 feab 	bl	8007828 <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <CDC_Itf_Init+0x74>)
 8004ad4:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8004ad6:	f241 3387 	movw	r3, #4999	; 0x1387
 8004ada:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8004adc:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 8004ade:	2353      	movs	r3, #83	; 0x53
 8004ae0:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 8004ae2:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8004ae6:	f002 fe69 	bl	80077bc <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8004aea:	4620      	mov	r0, r4
 8004aec:	f002 fdf8 	bl	80076e0 <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 8004af2:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004af4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8004af8:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 8004afa:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004afe:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 8004b02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	40013800 	.word	0x40013800
 8004b0c:	200094e8 	.word	0x200094e8
 8004b10:	200095c1 	.word	0x200095c1
 8004b14:	2000a9c0 	.word	0x2000a9c0
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	20008738 	.word	0x20008738
 8004b20:	2000a1b4 	.word	0x2000a1b4

08004b24 <STORAGE_IsReady>:
{
 8004b24:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004b26:	f7fc fb2b 	bl	8001180 <BSP_SD_IsDetected>
 8004b2a:	4c0b      	ldr	r4, [pc, #44]	; (8004b58 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 8004b2c:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004b30:	b160      	cbz	r0, 8004b4c <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da03      	bge.n	8004b3e <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8004b36:	f7fc fbd3 	bl	80012e0 <BSP_SD_Init>
      prev_status = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 8004b3e:	f7fc fb39 	bl	80011b4 <BSP_SD_GetStatus>
 8004b42:	3000      	adds	r0, #0
 8004b44:	bf18      	it	ne
 8004b46:	2001      	movne	r0, #1
 8004b48:	4240      	negs	r0, r0
 8004b4a:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 8004b4c:	b90b      	cbnz	r3, 8004b52 <STORAGE_IsReady+0x2e>
    prev_status = -1;
 8004b4e:	23ff      	movs	r3, #255	; 0xff
 8004b50:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	200005d9 	.word	0x200005d9

08004b5c <CDC_Itf_Control>:
  switch (cmd)
 8004b5c:	2820      	cmp	r0, #32
{
 8004b5e:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 8004b60:	d003      	beq.n	8004b6a <CDC_Itf_Control+0xe>
 8004b62:	2821      	cmp	r0, #33	; 0x21
 8004b64:	d048      	beq.n	8004bf8 <CDC_Itf_Control+0x9c>
}
 8004b66:	2000      	movs	r0, #0
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004b6a:	4c2c      	ldr	r4, [pc, #176]	; (8004c1c <CDC_Itf_Control+0xc0>)
 8004b6c:	680b      	ldr	r3, [r1, #0]
 8004b6e:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004b70:	4d2b      	ldr	r5, [pc, #172]	; (8004c20 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 8004b72:	790b      	ldrb	r3, [r1, #4]
 8004b74:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 8004b76:	794b      	ldrb	r3, [r1, #5]
 8004b78:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004b7a:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 8004b7c:	798b      	ldrb	r3, [r1, #6]
 8004b7e:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004b80:	f002 fe38 	bl	80077f4 <HAL_UART_DeInit>
  switch (LineCoding.format)
 8004b84:	7923      	ldrb	r3, [r4, #4]
 8004b86:	4628      	mov	r0, r5
 8004b88:	b12b      	cbz	r3, 8004b96 <CDC_Itf_Control+0x3a>
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d001      	beq.n	8004b92 <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e001      	b.n	8004b96 <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8004b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 8004b96:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004b98:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 8004b9a:	2a01      	cmp	r2, #1
 8004b9c:	d020      	beq.n	8004be0 <CDC_Itf_Control+0x84>
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	d301      	bcc.n	8004ba8 <CDC_Itf_Control+0x4c>
 8004ba4:	2a02      	cmp	r2, #2
 8004ba6:	d01e      	beq.n	8004be6 <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 8004ba8:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8004baa:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 8004bac:	2a07      	cmp	r2, #7
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <CDC_Itf_Control+0x5c>
 8004bb4:	2a08      	cmp	r2, #8
 8004bb6:	d019      	beq.n	8004bec <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb8:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004bbe:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004bc4:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc6:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004bc8:	4815      	ldr	r0, [pc, #84]	; (8004c20 <CDC_Itf_Control+0xc4>)
 8004bca:	f003 f8c1 	bl	8007d50 <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <CDC_Itf_Control+0xc8>)
 8004bd0:	4915      	ldr	r1, [pc, #84]	; (8004c28 <CDC_Itf_Control+0xcc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4812      	ldr	r0, [pc, #72]	; (8004c20 <CDC_Itf_Control+0xc4>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4419      	add	r1, r3
 8004bda:	f002 fe25 	bl	8007828 <HAL_UART_Receive_IT>
 8004bde:	e7c2      	b.n	8004b66 <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8004be0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004be4:	e7e0      	b.n	8004ba8 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8004be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bea:	e7dd      	b.n	8004ba8 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8004bec:	6903      	ldr	r3, [r0, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0e2      	beq.n	8004bb8 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8004bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf6:	e7df      	b.n	8004bb8 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <CDC_Itf_Control+0xc0>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	0a12      	lsrs	r2, r2, #8
 8004c02:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8004c04:	885a      	ldrh	r2, [r3, #2]
 8004c06:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8004c08:	78da      	ldrb	r2, [r3, #3]
 8004c0a:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8004c0c:	791a      	ldrb	r2, [r3, #4]
 8004c0e:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8004c10:	795a      	ldrb	r2, [r3, #5]
 8004c12:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8004c14:	799b      	ldrb	r3, [r3, #6]
 8004c16:	718b      	strb	r3, [r1, #6]
    break;
 8004c18:	e7a5      	b.n	8004b66 <CDC_Itf_Control+0xa>
 8004c1a:	bf00      	nop
 8004c1c:	20000094 	.word	0x20000094
 8004c20:	200094e8 	.word	0x200094e8
 8004c24:	200005d4 	.word	0x200005d4
 8004c28:	200095c1 	.word	0x200095c1

08004c2c <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	2030      	movs	r0, #48	; 0x30
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	fa90 f0a0 	rbit	r0, r0
 8004c36:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8004c38:	fab0 f080 	clz	r0, r0
 8004c3c:	fa92 f2a2 	rbit	r2, r2
 8004c40:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8004c44:	fab2 f282 	clz	r2, r2
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	fa21 f000 	lsr.w	r0, r1, r0
 8004c50:	40d3      	lsrs	r3, r2
}
 8004c52:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004c56:	4770      	bx	lr
 8004c58:	40002800 	.word	0x40002800

08004c5c <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 8004c5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	fa90 f0a0 	rbit	r0, r0
 8004c68:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8004c6c:	fab0 f080 	clz	r0, r0
 8004c70:	fa92 f2a2 	rbit	r2, r2
 8004c74:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c80:	fa21 f000 	lsr.w	r0, r1, r0
 8004c84:	40d3      	lsrs	r3, r2
}
 8004c86:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40002800 	.word	0x40002800

08004c90 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8004c92:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	fa90 f0a0 	rbit	r0, r0
 8004c9c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8004ca0:	fab0 f080 	clz	r0, r0
 8004ca4:	fa92 f2a2 	rbit	r2, r2
 8004ca8:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8004cac:	fab2 f282 	clz	r2, r2
 8004cb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004cb4:	fa21 f000 	lsr.w	r0, r1, r0
 8004cb8:	40d3      	lsrs	r3, r2
}
 8004cba:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40002800 	.word	0x40002800

08004cc4 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 8004cc6:	2070      	movs	r0, #112	; 0x70
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	fa90 f0a0 	rbit	r0, r0
 8004cce:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8004cd0:	fab0 f080 	clz	r0, r0
 8004cd4:	fa92 f2a2 	rbit	r2, r2
 8004cd8:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8004cdc:	fab2 f282 	clz	r2, r2
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	fa21 f000 	lsr.w	r0, r1, r0
 8004ce8:	40d3      	lsrs	r3, r2
}
 8004cea:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004cee:	4770      	bx	lr
 8004cf0:	40002800 	.word	0x40002800

08004cf4 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 8004cf6:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	fa90 f0a0 	rbit	r0, r0
 8004d00:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8004d04:	fab0 f080 	clz	r0, r0
 8004d08:	fa92 f2a2 	rbit	r2, r2
 8004d0c:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8004d10:	fab2 f282 	clz	r2, r2
 8004d14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d18:	fa21 f000 	lsr.w	r0, r1, r0
 8004d1c:	40d3      	lsrs	r3, r2
}
 8004d1e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004d22:	4770      	bx	lr
 8004d24:	40002800 	.word	0x40002800

08004d28 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 8004d2a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	fa90 f0a0 	rbit	r0, r0
 8004d34:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8004d38:	fab0 f080 	clz	r0, r0
 8004d3c:	fa92 f2a2 	rbit	r2, r2
 8004d40:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8004d44:	fab2 f282 	clz	r2, r2
 8004d48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004d4c:	fa21 f000 	lsr.w	r0, r1, r0
 8004d50:	40d3      	lsrs	r3, r2
}
 8004d52:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004d56:	4770      	bx	lr
 8004d58:	40002800 	.word	0x40002800

08004d5c <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 8004d5c:	b119      	cbz	r1, 8004d66 <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8004d5e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8004d62:	2000      	movs	r0, #0
 8004d64:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004d66:	2002      	movs	r0, #2
}
 8004d68:	4770      	bx	lr

08004d6a <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004d6a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8004d6e:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004d70:	b172      	cbz	r2, 8004d90 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8004d72:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004d76:	2301      	movs	r3, #1
 8004d78:	b964      	cbnz	r4, 8004d94 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 8004d7a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8004d7e:	2183      	movs	r1, #131	; 0x83
 8004d80:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004d84:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004d88:	f7ff fc5f 	bl	800464a <USBD_LL_Transmit>
      return USBD_OK;
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004d90:	2002      	movs	r0, #2
 8004d92:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8004d94:	4618      	mov	r0, r3
}
 8004d96:	bd10      	pop	{r4, pc}

08004d98 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004d98:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8004d9c:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004d9e:	b162      	cbz	r2, 8004dba <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004da0:	7c04      	ldrb	r4, [r0, #16]
 8004da2:	b944      	cbnz	r4, 8004db6 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004da4:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8004da8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004dac:	2103      	movs	r1, #3
 8004dae:	f7ff fc53 	bl	8004658 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004db2:	2000      	movs	r0, #0
 8004db4:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004db6:	2340      	movs	r3, #64	; 0x40
 8004db8:	e7f6      	b.n	8004da8 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 8004dba:	2002      	movs	r0, #2
}
 8004dbc:	bd10      	pop	{r4, pc}
	...

08004dc0 <CDC_Itf_Receive>:
{
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 8004dc4:	4dc1      	ldr	r5, [pc, #772]	; (80050cc <CDC_Itf_Receive+0x30c>)
 8004dc6:	4cc2      	ldr	r4, [pc, #776]	; (80050d0 <CDC_Itf_Receive+0x310>)
 8004dc8:	2300      	movs	r3, #0
{
 8004dca:	b087      	sub	sp, #28
BuffLength=0;
 8004dcc:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 8004dce:	4602      	mov	r2, r0
 8004dd0:	680e      	ldr	r6, [r1, #0]
 8004dd2:	1a13      	subs	r3, r2, r0
 8004dd4:	429e      	cmp	r6, r3
 8004dd6:	f200 8089 	bhi.w	8004eec <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 8004dda:	7823      	ldrb	r3, [r4, #0]
 8004ddc:	2b67      	cmp	r3, #103	; 0x67
 8004dde:	f040 808c 	bne.w	8004efa <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004de2:	f894 c002 	ldrb.w	ip, [r4, #2]
 8004de6:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004de8:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004dec:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004dee:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004df0:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004df2:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004df6:	f8df b324 	ldr.w	fp, [pc, #804]	; 800511c <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004dfa:	4fb6      	ldr	r7, [pc, #728]	; (80050d4 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004dfc:	4eb6      	ldr	r6, [pc, #728]	; (80050d8 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004dfe:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8005120 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e02:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8005124 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004e06:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004e0a:	3b30      	subs	r3, #48	; 0x30
 8004e0c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004e10:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004e14:	79e3      	ldrb	r3, [r4, #7]
 8004e16:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004e1a:	3b30      	subs	r3, #48	; 0x30
 8004e1c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8004e20:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004e24:	7aa3      	ldrb	r3, [r4, #10]
 8004e26:	3b30      	subs	r3, #48	; 0x30
 8004e28:	3a30      	subs	r2, #48	; 0x30
 8004e2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004e32:	7ba2      	ldrb	r2, [r4, #14]
 8004e34:	3a30      	subs	r2, #48	; 0x30
 8004e36:	3930      	subs	r1, #48	; 0x30
 8004e38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e3c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e40:	7ca1      	ldrb	r1, [r4, #18]
 8004e42:	3930      	subs	r1, #48	; 0x30
 8004e44:	3830      	subs	r0, #48	; 0x30
 8004e46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e4a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004e4e:	7de0      	ldrb	r0, [r4, #23]
 8004e50:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8004e54:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8004e58:	3830      	subs	r0, #48	; 0x30
 8004e5a:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8004e5e:	f8df a294 	ldr.w	sl, [pc, #660]	; 80050f4 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004e62:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004e66:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004e6a:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004e6c:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e6e:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004e70:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004e72:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004e76:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004e7a:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004e7e:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e82:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004e86:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 8004e8a:	f8cd c004 	str.w	ip, [sp, #4]
 8004e8e:	f8cd e000 	str.w	lr, [sp]
 8004e92:	f7fd fc9f 	bl	80027d4 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8004e96:	f89a 2000 	ldrb.w	r2, [sl]
 8004e9a:	f89b 3000 	ldrb.w	r3, [fp]
 8004e9e:	9204      	str	r2, [sp, #16]
 8004ea0:	f899 2000 	ldrb.w	r2, [r9]
 8004ea4:	9203      	str	r2, [sp, #12]
 8004ea6:	f898 2000 	ldrb.w	r2, [r8]
 8004eaa:	9202      	str	r2, [sp, #8]
 8004eac:	783a      	ldrb	r2, [r7, #0]
 8004eae:	f8df b250 	ldr.w	fp, [pc, #592]	; 8005100 <CDC_Itf_Receive+0x340>
 8004eb2:	9201      	str	r2, [sp, #4]
 8004eb4:	7832      	ldrb	r2, [r6, #0]
 8004eb6:	9200      	str	r2, [sp, #0]
 8004eb8:	4988      	ldr	r1, [pc, #544]	; (80050dc <CDC_Itf_Receive+0x31c>)
 8004eba:	4a89      	ldr	r2, [pc, #548]	; (80050e0 <CDC_Itf_Receive+0x320>)
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	f006 fb8b 	bl	800b5d8 <siprintf>
 8004ec2:	4a88      	ldr	r2, [pc, #544]	; (80050e4 <CDC_Itf_Receive+0x324>)
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004ec8:	4887      	ldr	r0, [pc, #540]	; (80050e8 <CDC_Itf_Receive+0x328>)
 8004eca:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004ed4:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 8004ed8:	f7ff ff47 	bl	8004d6a <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8004edc:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8004ede:	4a83      	ldr	r2, [pc, #524]	; (80050ec <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8004ee0:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 8004ee6:	4a82      	ldr	r2, [pc, #520]	; (80050f0 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e011      	b.n	8004f10 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	f812 6b01 	ldrb.w	r6, [r2], #1
 8004ef2:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	e76a      	b.n	8004dd0 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 8004efa:	2b6f      	cmp	r3, #111	; 0x6f
 8004efc:	f04f 0600 	mov.w	r6, #0
 8004f00:	d114      	bne.n	8004f2c <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 8004f02:	f7fc fc37 	bl	8001774 <RED_LED_OFF>
GREEN_LED_OFF();
 8004f06:	f7fc fc36 	bl	8001776 <GREEN_LED_OFF>
BLUE_LED_OFF();
 8004f0a:	f7fc fc0f 	bl	800172c <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 8004f0e:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8004f10:	2300      	movs	r3, #0
 8004f12:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 8004f14:	496e      	ldr	r1, [pc, #440]	; (80050d0 <CDC_Itf_Receive+0x310>)
 8004f16:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	f040 8154 	bne.w	80051c6 <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 8004f1e:	4872      	ldr	r0, [pc, #456]	; (80050e8 <CDC_Itf_Receive+0x328>)
 8004f20:	f7ff ff3a 	bl	8004d98 <USBD_CDC_ReceivePacket>
}
 8004f24:	2000      	movs	r0, #0
 8004f26:	b007      	add	sp, #28
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 8004f2c:	2b42      	cmp	r3, #66	; 0x42
 8004f2e:	d102      	bne.n	8004f36 <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 8004f30:	f7fc fc30 	bl	8001794 <BLUE_LED_ONLY>
 8004f34:	e7eb      	b.n	8004f0e <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 8004f36:	2b62      	cmp	r3, #98	; 0x62
 8004f38:	d104      	bne.n	8004f44 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 8004f3a:	f7fc fbff 	bl	800173c <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 8004f3e:	2300      	movs	r3, #0
 8004f40:	7023      	strb	r3, [r4, #0]
 8004f42:	e7e5      	b.n	8004f10 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8004f44:	2b45      	cmp	r3, #69	; 0x45
 8004f46:	d102      	bne.n	8004f4e <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 8004f48:	f7fc fc06 	bl	8001758 <GREEN_LED_ONLY>
 8004f4c:	e7df      	b.n	8004f0e <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 8004f4e:	2b65      	cmp	r3, #101	; 0x65
 8004f50:	d0f3      	beq.n	8004f3a <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8004f52:	2b46      	cmp	r3, #70	; 0x46
 8004f54:	d102      	bne.n	8004f5c <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 8004f56:	f7fc fc0f 	bl	8001778 <RED_LED_ONLY>
 8004f5a:	e7d8      	b.n	8004f0e <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 8004f5c:	2b66      	cmp	r3, #102	; 0x66
 8004f5e:	d0ec      	beq.n	8004f3a <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8004f60:	2b6c      	cmp	r3, #108	; 0x6c
 8004f62:	d102      	bne.n	8004f6a <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8004f64:	f7fc fc40 	bl	80017e8 <ALL_LED_ON>
 8004f68:	e7e9      	b.n	8004f3e <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 8004f6a:	2b72      	cmp	r3, #114	; 0x72
 8004f6c:	f040 8086 	bne.w	800507c <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004f70:	f7ff feda 	bl	8004d28 <LL_RTC_TIME_GetHour.constprop.7>
 8004f74:	4606      	mov	r6, r0
 8004f76:	f7ff fed7 	bl	8004d28 <LL_RTC_TIME_GetHour.constprop.7>
 8004f7a:	f3c6 1303 	ubfx	r3, r6, #4, #4
 8004f7e:	f8df a19c 	ldr.w	sl, [pc, #412]	; 800511c <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004f82:	4e55      	ldr	r6, [pc, #340]	; (80050d8 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004f84:	f000 000f 	and.w	r0, r0, #15
 8004f88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f90:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004f94:	f7ff feae 	bl	8004cf4 <LL_RTC_TIME_GetMinute.constprop.6>
 8004f98:	4607      	mov	r7, r0
 8004f9a:	f7ff feab 	bl	8004cf4 <LL_RTC_TIME_GetMinute.constprop.6>
 8004f9e:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8004fa2:	f000 000f 	and.w	r0, r0, #15
 8004fa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004faa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004fae:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004fb0:	f7ff fe88 	bl	8004cc4 <LL_RTC_TIME_GetSecond.constprop.5>
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	f7ff fe85 	bl	8004cc4 <LL_RTC_TIME_GetSecond.constprop.5>
 8004fba:	f3c8 1303 	ubfx	r3, r8, #4, #4
 8004fbe:	4f45      	ldr	r7, [pc, #276]	; (80050d4 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8004fc0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8005124 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004fc4:	f000 000f 	and.w	r0, r0, #15
 8004fc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004fd0:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8004fd2:	f7ff fe43 	bl	8004c5c <LL_RTC_DATE_GetMonth.constprop.3>
 8004fd6:	4681      	mov	r9, r0
 8004fd8:	f7ff fe40 	bl	8004c5c <LL_RTC_DATE_GetMonth.constprop.3>
 8004fdc:	f3c9 1303 	ubfx	r3, r9, #4, #4
 8004fe0:	f000 000f 	and.w	r0, r0, #15
 8004fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fe8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004fec:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8004ff0:	f7ff fe1c 	bl	8004c2c <LL_RTC_DATE_GetDay.constprop.2>
 8004ff4:	4683      	mov	fp, r0
 8004ff6:	f7ff fe19 	bl	8004c2c <LL_RTC_DATE_GetDay.constprop.2>
 8004ffa:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8004ffe:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005120 <CDC_Itf_Receive+0x360>
 8005002:	f000 000f 	and.w	r0, r0, #15
 8005006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800500a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800500e:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8005012:	f7ff fe3d 	bl	8004c90 <LL_RTC_DATE_GetYear.constprop.4>
 8005016:	4683      	mov	fp, r0
 8005018:	f7ff fe3a 	bl	8004c90 <LL_RTC_DATE_GetYear.constprop.4>
 800501c:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8005020:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005024:	f000 000f 	and.w	r0, r0, #15
 8005028:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800502c:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800502e:	4932      	ldr	r1, [pc, #200]	; (80050f8 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8005030:	b2c0      	uxtb	r0, r0
 8005032:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 8005034:	4b31      	ldr	r3, [pc, #196]	; (80050fc <CDC_Itf_Receive+0x33c>)
 8005036:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 8005038:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800503a:	f89a 3000 	ldrb.w	r3, [sl]
 800503e:	9004      	str	r0, [sp, #16]
 8005040:	f899 2000 	ldrb.w	r2, [r9]
 8005044:	9203      	str	r2, [sp, #12]
 8005046:	f898 2000 	ldrb.w	r2, [r8]
 800504a:	9202      	str	r2, [sp, #8]
 800504c:	783a      	ldrb	r2, [r7, #0]
 800504e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005100 <CDC_Itf_Receive+0x340>
 8005052:	9201      	str	r2, [sp, #4]
 8005054:	7832      	ldrb	r2, [r6, #0]
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	4650      	mov	r0, sl
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <CDC_Itf_Receive+0x320>)
 800505c:	f006 fabc 	bl	800b5d8 <siprintf>
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <CDC_Itf_Receive+0x324>)
 8005062:	4603      	mov	r3, r0
 8005064:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005066:	4820      	ldr	r0, [pc, #128]	; (80050e8 <CDC_Itf_Receive+0x328>)
 8005068:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800506c:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 800506e:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 8005072:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8005076:	f7ff fe78 	bl	8004d6a <USBD_CDC_TransmitPacket>
 800507a:	e760      	b.n	8004f3e <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 800507c:	2b55      	cmp	r3, #85	; 0x55
 800507e:	d153      	bne.n	8005128 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8005080:	4e1f      	ldr	r6, [pc, #124]	; (8005100 <CDC_Itf_Receive+0x340>)
 8005082:	4920      	ldr	r1, [pc, #128]	; (8005104 <CDC_Itf_Receive+0x344>)
 8005084:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <CDC_Itf_Receive+0x320>)
 8005086:	4630      	mov	r0, r6
 8005088:	f006 faa6 	bl	800b5d8 <siprintf>
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <CDC_Itf_Receive+0x324>)
 800508e:	4603      	mov	r3, r0
 8005090:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005092:	4815      	ldr	r0, [pc, #84]	; (80050e8 <CDC_Itf_Receive+0x328>)
 8005094:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800509e:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 80050a2:	f7ff fe62 	bl	8004d6a <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 80050a6:	4911      	ldr	r1, [pc, #68]	; (80050ec <CDC_Itf_Receive+0x32c>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 80050ac:	4916      	ldr	r1, [pc, #88]	; (8005108 <CDC_Itf_Receive+0x348>)
 80050ae:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 80050b0:	4916      	ldr	r1, [pc, #88]	; (800510c <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 80050b2:	2300      	movs	r3, #0
	EnterReset_Create=0;
 80050b4:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 80050b6:	4916      	ldr	r1, [pc, #88]	; (8005110 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 80050b8:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 80050ba:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 80050bc:	490c      	ldr	r1, [pc, #48]	; (80050f0 <CDC_Itf_Receive+0x330>)
 80050be:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 80050c0:	4914      	ldr	r1, [pc, #80]	; (8005114 <CDC_Itf_Receive+0x354>)
 80050c2:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <CDC_Itf_Receive+0x358>)
 80050c6:	7013      	strb	r3, [r2, #0]
 80050c8:	e722      	b.n	8004f10 <CDC_Itf_Receive+0x150>
 80050ca:	bf00      	nop
 80050cc:	200094e4 	.word	0x200094e4
 80050d0:	2000a9fc 	.word	0x2000a9fc
 80050d4:	2000a9b4 	.word	0x2000a9b4
 80050d8:	2000a9b5 	.word	0x2000a9b5
 80050dc:	0800e276 	.word	0x0800e276
 80050e0:	0002c314 	.word	0x0002c314
 80050e4:	2000a9b6 	.word	0x2000a9b6
 80050e8:	20008738 	.word	0x20008738
 80050ec:	20009008 	.word	0x20009008
 80050f0:	20009558 	.word	0x20009558
 80050f4:	200095c0 	.word	0x200095c0
 80050f8:	0800e2b2 	.word	0x0800e2b2
 80050fc:	40002800 	.word	0x40002800
 8005100:	20009dcc 	.word	0x20009dcc
 8005104:	0800e2f7 	.word	0x0800e2f7
 8005108:	200094dc 	.word	0x200094dc
 800510c:	20009dc8 	.word	0x20009dc8
 8005110:	2000a9b8 	.word	0x2000a9b8
 8005114:	20008ae5 	.word	0x20008ae5
 8005118:	20008708 	.word	0x20008708
 800511c:	200094e0 	.word	0x200094e0
 8005120:	2000a9bc 	.word	0x2000a9bc
 8005124:	200094d8 	.word	0x200094d8
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 8005128:	2b5a      	cmp	r3, #90	; 0x5a
 800512a:	d118      	bne.n	800515e <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 800512c:	4e27      	ldr	r6, [pc, #156]	; (80051cc <CDC_Itf_Receive+0x40c>)
 800512e:	4a28      	ldr	r2, [pc, #160]	; (80051d0 <CDC_Itf_Receive+0x410>)
 8005130:	4928      	ldr	r1, [pc, #160]	; (80051d4 <CDC_Itf_Receive+0x414>)
 8005132:	4630      	mov	r0, r6
 8005134:	f006 fa50 	bl	800b5d8 <siprintf>
 8005138:	4a27      	ldr	r2, [pc, #156]	; (80051d8 <CDC_Itf_Receive+0x418>)
 800513a:	4603      	mov	r3, r0
 800513c:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800513e:	4827      	ldr	r0, [pc, #156]	; (80051dc <CDC_Itf_Receive+0x41c>)
 8005140:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800514a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800514e:	f7ff fe0c 	bl	8004d6a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8005152:	2300      	movs	r3, #0
 8005154:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <CDC_Itf_Receive+0x420>)
 8005158:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e6d8      	b.n	8004f10 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 800515e:	2b58      	cmp	r3, #88	; 0x58
 8005160:	d117      	bne.n	8005192 <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8005162:	4e1a      	ldr	r6, [pc, #104]	; (80051cc <CDC_Itf_Receive+0x40c>)
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <CDC_Itf_Receive+0x410>)
 8005166:	491f      	ldr	r1, [pc, #124]	; (80051e4 <CDC_Itf_Receive+0x424>)
 8005168:	4630      	mov	r0, r6
 800516a:	f006 fa35 	bl	800b5d8 <siprintf>
 800516e:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <CDC_Itf_Receive+0x418>)
 8005170:	4603      	mov	r3, r0
 8005172:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005174:	4819      	ldr	r0, [pc, #100]	; (80051dc <CDC_Itf_Receive+0x41c>)
 8005176:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005180:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8005184:	f7ff fdf1 	bl	8004d6a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8005188:	2300      	movs	r3, #0
 800518a:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 800518c:	2201      	movs	r2, #1
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <CDC_Itf_Receive+0x428>)
 8005190:	e7e3      	b.n	800515a <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 8005192:	2b59      	cmp	r3, #89	; 0x59
 8005194:	f47f aebc 	bne.w	8004f10 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 8005198:	4e0c      	ldr	r6, [pc, #48]	; (80051cc <CDC_Itf_Receive+0x40c>)
 800519a:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <CDC_Itf_Receive+0x410>)
 800519c:	4913      	ldr	r1, [pc, #76]	; (80051ec <CDC_Itf_Receive+0x42c>)
 800519e:	4630      	mov	r0, r6
 80051a0:	f006 fa1a 	bl	800b5d8 <siprintf>
 80051a4:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <CDC_Itf_Receive+0x418>)
 80051a6:	4603      	mov	r3, r0
 80051a8:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051aa:	480c      	ldr	r0, [pc, #48]	; (80051dc <CDC_Itf_Receive+0x41c>)
 80051ac:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 80051b6:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 80051ba:	f7ff fdd6 	bl	8004d6a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 80051be:	2300      	movs	r3, #0
 80051c0:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 80051c2:	4a0b      	ldr	r2, [pc, #44]	; (80051f0 <CDC_Itf_Receive+0x430>)
 80051c4:	e690      	b.n	8004ee8 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 80051c6:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80051c8:	3301      	adds	r3, #1
 80051ca:	e6a5      	b.n	8004f18 <CDC_Itf_Receive+0x158>
 80051cc:	20009dcc 	.word	0x20009dcc
 80051d0:	0002c314 	.word	0x0002c314
 80051d4:	0800e33c 	.word	0x0800e33c
 80051d8:	2000a9b6 	.word	0x2000a9b6
 80051dc:	20008738 	.word	0x20008738
 80051e0:	20009dc8 	.word	0x20009dc8
 80051e4:	0800e37a 	.word	0x0800e37a
 80051e8:	2000a9b8 	.word	0x2000a9b8
 80051ec:	0800e3c2 	.word	0x0800e3c2
 80051f0:	20017cf0 	.word	0x20017cf0

080051f4 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80051f4:	4805      	ldr	r0, [pc, #20]	; (800520c <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 80051f6:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80051f8:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80051fa:	4805      	ldr	r0, [pc, #20]	; (8005210 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 80051fc:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80051fe:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8005200:	4804      	ldr	r0, [pc, #16]	; (8005214 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 8005202:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 8005206:	6840      	ldr	r0, [r0, #4]
                BX      R0
 8005208:	4700      	bx	r0
 800520a:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 800520c:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8005210:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8005214:	1fff0000 	.word	0x1fff0000

08005218 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8005218:	4811      	ldr	r0, [pc, #68]	; (8005260 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 800521a:	4912      	ldr	r1, [pc, #72]	; (8005264 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 800521c:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 800521e:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 8005220:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 8005222:	f43f afe7 	beq.w	80051f4 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005226:	f8df d040 	ldr.w	sp, [pc, #64]	; 8005268 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800522a:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800522c:	e003      	b.n	8005236 <LoopCopyDataInit>

0800522e <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 8005230:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005232:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005234:	3104      	adds	r1, #4

08005236 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005236:	480e      	ldr	r0, [pc, #56]	; (8005270 <LoopForever+0x14>)
	ldr	r3, =_edata
 8005238:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <LoopForever+0x18>)
	adds	r2, r0, r1
 800523a:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800523c:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800523e:	d3f6      	bcc.n	800522e <CopyDataInit>
	ldr	r2, =_sbss
 8005240:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <LoopForever+0x1c>)
	b	LoopFillZerobss
 8005242:	e002      	b.n	800524a <LoopFillZerobss>

08005244 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005244:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005246:	f842 3b04 	str.w	r3, [r2], #4

0800524a <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <LoopForever+0x20>)
	cmp	r2, r3
 800524c:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800524e:	d3f9      	bcc.n	8005244 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005250:	f7fe ffda 	bl	8004208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005254:	f006 f8bc 	bl	800b3d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005258:	f7fc fcdc 	bl	8001c14 <main>

0800525c <LoopForever>:

LoopForever:
    b LoopForever
 800525c:	e7fe      	b.n	800525c <LoopForever>
 800525e:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8005260:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8005264:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005268:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800526c:	0800e8a0 	.word	0x0800e8a0
	ldr	r0, =_sdata
 8005270:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005274:	2000047c 	.word	0x2000047c
	ldr	r2, =_sbss
 8005278:	20000480 	.word	0x20000480
	ldr	r3, = _ebss
 800527c:	2000adec 	.word	0x2000adec

08005280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005280:	e7fe      	b.n	8005280 <ADC1_2_IRQHandler>
	...

08005284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005284:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <HAL_InitTick+0x24>)
{
 8005288:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005290:	fbb0 f0f3 	udiv	r0, r0, r3
 8005294:	f000 f892 	bl	80053bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8005298:	2200      	movs	r2, #0
 800529a:	4621      	mov	r1, r4
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	f000 f84c 	bl	800533c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80052a4:	2000      	movs	r0, #0
 80052a6:	bd10      	pop	{r4, pc}
 80052a8:	20000010 	.word	0x20000010

080052ac <HAL_Init>:
{
 80052ac:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ae:	2003      	movs	r0, #3
 80052b0:	f000 f832 	bl	8005318 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80052b4:	2000      	movs	r0, #0
 80052b6:	f7ff ffe5 	bl	8005284 <HAL_InitTick>
  HAL_MspInit();
 80052ba:	f7fe ff07 	bl	80040cc <HAL_MspInit>
}
 80052be:	2000      	movs	r0, #0
 80052c0:	bd08      	pop	{r3, pc}
	...

080052c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80052c4:	4a02      	ldr	r2, [pc, #8]	; (80052d0 <HAL_IncTick+0xc>)
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	2000ade4 	.word	0x2000ade4

080052d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80052d4:	4b01      	ldr	r3, [pc, #4]	; (80052dc <HAL_GetTick+0x8>)
 80052d6:	6818      	ldr	r0, [r3, #0]
}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	2000ade4 	.word	0x2000ade4

080052e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80052e4:	f7ff fff6 	bl	80052d4 <HAL_GetTick>
 80052e8:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80052ea:	f7ff fff3 	bl	80052d4 <HAL_GetTick>
 80052ee:	1b40      	subs	r0, r0, r5
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d3fa      	bcc.n	80052ea <HAL_Delay+0xa>
  {
  }
}
 80052f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080052f8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80052f8:	4a02      	ldr	r2, [pc, #8]	; (8005304 <HAL_SuspendTick+0xc>)
 80052fa:	6813      	ldr	r3, [r2, #0]
 80052fc:	f023 0302 	bic.w	r3, r3, #2
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4770      	bx	lr
 8005304:	e000e010 	.word	0xe000e010

08005308 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005308:	4a02      	ldr	r2, [pc, #8]	; (8005314 <HAL_ResumeTick+0xc>)
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4770      	bx	lr
 8005314:	e000e010 	.word	0xe000e010

08005318 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005318:	4a07      	ldr	r2, [pc, #28]	; (8005338 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800531a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800531c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005328:	0200      	lsls	r0, r0, #8
 800532a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8005332:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005334:	60d3      	str	r3, [r2, #12]
 8005336:	4770      	bx	lr
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800533e:	b530      	push	{r4, r5, lr}
 8005340:	68dc      	ldr	r4, [r3, #12]
 8005342:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005346:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800534c:	2b04      	cmp	r3, #4
 800534e:	bf28      	it	cs
 8005350:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005352:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005354:	f04f 0501 	mov.w	r5, #1
 8005358:	fa05 f303 	lsl.w	r3, r5, r3
 800535c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005360:	bf8c      	ite	hi
 8005362:	3c03      	subhi	r4, #3
 8005364:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005366:	4019      	ands	r1, r3
 8005368:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800536a:	fa05 f404 	lsl.w	r4, r5, r4
 800536e:	3c01      	subs	r4, #1
 8005370:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8005372:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	ea42 0201 	orr.w	r2, r2, r1
 8005378:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537c:	bfaf      	iteee	ge
 800537e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005382:	f000 000f 	andlt.w	r0, r0, #15
 8005386:	4b06      	ldrlt	r3, [pc, #24]	; (80053a0 <HAL_NVIC_SetPriority+0x64>)
 8005388:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538a:	bfa5      	ittet	ge
 800538c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8005390:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005392:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005394:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8005398:	bd30      	pop	{r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	e000ed00 	.word	0xe000ed00
 80053a0:	e000ed14 	.word	0xe000ed14

080053a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80053a4:	0942      	lsrs	r2, r0, #5
 80053a6:	2301      	movs	r3, #1
 80053a8:	f000 001f 	and.w	r0, r0, #31
 80053ac:	fa03 f000 	lsl.w	r0, r3, r0
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <HAL_NVIC_EnableIRQ+0x14>)
 80053b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100

080053bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053bc:	3801      	subs	r0, #1
 80053be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80053c2:	d20a      	bcs.n	80053da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	21f0      	movs	r1, #240	; 0xf0
 80053cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80053da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	e000e010 	.word	0xe000e010
 80053e4:	e000ed00 	.word	0xe000ed00

080053e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80053e8:	4770      	bx	lr

080053ea <HAL_SYSTICK_IRQHandler>:
{
 80053ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80053ec:	f7ff fffc 	bl	80053e8 <HAL_SYSTICK_Callback>
 80053f0:	bd08      	pop	{r3, pc}
	...

080053f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053f4:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d05b      	beq.n	80054b2 <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053fa:	6801      	ldr	r1, [r0, #0]
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <HAL_DMA_Init+0xc4>)
 80053fe:	4299      	cmp	r1, r3
 8005400:	f04f 0414 	mov.w	r4, #20
 8005404:	d841      	bhi.n	800548a <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005406:	4a2d      	ldr	r2, [pc, #180]	; (80054bc <HAL_DMA_Init+0xc8>)
 8005408:	440a      	add	r2, r1
 800540a:	fbb2 f2f4 	udiv	r2, r2, r4
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005412:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8005416:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005418:	2302      	movs	r3, #2
 800541a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800541e:	6884      	ldr	r4, [r0, #8]
 8005420:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005422:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005424:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8005426:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005428:	432b      	orrs	r3, r5
 800542a:	6945      	ldr	r5, [r0, #20]
 800542c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800542e:	6985      	ldr	r5, [r0, #24]
 8005430:	432b      	orrs	r3, r5
 8005432:	69c5      	ldr	r5, [r0, #28]
 8005434:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005436:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005438:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800543c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005440:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005442:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005444:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8005448:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800544a:	d011      	beq.n	8005470 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800544c:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <HAL_DMA_Init+0xcc>)
 800544e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005450:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005452:	429a      	cmp	r2, r3
 8005454:	f04f 030f 	mov.w	r3, #15
 8005458:	d11f      	bne.n	800549a <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800545a:	491a      	ldr	r1, [pc, #104]	; (80054c4 <HAL_DMA_Init+0xd0>)
 800545c:	680a      	ldr	r2, [r1, #0]
 800545e:	40a3      	lsls	r3, r4
 8005460:	ea22 0303 	bic.w	r3, r2, r3
 8005464:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8005466:	6842      	ldr	r2, [r0, #4]
 8005468:	680b      	ldr	r3, [r1, #0]
 800546a:	40a2      	lsls	r2, r4
 800546c:	431a      	orrs	r2, r3
 800546e:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005470:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005472:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005474:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8005476:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005478:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800547a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800547c:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 800547e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005482:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 8005486:	4618      	mov	r0, r3
 8005488:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <HAL_DMA_Init+0xd4>)
 800548c:	440b      	add	r3, r1
 800548e:	fbb3 f3f4 	udiv	r3, r3, r4
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_DMA_Init+0xd8>)
 8005498:	e7bd      	b.n	8005416 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800549a:	490d      	ldr	r1, [pc, #52]	; (80054d0 <HAL_DMA_Init+0xdc>)
 800549c:	680a      	ldr	r2, [r1, #0]
 800549e:	40a3      	lsls	r3, r4
 80054a0:	ea22 0303 	bic.w	r3, r2, r3
 80054a4:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80054a6:	6843      	ldr	r3, [r0, #4]
 80054a8:	680a      	ldr	r2, [r1, #0]
 80054aa:	40a3      	lsls	r3, r4
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	e7de      	b.n	8005470 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 80054b2:	2001      	movs	r0, #1
}
 80054b4:	bd30      	pop	{r4, r5, pc}
 80054b6:	bf00      	nop
 80054b8:	40020407 	.word	0x40020407
 80054bc:	bffdfff8 	.word	0xbffdfff8
 80054c0:	40020000 	.word	0x40020000
 80054c4:	400200a8 	.word	0x400200a8
 80054c8:	bffdfbf8 	.word	0xbffdfbf8
 80054cc:	40020400 	.word	0x40020400
 80054d0:	400204a8 	.word	0x400204a8

080054d4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054d4:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d034      	beq.n	8005544 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80054da:	6801      	ldr	r1, [r0, #0]
 80054dc:	680b      	ldr	r3, [r1, #0]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054e8:	4b17      	ldr	r3, [pc, #92]	; (8005548 <HAL_DMA_DeInit+0x74>)
 80054ea:	4299      	cmp	r1, r3
 80054ec:	f04f 0414 	mov.w	r4, #20
 80054f0:	d820      	bhi.n	8005534 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80054f2:	4a16      	ldr	r2, [pc, #88]	; (800554c <HAL_DMA_DeInit+0x78>)
 80054f4:	440a      	add	r2, r1
 80054f6:	fbb2 f2f4 	udiv	r2, r2, r4
 80054fa:	0092      	lsls	r2, r2, #2
 80054fc:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80054fe:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8005502:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005504:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005506:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005508:	2301      	movs	r3, #1
 800550a:	408b      	lsls	r3, r1
 800550c:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_DMA_DeInit+0x7c>)
 8005510:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8005512:	bf0c      	ite	eq
 8005514:	4c0f      	ldreq	r4, [pc, #60]	; (8005554 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8005516:	4c10      	ldrne	r4, [pc, #64]	; (8005558 <HAL_DMA_DeInit+0x84>)
 8005518:	230f      	movs	r3, #15
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	408b      	lsls	r3, r1
 800551e:	ea22 0303 	bic.w	r3, r2, r3
 8005522:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005524:	2300      	movs	r3, #0
 8005526:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005528:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 800552c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 8005530:	4618      	mov	r0, r3
 8005532:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_DMA_DeInit+0x88>)
 8005536:	440b      	add	r3, r1
 8005538:	fbb3 f3f4 	udiv	r3, r3, r4
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <HAL_DMA_DeInit+0x8c>)
 8005542:	e7de      	b.n	8005502 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8005544:	2001      	movs	r0, #1
}
 8005546:	bd10      	pop	{r4, pc}
 8005548:	40020407 	.word	0x40020407
 800554c:	bffdfff8 	.word	0xbffdfff8
 8005550:	40020000 	.word	0x40020000
 8005554:	400200a8 	.word	0x400200a8
 8005558:	400204a8 	.word	0x400204a8
 800555c:	bffdfbf8 	.word	0xbffdfbf8
 8005560:	40020400 	.word	0x40020400

08005564 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005564:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005566:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800556a:	2c01      	cmp	r4, #1
 800556c:	d036      	beq.n	80055dc <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800556e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8005572:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005574:	b2ed      	uxtb	r5, r5
 8005576:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8005578:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800557c:	f04f 0600 	mov.w	r6, #0
 8005580:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8005584:	d128      	bne.n	80055d8 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005586:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800558a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800558c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800558e:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005590:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8005592:	f026 0601 	bic.w	r6, r6, #1
 8005596:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005598:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800559a:	40bd      	lsls	r5, r7
 800559c:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800559e:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055a0:	6883      	ldr	r3, [r0, #8]
 80055a2:	6805      	ldr	r5, [r0, #0]
 80055a4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80055a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055a8:	bf0b      	itete	eq
 80055aa:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80055ac:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80055ae:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80055b0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80055b2:	b14b      	cbz	r3, 80055c8 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055ba:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c4:	2000      	movs	r0, #0
 80055c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	f023 0304 	bic.w	r3, r3, #4
 80055ce:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	f043 030a 	orr.w	r3, r3, #10
 80055d6:	e7f0      	b.n	80055ba <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80055d8:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80055dc:	2002      	movs	r0, #2
}
 80055de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055e0 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055e0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d003      	beq.n	80055f0 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055e8:	2304      	movs	r3, #4
 80055ea:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80055ec:	2001      	movs	r0, #1
 80055ee:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f0:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	f022 020e 	bic.w	r2, r2, #14
 80055fa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005604:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005606:	2201      	movs	r2, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 800560e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005610:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 8005614:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	4618      	mov	r0, r3
}
 800561a:	4770      	bx	lr

0800561c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800561c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800561e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8005620:	6803      	ldr	r3, [r0, #0]
{
 8005622:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005624:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005626:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005628:	2404      	movs	r4, #4
 800562a:	4094      	lsls	r4, r2
 800562c:	4226      	tst	r6, r4
 800562e:	d00e      	beq.n	800564e <HAL_DMA_IRQHandler+0x32>
 8005630:	f015 0f04 	tst.w	r5, #4
 8005634:	d00b      	beq.n	800564e <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800563a:	bf5e      	ittt	pl
 800563c:	681a      	ldrpl	r2, [r3, #0]
 800563e:	f022 0204 	bicpl.w	r2, r2, #4
 8005642:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8005644:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8005646:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8005648:	b373      	cbz	r3, 80056a8 <HAL_DMA_IRQHandler+0x8c>
}
 800564a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800564c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800564e:	2402      	movs	r4, #2
 8005650:	4094      	lsls	r4, r2
 8005652:	4226      	tst	r6, r4
 8005654:	d012      	beq.n	800567c <HAL_DMA_IRQHandler+0x60>
 8005656:	f015 0f02 	tst.w	r5, #2
 800565a:	d00f      	beq.n	800567c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	0695      	lsls	r5, r2, #26
 8005660:	d406      	bmi.n	8005670 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	f022 020a 	bic.w	r2, r2, #10
 8005668:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800566a:	2301      	movs	r3, #1
 800566c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005670:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8005672:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005674:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8005678:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800567a:	e7e5      	b.n	8005648 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800567c:	2408      	movs	r4, #8
 800567e:	4094      	lsls	r4, r2
 8005680:	4234      	tst	r4, r6
 8005682:	d011      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x8c>
 8005684:	072c      	lsls	r4, r5, #28
 8005686:	d50f      	bpl.n	80056a8 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005688:	681c      	ldr	r4, [r3, #0]
 800568a:	f024 040e 	bic.w	r4, r4, #14
 800568e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005690:	2301      	movs	r3, #1
 8005692:	fa03 f202 	lsl.w	r2, r3, r2
 8005696:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005698:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800569a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800569e:	2300      	movs	r3, #0
 80056a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80056a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056a6:	e7cf      	b.n	8005648 <HAL_DMA_IRQHandler+0x2c>
}
 80056a8:	bc70      	pop	{r4, r5, r6}
 80056aa:	4770      	bx	lr

080056ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80056b2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005860 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056b8:	4c67      	ldr	r4, [pc, #412]	; (8005858 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80056ba:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 80056bc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80056be:	9a01      	ldr	r2, [sp, #4]
 80056c0:	40da      	lsrs	r2, r3
 80056c2:	d102      	bne.n	80056ca <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80056c4:	b005      	add	sp, #20
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80056ca:	2601      	movs	r6, #1
    if(iocurrent)
 80056cc:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80056ce:	409e      	lsls	r6, r3
    if(iocurrent)
 80056d0:	ea12 0e06 	ands.w	lr, r2, r6
 80056d4:	f000 80b1 	beq.w	800583a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056d8:	684a      	ldr	r2, [r1, #4]
 80056da:	f022 0710 	bic.w	r7, r2, #16
 80056de:	2f02      	cmp	r7, #2
 80056e0:	d116      	bne.n	8005710 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80056e2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80056e6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056ea:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80056ee:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056f2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80056f6:	f04f 0c0f 	mov.w	ip, #15
 80056fa:	fa0c fc0a 	lsl.w	ip, ip, sl
 80056fe:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005702:	690d      	ldr	r5, [r1, #16]
 8005704:	fa05 f50a 	lsl.w	r5, r5, sl
 8005708:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800570c:	f8c9 5020 	str.w	r5, [r9, #32]
 8005710:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005714:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8005716:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800571a:	fa05 f50c 	lsl.w	r5, r5, ip
 800571e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005720:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005724:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005728:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800572c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800572e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005732:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8005734:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005738:	d811      	bhi.n	800575e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800573a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800573c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8005740:	68cf      	ldr	r7, [r1, #12]
 8005742:	fa07 f70c 	lsl.w	r7, r7, ip
 8005746:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800574a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800574c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800574e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005752:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8005756:	409f      	lsls	r7, r3
 8005758:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800575c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800575e:	f1ba 0f03 	cmp.w	sl, #3
 8005762:	d107      	bne.n	8005774 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8005764:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005766:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800576a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800576e:	409f      	lsls	r7, r3
 8005770:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8005772:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8005774:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8005776:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005778:	688e      	ldr	r6, [r1, #8]
 800577a:	fa06 f60c 	lsl.w	r6, r6, ip
 800577e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8005780:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005782:	00d5      	lsls	r5, r2, #3
 8005784:	d559      	bpl.n	800583a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005786:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800578a:	f045 0501 	orr.w	r5, r5, #1
 800578e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8005792:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8005796:	f023 0603 	bic.w	r6, r3, #3
 800579a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800579e:	f005 0501 	and.w	r5, r5, #1
 80057a2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80057a6:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057a8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ac:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80057ae:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80057b4:	270f      	movs	r7, #15
 80057b6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80057ba:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057be:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80057c2:	d03c      	beq.n	800583e <HAL_GPIO_Init+0x192>
 80057c4:	4d25      	ldr	r5, [pc, #148]	; (800585c <HAL_GPIO_Init+0x1b0>)
 80057c6:	42a8      	cmp	r0, r5
 80057c8:	d03b      	beq.n	8005842 <HAL_GPIO_Init+0x196>
 80057ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ce:	42a8      	cmp	r0, r5
 80057d0:	d039      	beq.n	8005846 <HAL_GPIO_Init+0x19a>
 80057d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057d6:	42a8      	cmp	r0, r5
 80057d8:	d037      	beq.n	800584a <HAL_GPIO_Init+0x19e>
 80057da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057de:	42a8      	cmp	r0, r5
 80057e0:	d035      	beq.n	800584e <HAL_GPIO_Init+0x1a2>
 80057e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057e6:	42a8      	cmp	r0, r5
 80057e8:	d033      	beq.n	8005852 <HAL_GPIO_Init+0x1a6>
 80057ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ee:	42a8      	cmp	r0, r5
 80057f0:	bf14      	ite	ne
 80057f2:	2507      	movne	r5, #7
 80057f4:	2506      	moveq	r5, #6
 80057f6:	fa05 f50c 	lsl.w	r5, r5, ip
 80057fa:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80057fc:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80057fe:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8005800:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005804:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8005806:	bf54      	ite	pl
 8005808:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800580a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800580e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8005810:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005812:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8005814:	bf54      	ite	pl
 8005816:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005818:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800581c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800581e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005820:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8005822:	bf54      	ite	pl
 8005824:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005826:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800582a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800582c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800582e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8005830:	bf54      	ite	pl
 8005832:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005834:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8005838:	60e5      	str	r5, [r4, #12]
    position++;
 800583a:	3301      	adds	r3, #1
 800583c:	e73f      	b.n	80056be <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800583e:	2500      	movs	r5, #0
 8005840:	e7d9      	b.n	80057f6 <HAL_GPIO_Init+0x14a>
 8005842:	2501      	movs	r5, #1
 8005844:	e7d7      	b.n	80057f6 <HAL_GPIO_Init+0x14a>
 8005846:	2502      	movs	r5, #2
 8005848:	e7d5      	b.n	80057f6 <HAL_GPIO_Init+0x14a>
 800584a:	2503      	movs	r5, #3
 800584c:	e7d3      	b.n	80057f6 <HAL_GPIO_Init+0x14a>
 800584e:	2504      	movs	r5, #4
 8005850:	e7d1      	b.n	80057f6 <HAL_GPIO_Init+0x14a>
 8005852:	2505      	movs	r5, #5
 8005854:	e7cf      	b.n	80057f6 <HAL_GPIO_Init+0x14a>
 8005856:	bf00      	nop
 8005858:	40010400 	.word	0x40010400
 800585c:	48000400 	.word	0x48000400
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005868:	4604      	mov	r4, r0
{
 800586a:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 800586c:	2800      	cmp	r0, #0
 800586e:	d07c      	beq.n	800596a <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8005870:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8005874:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005878:	b91b      	cbnz	r3, 8005882 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800587a:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800587e:	f7fe fdd7 	bl	8004430 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005882:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005884:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8005886:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800588a:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 800588e:	f002 fda6 	bl	80083de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8005892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005894:	466e      	mov	r6, sp
 8005896:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800589a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800589c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80058a0:	e886 0003 	stmia.w	r6, {r0, r1}
 80058a4:	f104 0804 	add.w	r8, r4, #4
 80058a8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	f002 fd7c 	bl	80083aa <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80058b2:	2100      	movs	r1, #0
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	f002 fd98 	bl	80083ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80058ba:	2200      	movs	r2, #0
 80058bc:	6860      	ldr	r0, [r4, #4]
 80058be:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80058c2:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80058c6:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80058c8:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80058ca:	4282      	cmp	r2, r0
 80058cc:	f103 031c 	add.w	r3, r3, #28
 80058d0:	d13b      	bne.n	800594a <HAL_PCD_Init+0xe6>
 80058d2:	2200      	movs	r2, #0
 80058d4:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80058d6:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80058d8:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 80058dc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 80058e0:	3201      	adds	r2, #1
 80058e2:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 80058e4:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80058e8:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 80058ec:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 80058f0:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 80058f4:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 80058f8:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 80058fc:	d1ec      	bne.n	80058d8 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80058fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005900:	466e      	mov	r6, sp
 8005902:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005906:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005908:	e895 0003 	ldmia.w	r5, {r0, r1}
 800590c:	e886 0003 	stmia.w	r6, {r0, r1}
 8005910:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	f002 fd7f 	bl	8008418 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 800591a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 800591c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8005920:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8005924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 800592a:	4620      	mov	r0, r4
 800592c:	f000 fcb3 	bl	8006296 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8005930:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005932:	2b01      	cmp	r3, #1
 8005934:	d102      	bne.n	800593c <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8005936:	4620      	mov	r0, r4
 8005938:	f000 fcc0 	bl	80062bc <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	f003 f84b 	bl	80089d8 <USB_DevDisconnect>
  return HAL_OK;
 8005942:	2000      	movs	r0, #0
}
 8005944:	b00a      	add	sp, #40	; 0x28
 8005946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 800594a:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800594e:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8005952:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8005956:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 800595a:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 800595e:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8005962:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005966:	3201      	adds	r2, #1
 8005968:	e7af      	b.n	80058ca <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 800596a:	2001      	movs	r0, #1
 800596c:	e7ea      	b.n	8005944 <HAL_PCD_Init+0xe0>

0800596e <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 800596e:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005972:	2b01      	cmp	r3, #1
{ 
 8005974:	b510      	push	{r4, lr}
 8005976:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005978:	d00c      	beq.n	8005994 <HAL_PCD_Start+0x26>
 800597a:	2301      	movs	r3, #1
 800597c:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8005980:	6800      	ldr	r0, [r0, #0]
 8005982:	f003 f81d 	bl	80089c0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	f002 fd23 	bl	80083d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 800598c:	2000      	movs	r0, #0
 800598e:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005992:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8005994:	2002      	movs	r0, #2
}
 8005996:	bd10      	pop	{r4, pc}

08005998 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8005998:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800599c:	2b01      	cmp	r3, #1
{ 
 800599e:	b510      	push	{r4, lr}
 80059a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80059a2:	d00f      	beq.n	80059c4 <HAL_PCD_Stop+0x2c>
 80059a4:	2301      	movs	r3, #1
 80059a6:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	f002 fd17 	bl	80083de <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	f002 ffd4 	bl	800895e <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	f003 f80e 	bl	80089d8 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80059bc:	2000      	movs	r0, #0
 80059be:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 80059c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80059c4:	2002      	movs	r0, #2
  return HAL_OK;
}
 80059c6:	bd10      	pop	{r4, pc}

080059c8 <HAL_PCD_DeInit>:
{
 80059c8:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 80059ca:	4604      	mov	r4, r0
 80059cc:	b158      	cbz	r0, 80059e6 <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80059ce:	2303      	movs	r3, #3
 80059d0:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 80059d4:	f7ff ffe0 	bl	8005998 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 80059d8:	4620      	mov	r0, r4
 80059da:	f7fe fd67 	bl	80044ac <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 80059de:	2000      	movs	r0, #0
 80059e0:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 80059e4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80059e6:	2001      	movs	r0, #1
}
 80059e8:	bd10      	pop	{r4, pc}
	...

080059ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f0:	6807      	ldr	r7, [r0, #0]
{
 80059f2:	b087      	sub	sp, #28
 80059f4:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80059f6:	4638      	mov	r0, r7
 80059f8:	f003 f828 	bl	8008a4c <USB_GetMode>
 80059fc:	9002      	str	r0, [sp, #8]
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f040 8155 	bne.w	8005cae <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	f002 fff3 	bl	80089f0 <USB_ReadInterrupts>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f000 814f 	beq.w	8005cae <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	f002 ffed 	bl	80089f0 <USB_ReadInterrupts>
 8005a16:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a18:	bf48      	it	mi
 8005a1a:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a1c:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a1e:	bf42      	ittt	mi
 8005a20:	6953      	ldrmi	r3, [r2, #20]
 8005a22:	f003 0302 	andmi.w	r3, r3, #2
 8005a26:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a28:	f002 ffe2 	bl	80089f0 <USB_ReadInterrupts>
 8005a2c:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8005a30:	d00c      	beq.n	8005a4c <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a32:	6820      	ldr	r0, [r4, #0]
 8005a34:	f002 ffe0 	bl	80089f8 <USB_ReadDevAllOutEpInterrupt>
 8005a38:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8005a40:	464e      	mov	r6, r9
      epnum = 0;
 8005a42:	2500      	movs	r5, #0
      while ( ep_intr )
 8005a44:	f1b8 0f00 	cmp.w	r8, #0
 8005a48:	f040 8134 	bne.w	8005cb4 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	f002 ffcf 	bl	80089f0 <USB_ReadInterrupts>
 8005a52:	0342      	lsls	r2, r0, #13
 8005a54:	d50b      	bpl.n	8005a6e <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a56:	6820      	ldr	r0, [r4, #0]
 8005a58:	f002 ffd6 	bl	8008a08 <USB_ReadDevAllInEpInterrupt>
 8005a5c:	4626      	mov	r6, r4
 8005a5e:	4683      	mov	fp, r0
 8005a60:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8005a64:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8005a66:	f1bb 0f00 	cmp.w	fp, #0
 8005a6a:	f040 81a1 	bne.w	8005db0 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	f002 ffbe 	bl	80089f0 <USB_ReadInterrupts>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	da15      	bge.n	8005aa4 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a78:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8005a84:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f040 822c 	bne.w	8005ee6 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8005a8e:	2100      	movs	r1, #0
 8005a90:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fc1b 	bl	80062d0 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	6953      	ldr	r3, [r2, #20]
 8005a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa2:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	f002 ffa3 	bl	80089f0 <USB_ReadInterrupts>
 8005aaa:	0503      	lsls	r3, r0, #20
 8005aac:	d50b      	bpl.n	8005ac6 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005aae:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005ab2:	07de      	lsls	r6, r3, #31
 8005ab4:	d502      	bpl.n	8005abc <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f7fe fd2c 	bl	8004514 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	6953      	ldr	r3, [r2, #20]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac4:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	f002 ff92 	bl	80089f0 <USB_ReadInterrupts>
 8005acc:	0100      	lsls	r0, r0, #4
 8005ace:	d514      	bpl.n	8005afa <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005ad8:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8005ada:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	f040 8205 	bne.w	8005eee <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8005ae6:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005ae8:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8005aec:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005af0:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fbeb 	bl	80062d0 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005afa:	6820      	ldr	r0, [r4, #0]
 8005afc:	f002 ff78 	bl	80089f0 <USB_ReadInterrupts>
 8005b00:	04c1      	lsls	r1, r0, #19
 8005b02:	d537      	bpl.n	8005b74 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005b04:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8005b08:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005b0a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005b12:	2100      	movs	r1, #0
 8005b14:	f002 fd18 	bl	8008548 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005b18:	6861      	ldr	r1, [r4, #4]
 8005b1a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8005b1e:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005b20:	9802      	ldr	r0, [sp, #8]
 8005b22:	4288      	cmp	r0, r1
 8005b24:	f040 81e7 	bne.w	8005ef6 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8005b2e:	69f3      	ldr	r3, [r6, #28]
 8005b30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b34:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8005b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 81e4 	beq.w	8005f06 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8005b3e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8005b42:	f043 030b 	orr.w	r3, r3, #11
 8005b46:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8005b4a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005b4c:	f043 030b 	orr.w	r3, r3, #11
 8005b50:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b52:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b56:	7c21      	ldrb	r1, [r4, #16]
 8005b58:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b5e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b62:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005b66:	f002 ff90 	bl	8008a8a <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	6953      	ldr	r3, [r2, #20]
 8005b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b72:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	f002 ff3b 	bl	80089f0 <USB_ReadInterrupts>
 8005b7a:	0482      	lsls	r2, r0, #18
 8005b7c:	d520      	bpl.n	8005bc0 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	f002 ff68 	bl	8008a54 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	68d3      	ldr	r3, [r2, #12]
 8005b88:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005b8c:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 8005b96:	f000 febb 	bl	8006910 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 8005b9a:	4b82      	ldr	r3, [pc, #520]	; (8005da4 <HAL_PCD_IRQHandler+0x3b8>)
 8005b9c:	4a82      	ldr	r2, [pc, #520]	; (8005da8 <HAL_PCD_IRQHandler+0x3bc>)
 8005b9e:	4403      	add	r3, r0
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	f200 81b8 	bhi.w	8005f18 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005bae:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7fe fca2 	bl	80044fa <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	6953      	ldr	r3, [r2, #20]
 8005bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bbe:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	f002 ff15 	bl	80089f0 <USB_ReadInterrupts>
 8005bc6:	06c3      	lsls	r3, r0, #27
 8005bc8:	d52b      	bpl.n	8005c22 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	6993      	ldr	r3, [r2, #24]
 8005bce:	f023 0310 	bic.w	r3, r3, #16
 8005bd2:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8005bd4:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005bd6:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8005bda:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005bdc:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005be0:	f040 81ea 	bne.w	8005fb8 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8005be4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005be8:	421e      	tst	r6, r3
 8005bea:	d015      	beq.n	8005c18 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8005bec:	f04f 081c 	mov.w	r8, #28
 8005bf0:	fb08 4809 	mla	r8, r8, r9, r4
 8005bf4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f002 fe65 	bl	80088ce <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c04:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8005c08:	4433      	add	r3, r6
 8005c0a:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c0e:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8005c12:	441e      	add	r6, r3
 8005c14:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	6993      	ldr	r3, [r2, #24]
 8005c1c:	f043 0310 	orr.w	r3, r3, #16
 8005c20:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	f002 fee4 	bl	80089f0 <USB_ReadInterrupts>
 8005c28:	0707      	lsls	r7, r0, #28
 8005c2a:	d507      	bpl.n	8005c3c <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7fe fc60 	bl	80044f2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	6953      	ldr	r3, [r2, #20]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	f002 fed7 	bl	80089f0 <USB_ReadInterrupts>
 8005c42:	02c6      	lsls	r6, r0, #11
 8005c44:	d508      	bpl.n	8005c58 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8005c46:	b2e9      	uxtb	r1, r5
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7fe fc6f 	bl	800452c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c4e:	6822      	ldr	r2, [r4, #0]
 8005c50:	6953      	ldr	r3, [r2, #20]
 8005c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c56:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	f002 fec9 	bl	80089f0 <USB_ReadInterrupts>
 8005c5e:	0280      	lsls	r0, r0, #10
 8005c60:	d508      	bpl.n	8005c74 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8005c62:	b2e9      	uxtb	r1, r5
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7fe fc5d 	bl	8004524 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	6953      	ldr	r3, [r2, #20]
 8005c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c72:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	f002 febb 	bl	80089f0 <USB_ReadInterrupts>
 8005c7a:	0041      	lsls	r1, r0, #1
 8005c7c:	d507      	bpl.n	8005c8e <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f7fe fc58 	bl	8004534 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	6953      	ldr	r3, [r2, #20]
 8005c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c8c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c8e:	6820      	ldr	r0, [r4, #0]
 8005c90:	f002 feae 	bl	80089f0 <USB_ReadInterrupts>
 8005c94:	0742      	lsls	r2, r0, #29
 8005c96:	d50a      	bpl.n	8005cae <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c9c:	076b      	lsls	r3, r5, #29
 8005c9e:	d502      	bpl.n	8005ca6 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7fe fc4b 	bl	800453c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4315      	orrs	r5, r2
 8005cac:	605d      	str	r5, [r3, #4]
    }
  }
}
 8005cae:	b007      	add	sp, #28
 8005cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8005cb4:	f018 0f01 	tst.w	r8, #1
 8005cb8:	d049      	beq.n	8005d4e <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005cba:	b2ea      	uxtb	r2, r5
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	9203      	str	r2, [sp, #12]
 8005cc2:	f002 fea9 	bl	8008a18 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005cc6:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005cca:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ccc:	d032      	beq.n	8005d34 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005cce:	2101      	movs	r1, #1
 8005cd0:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8005cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd4:	4b35      	ldr	r3, [pc, #212]	; (8005dac <HAL_PCD_IRQHandler+0x3c0>)
 8005cd6:	9a03      	ldr	r2, [sp, #12]
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d13f      	bne.n	8005d5c <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8005cdc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8005ce0:	0409      	lsls	r1, r1, #16
 8005ce2:	d41f      	bmi.n	8005d24 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8005ce4:	6921      	ldr	r1, [r4, #16]
 8005ce6:	2901      	cmp	r1, #1
 8005ce8:	d10c      	bne.n	8005d04 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cea:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005cec:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cf0:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005cf4:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8005cf6:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8005cfa:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005cfe:	4408      	add	r0, r1
 8005d00:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005d04:	4611      	mov	r1, r2
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7fe fbe2 	bl	80044d0 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005d0c:	6921      	ldr	r1, [r4, #16]
 8005d0e:	2901      	cmp	r1, #1
 8005d10:	d108      	bne.n	8005d24 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005d12:	b93d      	cbnz	r5, 8005d24 <HAL_PCD_IRQHandler+0x338>
 8005d14:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005d18:	b922      	cbnz	r2, 8005d24 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005d1a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	f002 feb3 	bl	8008a8a <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8005d24:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d2c:	f042 0220 	orr.w	r2, r2, #32
 8005d30:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d34:	f01a 0f08 	tst.w	sl, #8
 8005d38:	d004      	beq.n	8005d44 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7fe fbc2 	bl	80044c4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d40:	2308      	movs	r3, #8
 8005d42:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d44:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d48:	bf1c      	itt	ne
 8005d4a:	2310      	movne	r3, #16
 8005d4c:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8005d4e:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8005d50:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8005d54:	3620      	adds	r6, #32
 8005d56:	f10b 0b1c 	add.w	fp, fp, #28
 8005d5a:	e673      	b.n	8005a44 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8005d5c:	6921      	ldr	r1, [r4, #16]
 8005d5e:	2901      	cmp	r1, #1
 8005d60:	d10c      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d62:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005d64:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d68:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005d6c:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 8005d6e:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8005d72:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005d76:	4408      	add	r0, r1
 8005d78:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f7fe fba6 	bl	80044d0 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005d84:	6921      	ldr	r1, [r4, #16]
 8005d86:	2901      	cmp	r1, #1
 8005d88:	d1d4      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	d1d2      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x348>
 8005d8e:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	d1ce      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005d96:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	f002 fe75 	bl	8008a8a <USB_EP0_OutStart>
 8005da0:	e7c8      	b.n	8005d34 <HAL_PCD_IRQHandler+0x348>
 8005da2:	bf00      	nop
 8005da4:	ff275340 	.word	0xff275340
 8005da8:	000c34ff 	.word	0x000c34ff
 8005dac:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8005db0:	f01b 0f01 	tst.w	fp, #1
 8005db4:	d074      	beq.n	8005ea0 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005db6:	fa5f fa85 	uxtb.w	sl, r5
 8005dba:	4651      	mov	r1, sl
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	f002 fe35 	bl	8008a2c <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005dc2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005dc6:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005dc8:	d020      	beq.n	8005e0c <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dca:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8005dce:	2101      	movs	r1, #1
 8005dd0:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dd2:	ea23 0301 	bic.w	r3, r3, r1
 8005dd6:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8005de4:	bf01      	itttt	eq
 8005de6:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8005de8:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8005dea:	189b      	addeq	r3, r3, r2
 8005dec:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8005dee:	4651      	mov	r1, sl
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7fe fb76 	bl	80044e2 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8005df6:	6921      	ldr	r1, [r4, #16]
 8005df8:	2901      	cmp	r1, #1
 8005dfa:	d107      	bne.n	8005e0c <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8005dfc:	b935      	cbnz	r5, 8005e0c <HAL_PCD_IRQHandler+0x420>
 8005dfe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e00:	b923      	cbnz	r3, 8005e0c <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005e02:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	f002 fe3f 	bl	8008a8a <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e0c:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e10:	bf1c      	itt	ne
 8005e12:	2308      	movne	r3, #8
 8005e14:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e18:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e1c:	bf1c      	itt	ne
 8005e1e:	2310      	movne	r3, #16
 8005e20:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e24:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e28:	bf1c      	itt	ne
 8005e2a:	2340      	movne	r3, #64	; 0x40
 8005e2c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e30:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e34:	bf1c      	itt	ne
 8005e36:	2302      	movne	r3, #2
 8005e38:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e3c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8005e40:	d02e      	beq.n	8005ea0 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8005e46:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005e48:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8005e4a:	eba3 0802 	sub.w	r8, r3, r2
 8005e4e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005e50:	4598      	cmp	r8, r3
 8005e52:	bf28      	it	cs
 8005e54:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8005e56:	f108 0303 	add.w	r3, r8, #3
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e60:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8005e62:	9b03      	ldr	r3, [sp, #12]
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8005e6c:	9305      	str	r3, [sp, #20]
 8005e6e:	9b05      	ldr	r3, [sp, #20]
 8005e70:	9a04      	ldr	r2, [sp, #16]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d904      	bls.n	8005e84 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005e7a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005e7c:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d900      	bls.n	8005e84 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005e82:	b9a3      	cbnz	r3, 8005eae <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8005e84:	f1b8 0f00 	cmp.w	r8, #0
 8005e88:	dc0a      	bgt.n	8005ea0 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e8a:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8005e8c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e8e:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8005e92:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8005e96:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e98:	ea23 0302 	bic.w	r3, r3, r2
 8005e9c:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8005ea0:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8005ea2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8005ea6:	361c      	adds	r6, #28
 8005ea8:	f109 0920 	add.w	r9, r9, #32
 8005eac:	e5db      	b.n	8005a66 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 8005eae:	eba3 0802 	sub.w	r8, r3, r2
 8005eb2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005eb4:	9803      	ldr	r0, [sp, #12]
 8005eb6:	4598      	cmp	r8, r3
 8005eb8:	bf28      	it	cs
 8005eba:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	f108 0303 	add.w	r3, r8, #3
 8005ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec6:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005ec8:	7c23      	ldrb	r3, [r4, #16]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4652      	mov	r2, sl
 8005ece:	fa1f f388 	uxth.w	r3, r8
 8005ed2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8005ed4:	f002 fcea 	bl	80088ac <USB_WritePacket>
    ep->xfer_buff  += len;
 8005ed8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005eda:	4443      	add	r3, r8
 8005edc:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8005ede:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005ee0:	4443      	add	r3, r8
 8005ee2:	6573      	str	r3, [r6, #84]	; 0x54
 8005ee4:	e7c3      	b.n	8005e6e <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7fe fb18 	bl	800451c <HAL_PCD_ResumeCallback>
 8005eec:	e5d5      	b.n	8005a9a <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7fe fb10 	bl	8004514 <HAL_PCD_SuspendCallback>
 8005ef4:	e601      	b.n	8005afa <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005ef6:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8005ef8:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005efa:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8005efc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005f00:	9002      	str	r0, [sp, #8]
 8005f02:	3320      	adds	r3, #32
 8005f04:	e60c      	b.n	8005b20 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8005f06:	6973      	ldr	r3, [r6, #20]
 8005f08:	f043 030b 	orr.w	r3, r3, #11
 8005f0c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8005f0e:	6933      	ldr	r3, [r6, #16]
 8005f10:	f043 030b 	orr.w	r3, r3, #11
 8005f14:	6133      	str	r3, [r6, #16]
 8005f16:	e61c      	b.n	8005b52 <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8005f18:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <HAL_PCD_IRQHandler+0x5ec>)
 8005f1a:	4930      	ldr	r1, [pc, #192]	; (8005fdc <HAL_PCD_IRQHandler+0x5f0>)
 8005f1c:	4402      	add	r2, r0
 8005f1e:	428a      	cmp	r2, r1
 8005f20:	d803      	bhi.n	8005f2a <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8005f28:	e641      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8005f2a:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8005f2e:	492c      	ldr	r1, [pc, #176]	; (8005fe0 <HAL_PCD_IRQHandler+0x5f4>)
 8005f30:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8005f34:	428a      	cmp	r2, r1
 8005f36:	d803      	bhi.n	8005f40 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8005f3e:	e636      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8005f40:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8005f44:	4927      	ldr	r1, [pc, #156]	; (8005fe4 <HAL_PCD_IRQHandler+0x5f8>)
 8005f46:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8005f4a:	428a      	cmp	r2, r1
 8005f4c:	d803      	bhi.n	8005f56 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005f54:	e62b      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8005f56:	4a24      	ldr	r2, [pc, #144]	; (8005fe8 <HAL_PCD_IRQHandler+0x5fc>)
 8005f58:	4924      	ldr	r1, [pc, #144]	; (8005fec <HAL_PCD_IRQHandler+0x600>)
 8005f5a:	4402      	add	r2, r0
 8005f5c:	428a      	cmp	r2, r1
 8005f5e:	d803      	bhi.n	8005f68 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8005f66:	e622      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8005f68:	4a21      	ldr	r2, [pc, #132]	; (8005ff0 <HAL_PCD_IRQHandler+0x604>)
 8005f6a:	4922      	ldr	r1, [pc, #136]	; (8005ff4 <HAL_PCD_IRQHandler+0x608>)
 8005f6c:	4402      	add	r2, r0
 8005f6e:	428a      	cmp	r2, r1
 8005f70:	d803      	bhi.n	8005f7a <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8005f78:	e619      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8005f7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ff8 <HAL_PCD_IRQHandler+0x60c>)
 8005f7c:	491f      	ldr	r1, [pc, #124]	; (8005ffc <HAL_PCD_IRQHandler+0x610>)
 8005f7e:	4402      	add	r2, r0
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d803      	bhi.n	8005f8c <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8005f8a:	e610      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8005f8c:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8005f90:	491b      	ldr	r1, [pc, #108]	; (8006000 <HAL_PCD_IRQHandler+0x614>)
 8005f92:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8005f96:	428a      	cmp	r2, r1
 8005f98:	d803      	bhi.n	8005fa2 <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa0:	e605      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_PCD_IRQHandler+0x618>)
 8005fa4:	4918      	ldr	r1, [pc, #96]	; (8006008 <HAL_PCD_IRQHandler+0x61c>)
 8005fa6:	4402      	add	r2, r0
 8005fa8:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	bf94      	ite	ls
 8005fae:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005fb2:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8005fb6:	e5fa      	b.n	8005bae <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	f47f ae2d 	bne.w	8005c18 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8005fc4:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fc6:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8005fca:	f002 fc80 	bl	80088ce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fce:	fb08 4809 	mla	r8, r8, r9, r4
 8005fd2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005fd6:	e61a      	b.n	8005c0e <HAL_PCD_IRQHandler+0x222>
 8005fd8:	ff1b1e40 	.word	0xff1b1e40
 8005fdc:	000f423f 	.word	0x000f423f
 8005fe0:	00124f7f 	.word	0x00124f7f
 8005fe4:	0013d61f 	.word	0x0013d61f
 8005fe8:	fee5b660 	.word	0xfee5b660
 8005fec:	0016e35f 	.word	0x0016e35f
 8005ff0:	feced300 	.word	0xfeced300
 8005ff4:	001b773f 	.word	0x001b773f
 8005ff8:	feb35bc0 	.word	0xfeb35bc0
 8005ffc:	002191bf 	.word	0x002191bf
 8006000:	0038751f 	.word	0x0038751f
 8006004:	fe5954e0 	.word	0xfe5954e0
 8006008:	00419cdf 	.word	0x00419cdf

0800600c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 800600c:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8006010:	2a01      	cmp	r2, #1
{
 8006012:	b510      	push	{r4, lr}
 8006014:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8006016:	d00b      	beq.n	8006030 <HAL_PCD_SetAddress+0x24>
 8006018:	2201      	movs	r2, #1
 800601a:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 800601e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	f002 fcbc 	bl	80089a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8006028:	2000      	movs	r0, #0
 800602a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800602e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8006030:	2002      	movs	r0, #2
}
 8006032:	bd10      	pop	{r4, pc}

08006034 <HAL_PCD_EP_Open>:
{
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8006038:	b248      	sxtb	r0, r1
 800603a:	2800      	cmp	r0, #0
 800603c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8006040:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006044:	bfb5      	itete	lt
 8006046:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800604a:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800604e:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006050:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8006054:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8006056:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8006058:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 800605a:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 800605c:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8006060:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 8006062:	2b01      	cmp	r3, #1
 8006064:	d009      	beq.n	800607a <HAL_PCD_EP_Open+0x46>
 8006066:	2301      	movs	r3, #1
 8006068:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	f002 fa94 	bl	800859a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006072:	2000      	movs	r0, #0
 8006074:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8006078:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800607a:	2002      	movs	r0, #2
}
 800607c:	bd70      	pop	{r4, r5, r6, pc}

0800607e <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 800607e:	b24b      	sxtb	r3, r1
 8006080:	2b00      	cmp	r3, #0
{  
 8006082:	b510      	push	{r4, lr}
 8006084:	f04f 021c 	mov.w	r2, #28
 8006088:	4604      	mov	r4, r0
 800608a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800608e:	bfb5      	itete	lt
 8006090:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006094:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006098:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800609a:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 800609e:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80060a0:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80060a2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80060a4:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d009      	beq.n	80060c0 <HAL_PCD_EP_Close+0x42>
 80060ac:	2301      	movs	r3, #1
 80060ae:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80060b2:	6820      	ldr	r0, [r4, #0]
 80060b4:	f002 fab0 	bl	8008618 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80060b8:	2000      	movs	r0, #0
 80060ba:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80060be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80060c0:	2002      	movs	r0, #2
}
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <HAL_PCD_EP_Receive>:
{
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4604      	mov	r4, r0
 80060c8:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80060cc:	201c      	movs	r0, #28
 80060ce:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 80060d2:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 80060dc:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 80060e0:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 80060e4:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 80060e8:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 80060ea:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 80060ee:	d011      	beq.n	8006114 <HAL_PCD_EP_Receive+0x50>
 80060f0:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80060f2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80060f4:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80060f6:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 80060fa:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80060fe:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8006100:	b92e      	cbnz	r6, 800610e <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8006102:	f002 fb6f 	bl	80087e4 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8006106:	2000      	movs	r0, #0
 8006108:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800610c:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800610e:	f002 fab1 	bl	8008674 <USB_EPStartXfer>
 8006112:	e7f8      	b.n	8006106 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 8006114:	2002      	movs	r0, #2
}
 8006116:	bd70      	pop	{r4, r5, r6, pc}

08006118 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8006118:	231c      	movs	r3, #28
 800611a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800611e:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006122:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 8006126:	4770      	bx	lr

08006128 <HAL_PCD_EP_Transmit>:
{
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8006130:	201c      	movs	r0, #28
 8006132:	fb00 4506 	mla	r5, r0, r6, r4
 8006136:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8006138:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 800613a:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 800613e:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 8006146:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8006148:	429a      	cmp	r2, r3
  ep->is_in = 1;
 800614a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 800614e:	d010      	beq.n	8006172 <HAL_PCD_EP_Transmit+0x4a>
 8006150:	6922      	ldr	r2, [r4, #16]
 8006152:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006156:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 800615e:	b92e      	cbnz	r6, 800616c <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8006160:	f002 fb40 	bl	80087e4 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8006164:	2000      	movs	r0, #0
 8006166:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800616a:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 800616c:	f002 fa82 	bl	8008674 <USB_EPStartXfer>
 8006170:	e7f8      	b.n	8006164 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 8006172:	2002      	movs	r0, #2
}
 8006174:	bd70      	pop	{r4, r5, r6, pc}

08006176 <HAL_PCD_EP_SetStall>:
{
 8006176:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8006178:	b24b      	sxtb	r3, r1
 800617a:	2b00      	cmp	r3, #0
 800617c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006180:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006184:	bfb5      	itete	lt
 8006186:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800618a:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800618e:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8006190:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8006194:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8006196:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8006198:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 800619a:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800619c:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800619e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80061a0:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80061a4:	4293      	cmp	r3, r2
{
 80061a6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80061a8:	d00f      	beq.n	80061ca <HAL_PCD_EP_SetStall+0x54>
 80061aa:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	f002 fb9d 	bl	80088ee <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80061b4:	b92d      	cbnz	r5, 80061c2 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061b6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80061ba:	7c21      	ldrb	r1, [r4, #16]
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	f002 fc64 	bl	8008a8a <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80061c2:	2000      	movs	r0, #0
 80061c4:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80061ca:	2002      	movs	r0, #2
}
 80061cc:	bd38      	pop	{r3, r4, r5, pc}

080061ce <HAL_PCD_EP_ClrStall>:
{
 80061ce:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80061d0:	b24b      	sxtb	r3, r1
 80061d2:	2b00      	cmp	r3, #0
{
 80061d4:	4605      	mov	r5, r0
 80061d6:	f04f 021c 	mov.w	r2, #28
 80061da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80061de:	bfb5      	itete	lt
 80061e0:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80061e4:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80061e8:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80061ea:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80061ee:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80061f0:	2400      	movs	r4, #0
 80061f2:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80061f4:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80061f6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80061f8:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d009      	beq.n	8006214 <HAL_PCD_EP_ClrStall+0x46>
 8006200:	2301      	movs	r3, #1
 8006202:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 8006206:	6828      	ldr	r0, [r5, #0]
 8006208:	f002 fb90 	bl	800892c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800620c:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 8006210:	4620      	mov	r0, r4
 8006212:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8006214:	2002      	movs	r0, #2
}
 8006216:	bd38      	pop	{r3, r4, r5, pc}

08006218 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8006218:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800621c:	2b01      	cmp	r3, #1
{
 800621e:	b510      	push	{r4, lr}
 8006220:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8006222:	d011      	beq.n	8006248 <HAL_PCD_EP_Flush+0x30>
 8006224:	2301      	movs	r3, #1
 8006226:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 800622a:	060b      	lsls	r3, r1, #24
 800622c:	d508      	bpl.n	8006240 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 800622e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006232:	6800      	ldr	r0, [r0, #0]
 8006234:	f002 f988 	bl	8008548 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8006238:	2000      	movs	r0, #0
 800623a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800623e:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8006240:	6800      	ldr	r0, [r0, #0]
 8006242:	f002 f993 	bl	800856c <USB_FlushRxFifo>
 8006246:	e7f7      	b.n	8006238 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8006248:	2002      	movs	r0, #2
}
 800624a:	bd10      	pop	{r4, pc}

0800624c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800624c:	6800      	ldr	r0, [r0, #0]
{
 800624e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006250:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8006252:	b921      	cbnz	r1, 800625e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8006254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006258:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 800625a:	2000      	movs	r0, #0
 800625c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800625e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 8006260:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006262:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 8006266:	1e4e      	subs	r6, r1, #1
 8006268:	b2ec      	uxtb	r4, r5
 800626a:	42b4      	cmp	r4, r6
 800626c:	f105 0501 	add.w	r5, r5, #1
 8006270:	db06      	blt.n	8006280 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 8006272:	313f      	adds	r1, #63	; 0x3f
 8006274:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800627c:	6043      	str	r3, [r0, #4]
 800627e:	e7ec      	b.n	800625a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 8006280:	3440      	adds	r4, #64	; 0x40
 8006282:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006286:	6864      	ldr	r4, [r4, #4]
 8006288:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800628c:	e7ec      	b.n	8006268 <HAL_PCDEx_SetTxFiFo+0x1c>

0800628e <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800628e:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8006290:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8006292:	6259      	str	r1, [r3, #36]	; 0x24
}
 8006294:	4770      	bx	lr

08006296 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8006296:	6802      	ldr	r2, [r0, #0]
{
 8006298:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 800629a:	2101      	movs	r1, #1
 800629c:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 80062a0:	2000      	movs	r0, #0
 80062a2:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80062a6:	6993      	ldr	r3, [r2, #24]
 80062a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062ac:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b4:	f043 0303 	orr.w	r3, r3, #3
 80062b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 80062ba:	4770      	bx	lr

080062bc <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80062bc:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 80062be:	2301      	movs	r3, #1
 80062c0:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80062c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80062c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ca:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 80062cc:	2000      	movs	r0, #0
 80062ce:	4770      	bx	lr

080062d0 <HAL_PCDEx_LPM_Callback>:
 80062d0:	4770      	bx	lr
	...

080062d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062d4:	4b02      	ldr	r3, [pc, #8]	; (80062e0 <HAL_PWREx_GetVoltageRange+0xc>)
 80062d6:	6818      	ldr	r0, [r3, #0]
}
 80062d8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40007000 	.word	0x40007000

080062e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062e6:	4d1e      	ldr	r5, [pc, #120]	; (8006360 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80062e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80062ea:	00da      	lsls	r2, r3, #3
{
 80062ec:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062ee:	d518      	bpl.n	8006322 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062f0:	f7ff fff0 	bl	80062d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80062f8:	d123      	bne.n	8006342 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062fa:	2c80      	cmp	r4, #128	; 0x80
 80062fc:	d929      	bls.n	8006352 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062fe:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006300:	bf8c      	ite	hi
 8006302:	2002      	movhi	r0, #2
 8006304:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	4303      	orrs	r3, r0
 8006310:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006312:	6813      	ldr	r3, [r2, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8006318:	1a18      	subs	r0, r3, r0
 800631a:	bf18      	it	ne
 800631c:	2001      	movne	r0, #1
 800631e:	b003      	add	sp, #12
 8006320:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8006322:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006328:	65ab      	str	r3, [r5, #88]	; 0x58
 800632a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8006334:	f7ff ffce 	bl	80062d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8006338:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800633a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800633e:	65ab      	str	r3, [r5, #88]	; 0x58
 8006340:	e7d8      	b.n	80062f4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8006342:	2c80      	cmp	r4, #128	; 0x80
 8006344:	d807      	bhi.n	8006356 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8006346:	d008      	beq.n	800635a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8006348:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800634c:	4258      	negs	r0, r3
 800634e:	4158      	adcs	r0, r3
 8006350:	e7d9      	b.n	8006306 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006352:	2000      	movs	r0, #0
 8006354:	e7d7      	b.n	8006306 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8006356:	2003      	movs	r0, #3
 8006358:	e7d5      	b.n	8006306 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800635a:	2002      	movs	r0, #2
 800635c:	e7d3      	b.n	8006306 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800635e:	bf00      	nop
 8006360:	40021000 	.word	0x40021000
 8006364:	40022000 	.word	0x40022000

08006368 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006368:	4b46      	ldr	r3, [pc, #280]	; (8006484 <HAL_RCC_GetSysClockFreq+0x11c>)
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	f012 0f0c 	tst.w	r2, #12
{
 8006370:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006372:	d009      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800637a:	2a0c      	cmp	r2, #12
 800637c:	d148      	bne.n	8006410 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	f002 0203 	and.w	r2, r2, #3
 8006384:	2a01      	cmp	r2, #1
 8006386:	d143      	bne.n	8006410 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	0712      	lsls	r2, r2, #28
 800638c:	d437      	bmi.n	80063fe <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800638e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006392:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006396:	fa91 f1a1 	rbit	r1, r1
 800639a:	fab1 f181 	clz	r1, r1
 800639e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80063a2:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 80063a4:	4938      	ldr	r1, [pc, #224]	; (8006488 <HAL_RCC_GetSysClockFreq+0x120>)
 80063a6:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80063aa:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 80063ac:	f012 0f0c 	tst.w	r2, #12
 80063b0:	bf0c      	ite	eq
 80063b2:	4620      	moveq	r0, r4
 80063b4:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	f002 020c 	and.w	r2, r2, #12
 80063bc:	2a0c      	cmp	r2, #12
 80063be:	d154      	bne.n	800646a <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063c0:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80063c2:	68d8      	ldr	r0, [r3, #12]
 80063c4:	2170      	movs	r1, #112	; 0x70
 80063c6:	fa91 f1a1 	rbit	r1, r1
 80063ca:	fab1 f181 	clz	r1, r1
 80063ce:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80063d2:	40c8      	lsrs	r0, r1
 80063d4:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063d6:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 80063da:	2802      	cmp	r0, #2
 80063dc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80063e0:	d028      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0xcc>
 80063e2:	2803      	cmp	r0, #3
 80063e4:	d042      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80063e6:	68d8      	ldr	r0, [r3, #12]
 80063e8:	fa92 f2a2 	rbit	r2, r2
 80063ec:	fab2 f282 	clz	r2, r2
 80063f0:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80063f4:	40d0      	lsrs	r0, r2
 80063f6:	fbb4 f1f1 	udiv	r1, r4, r1
 80063fa:	4348      	muls	r0, r1
      break;
 80063fc:	e027      	b.n	800644e <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	21f0      	movs	r1, #240	; 0xf0
 8006402:	fa91 f1a1 	rbit	r1, r1
 8006406:	fab1 f181 	clz	r1, r1
 800640a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800640e:	e7c8      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	f002 020c 	and.w	r2, r2, #12
 8006416:	2a04      	cmp	r2, #4
 8006418:	d007      	beq.n	800642a <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	f002 020c 	and.w	r2, r2, #12
 8006420:	2a08      	cmp	r2, #8
 8006422:	d104      	bne.n	800642e <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8006424:	4819      	ldr	r0, [pc, #100]	; (800648c <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8006426:	2400      	movs	r4, #0
 8006428:	e7c5      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800642a:	4819      	ldr	r0, [pc, #100]	; (8006490 <HAL_RCC_GetSysClockFreq+0x128>)
 800642c:	e7fb      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 800642e:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8006430:	4604      	mov	r4, r0
 8006432:	e7c0      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006434:	68d8      	ldr	r0, [r3, #12]
 8006436:	fa92 f2a2 	rbit	r2, r2
 800643a:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800643e:	fab2 f282 	clz	r2, r2
 8006442:	fa20 f202 	lsr.w	r2, r0, r2
 8006446:	4812      	ldr	r0, [pc, #72]	; (8006490 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006448:	fbb0 f0f1 	udiv	r0, r0, r1
 800644c:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006454:	fa92 f2a2 	rbit	r2, r2
 8006458:	fab2 f282 	clz	r2, r2
 800645c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006460:	40d3      	lsrs	r3, r2
 8006462:	3301      	adds	r3, #1
 8006464:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006466:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800646a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800646c:	68d8      	ldr	r0, [r3, #12]
 800646e:	fa92 f2a2 	rbit	r2, r2
 8006472:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8006476:	fab2 f282 	clz	r2, r2
 800647a:	fa20 f202 	lsr.w	r2, r0, r2
 800647e:	4803      	ldr	r0, [pc, #12]	; (800648c <HAL_RCC_GetSysClockFreq+0x124>)
 8006480:	e7e2      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0xe0>
 8006482:	bf00      	nop
 8006484:	40021000 	.word	0x40021000
 8006488:	0800e1c8 	.word	0x0800e1c8
 800648c:	007a1200 	.word	0x007a1200
 8006490:	00f42400 	.word	0x00f42400

08006494 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006494:	6803      	ldr	r3, [r0, #0]
{
 8006496:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800649a:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800649c:	06d8      	lsls	r0, r3, #27
 800649e:	d541      	bpl.n	8006524 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80064a0:	4ca5      	ldr	r4, [pc, #660]	; (8006738 <HAL_RCC_OscConfig+0x2a4>)
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	f013 0f0c 	tst.w	r3, #12
 80064a8:	d166      	bne.n	8006578 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	0799      	lsls	r1, r3, #30
 80064ae:	d505      	bpl.n	80064bc <HAL_RCC_OscConfig+0x28>
 80064b0:	69ab      	ldr	r3, [r5, #24]
 80064b2:	b91b      	cbnz	r3, 80064bc <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80064b4:	2001      	movs	r0, #1
}
 80064b6:	b002      	add	sp, #8
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	6a28      	ldr	r0, [r5, #32]
 80064c0:	071a      	lsls	r2, r3, #28
 80064c2:	bf56      	itet	pl
 80064c4:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80064c8:	6823      	ldrmi	r3, [r4, #0]
 80064ca:	091b      	lsrpl	r3, r3, #4
 80064cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d0:	4283      	cmp	r3, r0
 80064d2:	d23c      	bcs.n	800654e <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064d4:	f7ff ff06 	bl	80062e4 <RCC_SetFlashLatencyFromMSIRange>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1eb      	bne.n	80064b4 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	f043 0308 	orr.w	r3, r3, #8
 80064e2:	6023      	str	r3, [r4, #0]
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	6a2a      	ldr	r2, [r5, #32]
 80064e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ec:	4313      	orrs	r3, r2
 80064ee:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	69ea      	ldr	r2, [r5, #28]
 80064f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80064fc:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80064fe:	f7ff ff33 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	22f0      	movs	r2, #240	; 0xf0
 8006506:	fa92 f2a2 	rbit	r2, r2
 800650a:	fab2 f282 	clz	r2, r2
 800650e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006512:	40d3      	lsrs	r3, r2
 8006514:	4a89      	ldr	r2, [pc, #548]	; (800673c <HAL_RCC_OscConfig+0x2a8>)
 8006516:	5cd3      	ldrb	r3, [r2, r3]
 8006518:	40d8      	lsrs	r0, r3
 800651a:	4b89      	ldr	r3, [pc, #548]	; (8006740 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800651e:	2000      	movs	r0, #0
 8006520:	f7fe feb0 	bl	8005284 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	07de      	lsls	r6, r3, #31
 8006528:	d45b      	bmi.n	80065e2 <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	079c      	lsls	r4, r3, #30
 800652e:	f100 80a3 	bmi.w	8006678 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	0719      	lsls	r1, r3, #28
 8006536:	f100 80e7 	bmi.w	8006708 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	075a      	lsls	r2, r3, #29
 800653e:	f100 8115 	bmi.w	800676c <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006542:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006544:	2a00      	cmp	r2, #0
 8006546:	f040 817c 	bne.w	8006842 <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 800654a:	2000      	movs	r0, #0
 800654c:	e7b3      	b.n	80064b6 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f043 0308 	orr.w	r3, r3, #8
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800655c:	4303      	orrs	r3, r0
 800655e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	69ea      	ldr	r2, [r5, #28]
 8006564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800656c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800656e:	f7ff feb9 	bl	80062e4 <RCC_SetFlashLatencyFromMSIRange>
 8006572:	2800      	cmp	r0, #0
 8006574:	d0c3      	beq.n	80064fe <HAL_RCC_OscConfig+0x6a>
 8006576:	e79d      	b.n	80064b4 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006578:	69ab      	ldr	r3, [r5, #24]
 800657a:	b313      	cbz	r3, 80065c2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006584:	f7fe fea6 	bl	80052d4 <HAL_GetTick>
 8006588:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	079b      	lsls	r3, r3, #30
 800658e:	d511      	bpl.n	80065b4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	6a2a      	ldr	r2, [r5, #32]
 800659c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a0:	4313      	orrs	r3, r2
 80065a2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	69ea      	ldr	r2, [r5, #28]
 80065a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	e7b7      	b.n	8006524 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065b4:	f7fe fe8e 	bl	80052d4 <HAL_GetTick>
 80065b8:	1b80      	subs	r0, r0, r6
 80065ba:	2802      	cmp	r0, #2
 80065bc:	d9e5      	bls.n	800658a <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 80065be:	2003      	movs	r0, #3
 80065c0:	e779      	b.n	80064b6 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80065ca:	f7fe fe83 	bl	80052d4 <HAL_GetTick>
 80065ce:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	079f      	lsls	r7, r3, #30
 80065d4:	d5a6      	bpl.n	8006524 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065d6:	f7fe fe7d 	bl	80052d4 <HAL_GetTick>
 80065da:	1b80      	subs	r0, r0, r6
 80065dc:	2802      	cmp	r0, #2
 80065de:	d9f7      	bls.n	80065d0 <HAL_RCC_OscConfig+0x13c>
 80065e0:	e7ed      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80065e2:	4c55      	ldr	r4, [pc, #340]	; (8006738 <HAL_RCC_OscConfig+0x2a4>)
 80065e4:	68a3      	ldr	r3, [r4, #8]
 80065e6:	f003 030c 	and.w	r3, r3, #12
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d009      	beq.n	8006602 <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065ee:	68a3      	ldr	r3, [r4, #8]
 80065f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d10b      	bne.n	8006610 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065f8:	68e3      	ldr	r3, [r4, #12]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d106      	bne.n	8006610 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	0398      	lsls	r0, r3, #14
 8006606:	d590      	bpl.n	800652a <HAL_RCC_OscConfig+0x96>
 8006608:	686b      	ldr	r3, [r5, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d18d      	bne.n	800652a <HAL_RCC_OscConfig+0x96>
 800660e:	e751      	b.n	80064b4 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006610:	686b      	ldr	r3, [r5, #4]
 8006612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006616:	d110      	bne.n	800663a <HAL_RCC_OscConfig+0x1a6>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006620:	f7fe fe58 	bl	80052d4 <HAL_GetTick>
 8006624:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	0399      	lsls	r1, r3, #14
 800662a:	f53f af7e 	bmi.w	800652a <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662e:	f7fe fe51 	bl	80052d4 <HAL_GetTick>
 8006632:	1b80      	subs	r0, r0, r6
 8006634:	2864      	cmp	r0, #100	; 0x64
 8006636:	d9f6      	bls.n	8006626 <HAL_RCC_OscConfig+0x192>
 8006638:	e7c1      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800663a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800663e:	d104      	bne.n	800664a <HAL_RCC_OscConfig+0x1b6>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	e7e6      	b.n	8006618 <HAL_RCC_OscConfig+0x184>
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006650:	6022      	str	r2, [r4, #0]
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006658:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e0      	bne.n	8006620 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 800665e:	f7fe fe39 	bl	80052d4 <HAL_GetTick>
 8006662:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	039a      	lsls	r2, r3, #14
 8006668:	f57f af5f 	bpl.w	800652a <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fe fe32 	bl	80052d4 <HAL_GetTick>
 8006670:	1b80      	subs	r0, r0, r6
 8006672:	2864      	cmp	r0, #100	; 0x64
 8006674:	d9f6      	bls.n	8006664 <HAL_RCC_OscConfig+0x1d0>
 8006676:	e7a2      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8006678:	4c2f      	ldr	r4, [pc, #188]	; (8006738 <HAL_RCC_OscConfig+0x2a4>)
 800667a:	68a3      	ldr	r3, [r4, #8]
 800667c:	f003 030c 	and.w	r3, r3, #12
 8006680:	2b04      	cmp	r3, #4
 8006682:	d009      	beq.n	8006698 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006684:	68a3      	ldr	r3, [r4, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d119      	bne.n	80066c2 <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d114      	bne.n	80066c2 <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	055b      	lsls	r3, r3, #21
 800669c:	d503      	bpl.n	80066a6 <HAL_RCC_OscConfig+0x212>
 800669e:	68eb      	ldr	r3, [r5, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f43f af07 	beq.w	80064b4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a6:	6861      	ldr	r1, [r4, #4]
 80066a8:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80066ac:	fa93 f3a3 	rbit	r3, r3
 80066b0:	fab3 f283 	clz	r2, r3
 80066b4:	692b      	ldr	r3, [r5, #16]
 80066b6:	4093      	lsls	r3, r2
 80066b8:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 80066bc:	4313      	orrs	r3, r2
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	e737      	b.n	8006532 <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066c2:	68eb      	ldr	r3, [r5, #12]
 80066c4:	b17b      	cbz	r3, 80066e6 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80066ce:	f7fe fe01 	bl	80052d4 <HAL_GetTick>
 80066d2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	055f      	lsls	r7, r3, #21
 80066d8:	d4e5      	bmi.n	80066a6 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066da:	f7fe fdfb 	bl	80052d4 <HAL_GetTick>
 80066de:	1b80      	subs	r0, r0, r6
 80066e0:	2802      	cmp	r0, #2
 80066e2:	d9f7      	bls.n	80066d4 <HAL_RCC_OscConfig+0x240>
 80066e4:	e76b      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80066ee:	f7fe fdf1 	bl	80052d4 <HAL_GetTick>
 80066f2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	0558      	lsls	r0, r3, #21
 80066f8:	f57f af1b 	bpl.w	8006532 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fc:	f7fe fdea 	bl	80052d4 <HAL_GetTick>
 8006700:	1b80      	subs	r0, r0, r6
 8006702:	2802      	cmp	r0, #2
 8006704:	d9f6      	bls.n	80066f4 <HAL_RCC_OscConfig+0x260>
 8006706:	e75a      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006708:	696b      	ldr	r3, [r5, #20]
 800670a:	4c0b      	ldr	r4, [pc, #44]	; (8006738 <HAL_RCC_OscConfig+0x2a4>)
 800670c:	b1d3      	cbz	r3, 8006744 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 800670e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800671a:	f7fe fddb 	bl	80052d4 <HAL_GetTick>
 800671e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8006720:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006724:	079b      	lsls	r3, r3, #30
 8006726:	f53f af08 	bmi.w	800653a <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800672a:	f7fe fdd3 	bl	80052d4 <HAL_GetTick>
 800672e:	1b80      	subs	r0, r0, r6
 8006730:	2802      	cmp	r0, #2
 8006732:	d9f5      	bls.n	8006720 <HAL_RCC_OscConfig+0x28c>
 8006734:	e743      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000
 800673c:	0800e1ad 	.word	0x0800e1ad
 8006740:	20000010 	.word	0x20000010
      __HAL_RCC_LSI_DISABLE();
 8006744:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006750:	f7fe fdc0 	bl	80052d4 <HAL_GetTick>
 8006754:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8006756:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800675a:	079f      	lsls	r7, r3, #30
 800675c:	f57f aeed 	bpl.w	800653a <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006760:	f7fe fdb8 	bl	80052d4 <HAL_GetTick>
 8006764:	1b80      	subs	r0, r0, r6
 8006766:	2802      	cmp	r0, #2
 8006768:	d9f5      	bls.n	8006756 <HAL_RCC_OscConfig+0x2c2>
 800676a:	e728      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800676c:	4c66      	ldr	r4, [pc, #408]	; (8006908 <HAL_RCC_OscConfig+0x474>)
 800676e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006770:	00de      	lsls	r6, r3, #3
 8006772:	d427      	bmi.n	80067c4 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006774:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677a:	65a3      	str	r3, [r4, #88]	; 0x58
 800677c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800677e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006786:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006788:	4e60      	ldr	r6, [pc, #384]	; (800690c <HAL_RCC_OscConfig+0x478>)
 800678a:	6833      	ldr	r3, [r6, #0]
 800678c:	05d8      	lsls	r0, r3, #23
 800678e:	d51b      	bpl.n	80067c8 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006790:	68ab      	ldr	r3, [r5, #8]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d129      	bne.n	80067ea <HAL_RCC_OscConfig+0x356>
 8006796:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80067a2:	f7fe fd97 	bl	80052d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80067aa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80067ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80067b0:	079a      	lsls	r2, r3, #30
 80067b2:	d540      	bpl.n	8006836 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80067b4:	2f00      	cmp	r7, #0
 80067b6:	f43f aec4 	beq.w	8006542 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80067c2:	e6be      	b.n	8006542 <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 80067c4:	2700      	movs	r7, #0
 80067c6:	e7df      	b.n	8006788 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c8:	6833      	ldr	r3, [r6, #0]
 80067ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80067d0:	f7fe fd80 	bl	80052d4 <HAL_GetTick>
 80067d4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d6:	6833      	ldr	r3, [r6, #0]
 80067d8:	05d9      	lsls	r1, r3, #23
 80067da:	d4d9      	bmi.n	8006790 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067dc:	f7fe fd7a 	bl	80052d4 <HAL_GetTick>
 80067e0:	eba0 0008 	sub.w	r0, r0, r8
 80067e4:	2802      	cmp	r0, #2
 80067e6:	d9f6      	bls.n	80067d6 <HAL_RCC_OscConfig+0x342>
 80067e8:	e6e9      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	d106      	bne.n	80067fc <HAL_RCC_OscConfig+0x368>
 80067ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80067f2:	f043 0304 	orr.w	r3, r3, #4
 80067f6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80067fa:	e7cc      	b.n	8006796 <HAL_RCC_OscConfig+0x302>
 80067fc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006808:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800680c:	f022 0204 	bic.w	r2, r2, #4
 8006810:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1c4      	bne.n	80067a2 <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8006818:	f7fe fd5c 	bl	80052d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006820:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8006822:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006826:	079b      	lsls	r3, r3, #30
 8006828:	d5c4      	bpl.n	80067b4 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7fe fd53 	bl	80052d4 <HAL_GetTick>
 800682e:	1b80      	subs	r0, r0, r6
 8006830:	4540      	cmp	r0, r8
 8006832:	d9f6      	bls.n	8006822 <HAL_RCC_OscConfig+0x38e>
 8006834:	e6c3      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fe fd4d 	bl	80052d4 <HAL_GetTick>
 800683a:	1b80      	subs	r0, r0, r6
 800683c:	4540      	cmp	r0, r8
 800683e:	d9b5      	bls.n	80067ac <HAL_RCC_OscConfig+0x318>
 8006840:	e6bd      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006842:	4c31      	ldr	r4, [pc, #196]	; (8006908 <HAL_RCC_OscConfig+0x474>)
 8006844:	68a3      	ldr	r3, [r4, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b0c      	cmp	r3, #12
 800684c:	f43f ae32 	beq.w	80064b4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8006850:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006852:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006858:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800685a:	d137      	bne.n	80068cc <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 800685c:	f7fe fd3a 	bl	80052d4 <HAL_GetTick>
 8006860:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	019f      	lsls	r7, r3, #6
 8006866:	d42b      	bmi.n	80068c0 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006868:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800686a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800686c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006870:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006872:	3a01      	subs	r2, #1
 8006874:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006878:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800687a:	0912      	lsrs	r2, r2, #4
 800687c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006880:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006882:	0852      	lsrs	r2, r2, #1
 8006884:	3a01      	subs	r2, #1
 8006886:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800688a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800688c:	0852      	lsrs	r2, r2, #1
 800688e:	3a01      	subs	r2, #1
 8006890:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006894:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800689c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068a4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80068a6:	f7fe fd15 	bl	80052d4 <HAL_GetTick>
 80068aa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	0198      	lsls	r0, r3, #6
 80068b0:	f53f ae4b 	bmi.w	800654a <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fe fd0e 	bl	80052d4 <HAL_GetTick>
 80068b8:	1b40      	subs	r0, r0, r5
 80068ba:	2802      	cmp	r0, #2
 80068bc:	d9f6      	bls.n	80068ac <HAL_RCC_OscConfig+0x418>
 80068be:	e67e      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fe fd08 	bl	80052d4 <HAL_GetTick>
 80068c4:	1b80      	subs	r0, r0, r6
 80068c6:	2802      	cmp	r0, #2
 80068c8:	d9cb      	bls.n	8006862 <HAL_RCC_OscConfig+0x3ce>
 80068ca:	e678      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	0119      	lsls	r1, r3, #4
 80068d0:	d406      	bmi.n	80068e0 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80068d2:	6823      	ldr	r3, [r4, #0]
           && 
 80068d4:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80068d6:	bf5e      	ittt	pl
 80068d8:	68e3      	ldrpl	r3, [r4, #12]
 80068da:	f023 0303 	bicpl.w	r3, r3, #3
 80068de:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80068e0:	68e3      	ldr	r3, [r4, #12]
 80068e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80068e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ea:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80068ec:	f7fe fcf2 	bl	80052d4 <HAL_GetTick>
 80068f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	019b      	lsls	r3, r3, #6
 80068f6:	f57f ae28 	bpl.w	800654a <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fa:	f7fe fceb 	bl	80052d4 <HAL_GetTick>
 80068fe:	1b40      	subs	r0, r0, r5
 8006900:	2802      	cmp	r0, #2
 8006902:	d9f6      	bls.n	80068f2 <HAL_RCC_OscConfig+0x45e>
 8006904:	e65b      	b.n	80065be <HAL_RCC_OscConfig+0x12a>
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	40007000 	.word	0x40007000

08006910 <HAL_RCC_GetHCLKFreq>:
}
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <HAL_RCC_GetHCLKFreq+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000010 	.word	0x20000010

0800691c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800691c:	4b08      	ldr	r3, [pc, #32]	; (8006940 <HAL_RCC_GetPCLK1Freq+0x24>)
 800691e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	fa92 f2a2 	rbit	r2, r2
 8006928:	fab2 f282 	clz	r2, r2
 800692c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006930:	40d3      	lsrs	r3, r2
 8006932:	4a04      	ldr	r2, [pc, #16]	; (8006944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006934:	5cd3      	ldrb	r3, [r2, r3]
 8006936:	4a04      	ldr	r2, [pc, #16]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006938:	6810      	ldr	r0, [r2, #0]
}
 800693a:	40d8      	lsrs	r0, r3
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40021000 	.word	0x40021000
 8006944:	0800e1bd 	.word	0x0800e1bd
 8006948:	20000010 	.word	0x20000010

0800694c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800694c:	4b08      	ldr	r3, [pc, #32]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 800694e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	fa92 f2a2 	rbit	r2, r2
 8006958:	fab2 f282 	clz	r2, r2
 800695c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006960:	40d3      	lsrs	r3, r2
 8006962:	4a04      	ldr	r2, [pc, #16]	; (8006974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006964:	5cd3      	ldrb	r3, [r2, r3]
 8006966:	4a04      	ldr	r2, [pc, #16]	; (8006978 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006968:	6810      	ldr	r0, [r2, #0]
}
 800696a:	40d8      	lsrs	r0, r3
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40021000 	.word	0x40021000
 8006974:	0800e1bd 	.word	0x0800e1bd
 8006978:	20000010 	.word	0x20000010

0800697c <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800697c:	4a02      	ldr	r2, [pc, #8]	; (8006988 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	f043 0304 	orr.w	r3, r3, #4
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	4770      	bx	lr
 8006988:	40021000 	.word	0x40021000

0800698c <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006990:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006994:	d0fb      	beq.n	800698e <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006998:	0752      	lsls	r2, r2, #29
 800699a:	d503      	bpl.n	80069a4 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800699c:	2204      	movs	r2, #4
 800699e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80069a0:	2003      	movs	r0, #3
 80069a2:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80069a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80069a6:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80069aa:	bf15      	itete	ne
 80069ac:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069ae:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80069b2:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069b4:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 80069b6:	4770      	bx	lr

080069b8 <SD_CmdResp1Error>:
{
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80069bc:	6800      	ldr	r0, [r0, #0]
{
 80069be:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80069c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069c2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80069c6:	d0fb      	beq.n	80069c0 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80069c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069ca:	075b      	lsls	r3, r3, #29
 80069cc:	d503      	bpl.n	80069d6 <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80069ce:	2304      	movs	r3, #4
 80069d0:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80069d2:	2003      	movs	r0, #3
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80069d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80069d8:	f014 0401 	ands.w	r4, r4, #1
 80069dc:	d003      	beq.n	80069e6 <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80069de:	2301      	movs	r3, #1
 80069e0:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 80069e2:	4618      	mov	r0, r3
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 80069e6:	f001 fc94 	bl	8008312 <SDMMC_GetCommandResponse>
 80069ea:	42b0      	cmp	r0, r6
 80069ec:	d001      	beq.n	80069f2 <SD_CmdResp1Error+0x3a>
    return errorstate;
 80069ee:	2010      	movs	r0, #16
 80069f0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069f2:	6828      	ldr	r0, [r5, #0]
 80069f4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80069f8:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069fa:	4621      	mov	r1, r4
 80069fc:	f001 fc8c 	bl	8008318 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006a00:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <SD_CmdResp1Error+0xe8>)
 8006a02:	4003      	ands	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ec      	beq.n	80069e2 <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	db27      	blt.n	8006a5c <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8006a0c:	0045      	lsls	r5, r0, #1
 8006a0e:	d427      	bmi.n	8006a60 <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8006a10:	0084      	lsls	r4, r0, #2
 8006a12:	d427      	bmi.n	8006a64 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8006a14:	00c1      	lsls	r1, r0, #3
 8006a16:	d427      	bmi.n	8006a68 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8006a18:	0102      	lsls	r2, r0, #4
 8006a1a:	d427      	bmi.n	8006a6c <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8006a1c:	0143      	lsls	r3, r0, #5
 8006a1e:	d427      	bmi.n	8006a70 <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8006a20:	01c6      	lsls	r6, r0, #7
 8006a22:	d427      	bmi.n	8006a74 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8006a24:	0205      	lsls	r5, r0, #8
 8006a26:	d427      	bmi.n	8006a78 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8006a28:	0244      	lsls	r4, r0, #9
 8006a2a:	d4e0      	bmi.n	80069ee <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8006a2c:	0281      	lsls	r1, r0, #10
 8006a2e:	d425      	bmi.n	8006a7c <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8006a30:	02c2      	lsls	r2, r0, #11
 8006a32:	d425      	bmi.n	8006a80 <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8006a34:	0303      	lsls	r3, r0, #12
 8006a36:	d425      	bmi.n	8006a84 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8006a38:	0346      	lsls	r6, r0, #13
 8006a3a:	d425      	bmi.n	8006a88 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8006a3c:	0385      	lsls	r5, r0, #14
 8006a3e:	d425      	bmi.n	8006a8c <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8006a40:	03c4      	lsls	r4, r0, #15
 8006a42:	d425      	bmi.n	8006a90 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8006a44:	0401      	lsls	r1, r0, #16
 8006a46:	d425      	bmi.n	8006a94 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8006a48:	0442      	lsls	r2, r0, #17
 8006a4a:	d425      	bmi.n	8006a98 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8006a4c:	0483      	lsls	r3, r0, #18
 8006a4e:	d425      	bmi.n	8006a9c <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8006a50:	f010 0f08 	tst.w	r0, #8
 8006a54:	bf0c      	ite	eq
 8006a56:	2000      	moveq	r0, #0
 8006a58:	201a      	movne	r0, #26
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8006a5c:	201c      	movs	r0, #28
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8006a60:	2009      	movs	r0, #9
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8006a64:	200a      	movs	r0, #10
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8006a68:	200b      	movs	r0, #11
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8006a6c:	200c      	movs	r0, #12
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8006a70:	200d      	movs	r0, #13
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8006a74:	200e      	movs	r0, #14
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8006a78:	200f      	movs	r0, #15
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8006a7c:	2011      	movs	r0, #17
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 8006a80:	2012      	movs	r0, #18
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006a84:	2013      	movs	r0, #19
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8006a88:	2014      	movs	r0, #20
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8006a8c:	2015      	movs	r0, #21
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 8006a90:	2016      	movs	r0, #22
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 8006a94:	2017      	movs	r0, #23
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 8006a98:	2018      	movs	r0, #24
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 8006a9c:	2019      	movs	r0, #25
}
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	fdffe008 	.word	0xfdffe008

08006aa4 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8006aaa:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006aac:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006aae:	2240      	movs	r2, #64	; 0x40
{
 8006ab0:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ab6:	9306      	str	r3, [sp, #24]
{
 8006ab8:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006abe:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8006ac0:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ac2:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006ac4:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ac6:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006ac8:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8006aca:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006acc:	f001 fc0f 	bl	80082ee <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ff70 	bl	80069b8 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006ad8:	4604      	mov	r4, r0
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d138      	bne.n	8006b50 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ade:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ae0:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ae2:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006ae4:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ae6:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ae8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006aea:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aec:	f001 fbff 	bl	80082ee <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006af0:	4621      	mov	r1, r4
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7ff ff60 	bl	80069b8 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006af8:	4604      	mov	r4, r0
 8006afa:	bb48      	cbnz	r0, 8006b50 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295
 8006b00:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b02:	2330      	movs	r3, #48	; 0x30
 8006b04:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b06:	2302      	movs	r3, #2
 8006b08:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b0a:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006b0c:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006b0e:	a908      	add	r1, sp, #32
 8006b10:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006b12:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8006b14:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006b16:	f001 fc09 	bl	800832c <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8006b1a:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b1c:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006b1e:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b20:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006b22:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b24:	f001 fbe3 	bl	80082ee <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7ff ff44 	bl	80069b8 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006b30:	4604      	mov	r4, r0
 8006b32:	b968      	cbnz	r0, 8006b50 <SD_FindSCR+0xac>
 8006b34:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006b36:	f240 482a 	movw	r8, #1066	; 0x42a
 8006b3a:	6830      	ldr	r0, [r6, #0]
 8006b3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b3e:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006b42:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006b44:	d008      	beq.n	8006b58 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b46:	0719      	lsls	r1, r3, #28
 8006b48:	d50d      	bpl.n	8006b66 <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006b4a:	2308      	movs	r3, #8
 8006b4c:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8006b4e:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 8006b50:	4620      	mov	r0, r4
 8006b52:	b00e      	add	sp, #56	; 0x38
 8006b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	d5ef      	bpl.n	8006b3c <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006b5c:	f001 fbbc 	bl	80082d8 <SDMMC_ReadFIFO>
 8006b60:	f847 0f04 	str.w	r0, [r7, #4]!
 8006b64:	e7e9      	b.n	8006b3a <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b68:	079a      	lsls	r2, r3, #30
 8006b6a:	d502      	bpl.n	8006b72 <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006b6c:	2402      	movs	r4, #2
 8006b6e:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 8006b70:	e7ee      	b.n	8006b50 <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b74:	069b      	lsls	r3, r3, #26
 8006b76:	d503      	bpl.n	8006b80 <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006b78:	2320      	movs	r3, #32
 8006b7a:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006b7c:	2406      	movs	r4, #6
 8006b7e:	e7e7      	b.n	8006b50 <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b80:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006b84:	6383      	str	r3, [r0, #56]	; 0x38
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8006b8a:	606b      	str	r3, [r5, #4]
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 8006b90:	602b      	str	r3, [r5, #0]
  return errorstate;
 8006b92:	e7dd      	b.n	8006b50 <SD_FindSCR+0xac>

08006b94 <HAL_SD_ReadBlocks_DMA>:
{
 8006b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b98:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 8006b9a:	6806      	ldr	r6, [r0, #0]
{
 8006b9c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8006b9e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 8006ba0:	2f01      	cmp	r7, #1
{
 8006ba2:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006baa:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006bac:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 8006bae:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 8006bb0:	bf88      	it	hi
 8006bb2:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8006bb4:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006bb6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8006bb8:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8006bbc:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006bbe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 8006bc0:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006bc2:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006bc6:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006bc8:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006bca:	4b2d      	ldr	r3, [pc, #180]	; (8006c80 <HAL_SD_ReadBlocks_DMA+0xec>)
 8006bcc:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8006bce:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006bd0:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006bd2:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006bd4:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006bda:	6813      	ldr	r3, [r2, #0]
 8006bdc:	f023 0310 	bic.w	r3, r3, #16
 8006be0:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006be2:	fb05 f307 	mul.w	r3, r5, r7
 8006be6:	460a      	mov	r2, r1
 8006be8:	089b      	lsrs	r3, r3, #2
 8006bea:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8006bee:	f7fe fcb9 	bl	8005564 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006bf2:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006bf4:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006bf6:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006bf8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006bfc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bfe:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8006c02:	bf04      	itt	eq
 8006c04:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8006c08:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006c0c:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c10:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c12:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8006c18:	bf08      	it	eq
 8006c1a:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006c1e:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006c20:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c22:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c24:	f001 fb63 	bl	80082ee <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff fec4 	bl	80069b8 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006c30:	bb10      	cbnz	r0, 8006c78 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c38:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006c3a:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c3c:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c3e:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c40:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006c42:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006c44:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006c46:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006c48:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c4a:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006c4c:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006c4e:	f001 fb6d 	bl	800832c <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8006c52:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006c54:	bf8c      	ite	hi
 8006c56:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006c58:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c5a:	a901      	add	r1, sp, #4
 8006c5c:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006c5e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8006c60:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c64:	f001 fb43 	bl	80082ee <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006c68:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006c6a:	bf8c      	ite	hi
 8006c6c:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 8006c6e:	2111      	movls	r1, #17
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7ff fea1 	bl	80069b8 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8006c76:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8006c78:	b00d      	add	sp, #52	; 0x34
 8006c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c7e:	bf00      	nop
 8006c80:	08006df7 	.word	0x08006df7
 8006c84:	08006e13 	.word	0x08006e13

08006c88 <HAL_SD_WriteBlocks_DMA>:
{
 8006c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8c:	b08c      	sub	sp, #48	; 0x30
 8006c8e:	4617      	mov	r7, r2
 8006c90:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 8006c92:	6802      	ldr	r2, [r0, #0]
{
 8006c94:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8006c98:	2e01      	cmp	r6, #1
{
 8006c9a:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006ca2:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006ca4:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8006ca6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8006ca8:	bf8c      	ite	hi
 8006caa:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8006cac:	2302      	movls	r3, #2
 8006cae:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006cb0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8006cb2:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006cb4:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006cb8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006cba:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006cbc:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006cbe:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006cc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8006cc4:	4b2e      	ldr	r3, [pc, #184]	; (8006d80 <HAL_SD_WriteBlocks_DMA+0xf8>)
 8006cc6:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cc8:	2310      	movs	r3, #16
 8006cca:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006ccc:	f8de 3000 	ldr.w	r3, [lr]
 8006cd0:	f043 0310 	orr.w	r3, r3, #16
 8006cd4:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006cd8:	fb08 f306 	mul.w	r3, r8, r6
 8006cdc:	3280      	adds	r2, #128	; 0x80
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	f7fe fc40 	bl	8005564 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006ce8:	f043 0308 	orr.w	r3, r3, #8
 8006cec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006cee:	6a23      	ldr	r3, [r4, #32]
 8006cf0:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cf2:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8006cf6:	bf08      	it	eq
 8006cf8:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cfa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cfc:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 8006d00:	bf04      	itt	eq
 8006d02:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8006d06:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006d0a:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d0c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d0e:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006d14:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d16:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006d18:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d1c:	f001 fae7 	bl	80082ee <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006d20:	4629      	mov	r1, r5
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff fe48 	bl	80069b8 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006d28:	4605      	mov	r5, r0
 8006d2a:	bb18      	cbnz	r0, 8006d74 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8006d2c:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8006d2e:	bf94      	ite	ls
 8006d30:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006d32:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d34:	a901      	add	r1, sp, #4
 8006d36:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006d38:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006d3a:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d3c:	f001 fad7 	bl	80082ee <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006d40:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8006d42:	bf8c      	ite	hi
 8006d44:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006d46:	2118      	movls	r1, #24
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7ff fe35 	bl	80069b8 <SD_CmdResp1Error>
 8006d4e:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 8006d50:	b980      	cbnz	r0, 8006d74 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295
 8006d56:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d58:	2390      	movs	r3, #144	; 0x90
 8006d5a:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006d5c:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d5e:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006d60:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006d62:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006d66:	a906      	add	r1, sp, #24
 8006d68:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006d6a:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006d6c:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006d6e:	f001 fadd 	bl	800832c <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 8006d72:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8006d74:	4628      	mov	r0, r5
 8006d76:	b00c      	add	sp, #48	; 0x30
 8006d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7c:	08006e21 	.word	0x08006e21
 8006d80:	08006e3d 	.word	0x08006e3d

08006d84 <HAL_SD_XferCpltCallback>:
 8006d84:	4770      	bx	lr

08006d86 <HAL_SD_XferErrorCallback>:
 8006d86:	4770      	bx	lr

08006d88 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006d88:	6803      	ldr	r3, [r0, #0]
 8006d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8c:	05d2      	lsls	r2, r2, #23
{  
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006d92:	d510      	bpl.n	8006db6 <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8006d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8006da2:	f7ff ffef 	bl	8006d84 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006daa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006dae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006db2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006db4:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8006db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db8:	0791      	lsls	r1, r2, #30
 8006dba:	d505      	bpl.n	8006dc8 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8006dc0:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8006dc2:	f7ff ffe0 	bl	8006d86 <HAL_SD_XferErrorCallback>
 8006dc6:	e7ee      	b.n	8006da6 <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dca:	0712      	lsls	r2, r2, #28
 8006dcc:	d504      	bpl.n	8006dd8 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006dce:	2208      	movs	r2, #8
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8006dd2:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006dd4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006dd6:	e7f4      	b.n	8006dc2 <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8006dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dda:	0691      	lsls	r1, r2, #26
 8006ddc:	d503      	bpl.n	8006de6 <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006dde:	2220      	movs	r2, #32
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8006de2:	2306      	movs	r3, #6
 8006de4:	e7f6      	b.n	8006dd4 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8006de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de8:	06d2      	lsls	r2, r2, #27
 8006dea:	d5dc      	bpl.n	8006da6 <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8006dec:	2210      	movs	r2, #16
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006df0:	2305      	movs	r3, #5
 8006df2:	e7ef      	b.n	8006dd4 <HAL_SD_IRQHandler+0x4c>

08006df4 <HAL_SD_DMA_RxCpltCallback>:
 8006df4:	4770      	bx	lr

08006df6 <SD_DMA_RxCplt>:
{
 8006df6:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006df8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006dfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0fc      	beq.n	8006dfe <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006e04:	f7fe fbec 	bl	80055e0 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8006e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0a:	f7ff fff3 	bl	8006df4 <HAL_SD_DMA_RxCpltCallback>
 8006e0e:	bd10      	pop	{r4, pc}

08006e10 <HAL_SD_DMA_RxErrorCallback>:
 8006e10:	4770      	bx	lr

08006e12 <SD_DMA_RxError>:
{
 8006e12:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8006e14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e16:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006e18:	f7ff fffa 	bl	8006e10 <HAL_SD_DMA_RxErrorCallback>
 8006e1c:	bd08      	pop	{r3, pc}

08006e1e <HAL_SD_DMA_TxCpltCallback>:
 8006e1e:	4770      	bx	lr

08006e20 <SD_DMA_TxCplt>:
{
 8006e20:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006e22:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006e24:	2301      	movs	r3, #1
 8006e26:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006e28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0fc      	beq.n	8006e28 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006e2e:	f7fe fbd7 	bl	80055e0 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8006e32:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006e34:	f7ff fff3 	bl	8006e1e <HAL_SD_DMA_TxCpltCallback>
 8006e38:	bd10      	pop	{r4, pc}

08006e3a <HAL_SD_DMA_TxErrorCallback>:
{
 8006e3a:	4770      	bx	lr

08006e3c <SD_DMA_TxError>:
{
 8006e3c:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 8006e3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e40:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006e42:	f7ff fffa 	bl	8006e3a <HAL_SD_DMA_TxErrorCallback>
 8006e46:	bd08      	pop	{r3, pc}

08006e48 <HAL_SD_Get_CardInfo>:
{
 8006e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006e4c:	6a05      	ldr	r5, [r0, #32]
 8006e4e:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8006e52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e54:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006e58:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006e5a:	0f9a      	lsrs	r2, r3, #30
 8006e5c:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006e5e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8006e62:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006e64:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006e68:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8006e6a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006e6e:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006e70:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006e74:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006e76:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006e78:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8006e7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006e7c:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006e82:	88cb      	ldrh	r3, [r1, #6]
{
 8006e84:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8006e8c:	4303      	orrs	r3, r0
 8006e8e:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8006e90:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8006e94:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8006e96:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006e9a:	09d8      	lsrs	r0, r3, #7
 8006e9c:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8006e9e:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8006ea2:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006ea4:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8006ea8:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006eaa:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8006eae:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006eb0:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006eb8:	f200 80dc 	bhi.w	8007074 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8006ebc:	029b      	lsls	r3, r3, #10
 8006ebe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ec2:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8006ec4:	690b      	ldr	r3, [r1, #16]
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8006ed0:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8006ed2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8006ed4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006ed8:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8006eda:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8006ede:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8006ee0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8006ee4:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006ee6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8006eea:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006eec:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8006ef0:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 8006ef2:	0bd3      	lsrs	r3, r2, #15
 8006ef4:	f003 0306 	and.w	r3, r3, #6
 8006ef8:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8006efa:	7e0d      	ldrb	r5, [r1, #24]
 8006efc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006f00:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006f04:	432a      	orrs	r2, r5
 8006f06:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006f08:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006f0a:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006f0c:	7a0a      	ldrb	r2, [r1, #8]
 8006f0e:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006f10:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006f12:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006f16:	40be      	lsls	r6, r7
 8006f18:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006f1c:	fba6 6702 	umull	r6, r7, r6, r2
 8006f20:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006f24:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006f26:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006f28:	fba6 8902 	umull	r8, r9, r6, r2
 8006f2c:	fb02 9907 	mla	r9, r2, r7, r9
 8006f30:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006f34:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006f3e:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006f40:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006f42:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006f44:	7e8a      	ldrb	r2, [r1, #26]
 8006f46:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8006f4a:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006f50:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006f52:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8006f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006f56:	0fda      	lsrs	r2, r3, #31
 8006f58:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8006f5a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8006f5e:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006f60:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006f64:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006f66:	0d9a      	lsrs	r2, r3, #22
 8006f68:	f002 020c 	and.w	r2, r2, #12
 8006f6c:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006f6e:	7fca      	ldrb	r2, [r1, #31]
 8006f70:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8006f74:	432a      	orrs	r2, r5
 8006f76:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006f78:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006f7c:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 8006f80:	2200      	movs	r2, #0
 8006f82:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8006f86:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8006f8a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8006f8e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006f92:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8006f96:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006f9a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 8006f9e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8006fa2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8006fa6:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006faa:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 8006fae:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8006fb2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8006fb6:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006fb8:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006fbc:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006fc0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006fc4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8006fc8:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 8006fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fce:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8006fd0:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8006fd4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006fd8:	0212      	lsls	r2, r2, #8
 8006fda:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8006fdc:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8006fde:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	4332      	orrs	r2, r6
 8006fe6:	061b      	lsls	r3, r3, #24
 8006fe8:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8006fea:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006fec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8006fee:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006ff0:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8006ff2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006ff6:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8006ff8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006ffa:	0a1a      	lsrs	r2, r3, #8
 8006ffc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8007000:	4332      	orrs	r2, r6
 8007002:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8007004:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8007006:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800700a:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 800700c:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800700e:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 8007010:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 8007014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007016:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8007018:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 800701c:	0c1a      	lsrs	r2, r3, #16
 800701e:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8007020:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8007022:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8007024:	021a      	lsls	r2, r3, #8
 8007026:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800702a:	4332      	orrs	r2, r6
 800702c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800702e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	b29b      	uxth	r3, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8007038:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 800703a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 800703c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8007040:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8007042:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8007046:	f3c3 5403 	ubfx	r4, r3, #20, #4
 800704a:	4322      	orrs	r2, r4
 800704c:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8007050:	0a1a      	lsrs	r2, r3, #8
 8007052:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007056:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8007058:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800705a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800705e:	b292      	uxth	r2, r2
 8007060:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8007062:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8007066:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8007068:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 800706c:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 8007070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8007074:	2d02      	cmp	r5, #2
 8007076:	d11f      	bne.n	80070b8 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8007078:	0412      	lsls	r2, r2, #16
 800707a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800707e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8007080:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8007082:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8007084:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8007086:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800708a:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 800708c:	690d      	ldr	r5, [r1, #16]
 800708e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007092:	432a      	orrs	r2, r5
 8007094:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8007096:	690e      	ldr	r6, [r1, #16]
 8007098:	2700      	movs	r7, #0
 800709a:	3601      	adds	r6, #1
 800709c:	f147 0700 	adc.w	r7, r7, #0
 80070a0:	04fa      	lsls	r2, r7, #19
 80070a2:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 80070a6:	64ca      	str	r2, [r1, #76]	; 0x4c
 80070a8:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 80070aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 80070b2:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 80070b4:	650a      	str	r2, [r1, #80]	; 0x50
 80070b6:	e73d      	b.n	8006f34 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 80070b8:	2029      	movs	r0, #41	; 0x29
 80070ba:	e73b      	b.n	8006f34 <HAL_SD_Get_CardInfo+0xec>

080070bc <HAL_SD_Init>:
{ 
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80070c2:	2500      	movs	r5, #0
{ 
 80070c4:	4604      	mov	r4, r0
 80070c6:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80070c8:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 80070cc:	f7fd f844 	bl	8004158 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80070d0:	2376      	movs	r3, #118	; 0x76
 80070d2:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 80070d4:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80070d6:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 80070d8:	ab10      	add	r3, sp, #64	; 0x40
 80070da:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80070de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80070e2:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80070e4:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80070e6:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 80070e8:	ab0a      	add	r3, sp, #40	; 0x28
 80070ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	f001 f8d7 	bl	80082a0 <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80070f2:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80070f4:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80070f8:	6843      	ldr	r3, [r0, #4]
 80070fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fe:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8007100:	f001 f8ed 	bl	80082de <SDMMC_PowerState_ON>
  HAL_Delay(1);
 8007104:	2001      	movs	r0, #1
 8007106:	f7fe f8eb 	bl	80052e0 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	6843      	ldr	r3, [r0, #4]
 800710e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007112:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007114:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711a:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 800711c:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 800711e:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 8007120:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007122:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007124:	f001 f8e3 	bl	80082ee <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800712c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007130:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8007134:	b123      	cbz	r3, 8007140 <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007136:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800713a:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 800713c:	2300      	movs	r3, #0
 800713e:	e005      	b.n	800714c <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007140:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 8007142:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007144:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8007148:	d1f4      	bne.n	8007134 <HAL_SD_Init+0x78>
    return errorstate;
 800714a:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 800714c:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8007150:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007154:	b18b      	cbz	r3, 800717a <HAL_SD_Init+0xbe>
  return errorstate;
 8007156:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800715a:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 800715c:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8007160:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007164:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80b1 	beq.w	80072d0 <HAL_SD_Init+0x214>
  return errorstate;
 800716e:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8007172:	b2c0      	uxtb	r0, r0
}
 8007174:	b011      	add	sp, #68	; 0x44
 8007176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 800717a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800717e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8007180:	2308      	movs	r3, #8
 8007182:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007184:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007186:	2340      	movs	r3, #64	; 0x40
 8007188:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800718a:	f001 f8b0 	bl	80082ee <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007192:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007196:	bf14      	ite	ne
 8007198:	2301      	movne	r3, #1
 800719a:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 800719c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 80071a0:	b90b      	cbnz	r3, 80071a6 <HAL_SD_Init+0xea>
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	d17c      	bne.n	80072a0 <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 80071a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 80071a8:	b112      	cbz	r2, 80071b0 <HAL_SD_Init+0xf4>
 80071aa:	f013 0304 	ands.w	r3, r3, #4
 80071ae:	d07f      	beq.n	80072b0 <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80071b0:	2304      	movs	r3, #4
 80071b2:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80071b4:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 80071b6:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 80071ba:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80071be:	2300      	movs	r3, #0
 80071c0:	2a00      	cmp	r2, #0
 80071c2:	d17c      	bne.n	80072be <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 80071c4:	2201      	movs	r2, #1
 80071c6:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 80071c8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071cc:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071ce:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 80071d0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071d2:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071d4:	f001 f88b 	bl	80082ee <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80071d8:	4629      	mov	r1, r5
 80071da:	4620      	mov	r0, r4
 80071dc:	f7ff fbec 	bl	80069b8 <SD_CmdResp1Error>
 80071e0:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 80071e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80071e8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1b2      	bne.n	8007156 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80071f0:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 80071f4:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80071f6:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071fa:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071fe:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007200:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007204:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007208:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 800720a:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800720e:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007212:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007216:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800721a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800721e:	f001 f866 	bl	80082ee <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8007222:	4659      	mov	r1, fp
 8007224:	4620      	mov	r0, r4
 8007226:	f7ff fbc7 	bl	80069b8 <SD_CmdResp1Error>
 800722a:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 800722e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007236:	2b00      	cmp	r3, #0
 8007238:	d18d      	bne.n	8007156 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800723a:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800723c:	a905      	add	r1, sp, #20
 800723e:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8007240:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8007242:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007244:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007248:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800724a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800724e:	f001 f84e 	bl	80082ee <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007256:	f013 0f45 	tst.w	r3, #69	; 0x45
 800725a:	d0fb      	beq.n	8007254 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800725c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800725e:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8007262:	bf1b      	ittet	ne
 8007264:	2304      	movne	r3, #4
 8007266:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007268:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 800726c:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800726e:	bf08      	it	eq
 8007270:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 8007272:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 8007276:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800727a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800727e:	2b00      	cmp	r3, #0
 8007280:	f47f af69 	bne.w	8007156 <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007284:	f001 f848 	bl	8008318 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8007288:	2800      	cmp	r0, #0
      count++;
 800728a:	f105 0501 	add.w	r5, r5, #1
 800728e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8007292:	db16      	blt.n	80072c2 <HAL_SD_Init+0x206>
 8007294:	429d      	cmp	r5, r3
 8007296:	d1b0      	bne.n	80071fa <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 8007298:	231b      	movs	r3, #27
 800729a:	f88d 3013 	strb.w	r3, [sp, #19]
 800729e:	e75a      	b.n	8007156 <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 80072a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072a2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
    timeout--;
 80072ac:	3a01      	subs	r2, #1
 80072ae:	e777      	b.n	80071a0 <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 80072b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80072b2:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 80072b4:	bf46      	itte	mi
 80072b6:	2240      	movmi	r2, #64	; 0x40
 80072b8:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 80072ba:	2329      	movpl	r3, #41	; 0x29
 80072bc:	e77b      	b.n	80071b6 <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 80072be:	461f      	mov	r7, r3
 80072c0:	e784      	b.n	80071cc <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 80072c2:	429d      	cmp	r5, r3
 80072c4:	d0e8      	beq.n	8007298 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80072c6:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 80072c8:	bf44      	itt	mi
 80072ca:	2302      	movmi	r3, #2
 80072cc:	6223      	strmi	r3, [r4, #32]
 80072ce:	e742      	b.n	8007156 <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	f001 f808 	bl	80082e6 <SDMMC_GetPowerState>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f000 80c2 	beq.w	8007460 <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80072dc:	6a23      	ldr	r3, [r4, #32]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d026      	beq.n	8007330 <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 80072e2:	2302      	movs	r3, #2
 80072e4:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80072e6:	23c0      	movs	r3, #192	; 0xc0
 80072e8:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072ea:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80072ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072f0:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 80072f2:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80072f4:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80072f6:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072f8:	f000 fff9 	bl	80082ee <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80072fc:	4620      	mov	r0, r4
 80072fe:	f7ff fb45 	bl	800698c <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8007302:	4605      	mov	r5, r0
 8007304:	2800      	cmp	r0, #0
 8007306:	d155      	bne.n	80073b4 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007308:	4601      	mov	r1, r0
 800730a:	6820      	ldr	r0, [r4, #0]
 800730c:	f001 f804 	bl	8008318 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007310:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007312:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	f000 ffff 	bl	8008318 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800731a:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800731c:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	f000 fffa 	bl	8008318 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007324:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007326:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	f000 fff5 	bl	8008318 <SDMMC_GetResponse>
 800732e:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8007330:	6a23      	ldr	r3, [r4, #32]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d92b      	bls.n	800738e <HAL_SD_Init+0x2d2>
 8007336:	2b06      	cmp	r3, #6
 8007338:	d029      	beq.n	800738e <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 800733a:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800733c:	6a23      	ldr	r3, [r4, #32]
 800733e:	2b04      	cmp	r3, #4
 8007340:	f000 8092 	beq.w	8007468 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 8007344:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8007346:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007348:	0400      	lsls	r0, r0, #16
 800734a:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800734c:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800734e:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8007350:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007352:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8007354:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007356:	f000 ffca 	bl	80082ee <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff fb16 	bl	800698c <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8007360:	4605      	mov	r5, r0
 8007362:	bb38      	cbnz	r0, 80073b4 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007364:	4601      	mov	r1, r0
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	f000 ffd6 	bl	8008318 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800736c:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800736e:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	f000 ffd1 	bl	8008318 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007376:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007378:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800737a:	6820      	ldr	r0, [r4, #0]
 800737c:	f000 ffcc 	bl	8008318 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007380:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007382:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	f000 ffc7 	bl	8008318 <SDMMC_GetResponse>
 800738a:	6360      	str	r0, [r4, #52]	; 0x34
 800738c:	e012      	b.n	80073b4 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 800738e:	2303      	movs	r3, #3
 8007390:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007392:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007394:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007396:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007398:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800739a:	f000 ffa8 	bl	80082ee <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800739e:	6820      	ldr	r0, [r4, #0]
 80073a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073a2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80073a6:	d0fb      	beq.n	80073a0 <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80073a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073aa:	075d      	lsls	r5, r3, #29
 80073ac:	d536      	bpl.n	800741c <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80073ae:	2304      	movs	r3, #4
 80073b0:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80073b2:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 80073b4:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 80073b8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f47f aed6 	bne.w	800716e <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 80073c2:	4631      	mov	r1, r6
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7ff fd3f 	bl	8006e48 <HAL_SD_Get_CardInfo>
 80073ca:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 80073ce:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80073d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073d6:	b9ab      	cbnz	r3, 8007404 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80073d8:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073dc:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80073de:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80073e0:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 80073e2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80073e4:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80073e6:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80073e8:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073ea:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80073ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f0:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80073f2:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073f4:	f000 ff7b 	bl	80082ee <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80073f8:	4629      	mov	r1, r5
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff fadc 	bl	80069b8 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8007400:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 8007404:	f104 0310 	add.w	r3, r4, #16
 8007408:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800740c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007410:	1d23      	adds	r3, r4, #4
 8007412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007414:	6820      	ldr	r0, [r4, #0]
 8007416:	f000 ff43 	bl	80082a0 <SDMMC_Init>
 800741a:	e6a8      	b.n	800716e <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800741c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800741e:	f015 0501 	ands.w	r5, r5, #1
 8007422:	d002      	beq.n	800742a <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8007424:	2501      	movs	r5, #1
 8007426:	6385      	str	r5, [r0, #56]	; 0x38
 8007428:	e7c4      	b.n	80073b4 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800742a:	f000 ff72 	bl	8008312 <SDMMC_GetCommandResponse>
 800742e:	2803      	cmp	r0, #3
 8007430:	d001      	beq.n	8007436 <HAL_SD_Init+0x37a>
    return errorstate;
 8007432:	2510      	movs	r5, #16
 8007434:	e7be      	b.n	80073b4 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007436:	6820      	ldr	r0, [r4, #0]
 8007438:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800743c:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800743e:	4629      	mov	r1, r5
 8007440:	f000 ff6a 	bl	8008318 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8007444:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007448:	d101      	bne.n	800744e <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800744a:	0c00      	lsrs	r0, r0, #16
 800744c:	e776      	b.n	800733c <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 800744e:	0481      	lsls	r1, r0, #18
 8007450:	d408      	bmi.n	8007464 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8007452:	0442      	lsls	r2, r0, #17
 8007454:	d4ed      	bmi.n	8007432 <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8007456:	0403      	lsls	r3, r0, #16
 8007458:	f57f af6f 	bpl.w	800733a <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 800745c:	250f      	movs	r5, #15
 800745e:	e7a9      	b.n	80073b4 <HAL_SD_Init+0x2f8>
    return errorstate;
 8007460:	2525      	movs	r5, #37	; 0x25
 8007462:	e7a7      	b.n	80073b4 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8007464:	2513      	movs	r5, #19
 8007466:	e7a5      	b.n	80073b4 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8007468:	2500      	movs	r5, #0
 800746a:	e7a3      	b.n	80073b4 <HAL_SD_Init+0x2f8>

0800746c <HAL_SD_WideBusOperation_Config>:
{
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 800746e:	6a03      	ldr	r3, [r0, #32]
 8007470:	2b03      	cmp	r3, #3
{
 8007472:	b08d      	sub	sp, #52	; 0x34
 8007474:	4605      	mov	r5, r0
 8007476:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8007478:	f000 8088 	beq.w	800758c <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800747c:	2b02      	cmp	r3, #2
 800747e:	f200 8083 	bhi.w	8007588 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007482:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007486:	f000 8081 	beq.w	800758c <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800748a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800748e:	d14c      	bne.n	800752a <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 8007490:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8007492:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8007494:	9104      	str	r1, [sp, #16]
 8007496:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8007498:	f000 ff3e 	bl	8008318 <SDMMC_GetResponse>
 800749c:	0180      	lsls	r0, r0, #6
 800749e:	d46d      	bmi.n	800757c <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 80074a0:	a904      	add	r1, sp, #16
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7ff fafe 	bl	8006aa4 <SD_FindSCR>
  if(errorstate != SD_OK)
 80074a8:	4604      	mov	r4, r0
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d167      	bne.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 80074ae:	9b05      	ldr	r3, [sp, #20]
 80074b0:	0359      	lsls	r1, r3, #13
 80074b2:	d567      	bpl.n	8007584 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80074b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80074b6:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80074b8:	041b      	lsls	r3, r3, #16
 80074ba:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80074bc:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80074be:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80074c0:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074c2:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80074c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074c8:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80074ca:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80074cc:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074ce:	f000 ff0e 	bl	80082ee <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80074d2:	4639      	mov	r1, r7
 80074d4:	4628      	mov	r0, r5
 80074d6:	f7ff fa6f 	bl	80069b8 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 80074da:	4604      	mov	r4, r0
 80074dc:	2800      	cmp	r0, #0
 80074de:	d14e      	bne.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 80074e0:	2302      	movs	r3, #2
 80074e2:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80074e4:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074e6:	a906      	add	r1, sp, #24
 80074e8:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80074ea:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074ec:	f000 feff 	bl	80082ee <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 80074f0:	4621      	mov	r1, r4
 80074f2:	4628      	mov	r0, r5
 80074f4:	f7ff fa60 	bl	80069b8 <SD_CmdResp1Error>
 80074f8:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d13f      	bne.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 80074fe:	686b      	ldr	r3, [r5, #4]
 8007500:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8007502:	68ab      	ldr	r3, [r5, #8]
 8007504:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007506:	68eb      	ldr	r3, [r5, #12]
 8007508:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800750a:	696b      	ldr	r3, [r5, #20]
 800750c:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 800750e:	69ab      	ldr	r3, [r5, #24]
 8007510:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 8007512:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 8007514:	ab0c      	add	r3, sp, #48	; 0x30
 8007516:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800751a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800751e:	ab06      	add	r3, sp, #24
 8007520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007522:	6828      	ldr	r0, [r5, #0]
 8007524:	f000 febc 	bl	80082a0 <SDMMC_Init>
 8007528:	e029      	b.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800752a:	2900      	cmp	r1, #0
 800752c:	d130      	bne.n	8007590 <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800752e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8007530:	9104      	str	r1, [sp, #16]
 8007532:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8007534:	f000 fef0 	bl	8008318 <SDMMC_GetResponse>
 8007538:	0182      	lsls	r2, r0, #6
 800753a:	d41f      	bmi.n	800757c <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 800753c:	a904      	add	r1, sp, #16
 800753e:	4628      	mov	r0, r5
 8007540:	f7ff fab0 	bl	8006aa4 <SD_FindSCR>
  if(errorstate != SD_OK)
 8007544:	4604      	mov	r4, r0
 8007546:	b9d0      	cbnz	r0, 800757e <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8007548:	9b05      	ldr	r3, [sp, #20]
 800754a:	03db      	lsls	r3, r3, #15
 800754c:	d51a      	bpl.n	8007584 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800754e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007550:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007556:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007558:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800755a:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800755c:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800755e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007562:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007564:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007566:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007568:	f000 fec1 	bl	80082ee <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800756c:	4639      	mov	r1, r7
 800756e:	4628      	mov	r0, r5
 8007570:	f7ff fa22 	bl	80069b8 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8007574:	4604      	mov	r4, r0
 8007576:	b910      	cbnz	r0, 800757e <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 8007578:	9006      	str	r0, [sp, #24]
 800757a:	e7b3      	b.n	80074e4 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 800757c:	240e      	movs	r4, #14
}
 800757e:	4620      	mov	r0, r4
 8007580:	b00d      	add	sp, #52	; 0x34
 8007582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 8007584:	2425      	movs	r4, #37	; 0x25
 8007586:	e7fa      	b.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8007588:	2400      	movs	r4, #0
 800758a:	e7f8      	b.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 800758c:	2427      	movs	r4, #39	; 0x27
 800758e:	e7f6      	b.n	800757e <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 8007590:	2426      	movs	r4, #38	; 0x26
 8007592:	e7f4      	b.n	800757e <HAL_SD_WideBusOperation_Config+0x112>

08007594 <HAL_SD_StopTransfer>:
{
 8007594:	b530      	push	{r4, r5, lr}
 8007596:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 8007598:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800759a:	2240      	movs	r2, #64	; 0x40
{
 800759c:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 800759e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 80075a0:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80075a4:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80075a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80075aa:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80075ac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80075ae:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 80075b0:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80075b2:	f000 fe9c 	bl	80082ee <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 80075b6:	4629      	mov	r1, r5
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff f9fd 	bl	80069b8 <SD_CmdResp1Error>
}
 80075be:	b007      	add	sp, #28
 80075c0:	bd30      	pop	{r4, r5, pc}

080075c2 <HAL_SD_CheckReadOperation>:
{
 80075c2:	b538      	push	{r3, r4, r5, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 80075c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 80075ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80075cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 80075ce:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80075d0:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80075d2:	4208      	tst	r0, r1
 80075d4:	d100      	bne.n	80075d8 <HAL_SD_CheckReadOperation+0x16>
 80075d6:	b1b3      	cbz	r3, 8007606 <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075dc:	0492      	lsls	r2, r2, #18
 80075de:	d500      	bpl.n	80075e2 <HAL_SD_CheckReadOperation+0x20>
 80075e0:	b9cd      	cbnz	r5, 8007616 <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 80075e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d118      	bne.n	800761a <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff ffd3 	bl	8007594 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 80075ee:	b90d      	cbnz	r5, 80075f4 <HAL_SD_CheckReadOperation+0x32>
 80075f0:	b900      	cbnz	r0, 80075f4 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 80075f2:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80075fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80075fe:	b183      	cbz	r3, 8007622 <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8007600:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007602:	b2c0      	uxtb	r0, r0
 8007604:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8007606:	2a00      	cmp	r2, #0
 8007608:	d0e6      	beq.n	80075d8 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 800760a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 800760c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 800760e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8007610:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8007612:	b2db      	uxtb	r3, r3
 8007614:	e7dd      	b.n	80075d2 <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 8007616:	3d01      	subs	r5, #1
 8007618:	e7df      	b.n	80075da <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 800761a:	2d00      	cmp	r5, #0
 800761c:	d0e9      	beq.n	80075f2 <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800761e:	2000      	movs	r0, #0
 8007620:	e7e8      	b.n	80075f4 <HAL_SD_CheckReadOperation+0x32>
}
 8007622:	bd38      	pop	{r3, r4, r5, pc}

08007624 <HAL_SD_GetStatus>:
{
 8007624:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007626:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8007628:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800762a:	041b      	lsls	r3, r3, #16
 800762c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800762e:	2340      	movs	r3, #64	; 0x40
 8007630:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007632:	2300      	movs	r3, #0
{
 8007634:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8007636:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007638:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800763a:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800763c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007640:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007642:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8007644:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007646:	f000 fe52 	bl	80082ee <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 800764a:	4629      	mov	r1, r5
 800764c:	4620      	mov	r0, r4
 800764e:	f7ff f9b3 	bl	80069b8 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8007652:	4601      	mov	r1, r0
 8007654:	b948      	cbnz	r0, 800766a <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007656:	6820      	ldr	r0, [r4, #0]
 8007658:	f000 fe5e 	bl	8008318 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 800765c:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8007660:	3804      	subs	r0, #4
 8007662:	bf18      	it	ne
 8007664:	2001      	movne	r0, #1
}
 8007666:	b007      	add	sp, #28
 8007668:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 800766a:	2002      	movs	r0, #2
 800766c:	e7fb      	b.n	8007666 <HAL_SD_GetStatus+0x42>

0800766e <HAL_SD_CheckWriteOperation>:
{
 800766e:	b570      	push	{r4, r5, r6, lr}
 8007670:	4604      	mov	r4, r0
 8007672:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 8007674:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8007676:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007678:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 800767a:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800767c:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800767e:	4208      	tst	r0, r1
 8007680:	d100      	bne.n	8007684 <HAL_SD_CheckWriteOperation+0x16>
 8007682:	b1c3      	cbz	r3, 80076b6 <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007688:	04d2      	lsls	r2, r2, #19
 800768a:	d500      	bpl.n	800768e <HAL_SD_CheckWriteOperation+0x20>
 800768c:	b9de      	cbnz	r6, 80076c6 <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 800768e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007690:	2b03      	cmp	r3, #3
 8007692:	d120      	bne.n	80076d6 <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff ff7d 	bl	8007594 <HAL_SD_StopTransfer>
 800769a:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 800769c:	b90e      	cbnz	r6, 80076a2 <HAL_SD_CheckWriteOperation+0x34>
 800769e:	b900      	cbnz	r0, 80076a2 <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 80076a0:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80076aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80076ac:	b16b      	cbz	r3, 80076ca <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80076ae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80076b0:	b2ed      	uxtb	r5, r5
}
 80076b2:	4628      	mov	r0, r5
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	d0e4      	beq.n	8007684 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 80076ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80076bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80076be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80076c0:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	e7db      	b.n	800767e <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 80076c6:	3e01      	subs	r6, #1
 80076c8:	e7dd      	b.n	8007686 <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff ffaa 	bl	8007624 <HAL_SD_GetStatus>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d1fa      	bne.n	80076ca <HAL_SD_CheckWriteOperation+0x5c>
 80076d4:	e7ed      	b.n	80076b2 <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 80076d6:	2e00      	cmp	r6, #0
 80076d8:	d0e2      	beq.n	80076a0 <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80076da:	2500      	movs	r5, #0
 80076dc:	e7e1      	b.n	80076a2 <HAL_SD_CheckWriteOperation+0x34>

080076de <HAL_TIM_Base_MspInit>:
 80076de:	4770      	bx	lr

080076e0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076e0:	6803      	ldr	r3, [r0, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	f042 0201 	orr.w	r2, r2, #1
 80076e8:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80076f2:	2000      	movs	r0, #0
 80076f4:	4770      	bx	lr
	...

080076f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f8:	4a2e      	ldr	r2, [pc, #184]	; (80077b4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80076fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076fc:	4290      	cmp	r0, r2
 80076fe:	d012      	beq.n	8007726 <TIM_Base_SetConfig+0x2e>
 8007700:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007704:	d00f      	beq.n	8007726 <TIM_Base_SetConfig+0x2e>
 8007706:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800770a:	4290      	cmp	r0, r2
 800770c:	d00b      	beq.n	8007726 <TIM_Base_SetConfig+0x2e>
 800770e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007712:	4290      	cmp	r0, r2
 8007714:	d007      	beq.n	8007726 <TIM_Base_SetConfig+0x2e>
 8007716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800771a:	4290      	cmp	r0, r2
 800771c:	d003      	beq.n	8007726 <TIM_Base_SetConfig+0x2e>
 800771e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007722:	4290      	cmp	r0, r2
 8007724:	d119      	bne.n	800775a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007726:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800772c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <TIM_Base_SetConfig+0xbc>)
 8007730:	4290      	cmp	r0, r2
 8007732:	d01d      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 8007734:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007738:	d01a      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 800773a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800773e:	4290      	cmp	r0, r2
 8007740:	d016      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 8007742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007746:	4290      	cmp	r0, r2
 8007748:	d012      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 800774a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800774e:	4290      	cmp	r0, r2
 8007750:	d00e      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 8007752:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007756:	4290      	cmp	r0, r2
 8007758:	d00a      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <TIM_Base_SetConfig+0xc0>)
 800775c:	4290      	cmp	r0, r2
 800775e:	d007      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 8007760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007764:	4290      	cmp	r0, r2
 8007766:	d003      	beq.n	8007770 <TIM_Base_SetConfig+0x78>
 8007768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800776c:	4290      	cmp	r0, r2
 800776e:	d103      	bne.n	8007778 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007770:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007776:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8007778:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800777a:	688b      	ldr	r3, [r1, #8]
 800777c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800777e:	680b      	ldr	r3, [r1, #0]
 8007780:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <TIM_Base_SetConfig+0xbc>)
 8007784:	4298      	cmp	r0, r3
 8007786:	d00f      	beq.n	80077a8 <TIM_Base_SetConfig+0xb0>
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	4298      	cmp	r0, r3
 800778e:	d00b      	beq.n	80077a8 <TIM_Base_SetConfig+0xb0>
 8007790:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007794:	4298      	cmp	r0, r3
 8007796:	d007      	beq.n	80077a8 <TIM_Base_SetConfig+0xb0>
 8007798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800779c:	4298      	cmp	r0, r3
 800779e:	d003      	beq.n	80077a8 <TIM_Base_SetConfig+0xb0>
 80077a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a4:	4298      	cmp	r0, r3
 80077a6:	d101      	bne.n	80077ac <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a8:	690b      	ldr	r3, [r1, #16]
 80077aa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077ac:	2301      	movs	r3, #1
 80077ae:	6143      	str	r3, [r0, #20]
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40014000 	.word	0x40014000

080077bc <HAL_TIM_Base_Init>:
{
 80077bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80077be:	4604      	mov	r4, r0
 80077c0:	b1a0      	cbz	r0, 80077ec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80077c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80077c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80077ca:	b91b      	cbnz	r3, 80077d4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80077cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80077d0:	f7ff ff85 	bl	80076de <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80077d4:	2302      	movs	r3, #2
 80077d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077da:	6820      	ldr	r0, [r4, #0]
 80077dc:	1d21      	adds	r1, r4, #4
 80077de:	f7ff ff8b 	bl	80076f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80077e8:	2000      	movs	r0, #0
 80077ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80077ec:	2001      	movs	r0, #1
}
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <HAL_UART_MspInit>:
 80077f0:	4770      	bx	lr

080077f2 <HAL_UART_MspDeInit>:
 80077f2:	4770      	bx	lr

080077f4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80077f4:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80077f6:	4605      	mov	r5, r0
 80077f8:	b1a0      	cbz	r0, 8007824 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 80077fa:	2302      	movs	r3, #2
 80077fc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007800:	6803      	ldr	r3, [r0, #0]
 8007802:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8007804:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 800780c:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 800780e:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8007810:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007812:	f7ff ffee 	bl	80077f2 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007816:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007818:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 800781c:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 8007820:	4620      	mov	r0, r4
 8007822:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007824:	2001      	movs	r0, #1
}
 8007826:	bd38      	pop	{r3, r4, r5, pc}

08007828 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8007828:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800782c:	2b01      	cmp	r3, #1
 800782e:	d003      	beq.n	8007838 <HAL_UART_Receive_IT+0x10>
 8007830:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007834:	2b12      	cmp	r3, #18
 8007836:	d147      	bne.n	80078c8 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8007838:	2900      	cmp	r1, #0
 800783a:	d043      	beq.n	80078c4 <HAL_UART_Receive_IT+0x9c>
 800783c:	2a00      	cmp	r2, #0
 800783e:	d041      	beq.n	80078c4 <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007840:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8007844:	2b01      	cmp	r3, #1
 8007846:	d03f      	beq.n	80078c8 <HAL_UART_Receive_IT+0xa0>
 8007848:	2301      	movs	r3, #1
 800784a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800784e:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8007850:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8007852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8007856:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800785a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800785e:	d123      	bne.n	80078a8 <HAL_UART_Receive_IT+0x80>
 8007860:	6903      	ldr	r3, [r0, #16]
 8007862:	b9fb      	cbnz	r3, 80078a4 <HAL_UART_Receive_IT+0x7c>
 8007864:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007868:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	2300      	movs	r3, #0
 800786e:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8007870:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007874:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8007876:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8007878:	bf0c      	ite	eq
 800787a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 800787c:	2322      	movne	r3, #34	; 0x22
 800787e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007888:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800788a:	6893      	ldr	r3, [r2, #8]
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007892:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8007894:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007896:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 800789a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800789e:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 80078a0:	4618      	mov	r0, r3
 80078a2:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80078a4:	23ff      	movs	r3, #255	; 0xff
 80078a6:	e7df      	b.n	8007868 <HAL_UART_Receive_IT+0x40>
 80078a8:	b923      	cbnz	r3, 80078b4 <HAL_UART_Receive_IT+0x8c>
 80078aa:	6903      	ldr	r3, [r0, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0f9      	beq.n	80078a4 <HAL_UART_Receive_IT+0x7c>
 80078b0:	237f      	movs	r3, #127	; 0x7f
 80078b2:	e7d9      	b.n	8007868 <HAL_UART_Receive_IT+0x40>
 80078b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b8:	d1d8      	bne.n	800786c <HAL_UART_Receive_IT+0x44>
 80078ba:	6903      	ldr	r3, [r0, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0f7      	beq.n	80078b0 <HAL_UART_Receive_IT+0x88>
 80078c0:	233f      	movs	r3, #63	; 0x3f
 80078c2:	e7d1      	b.n	8007868 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 80078c4:	2001      	movs	r0, #1
 80078c6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80078c8:	2002      	movs	r0, #2
  }
}
 80078ca:	4770      	bx	lr

080078cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80078d0:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078d2:	6921      	ldr	r1, [r4, #16]
 80078d4:	68a3      	ldr	r3, [r4, #8]
 80078d6:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80078d8:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078da:	430b      	orrs	r3, r1
 80078dc:	6961      	ldr	r1, [r4, #20]
 80078de:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80078e0:	49b0      	ldr	r1, [pc, #704]	; (8007ba4 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80078e4:	4001      	ands	r1, r0
 80078e6:	430b      	orrs	r3, r1
 80078e8:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ea:	686b      	ldr	r3, [r5, #4]
 80078ec:	68e1      	ldr	r1, [r4, #12]
 80078ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078f2:	430b      	orrs	r3, r1
 80078f4:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078f6:	4bac      	ldr	r3, [pc, #688]	; (8007ba8 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078f8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078fa:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078fc:	bf1c      	itt	ne
 80078fe:	6a23      	ldrne	r3, [r4, #32]
 8007900:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007902:	68ab      	ldr	r3, [r5, #8]
 8007904:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007908:	430b      	orrs	r3, r1
 800790a:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800790c:	4ba7      	ldr	r3, [pc, #668]	; (8007bac <UART_SetConfig+0x2e0>)
 800790e:	429d      	cmp	r5, r3
 8007910:	d118      	bne.n	8007944 <UART_SetConfig+0x78>
 8007912:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007916:	49a6      	ldr	r1, [pc, #664]	; (8007bb0 <UART_SetConfig+0x2e4>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007920:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007924:	5ccb      	ldrb	r3, [r1, r3]
 8007926:	f040 80c6 	bne.w	8007ab6 <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 800792a:	2b08      	cmp	r3, #8
 800792c:	d828      	bhi.n	8007980 <UART_SetConfig+0xb4>
 800792e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007932:	011a      	.short	0x011a
 8007934:	012f00bf 	.word	0x012f00bf
 8007938:	01140027 	.word	0x01140027
 800793c:	00270027 	.word	0x00270027
 8007940:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007944:	4b9b      	ldr	r3, [pc, #620]	; (8007bb4 <UART_SetConfig+0x2e8>)
 8007946:	429d      	cmp	r5, r3
 8007948:	d107      	bne.n	800795a <UART_SetConfig+0x8e>
 800794a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800794e:	499a      	ldr	r1, [pc, #616]	; (8007bb8 <UART_SetConfig+0x2ec>)
 8007950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007954:	f003 030c 	and.w	r3, r3, #12
 8007958:	e7e2      	b.n	8007920 <UART_SetConfig+0x54>
 800795a:	4b98      	ldr	r3, [pc, #608]	; (8007bbc <UART_SetConfig+0x2f0>)
 800795c:	429d      	cmp	r5, r3
 800795e:	d120      	bne.n	80079a2 <UART_SetConfig+0xd6>
 8007960:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800796c:	2b10      	cmp	r3, #16
 800796e:	f000 80f1 	beq.w	8007b54 <UART_SetConfig+0x288>
 8007972:	d808      	bhi.n	8007986 <UART_SetConfig+0xba>
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80f3 	beq.w	8007b60 <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800797a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800797e:	d134      	bne.n	80079ea <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007980:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 8007982:	2300      	movs	r3, #0
 8007984:	e0f9      	b.n	8007b7a <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007986:	2b20      	cmp	r3, #32
 8007988:	f000 80ff 	beq.w	8007b8a <UART_SetConfig+0x2be>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d1f4      	bne.n	800797a <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007990:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007994:	f040 80c1 	bne.w	8007b1a <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007998:	6860      	ldr	r0, [r4, #4]
 800799a:	0843      	lsrs	r3, r0, #1
 800799c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80079a0:	e0fc      	b.n	8007b9c <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079a2:	4b87      	ldr	r3, [pc, #540]	; (8007bc0 <UART_SetConfig+0x2f4>)
 80079a4:	429d      	cmp	r5, r3
 80079a6:	d122      	bne.n	80079ee <UART_SetConfig+0x122>
 80079a8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079b4:	2b40      	cmp	r3, #64	; 0x40
 80079b6:	f000 80c0 	beq.w	8007b3a <UART_SetConfig+0x26e>
 80079ba:	d806      	bhi.n	80079ca <UART_SetConfig+0xfe>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80b1 	beq.w	8007b24 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 80079c2:	4b79      	ldr	r3, [pc, #484]	; (8007ba8 <UART_SetConfig+0x2dc>)
 80079c4:	429d      	cmp	r5, r3
 80079c6:	d1d8      	bne.n	800797a <UART_SetConfig+0xae>
 80079c8:	e00f      	b.n	80079ea <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ca:	2b80      	cmp	r3, #128	; 0x80
 80079cc:	f000 80bc 	beq.w	8007b48 <UART_SetConfig+0x27c>
 80079d0:	2bc0      	cmp	r3, #192	; 0xc0
 80079d2:	d1f6      	bne.n	80079c2 <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 80079d4:	4b74      	ldr	r3, [pc, #464]	; (8007ba8 <UART_SetConfig+0x2dc>)
 80079d6:	429d      	cmp	r5, r3
 80079d8:	d1da      	bne.n	8007990 <UART_SetConfig+0xc4>
 80079da:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 80079dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80079e6:	4281      	cmp	r1, r0
 80079e8:	d92b      	bls.n	8007a42 <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80079ea:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 80079ec:	e04b      	b.n	8007a86 <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ee:	4b75      	ldr	r3, [pc, #468]	; (8007bc4 <UART_SetConfig+0x2f8>)
 80079f0:	429d      	cmp	r5, r3
 80079f2:	d111      	bne.n	8007a18 <UART_SetConfig+0x14c>
 80079f4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a04:	f000 8099 	beq.w	8007b3a <UART_SetConfig+0x26e>
 8007a08:	d9d8      	bls.n	80079bc <UART_SetConfig+0xf0>
 8007a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0e:	f000 809b 	beq.w	8007b48 <UART_SetConfig+0x27c>
 8007a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a16:	e7dc      	b.n	80079d2 <UART_SetConfig+0x106>
 8007a18:	4b63      	ldr	r3, [pc, #396]	; (8007ba8 <UART_SetConfig+0x2dc>)
 8007a1a:	429d      	cmp	r5, r3
 8007a1c:	d1ad      	bne.n	800797a <UART_SetConfig+0xae>
 8007a1e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2e:	f000 8084 	beq.w	8007b3a <UART_SetConfig+0x26e>
 8007a32:	d9c3      	bls.n	80079bc <UART_SetConfig+0xf0>
 8007a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a38:	f000 8086 	beq.w	8007b48 <UART_SetConfig+0x27c>
 8007a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a40:	e7c7      	b.n	80079d2 <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007a42:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8007a46:	d8d0      	bhi.n	80079ea <UART_SetConfig+0x11e>
        switch (clocksource)
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d82f      	bhi.n	8007aac <UART_SetConfig+0x1e0>
 8007a4c:	e8df f003 	tbb	[pc, r3]
 8007a50:	2e1d2e05 	.word	0x2e1d2e05
 8007a54:	2e2e2e25 	.word	0x2e2e2e25
 8007a58:	28          	.byte	0x28
 8007a59:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007a5a:	f7fe ff5f 	bl	800691c <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a64:	0856      	lsrs	r6, r2, #1
 8007a66:	2700      	movs	r7, #0
 8007a68:	fbe1 6700 	umlal	r6, r7, r1, r0
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4630      	mov	r0, r6
 8007a70:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007a72:	f7f9 f905 	bl	8000c80 <__aeabi_uldivmod>
          break;
 8007a76:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <UART_SetConfig+0x2fc>)
 8007a7a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	d8b3      	bhi.n	80079ea <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	60d8      	str	r0, [r3, #12]

}
 8007a86:	4610      	mov	r0, r2
 8007a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007a8a:	4850      	ldr	r0, [pc, #320]	; (8007bcc <UART_SetConfig+0x300>)
 8007a8c:	0855      	lsrs	r5, r2, #1
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007a94:	f141 0100 	adc.w	r1, r1, #0
 8007a98:	e7eb      	b.n	8007a72 <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a9a:	f7fe fc65 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8007a9e:	e7de      	b.n	8007a5e <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007aa0:	0850      	lsrs	r0, r2, #1
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8007aaa:	e7f3      	b.n	8007a94 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 8007aac:	2201      	movs	r2, #1
 8007aae:	e7e3      	b.n	8007a78 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007ab0:	f7fe ff4c 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8007ab4:	e059      	b.n	8007b6a <UART_SetConfig+0x29e>
    switch (clocksource)
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d897      	bhi.n	80079ea <UART_SetConfig+0x11e>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <UART_SetConfig+0x1f4>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007aff 	.word	0x08007aff
 8007acc:	080079eb 	.word	0x080079eb
 8007ad0:	08007b15 	.word	0x08007b15
 8007ad4:	080079eb 	.word	0x080079eb
 8007ad8:	080079eb 	.word	0x080079eb
 8007adc:	080079eb 	.word	0x080079eb
 8007ae0:	08007b1b 	.word	0x08007b1b
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007ae4:	f7fe ff1a 	bl	800691c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007aee:	fbb0 f0f3 	udiv	r0, r0, r3
 8007af2:	b280      	uxth	r0, r0
 8007af4:	60e8      	str	r0, [r5, #12]
 8007af6:	e01e      	b.n	8007b36 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007af8:	f7fe ff28 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8007afc:	e7f4      	b.n	8007ae8 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	0853      	lsrs	r3, r2, #1
 8007b02:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007b06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	60eb      	str	r3, [r5, #12]
 8007b12:	e010      	b.n	8007b36 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b14:	f7fe fc28 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8007b18:	e7e6      	b.n	8007ae8 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007b1a:	6862      	ldr	r2, [r4, #4]
 8007b1c:	0853      	lsrs	r3, r2, #1
 8007b1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007b22:	e7f2      	b.n	8007b0a <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b24:	4b20      	ldr	r3, [pc, #128]	; (8007ba8 <UART_SetConfig+0x2dc>)
 8007b26:	429d      	cmp	r5, r3
 8007b28:	d11a      	bne.n	8007b60 <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8007b2a:	f7fe fef7 	bl	800691c <HAL_RCC_GetPCLK1Freq>
      break;
 8007b2e:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f47f af55 	bne.w	80079e0 <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b36:	2200      	movs	r2, #0
      break;
 8007b38:	e7a5      	b.n	8007a86 <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <UART_SetConfig+0x2dc>)
 8007b3c:	429d      	cmp	r5, r3
 8007b3e:	d109      	bne.n	8007b54 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8007b40:	f7fe fc12 	bl	8006368 <HAL_RCC_GetSysClockFreq>
      break;
 8007b44:	2304      	movs	r3, #4
 8007b46:	e7f3      	b.n	8007b30 <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <UART_SetConfig+0x2dc>)
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	d11d      	bne.n	8007b8a <UART_SetConfig+0x2be>
 8007b4e:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8007b50:	481f      	ldr	r0, [pc, #124]	; (8007bd0 <UART_SetConfig+0x304>)
 8007b52:	e745      	b.n	80079e0 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b54:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b58:	d1dc      	bne.n	8007b14 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b5a:	f7fe fc05 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8007b5e:	e004      	b.n	8007b6a <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b64:	d1be      	bne.n	8007ae4 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007b66:	f7fe fed9 	bl	800691c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b6a:	6861      	ldr	r1, [r4, #4]
 8007b6c:	084a      	lsrs	r2, r1, #1
 8007b6e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8007b72:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b76:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b78:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8007b7a:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 8007b7e:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8007b80:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8007b84:	430b      	orrs	r3, r1
 8007b86:	60c3      	str	r3, [r0, #12]
 8007b88:	e77d      	b.n	8007a86 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b8e:	d1b6      	bne.n	8007afe <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007b90:	6860      	ldr	r0, [r4, #4]
 8007b92:	0843      	lsrs	r3, r0, #1
 8007b94:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007b98:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8007ba0:	e7e9      	b.n	8007b76 <UART_SetConfig+0x2aa>
 8007ba2:	bf00      	nop
 8007ba4:	efff69f3 	.word	0xefff69f3
 8007ba8:	40008000 	.word	0x40008000
 8007bac:	40013800 	.word	0x40013800
 8007bb0:	0800e3e7 	.word	0x0800e3e7
 8007bb4:	40004400 	.word	0x40004400
 8007bb8:	0800e3eb 	.word	0x0800e3eb
 8007bbc:	40004800 	.word	0x40004800
 8007bc0:	40004c00 	.word	0x40004c00
 8007bc4:	40005000 	.word	0x40005000
 8007bc8:	000ffcff 	.word	0x000ffcff
 8007bcc:	f4240000 	.word	0xf4240000
 8007bd0:	00f42400 	.word	0x00f42400

08007bd4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007bd6:	07da      	lsls	r2, r3, #31
{
 8007bd8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bda:	d506      	bpl.n	8007bea <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bdc:	6801      	ldr	r1, [r0, #0]
 8007bde:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007be0:	684a      	ldr	r2, [r1, #4]
 8007be2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007be6:	4322      	orrs	r2, r4
 8007be8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bea:	079c      	lsls	r4, r3, #30
 8007bec:	d506      	bpl.n	8007bfc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bee:	6801      	ldr	r1, [r0, #0]
 8007bf0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007bf2:	684a      	ldr	r2, [r1, #4]
 8007bf4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007bf8:	4322      	orrs	r2, r4
 8007bfa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bfc:	0759      	lsls	r1, r3, #29
 8007bfe:	d506      	bpl.n	8007c0e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c00:	6801      	ldr	r1, [r0, #0]
 8007c02:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007c04:	684a      	ldr	r2, [r1, #4]
 8007c06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c0a:	4322      	orrs	r2, r4
 8007c0c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c0e:	071a      	lsls	r2, r3, #28
 8007c10:	d506      	bpl.n	8007c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c12:	6801      	ldr	r1, [r0, #0]
 8007c14:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007c16:	684a      	ldr	r2, [r1, #4]
 8007c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c1c:	4322      	orrs	r2, r4
 8007c1e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c20:	06dc      	lsls	r4, r3, #27
 8007c22:	d506      	bpl.n	8007c32 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c24:	6801      	ldr	r1, [r0, #0]
 8007c26:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007c28:	688a      	ldr	r2, [r1, #8]
 8007c2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c2e:	4322      	orrs	r2, r4
 8007c30:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c32:	0699      	lsls	r1, r3, #26
 8007c34:	d506      	bpl.n	8007c44 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c36:	6801      	ldr	r1, [r0, #0]
 8007c38:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007c3a:	688a      	ldr	r2, [r1, #8]
 8007c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c40:	4322      	orrs	r2, r4
 8007c42:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c44:	065a      	lsls	r2, r3, #25
 8007c46:	d50f      	bpl.n	8007c68 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c48:	6801      	ldr	r1, [r0, #0]
 8007c4a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007c4c:	684a      	ldr	r2, [r1, #4]
 8007c4e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007c52:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c54:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c58:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c5a:	d105      	bne.n	8007c68 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c5c:	684a      	ldr	r2, [r1, #4]
 8007c5e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007c60:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007c64:	4322      	orrs	r2, r4
 8007c66:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c68:	061b      	lsls	r3, r3, #24
 8007c6a:	d506      	bpl.n	8007c7a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c6c:	6802      	ldr	r2, [r0, #0]
 8007c6e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007c70:	6853      	ldr	r3, [r2, #4]
 8007c72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c76:	430b      	orrs	r3, r1
 8007c78:	6053      	str	r3, [r2, #4]
 8007c7a:	bd10      	pop	{r4, pc}

08007c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	460e      	mov	r6, r1
 8007c84:	4690      	mov	r8, r2
 8007c86:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8007c88:	f7fd fb24 	bl	80052d4 <HAL_GetTick>
 8007c8c:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8007c8e:	f1b8 0f00 	cmp.w	r8, #0
 8007c92:	d02f      	beq.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	69d3      	ldr	r3, [r2, #28]
 8007c98:	ea36 0303 	bics.w	r3, r6, r3
 8007c9c:	d12f      	bne.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007c9e:	1c6b      	adds	r3, r5, #1
 8007ca0:	d0f9      	beq.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007ca2:	b145      	cbz	r5, 8007cb6 <UART_WaitOnFlagUntilTimeout+0x3a>
 8007ca4:	f7fd fb16 	bl	80052d4 <HAL_GetTick>
 8007ca8:	1bc0      	subs	r0, r0, r7
 8007caa:	4285      	cmp	r5, r0
 8007cac:	d2f2      	bcs.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x18>
 8007cae:	e002      	b.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8007cb0:	1c69      	adds	r1, r5, #1
 8007cb2:	d020      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007cb4:	b9cd      	cbnz	r5, 8007cea <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cbe:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	f022 0220 	bic.w	r2, r2, #32
 8007cc6:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cce:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	f022 0201 	bic.w	r2, r2, #1
 8007cd6:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8007ce4:	2003      	movs	r0, #3
 8007ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007cea:	f7fd faf3 	bl	80052d4 <HAL_GetTick>
 8007cee:	1bc0      	subs	r0, r0, r7
 8007cf0:	4285      	cmp	r5, r0
 8007cf2:	d3e0      	bcc.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	69d3      	ldr	r3, [r2, #28]
 8007cf8:	ea36 0303 	bics.w	r3, r6, r3
 8007cfc:	d1d8      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8007cfe:	2000      	movs	r0, #0
 8007d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d04 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d06:	6803      	ldr	r3, [r0, #0]
{
 8007d08:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0a:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	0719      	lsls	r1, r3, #28
{
 8007d10:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	d413      	bmi.n	8007d3c <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	075b      	lsls	r3, r3, #29
 8007d1a:	d508      	bpl.n	8007d2e <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d20:	2200      	movs	r2, #0
 8007d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff ffa8 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007d2c:	b970      	cbnz	r0, 8007d4c <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 8007d2e:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8007d30:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8007d32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8007d36:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8007d3a:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d44:	f7ff ff9a 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d0e3      	beq.n	8007d14 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8007d4c:	2003      	movs	r0, #3
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <HAL_UART_Init>:
{
 8007d50:	b510      	push	{r4, lr}
  if(huart == NULL)
 8007d52:	4604      	mov	r4, r0
 8007d54:	b360      	cbz	r0, 8007db0 <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8007d56:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d5e:	b91b      	cbnz	r3, 8007d68 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007d60:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8007d64:	f7ff fd44 	bl	80077f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007d68:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8007d70:	6813      	ldr	r3, [r2, #0]
 8007d72:	f023 0301 	bic.w	r3, r3, #1
 8007d76:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7ff fda7 	bl	80078cc <UART_SetConfig>
 8007d7e:	2801      	cmp	r0, #1
 8007d80:	d016      	beq.n	8007db0 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d84:	b113      	cbz	r3, 8007d8c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff ff24 	bl	8007bd4 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d94:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d9c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007da4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007dac:	f7ff bfaa 	b.w	8007d04 <UART_CheckIdleState>
}
 8007db0:	2001      	movs	r0, #1
 8007db2:	bd10      	pop	{r4, pc}

08007db4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007db8:	680a      	ldr	r2, [r1, #0]
 8007dba:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007dbe:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007dc2:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007dc6:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007dc8:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007dca:	fa32 f304 	lsrs.w	r3, r2, r4
 8007dce:	d10d      	bne.n	8007dec <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007dd0:	684b      	ldr	r3, [r1, #4]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d806      	bhi.n	8007de6 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007dd8:	6843      	ldr	r3, [r0, #4]
 8007dda:	68c9      	ldr	r1, [r1, #12]
 8007ddc:	ea23 0302 	bic.w	r3, r3, r2
 8007de0:	434a      	muls	r2, r1
 8007de2:	431a      	orrs	r2, r3
 8007de4:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8007de6:	2001      	movs	r0, #1
 8007de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007dec:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8007df0:	4013      	ands	r3, r2
 8007df2:	d069      	beq.n	8007ec8 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007df4:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007df8:	f8d0 9000 	ldr.w	r9, [r0]
 8007dfc:	fa93 fca3 	rbit	ip, r3
 8007e00:	fabc fc8c 	clz	ip, ip
 8007e04:	fa93 f6a3 	rbit	r6, r3
 8007e08:	fab6 f686 	clz	r6, r6
 8007e0c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007e10:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007e14:	0076      	lsls	r6, r6, #1
 8007e16:	ea29 0c0c 	bic.w	ip, r9, ip
 8007e1a:	fa08 f606 	lsl.w	r6, r8, r6
 8007e1e:	ea4c 0606 	orr.w	r6, ip, r6
 8007e22:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007e24:	f108 36ff 	add.w	r6, r8, #4294967295
 8007e28:	2e01      	cmp	r6, #1
 8007e2a:	d816      	bhi.n	8007e5a <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007e2c:	6886      	ldr	r6, [r0, #8]
 8007e2e:	fa93 fca3 	rbit	ip, r3
 8007e32:	fabc fc8c 	clz	ip, ip
 8007e36:	fa93 f9a3 	rbit	r9, r3
 8007e3a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007e3e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007e42:	ea26 0c0c 	bic.w	ip, r6, ip
 8007e46:	fab9 f989 	clz	r9, r9
 8007e4a:	688e      	ldr	r6, [r1, #8]
 8007e4c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007e50:	fa06 f609 	lsl.w	r6, r6, r9
 8007e54:	ea4c 0606 	orr.w	r6, ip, r6
 8007e58:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007e5a:	68c6      	ldr	r6, [r0, #12]
 8007e5c:	fa93 fca3 	rbit	ip, r3
 8007e60:	fabc fc8c 	clz	ip, ip
 8007e64:	fa93 f9a3 	rbit	r9, r3
 8007e68:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007e6c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007e70:	ea26 0c0c 	bic.w	ip, r6, ip
 8007e74:	fab9 f989 	clz	r9, r9
 8007e78:	690e      	ldr	r6, [r1, #16]
 8007e7a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007e7e:	fa06 f609 	lsl.w	r6, r6, r9
 8007e82:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007e86:	f1b8 0f02 	cmp.w	r8, #2
 8007e8a:	60c6      	str	r6, [r0, #12]
 8007e8c:	d11c      	bne.n	8007ec8 <LL_GPIO_Init+0x114>
 8007e8e:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007e92:	fab6 f686 	clz	r6, r6
 8007e96:	2e07      	cmp	r6, #7
 8007e98:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8007e9c:	dc16      	bgt.n	8007ecc <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007e9e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8007ea2:	fa93 f6a3 	rbit	r6, r3
 8007ea6:	fab6 f686 	clz	r6, r6
 8007eaa:	fa93 f3a3 	rbit	r3, r3
 8007eae:	fab3 f383 	clz	r3, r3
 8007eb2:	00b6      	lsls	r6, r6, #2
 8007eb4:	fa07 f606 	lsl.w	r6, r7, r6
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	ea28 0606 	bic.w	r6, r8, r6
 8007ebe:	fa0c fc03 	lsl.w	ip, ip, r3
 8007ec2:	ea46 060c 	orr.w	r6, r6, ip
 8007ec6:	6206      	str	r6, [r0, #32]
    pinpos++;
 8007ec8:	3401      	adds	r4, #1
 8007eca:	e77e      	b.n	8007dca <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007ecc:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8007ed0:	0a1b      	lsrs	r3, r3, #8
 8007ed2:	fa93 f6a3 	rbit	r6, r3
 8007ed6:	fab6 f686 	clz	r6, r6
 8007eda:	fa93 f3a3 	rbit	r3, r3
 8007ede:	fab3 f383 	clz	r3, r3
 8007ee2:	00b6      	lsls	r6, r6, #2
 8007ee4:	fa07 f606 	lsl.w	r6, r7, r6
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	ea28 0606 	bic.w	r6, r8, r6
 8007eee:	fa0c f303 	lsl.w	r3, ip, r3
 8007ef2:	4333      	orrs	r3, r6
 8007ef4:	6243      	str	r3, [r0, #36]	; 0x24
 8007ef6:	e7e7      	b.n	8007ec8 <LL_GPIO_Init+0x114>

08007ef8 <LL_RTC_TIME_Config>:
{
 8007ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007f00:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8007f04:	fa97 f7a7 	rbit	r7, r7
 8007f08:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f0c:	fab7 f787 	clz	r7, r7
 8007f10:	fa94 f4a4 	rbit	r4, r4
 8007f14:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8007f18:	fab4 fa84 	clz	sl, r4
 8007f1c:	fa96 f6a6 	rbit	r6, r6
 8007f20:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f24:	fab6 f686 	clz	r6, r6
 8007f28:	fa99 f9a9 	rbit	r9, r9
 8007f2c:	2570      	movs	r5, #112	; 0x70
 8007f2e:	fab9 f989 	clz	r9, r9
 8007f32:	fa95 f5a5 	rbit	r5, r5
 8007f36:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f3a:	fab5 f585 	clz	r5, r5
 8007f3e:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f42:	f8d0 e000 	ldr.w	lr, [r0]
 8007f46:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f4a:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f4e:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f52:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f56:	ea4e 0101 	orr.w	r1, lr, r1
 8007f5a:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f5c:	f003 040f 	and.w	r4, r3, #15
 8007f60:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f64:	fab8 f888 	clz	r8, r8
 8007f68:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f6c:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f70:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007f78:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f7a:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f7e:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f84:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f86:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f88:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f8a:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8007f8e:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f90:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f92:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f96:	432b      	orrs	r3, r5
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007fa0 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8007fa8:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8007fac:	fa9a faaa 	rbit	sl, sl
 8007fb0:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8007fb4:	faba fa8a 	clz	sl, sl
 8007fb8:	fa97 f7a7 	rbit	r7, r7
 8007fbc:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007fc0:	fab7 f787 	clz	r7, r7
 8007fc4:	fa94 f4a4 	rbit	r4, r4
 8007fc8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8007fcc:	fab4 fb84 	clz	fp, r4
 8007fd0:	fa96 f6a6 	rbit	r6, r6
 8007fd4:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8007fd8:	fab6 f686 	clz	r6, r6
 8007fdc:	fa98 f8a8 	rbit	r8, r8
 8007fe0:	2530      	movs	r5, #48	; 0x30
 8007fe2:	fab8 f888 	clz	r8, r8
 8007fe6:	fa95 f5a5 	rbit	r5, r5
 8007fea:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007fee:	fab5 f585 	clz	r5, r5
 8007ff2:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007ff6:	f00e 040f 	and.w	r4, lr, #15
 8007ffa:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8007ffe:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008002:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8008006:	4321      	orrs	r1, r4
 8008008:	4c12      	ldr	r4, [pc, #72]	; (8008054 <LL_RTC_DATE_Config+0xb4>)
 800800a:	ea09 0404 	and.w	r4, r9, r4
 800800e:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8008010:	f003 040f 	and.w	r4, r3, #15
 8008014:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008018:	fabc fc8c 	clz	ip, ip
 800801c:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008020:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008024:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8008028:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 800802c:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800802e:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8008032:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8008036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800803a:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800803c:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800803e:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008040:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008044:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008046:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008048:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800804a:	431a      	orrs	r2, r3
 800804c:	6042      	str	r2, [r0, #4]
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	bf00      	nop
 8008054:	ff0000c0 	.word	0xff0000c0

08008058 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8008058:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800805a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800805e:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8008060:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8008062:	065a      	lsls	r2, r3, #25
 8008064:	d41c      	bmi.n	80080a0 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8008066:	f04f 33ff 	mov.w	r3, #4294967295
 800806a:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800806c:	68c3      	ldr	r3, [r0, #12]
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800806e:	490d      	ldr	r1, [pc, #52]	; (80080a4 <LL_RTC_EnterInitMode+0x4c>)
 8008070:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8008074:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8008076:	9c01      	ldr	r4, [sp, #4]
 8008078:	b104      	cbz	r4, 800807c <LL_RTC_EnterInitMode+0x24>
 800807a:	b113      	cbz	r3, 8008082 <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 800807c:	4610      	mov	r0, r2
 800807e:	b002      	add	sp, #8
 8008080:	bd10      	pop	{r4, pc}
 8008082:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8008084:	03db      	lsls	r3, r3, #15
        timeout --;
 8008086:	bf42      	ittt	mi
 8008088:	9b01      	ldrmi	r3, [sp, #4]
 800808a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800808e:	9301      	strmi	r3, [sp, #4]
 8008090:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8008092:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8008094:	2c00      	cmp	r4, #0
 8008096:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800809a:	bf08      	it	eq
 800809c:	2200      	moveq	r2, #0
 800809e:	e7ea      	b.n	8008076 <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 80080a0:	2201      	movs	r2, #1
 80080a2:	e7eb      	b.n	800807c <LL_RTC_EnterInitMode+0x24>
 80080a4:	e000e010 	.word	0xe000e010

080080a8 <LL_RTC_Init>:
{
 80080a8:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80080aa:	23ca      	movs	r3, #202	; 0xca
 80080ac:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80080ae:	2353      	movs	r3, #83	; 0x53
 80080b0:	6243      	str	r3, [r0, #36]	; 0x24
 80080b2:	4604      	mov	r4, r0
 80080b4:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80080b6:	f7ff ffcf 	bl	8008058 <LL_RTC_EnterInitMode>
 80080ba:	b1f0      	cbz	r0, 80080fa <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 80080bc:	68a3      	ldr	r3, [r4, #8]
 80080be:	682a      	ldr	r2, [r5, #0]
 80080c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	68aa      	ldr	r2, [r5, #8]
 80080cc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080d4:	4313      	orrs	r3, r2
 80080d6:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 80080d8:	6921      	ldr	r1, [r4, #16]
 80080da:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80080de:	fa93 f3a3 	rbit	r3, r3
 80080e2:	fab3 f283 	clz	r2, r3
 80080e6:	686b      	ldr	r3, [r5, #4]
 80080e8:	4093      	lsls	r3, r2
 80080ea:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 80080ee:	4313      	orrs	r3, r2
 80080f0:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80080f2:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80080f6:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 80080f8:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80080fa:	23ff      	movs	r3, #255	; 0xff
 80080fc:	6263      	str	r3, [r4, #36]	; 0x24
}
 80080fe:	bd38      	pop	{r3, r4, r5, pc}

08008100 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8008100:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8008102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008106:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8008108:	68c3      	ldr	r3, [r0, #12]
 800810a:	491e      	ldr	r1, [pc, #120]	; (8008184 <LL_RTC_WaitForSynchro+0x84>)
 800810c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008110:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8008114:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8008116:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8008118:	2301      	movs	r3, #1
 800811a:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 800811e:	9c01      	ldr	r4, [sp, #4]
 8008120:	b91c      	cbnz	r4, 800812a <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8008122:	b99b      	cbnz	r3, 800814c <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 8008124:	4618      	mov	r0, r3
 8008126:	b002      	add	sp, #8
 8008128:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 800812a:	2a00      	cmp	r2, #0
 800812c:	d0f9      	beq.n	8008122 <LL_RTC_WaitForSynchro+0x22>
 800812e:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8008130:	03d4      	lsls	r4, r2, #15
      timeout--;
 8008132:	bf42      	ittt	mi
 8008134:	9a01      	ldrmi	r2, [sp, #4]
 8008136:	f102 32ff 	addmi.w	r2, r2, #4294967295
 800813a:	9201      	strmi	r2, [sp, #4]
 800813c:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 800813e:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8008140:	2c00      	cmp	r4, #0
 8008142:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008146:	bf08      	it	eq
 8008148:	2300      	moveq	r3, #0
 800814a:	e7e8      	b.n	800811e <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 800814c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	68c2      	ldr	r2, [r0, #12]
 8008154:	490b      	ldr	r1, [pc, #44]	; (8008184 <LL_RTC_WaitForSynchro+0x84>)
 8008156:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 800815a:	9c01      	ldr	r4, [sp, #4]
 800815c:	2c00      	cmp	r4, #0
 800815e:	d0e1      	beq.n	8008124 <LL_RTC_WaitForSynchro+0x24>
 8008160:	2a00      	cmp	r2, #0
 8008162:	d1df      	bne.n	8008124 <LL_RTC_WaitForSynchro+0x24>
 8008164:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8008166:	03d2      	lsls	r2, r2, #15
        timeout--;
 8008168:	bf42      	ittt	mi
 800816a:	9a01      	ldrmi	r2, [sp, #4]
 800816c:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8008170:	9201      	strmi	r2, [sp, #4]
 8008172:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8008174:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8008176:	2c00      	cmp	r4, #0
 8008178:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800817c:	bf08      	it	eq
 800817e:	2300      	moveq	r3, #0
 8008180:	e7eb      	b.n	800815a <LL_RTC_WaitForSynchro+0x5a>
 8008182:	bf00      	nop
 8008184:	e000e010 	.word	0xe000e010

08008188 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8008188:	6883      	ldr	r3, [r0, #8]
{
 800818a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800818c:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800818e:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8008190:	bf5c      	itt	pl
 8008192:	2300      	movpl	r3, #0
 8008194:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008196:	23ca      	movs	r3, #202	; 0xca
 8008198:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800819a:	2353      	movs	r3, #83	; 0x53
 800819c:	6243      	str	r3, [r0, #36]	; 0x24
{
 800819e:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80081a0:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80081a2:	f7ff ff59 	bl	8008058 <LL_RTC_EnterInitMode>
 80081a6:	b190      	cbz	r0, 80081ce <LL_RTC_TIME_Init+0x46>
 80081a8:	796b      	ldrb	r3, [r5, #5]
 80081aa:	792a      	ldrb	r2, [r5, #4]
 80081ac:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80081ae:	b196      	cbz	r6, 80081d6 <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80081b0:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80081b2:	6829      	ldr	r1, [r5, #0]
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7ff fe9f 	bl	8007ef8 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80081ba:	4b14      	ldr	r3, [pc, #80]	; (800820c <LL_RTC_TIME_Init+0x84>)
 80081bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081c0:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80081c2:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80081c4:	069b      	lsls	r3, r3, #26
 80081c6:	d41e      	bmi.n	8008206 <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 80081c8:	4620      	mov	r0, r4
 80081ca:	f7ff ff99 	bl	8008100 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80081ce:	23ff      	movs	r3, #255	; 0xff
 80081d0:	6263      	str	r3, [r4, #36]	; 0x24
}
 80081d2:	b002      	add	sp, #8
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80081d6:	210a      	movs	r1, #10
 80081d8:	fbb3 f6f1 	udiv	r6, r3, r1
 80081dc:	fb01 3316 	mls	r3, r1, r6, r3
 80081e0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80081e4:	fbb2 f6f1 	udiv	r6, r2, r1
 80081e8:	fb01 2216 	mls	r2, r1, r6, r2
 80081ec:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80081f0:	fbb0 f6f1 	udiv	r6, r0, r1
 80081f4:	fb01 0116 	mls	r1, r1, r6, r0
 80081f8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80081fc:	b2c9      	uxtb	r1, r1
 80081fe:	9100      	str	r1, [sp, #0]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	e7d5      	b.n	80081b2 <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 8008206:	2001      	movs	r0, #1
 8008208:	e7e1      	b.n	80081ce <LL_RTC_TIME_Init+0x46>
 800820a:	bf00      	nop
 800820c:	40002800 	.word	0x40002800

08008210 <LL_RTC_DATE_Init>:
{
 8008210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8008216:	460f      	mov	r7, r1
 8008218:	b931      	cbnz	r1, 8008228 <LL_RTC_DATE_Init+0x18>
 800821a:	7853      	ldrb	r3, [r2, #1]
 800821c:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800821e:	bf42      	ittt	mi
 8008220:	f023 0310 	bicmi.w	r3, r3, #16
 8008224:	330a      	addmi	r3, #10
 8008226:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008228:	23ca      	movs	r3, #202	; 0xca
 800822a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800822c:	2353      	movs	r3, #83	; 0x53
 800822e:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8008230:	4620      	mov	r0, r4
 8008232:	f7ff ff11 	bl	8008058 <LL_RTC_EnterInitMode>
 8008236:	b198      	cbz	r0, 8008260 <LL_RTC_DATE_Init+0x50>
 8008238:	7873      	ldrb	r3, [r6, #1]
 800823a:	78b5      	ldrb	r5, [r6, #2]
 800823c:	7831      	ldrb	r1, [r6, #0]
 800823e:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8008240:	b197      	cbz	r7, 8008268 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8008242:	9600      	str	r6, [sp, #0]
 8008244:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8008246:	4620      	mov	r0, r4
 8008248:	f7ff feaa 	bl	8007fa0 <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800824c:	4b13      	ldr	r3, [pc, #76]	; (800829c <LL_RTC_DATE_Init+0x8c>)
 800824e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008252:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8008254:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8008256:	069b      	lsls	r3, r3, #26
 8008258:	d41e      	bmi.n	8008298 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff ff50 	bl	8008100 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008260:	23ff      	movs	r3, #255	; 0xff
 8008262:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008264:	b003      	add	sp, #12
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8008268:	200a      	movs	r0, #10
 800826a:	fbb3 f2f0 	udiv	r2, r3, r0
 800826e:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8008272:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8008276:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800827a:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800827e:	fbb6 f5f0 	udiv	r5, r6, r0
 8008282:	fb00 6015 	mls	r0, r0, r5, r6
 8008286:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800828a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 800828e:	b2c0      	uxtb	r0, r0
 8008290:	9000      	str	r0, [sp, #0]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	e7d6      	b.n	8008246 <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 8008298:	2001      	movs	r0, #1
 800829a:	e7e1      	b.n	8008260 <LL_RTC_DATE_Init+0x50>
 800829c:	40002800 	.word	0x40002800

080082a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80082a0:	b084      	sub	sp, #16
 80082a2:	b510      	push	{r4, lr}
 80082a4:	ac03      	add	r4, sp, #12
 80082a6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80082aa:	9904      	ldr	r1, [sp, #16]
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	6842      	ldr	r2, [r0, #4]
 80082b0:	430b      	orrs	r3, r1
 80082b2:	9905      	ldr	r1, [sp, #20]
 80082b4:	430b      	orrs	r3, r1
 80082b6:	9906      	ldr	r1, [sp, #24]
 80082b8:	430b      	orrs	r3, r1
 80082ba:	9907      	ldr	r1, [sp, #28]
 80082bc:	430b      	orrs	r3, r1
 80082be:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 80082c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80082c4:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80082c8:	430b      	orrs	r3, r1
 80082ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80082ce:	4313      	orrs	r3, r2
 80082d0:	6043      	str	r3, [r0, #4]
}
 80082d2:	b004      	add	sp, #16
 80082d4:	2000      	movs	r0, #0
 80082d6:	4770      	bx	lr

080082d8 <SDMMC_ReadFIFO>:
 80082d8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80082dc:	4770      	bx	lr

080082de <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80082de:	2303      	movs	r3, #3
 80082e0:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 80082e2:	2000      	movs	r0, #0
 80082e4:	4770      	bx	lr

080082e6 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80082e6:	6800      	ldr	r0, [r0, #0]
}
 80082e8:	f000 0003 	and.w	r0, r0, #3
 80082ec:	4770      	bx	lr

080082ee <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80082ee:	680b      	ldr	r3, [r1, #0]
 80082f0:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80082f2:	68c3      	ldr	r3, [r0, #12]
 80082f4:	684a      	ldr	r2, [r1, #4]
 80082f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082fa:	f023 030f 	bic.w	r3, r3, #15
 80082fe:	4313      	orrs	r3, r2
 8008300:	688a      	ldr	r2, [r1, #8]
 8008302:	4313      	orrs	r3, r2
 8008304:	68ca      	ldr	r2, [r1, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	690a      	ldr	r2, [r1, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 800830e:	2000      	movs	r0, #0
 8008310:	4770      	bx	lr

08008312 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 8008312:	6900      	ldr	r0, [r0, #16]
}
 8008314:	b2c0      	uxtb	r0, r0
 8008316:	4770      	bx	lr

08008318 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008318:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800831a:	3014      	adds	r0, #20
 800831c:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8008322:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	6818      	ldr	r0, [r3, #0]
}  
 8008328:	b002      	add	sp, #8
 800832a:	4770      	bx	lr

0800832c <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800832c:	680b      	ldr	r3, [r1, #0]
 800832e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008330:	684b      	ldr	r3, [r1, #4]
 8008332:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8008334:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008336:	688a      	ldr	r2, [r1, #8]
 8008338:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800833c:	4313      	orrs	r3, r2
 800833e:	68ca      	ldr	r2, [r1, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	690a      	ldr	r2, [r1, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	694a      	ldr	r2, [r1, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 800834c:	2000      	movs	r0, #0
 800834e:	4770      	bx	lr

08008350 <LL_SPI_Init>:
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8008350:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8008352:	065b      	lsls	r3, r3, #25
{
 8008354:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8008356:	d426      	bmi.n	80083a6 <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008358:	e891 0048 	ldmia.w	r1, {r3, r6}
 800835c:	4333      	orrs	r3, r6
 800835e:	68ce      	ldr	r6, [r1, #12]
 8008360:	694d      	ldr	r5, [r1, #20]
 8008362:	6804      	ldr	r4, [r0, #0]
 8008364:	6a0a      	ldr	r2, [r1, #32]
 8008366:	4333      	orrs	r3, r6
 8008368:	690e      	ldr	r6, [r1, #16]
 800836a:	4333      	orrs	r3, r6
 800836c:	698e      	ldr	r6, [r1, #24]
 800836e:	432b      	orrs	r3, r5
 8008370:	4333      	orrs	r3, r6
 8008372:	69ce      	ldr	r6, [r1, #28]
 8008374:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8008378:	4333      	orrs	r3, r6
 800837a:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 800837e:	4313      	orrs	r3, r2
 8008380:	4323      	orrs	r3, r4
 8008382:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8008384:	6844      	ldr	r4, [r0, #4]
 8008386:	688b      	ldr	r3, [r1, #8]
 8008388:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 800838c:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 8008390:	f024 0404 	bic.w	r4, r4, #4
 8008394:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8008396:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 800839a:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800839c:	d101      	bne.n	80083a2 <LL_SPI_Init+0x52>
 800839e:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80083a0:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80083a2:	2001      	movs	r0, #1
  }

  return status;
}
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80083a6:	2000      	movs	r0, #0
 80083a8:	bd70      	pop	{r4, r5, r6, pc}

080083aa <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083aa:	b084      	sub	sp, #16
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	ad05      	add	r5, sp, #20
 80083b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083b4:	68c3      	ldr	r3, [r0, #12]
 80083b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 80083ba:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083bc:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 80083be:	f000 fb75 	bl	8008aac <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80083c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083c6:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80083c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083cc:	2000      	movs	r0, #0
 80083ce:	b004      	add	sp, #16
 80083d0:	4770      	bx	lr

080083d2 <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083d2:	6883      	ldr	r3, [r0, #8]
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80083da:	2000      	movs	r0, #0
 80083dc:	4770      	bx	lr

080083de <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083de:	6883      	ldr	r3, [r0, #8]
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80083e6:	2000      	movs	r0, #0
 80083e8:	4770      	bx	lr

080083ea <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 80083ea:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80083ec:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 80083ee:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80083f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083f4:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 80083f6:	d108      	bne.n	800840a <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80083f8:	68c3      	ldr	r3, [r0, #12]
 80083fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083fe:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8008400:	2032      	movs	r0, #50	; 0x32
 8008402:	f7fc ff6d 	bl	80052e0 <HAL_Delay>
  
  return HAL_OK;
}
 8008406:	2000      	movs	r0, #0
 8008408:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 800840a:	2900      	cmp	r1, #0
 800840c:	d1f8      	bne.n	8008400 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800840e:	68c3      	ldr	r3, [r0, #12]
 8008410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008414:	60c3      	str	r3, [r0, #12]
 8008416:	e7f3      	b.n	8008400 <USB_SetCurrentMode+0x16>

08008418 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008418:	b084      	sub	sp, #16
 800841a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	a809      	add	r0, sp, #36	; 0x24
 8008422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008428:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800842a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800842e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008432:	4689      	mov	r9, r1
 8008434:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8008436:	b95f      	cbnz	r7, 8008450 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8008438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800843a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800843e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008446:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844e:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8008450:	2500      	movs	r5, #0
 8008452:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008456:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800845a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800845e:	2103      	movs	r1, #3
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f893 	bl	800858c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8008466:	2110      	movs	r1, #16
 8008468:	4620      	mov	r0, r4
 800846a:	f000 f86d 	bl	8008548 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800846e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f87a 	bl	800856c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 800847c:	6135      	str	r5, [r6, #16]
 800847e:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8008480:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8008482:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008486:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008488:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 800848a:	61f5      	str	r5, [r6, #28]
 800848c:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8008490:	454d      	cmp	r5, r9
 8008492:	d13c      	bne.n	800850e <USB_DevInit+0xf6>
 8008494:	2200      	movs	r2, #0
 8008496:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800849a:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800849c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80084a0:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 80084a4:	4295      	cmp	r5, r2
 80084a6:	d13e      	bne.n	8008526 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084a8:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 80084aa:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b2:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 80084b4:	d108      	bne.n	80084c8 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80084b6:	4b22      	ldr	r3, [pc, #136]	; (8008540 <USB_DevInit+0x128>)
 80084b8:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80084ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80084bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084c0:	f043 0303 	orr.w	r3, r3, #3
 80084c4:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 80084c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80084cc:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80084d0:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80084d2:	f1b8 0f00 	cmp.w	r8, #0
 80084d6:	d103      	bne.n	80084e0 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80084d8:	69a3      	ldr	r3, [r4, #24]
 80084da:	f043 0310 	orr.w	r3, r3, #16
 80084de:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80084e0:	69a2      	ldr	r2, [r4, #24]
 80084e2:	4b18      	ldr	r3, [pc, #96]	; (8008544 <USB_DevInit+0x12c>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80084e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084ea:	b11b      	cbz	r3, 80084f4 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084ec:	69a3      	ldr	r3, [r4, #24]
 80084ee:	f043 0308 	orr.w	r3, r3, #8
 80084f2:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80084f4:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80084f6:	bf01      	itttt	eq
 80084f8:	69a3      	ldreq	r3, [r4, #24]
 80084fa:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80084fe:	f043 0304 	orreq.w	r3, r3, #4
 8008502:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8008504:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008508:	2000      	movs	r0, #0
 800850a:	b004      	add	sp, #16
 800850c:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800850e:	f8d3 e000 	ldr.w	lr, [r3]
 8008512:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8008516:	bfb4      	ite	lt
 8008518:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 800851a:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 800851c:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 800851e:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008520:	6098      	str	r0, [r3, #8]
 8008522:	3320      	adds	r3, #32
 8008524:	e7b4      	b.n	8008490 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008526:	f8d3 c000 	ldr.w	ip, [r3]
 800852a:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800852e:	bfb4      	ite	lt
 8008530:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8008532:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8008534:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8008536:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8008538:	f8c3 e008 	str.w	lr, [r3, #8]
 800853c:	3320      	adds	r3, #32
 800853e:	e7b1      	b.n	80084a4 <USB_DevInit+0x8c>
 8008540:	00800100 	.word	0x00800100
 8008544:	803c3800 	.word	0x803c3800

08008548 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8008548:	0189      	lsls	r1, r1, #6
 800854a:	f041 0120 	orr.w	r1, r1, #32
 800854e:	4a06      	ldr	r2, [pc, #24]	; (8008568 <USB_FlushTxFifo+0x20>)
 8008550:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8008552:	3a01      	subs	r2, #1
 8008554:	d005      	beq.n	8008562 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008556:	6903      	ldr	r3, [r0, #16]
 8008558:	f013 0320 	ands.w	r3, r3, #32
 800855c:	d1f9      	bne.n	8008552 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800855e:	4618      	mov	r0, r3
 8008560:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008562:	2003      	movs	r0, #3
}
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	00030d41 	.word	0x00030d41

0800856c <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800856c:	2310      	movs	r3, #16
 800856e:	4a06      	ldr	r2, [pc, #24]	; (8008588 <USB_FlushRxFifo+0x1c>)
 8008570:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8008572:	3a01      	subs	r2, #1
 8008574:	d005      	beq.n	8008582 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008576:	6903      	ldr	r3, [r0, #16]
 8008578:	f013 0310 	ands.w	r3, r3, #16
 800857c:	d1f9      	bne.n	8008572 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800857e:	4618      	mov	r0, r3
 8008580:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008582:	2003      	movs	r0, #3
}
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	00030d41 	.word	0x00030d41

0800858c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 800858c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008590:	4319      	orrs	r1, r3
 8008592:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8008596:	2000      	movs	r0, #0
 8008598:	4770      	bx	lr

0800859a <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800859a:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 800859c:	784b      	ldrb	r3, [r1, #1]
 800859e:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80085a0:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80085a4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11b      	bne.n	80085e4 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80085ac:	40a3      	lsls	r3, r4
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80085b2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80085b6:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80085b8:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	0412      	lsls	r2, r2, #16
 80085c0:	d40e      	bmi.n	80085e0 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80085c2:	688a      	ldr	r2, [r1, #8]
 80085c4:	78c8      	ldrb	r0, [r1, #3]
 80085c6:	681d      	ldr	r5, [r3, #0]
 80085c8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80085cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085d4:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80085d8:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80085dc:	4328      	orrs	r0, r5
 80085de:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80085e0:	2000      	movs	r0, #0
 80085e2:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80085e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085e8:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80085ea:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80085ee:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80085f0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80085f4:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80085f6:	6803      	ldr	r3, [r0, #0]
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	d4f1      	bmi.n	80085e0 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80085fc:	688b      	ldr	r3, [r1, #8]
 80085fe:	78c9      	ldrb	r1, [r1, #3]
 8008600:	6802      	ldr	r2, [r0, #0]
 8008602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800860e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8008612:	4313      	orrs	r3, r2
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	e7e3      	b.n	80085e0 <USB_ActivateEndpoint+0x46>

08008618 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008618:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800861a:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800861c:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8008620:	7809      	ldrb	r1, [r1, #0]
 8008622:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8008626:	2b01      	cmp	r3, #1
 8008628:	d111      	bne.n	800864e <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800862a:	408b      	lsls	r3, r1
 800862c:	b29b      	uxth	r3, r3
 800862e:	43db      	mvns	r3, r3
 8008630:	401c      	ands	r4, r3
 8008632:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8008634:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8008636:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 800863a:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800863c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8008640:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8008642:	6803      	ldr	r3, [r0, #0]
 8008644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008648:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 800864a:	2000      	movs	r0, #0
 800864c:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800864e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008652:	408b      	lsls	r3, r1
 8008654:	43db      	mvns	r3, r3
 8008656:	401c      	ands	r4, r3
 8008658:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 800865a:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 800865c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8008660:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8008662:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8008666:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8008668:	6803      	ldr	r3, [r0, #0]
 800866a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800866e:	6003      	str	r3, [r0, #0]
 8008670:	e7eb      	b.n	800864a <USB_DeactivateEndpoint+0x32>
	...

08008674 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8008676:	784b      	ldrb	r3, [r1, #1]
 8008678:	780c      	ldrb	r4, [r1, #0]
 800867a:	2b01      	cmp	r3, #1
 800867c:	694b      	ldr	r3, [r1, #20]
 800867e:	d163      	bne.n	8008748 <USB_EPStartXfer+0xd4>
 8008680:	2520      	movs	r5, #32
 8008682:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008686:	fb15 6404 	smlabb	r4, r5, r4, r6
 800868a:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 800868c:	bb73      	cbnz	r3, 80086ec <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800868e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8008692:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8008696:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008698:	6925      	ldr	r5, [r4, #16]
 800869a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800869e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80086a0:	6925      	ldr	r5, [r4, #16]
 80086a2:	0ced      	lsrs	r5, r5, #19
 80086a4:	04ed      	lsls	r5, r5, #19
 80086a6:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 80086a8:	78cf      	ldrb	r7, [r1, #3]
 80086aa:	780d      	ldrb	r5, [r1, #0]
 80086ac:	2f01      	cmp	r7, #1
 80086ae:	f000 8089 	beq.w	80087c4 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80086b2:	b14b      	cbz	r3, 80086c8 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 80086b4:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 80086b8:	2401      	movs	r4, #1
 80086ba:	40ac      	lsls	r4, r5
 80086bc:	ea44 040c 	orr.w	r4, r4, ip
 80086c0:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 80086c4:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086c8:	780d      	ldrb	r5, [r1, #0]
 80086ca:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80086ce:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086d0:	6834      	ldr	r4, [r6, #0]
 80086d2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80086d6:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 80086d8:	d105      	bne.n	80086e6 <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80086da:	9200      	str	r2, [sp, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	462a      	mov	r2, r5
 80086e0:	68c9      	ldr	r1, [r1, #12]
 80086e2:	f000 f8e3 	bl	80088ac <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80086e6:	2000      	movs	r0, #0
 80086e8:	b003      	add	sp, #12
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086ec:	0ced      	lsrs	r5, r5, #19
 80086ee:	04ed      	lsls	r5, r5, #19
 80086f0:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80086f2:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80086f4:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80086f6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80086fa:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80086fe:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8008700:	19dd      	adds	r5, r3, r7
 8008702:	3d01      	subs	r5, #1
 8008704:	fbb5 f7f7 	udiv	r7, r5, r7
 8008708:	4d35      	ldr	r5, [pc, #212]	; (80087e0 <USB_EPStartXfer+0x16c>)
 800870a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800870e:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8008712:	ea45 050e 	orr.w	r5, r5, lr
 8008716:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8008718:	6927      	ldr	r7, [r4, #16]
 800871a:	f3c3 0512 	ubfx	r5, r3, #0, #19
 800871e:	433d      	orrs	r5, r7
 8008720:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8008722:	78cd      	ldrb	r5, [r1, #3]
 8008724:	2d01      	cmp	r5, #1
 8008726:	d1bf      	bne.n	80086a8 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8008728:	6925      	ldr	r5, [r4, #16]
 800872a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800872e:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8008730:	6925      	ldr	r5, [r4, #16]
 8008732:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008736:	6125      	str	r5, [r4, #16]
 8008738:	e7b6      	b.n	80086a8 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800873a:	fb14 6405 	smlabb	r4, r4, r5, r6
 800873e:	6825      	ldr	r5, [r4, #0]
 8008740:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008744:	6025      	str	r5, [r4, #0]
 8008746:	e7bf      	b.n	80086c8 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8008748:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 800874c:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8008750:	6914      	ldr	r4, [r2, #16]
 8008752:	0ce4      	lsrs	r4, r4, #19
 8008754:	04e4      	lsls	r4, r4, #19
 8008756:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8008758:	6914      	ldr	r4, [r2, #16]
 800875a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800875e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8008762:	6114      	str	r4, [r2, #16]
 8008764:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 8008766:	b9db      	cbnz	r3, 80087a0 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008768:	6913      	ldr	r3, [r2, #16]
 800876a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800876e:	431c      	orrs	r4, r3
 8008770:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8008772:	6913      	ldr	r3, [r2, #16]
 8008774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008778:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800877a:	78cb      	ldrb	r3, [r1, #3]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10a      	bne.n	8008796 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8008780:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8008784:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008788:	6813      	ldr	r3, [r2, #0]
 800878a:	bf0c      	ite	eq
 800878c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008790:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8008794:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800879c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800879e:	e7a2      	b.n	80086e6 <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80087a0:	4d0f      	ldr	r5, [pc, #60]	; (80087e0 <USB_EPStartXfer+0x16c>)
 80087a2:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 80087a4:	4423      	add	r3, r4
 80087a6:	3b01      	subs	r3, #1
 80087a8:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80087ac:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 80087b0:	4335      	orrs	r5, r6
 80087b2:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	6915      	ldr	r5, [r2, #16]
 80087b8:	435c      	muls	r4, r3
 80087ba:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80087be:	432c      	orrs	r4, r5
 80087c0:	6114      	str	r4, [r2, #16]
 80087c2:	e7da      	b.n	800877a <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80087c4:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80087c8:	f414 7f80 	tst.w	r4, #256	; 0x100
 80087cc:	f04f 0420 	mov.w	r4, #32
 80087d0:	d0b3      	beq.n	800873a <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087d2:	fb14 6405 	smlabb	r4, r4, r5, r6
 80087d6:	6825      	ldr	r5, [r4, #0]
 80087d8:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80087dc:	6025      	str	r5, [r4, #0]
 80087de:	e773      	b.n	80086c8 <USB_EPStartXfer+0x54>
 80087e0:	1ff80000 	.word	0x1ff80000

080087e4 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80087e4:	784b      	ldrb	r3, [r1, #1]
 80087e6:	2b01      	cmp	r3, #1
{
 80087e8:	b530      	push	{r4, r5, lr}
 80087ea:	780b      	ldrb	r3, [r1, #0]
 80087ec:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 80087ee:	d13e      	bne.n	800886e <USB_EP0StartXfer+0x8a>
 80087f0:	2220      	movs	r2, #32
 80087f2:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80087f6:	fb12 4303 	smlabb	r3, r2, r3, r4
 80087fa:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 80087fc:	b9fd      	cbnz	r5, 800883e <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80087fe:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8008802:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8008806:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008808:	691a      	ldr	r2, [r3, #16]
 800880a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800880e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	0cd2      	lsrs	r2, r2, #19
 8008814:	04d2      	lsls	r2, r2, #19
 8008816:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8008818:	694b      	ldr	r3, [r1, #20]
 800881a:	b13b      	cbz	r3, 800882c <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 800881c:	780d      	ldrb	r5, [r1, #0]
 800881e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8008822:	2301      	movs	r3, #1
 8008824:	40ab      	lsls	r3, r5
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 800882c:	780b      	ldrb	r3, [r1, #0]
 800882e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008838:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 800883a:	2000      	movs	r0, #0
 800883c:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800883e:	0cd2      	lsrs	r2, r2, #19
 8008840:	04d2      	lsls	r2, r2, #19
 8008842:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800884a:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800884e:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8008850:	688a      	ldr	r2, [r1, #8]
 8008852:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8008854:	bf88      	it	hi
 8008856:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008858:	691a      	ldr	r2, [r3, #16]
 800885a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800885e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8008860:	694a      	ldr	r2, [r1, #20]
 8008862:	691d      	ldr	r5, [r3, #16]
 8008864:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008868:	432a      	orrs	r2, r5
 800886a:	611a      	str	r2, [r3, #16]
 800886c:	e7d4      	b.n	8008818 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800886e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8008872:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008876:	6903      	ldr	r3, [r0, #16]
 8008878:	0cdb      	lsrs	r3, r3, #19
 800887a:	04db      	lsls	r3, r3, #19
 800887c:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800887e:	6903      	ldr	r3, [r0, #16]
 8008880:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008884:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008888:	6103      	str	r3, [r0, #16]
 800888a:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 800888c:	b105      	cbz	r5, 8008890 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 800888e:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8008890:	6902      	ldr	r2, [r0, #16]
 8008892:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008896:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8008898:	6902      	ldr	r2, [r0, #16]
 800889a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889e:	4313      	orrs	r3, r2
 80088a0:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80088a2:	6803      	ldr	r3, [r0, #0]
 80088a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	e7c6      	b.n	800883a <USB_EP0StartXfer+0x56>

080088ac <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 80088ac:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80088ae:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 80088b2:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 80088b4:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80088b6:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 80088ba:	2400      	movs	r4, #0
 80088bc:	429c      	cmp	r4, r3
 80088be:	d101      	bne.n	80088c4 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 80088c0:	2000      	movs	r0, #0
 80088c2:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80088c4:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80088c8:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 80088ca:	3401      	adds	r4, #1
 80088cc:	e7f6      	b.n	80088bc <USB_WritePacket+0x10>

080088ce <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088ce:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 80088d0:	3203      	adds	r2, #3
 80088d2:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 80088d4:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80088d6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 80088da:	4293      	cmp	r3, r2
 80088dc:	d102      	bne.n	80088e4 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 80088de:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80088e2:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80088e4:	6804      	ldr	r4, [r0, #0]
 80088e6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 80088ea:	3301      	adds	r3, #1
 80088ec:	e7f5      	b.n	80088da <USB_ReadPacket+0xc>

080088ee <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 80088ee:	784b      	ldrb	r3, [r1, #1]
 80088f0:	780a      	ldrb	r2, [r1, #0]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	f04f 0320 	mov.w	r3, #32
 80088f8:	d10b      	bne.n	8008912 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80088fa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80088fe:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008902:	6803      	ldr	r3, [r0, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	db0b      	blt.n	8008920 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8008908:	6803      	ldr	r3, [r0, #0]
 800890a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800890e:	6003      	str	r3, [r0, #0]
 8008910:	e006      	b.n	8008920 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8008912:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8008916:	fb13 0002 	smlabb	r0, r3, r2, r0
 800891a:	6803      	ldr	r3, [r0, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	daf3      	bge.n	8008908 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008920:	6803      	ldr	r3, [r0, #0]
 8008922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008926:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8008928:	2000      	movs	r0, #0
 800892a:	4770      	bx	lr

0800892c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 800892c:	784b      	ldrb	r3, [r1, #1]
 800892e:	780a      	ldrb	r2, [r1, #0]
 8008930:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008932:	bf0c      	ite	eq
 8008934:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008938:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 800893c:	2320      	movs	r3, #32
 800893e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008942:	6803      	ldr	r3, [r0, #0]
 8008944:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008948:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800894a:	78cb      	ldrb	r3, [r1, #3]
 800894c:	3b02      	subs	r3, #2
 800894e:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008950:	bf9e      	ittt	ls
 8008952:	6803      	ldrls	r3, [r0, #0]
 8008954:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8008958:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 800895a:	2000      	movs	r0, #0
 800895c:	4770      	bx	lr

0800895e <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800895e:	b538      	push	{r3, r4, r5, lr}
 8008960:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 8008964:	4604      	mov	r4, r0
 8008966:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800896a:	22ff      	movs	r2, #255	; 0xff
 800896c:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800896e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8008972:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 8008974:	428b      	cmp	r3, r1
 8008976:	d1f9      	bne.n	800896c <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8008978:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 8008982:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 8008984:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 8008988:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 800898c:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 8008990:	f7ff fdec 	bl	800856c <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 8008994:	2110      	movs	r1, #16
 8008996:	4620      	mov	r0, r4
 8008998:	f7ff fdd6 	bl	8008548 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 800899c:	4628      	mov	r0, r5
 800899e:	bd38      	pop	{r3, r4, r5, pc}

080089a0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80089a0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80089a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089a8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80089ac:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80089b0:	0109      	lsls	r1, r1, #4
 80089b2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80089b6:	4319      	orrs	r1, r3
 80089b8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80089bc:	2000      	movs	r0, #0
 80089be:	4770      	bx	lr

080089c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80089c0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 80089c2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80089c6:	f023 0302 	bic.w	r3, r3, #2
 80089ca:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80089ce:	2003      	movs	r0, #3
 80089d0:	f7fc fc86 	bl	80052e0 <HAL_Delay>
  
  return HAL_OK;  
}
 80089d4:	2000      	movs	r0, #0
 80089d6:	bd08      	pop	{r3, pc}

080089d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80089d8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 80089da:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80089de:	f043 0302 	orr.w	r3, r3, #2
 80089e2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80089e6:	2003      	movs	r0, #3
 80089e8:	f7fc fc7a 	bl	80052e0 <HAL_Delay>
  
  return HAL_OK;  
}
 80089ec:	2000      	movs	r0, #0
 80089ee:	bd08      	pop	{r3, pc}

080089f0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 80089f0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80089f2:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 80089f4:	4010      	ands	r0, r2
 80089f6:	4770      	bx	lr

080089f8 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 80089f8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80089fc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a00:	69c0      	ldr	r0, [r0, #28]
 8008a02:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8008a04:	0c00      	lsrs	r0, r0, #16
 8008a06:	4770      	bx	lr

08008a08 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008a08:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008a0c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a10:	69c0      	ldr	r0, [r0, #28]
 8008a12:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8008a14:	b280      	uxth	r0, r0
 8008a16:	4770      	bx	lr

08008a18 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008a18:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008a1c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a20:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008a24:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a26:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8008a28:	4010      	ands	r0, r2
 8008a2a:	4770      	bx	lr

08008a2c <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008a2c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8008a2e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a32:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008a36:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008a3a:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008a3c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008a40:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008a42:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	4323      	orrs	r3, r4
  return tmpreg;
}
 8008a48:	4018      	ands	r0, r3
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8008a4c:	6940      	ldr	r0, [r0, #20]
}
 8008a4e:	f000 0001 	and.w	r0, r0, #1
 8008a52:	4770      	bx	lr

08008a54 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008a58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a5c:	f023 0307 	bic.w	r3, r3, #7
 8008a60:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008a64:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	f002 0206 	and.w	r2, r2, #6
 8008a6e:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8008a70:	bf02      	ittt	eq
 8008a72:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8008a76:	f042 0203 	orreq.w	r2, r2, #3
 8008a7a:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8008a86:	2000      	movs	r0, #0
 8008a88:	4770      	bx	lr

08008a8a <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8008a8a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008a8e:	2000      	movs	r0, #0
 8008a90:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008a98:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8008a9a:	691a      	ldr	r2, [r3, #16]
 8008a9c:	f042 0218 	orr.w	r2, r2, #24
 8008aa0:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8008aa8:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 8008aaa:	4770      	bx	lr

08008aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <USB_CoreReset+0x64>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e01b      	b.n	8008b02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	daf2      	bge.n	8008ab8 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f043 0201 	orr.w	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a09      	ldr	r2, [pc, #36]	; (8008b10 <USB_CoreReset+0x64>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d901      	bls.n	8008af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e006      	b.n	8008b02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d0f0      	beq.n	8008ae2 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	00030d40 	.word	0x00030d40

08008b14 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008b14:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <LL_mDelay+0x24>)
{
 8008b16:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008b1c:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8008b20:	1c41      	adds	r1, r0, #1
    Delay++;
 8008b22:	bf18      	it	ne
 8008b24:	3001      	addne	r0, #1
  while (Delay)
 8008b26:	b908      	cbnz	r0, 8008b2c <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8008b28:	b002      	add	sp, #8
 8008b2a:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	03d2      	lsls	r2, r2, #15
      Delay--;
 8008b30:	bf48      	it	mi
 8008b32:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8008b36:	e7f6      	b.n	8008b26 <LL_mDelay+0x12>
 8008b38:	e000e010 	.word	0xe000e010

08008b3c <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8008b40:	4800      	ldr	r0, [pc, #0]	; (8008b44 <USBD_MSC_GetHSCfgDesc+0x8>)
 8008b42:	4770      	bx	lr
 8008b44:	20000258 	.word	0x20000258

08008b48 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8008b48:	2320      	movs	r3, #32
 8008b4a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8008b4c:	4800      	ldr	r0, [pc, #0]	; (8008b50 <USBD_MSC_GetFSCfgDesc+0x8>)
 8008b4e:	4770      	bx	lr
 8008b50:	20000238 	.word	0x20000238

08008b54 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8008b54:	2320      	movs	r3, #32
 8008b56:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8008b58:	4800      	ldr	r0, [pc, #0]	; (8008b5c <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8008b5a:	4770      	bx	lr
 8008b5c:	20000284 	.word	0x20000284

08008b60 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8008b60:	230a      	movs	r3, #10
 8008b62:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8008b64:	4800      	ldr	r0, [pc, #0]	; (8008b68 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8008b66:	4770      	bx	lr
 8008b68:	20000278 	.word	0x20000278

08008b6c <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008b6c:	7c03      	ldrb	r3, [r0, #16]
{
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008b72:	b9c3      	cbnz	r3, 8008ba6 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8008b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b78:	2202      	movs	r2, #2
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	f7fb fd25 	bl	80045ca <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8008b80:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8008b84:	2202      	movs	r2, #2
 8008b86:	2181      	movs	r1, #129	; 0x81
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7fb fd1e 	bl	80045ca <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8008b8e:	f242 006c 	movw	r0, #8300	; 0x206c
 8008b92:	f002 fc41 	bl	800b418 <malloc>
 8008b96:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8008b9a:	b158      	cbz	r0, 8008bb4 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 f8be 	bl	8008d1e <MSC_BOT_Init>
    ret = 0;
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	2202      	movs	r2, #2
 8008baa:	2101      	movs	r1, #1
 8008bac:	f7fb fd0d 	bl	80045ca <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	e7e7      	b.n	8008b84 <USBD_MSC_Init+0x18>
    ret = 1; 
 8008bb4:	2001      	movs	r0, #1
}
 8008bb6:	bd10      	pop	{r4, pc}

08008bb8 <USBD_MSC_DeInit>:
{
 8008bb8:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8008bba:	2101      	movs	r1, #1
{
 8008bbc:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8008bbe:	f7fb fd0e 	bl	80045de <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8008bc2:	2181      	movs	r1, #129	; 0x81
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f7fb fd0a 	bl	80045de <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 f8d6 	bl	8008d7c <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8008bd0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8008bd4:	b120      	cbz	r0, 8008be0 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8008bd6:	f002 fc27 	bl	800b428 <free>
    pdev->pClassData  = NULL; 
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8008be0:	2000      	movs	r0, #0
 8008be2:	bd10      	pop	{r4, pc}

08008be4 <USBD_MSC_Setup>:
{
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be8:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8008bea:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bee:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bf6:	d02d      	beq.n	8008c54 <USBD_MSC_Setup+0x70>
 8008bf8:	2c20      	cmp	r4, #32
 8008bfa:	d14a      	bne.n	8008c92 <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8008bfc:	784a      	ldrb	r2, [r1, #1]
 8008bfe:	2afe      	cmp	r2, #254	; 0xfe
 8008c00:	d005      	beq.n	8008c0e <USBD_MSC_Setup+0x2a>
 8008c02:	2aff      	cmp	r2, #255	; 0xff
 8008c04:	d019      	beq.n	8008c3a <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8008c06:	f000 fef2 	bl	80099ee <USBD_CtlError>
       return USBD_FAIL; 
 8008c0a:	2402      	movs	r4, #2
 8008c0c:	e01f      	b.n	8008c4e <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8008c0e:	884c      	ldrh	r4, [r1, #2]
 8008c10:	b984      	cbnz	r4, 8008c34 <USBD_MSC_Setup+0x50>
 8008c12:	88cf      	ldrh	r7, [r1, #6]
 8008c14:	2f01      	cmp	r7, #1
 8008c16:	d10d      	bne.n	8008c34 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8008c18:	061a      	lsls	r2, r3, #24
 8008c1a:	d50b      	bpl.n	8008c34 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008c1c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8008c24:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008c26:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8008c2e:	f000 ff05 	bl	8009a3c <USBD_CtlSendData>
      break;
 8008c32:	e00c      	b.n	8008c4e <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8008c34:	4629      	mov	r1, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	e7e5      	b.n	8008c06 <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8008c3a:	884a      	ldrh	r2, [r1, #2]
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	d1f9      	bne.n	8008c34 <USBD_MSC_Setup+0x50>
 8008c40:	88cc      	ldrh	r4, [r1, #6]
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	d1f6      	bne.n	8008c34 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8008c46:	061b      	lsls	r3, r3, #24
 8008c48:	d4f4      	bmi.n	8008c34 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8008c4a:	f000 f88b 	bl	8008d64 <MSC_BOT_Reset>
}
 8008c4e:	4620      	mov	r0, r4
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8008c54:	784f      	ldrb	r7, [r1, #1]
 8008c56:	2f0a      	cmp	r7, #10
 8008c58:	d01d      	beq.n	8008c96 <USBD_MSC_Setup+0xb2>
 8008c5a:	2f0b      	cmp	r7, #11
 8008c5c:	d01f      	beq.n	8008c9e <USBD_MSC_Setup+0xba>
 8008c5e:	2f01      	cmp	r7, #1
 8008c60:	d1f5      	bne.n	8008c4e <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008c62:	7909      	ldrb	r1, [r1, #4]
 8008c64:	f7fb fcc2 	bl	80045ec <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8008c68:	7929      	ldrb	r1, [r5, #4]
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7fb fcb7 	bl	80045de <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8008c70:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	7c33      	ldrb	r3, [r6, #16]
 8008c78:	da17      	bge.n	8008caa <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008c7a:	b9a3      	cbnz	r3, 8008ca6 <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8008c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8008c80:	2202      	movs	r2, #2
 8008c82:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7fb fca0 	bl	80045ca <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008c8a:	7929      	ldrb	r1, [r5, #4]
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f000 f931 	bl	8008ef4 <MSC_BOT_CplClrFeature>
  return 0;
 8008c92:	2400      	movs	r4, #0
 8008c94:	e7db      	b.n	8008c4e <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8008c96:	2201      	movs	r2, #1
 8008c98:	f108 0104 	add.w	r1, r8, #4
 8008c9c:	e7c7      	b.n	8008c2e <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8008c9e:	788b      	ldrb	r3, [r1, #2]
 8008ca0:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8008ca4:	e7d3      	b.n	8008c4e <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	e7ea      	b.n	8008c80 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008caa:	b923      	cbnz	r3, 8008cb6 <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8008cac:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	e7e6      	b.n	8008c84 <USBD_MSC_Setup+0xa0>
 8008cb6:	2340      	movs	r3, #64	; 0x40
 8008cb8:	e7fa      	b.n	8008cb0 <USBD_MSC_Setup+0xcc>

08008cba <USBD_MSC_DataIn>:
{
 8008cba:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8008cbc:	f000 f882 	bl	8008dc4 <MSC_BOT_DataIn>
}
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	bd08      	pop	{r3, pc}

08008cc4 <USBD_MSC_DataOut>:
{
 8008cc4:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8008cc6:	f000 f89b 	bl	8008e00 <MSC_BOT_DataOut>
}
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bd08      	pop	{r3, pc}

08008cce <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8008cce:	b109      	cbz	r1, 8008cd4 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8008cd0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	4770      	bx	lr

08008cd8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8008cd8:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8008cda:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008cde:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8008ce2:	5ce3      	ldrb	r3, [r4, r3]
{
 8008ce4:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8008ce6:	b943      	cbnz	r3, 8008cfa <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008ce8:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8008cec:	58e3      	ldr	r3, [r4, r3]
 8008cee:	b123      	cbz	r3, 8008cfa <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008cf0:	7a63      	ldrb	r3, [r4, #9]
 8008cf2:	b913      	cbnz	r3, 8008cfa <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	f7fb fc80 	bl	80045fa <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008cfa:	2181      	movs	r1, #129	; 0x81
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7fb fc7c 	bl	80045fa <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008d02:	7a63      	ldrb	r3, [r4, #9]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d109      	bne.n	8008d1c <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8008d08:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	231f      	movs	r3, #31
 8008d10:	320c      	adds	r2, #12
 8008d12:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8008d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8008d18:	f7fb bc9e 	b.w	8004658 <USBD_LL_PrepareReceive>
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}

08008d1e <MSC_BOT_Init>:
{
 8008d1e:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8008d20:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008d24:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8008d28:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008d2e:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8008d30:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 8008d32:	f242 035c 	movw	r3, #8284	; 0x205c
 8008d36:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8008d38:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8008d40:	2101      	movs	r1, #1
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7fb fc52 	bl	80045ec <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8008d48:	2181      	movs	r1, #129	; 0x81
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7fb fc4e 	bl	80045ec <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8008d50:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8008d54:	4620      	mov	r0, r4
 8008d56:	231f      	movs	r3, #31
 8008d58:	320c      	adds	r2, #12
 8008d5a:	2101      	movs	r1, #1
}
 8008d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008d60:	f7fb bc7a 	b.w	8004658 <USBD_LL_PrepareReceive>

08008d64 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008d64:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d68:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8008d6a:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d6c:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8008d6e:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8008d70:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008d74:	231f      	movs	r3, #31
 8008d76:	320c      	adds	r2, #12
 8008d78:	f7fb bc6e 	b.w	8004658 <USBD_LL_PrepareReceive>

08008d7c <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d7c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008d80:	2200      	movs	r2, #0
 8008d82:	721a      	strb	r2, [r3, #8]
 8008d84:	4770      	bx	lr
	...

08008d88 <MSC_BOT_SendCSW>:
{
 8008d88:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008d8a:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008d8e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008d92:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <MSC_BOT_SendCSW+0x38>)
 8008d94:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 8008d96:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 8008d9a:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 8008d9c:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8008da2:	2181      	movs	r1, #129	; 0x81
 8008da4:	230d      	movs	r3, #13
{
 8008da6:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 8008da8:	f7fb fc4f 	bl	800464a <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8008dac:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008db0:	4628      	mov	r0, r5
 8008db2:	231f      	movs	r3, #31
 8008db4:	320c      	adds	r2, #12
 8008db6:	2101      	movs	r1, #1
}
 8008db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008dbc:	f7fb bc4c 	b.w	8004658 <USBD_LL_PrepareReceive>
 8008dc0:	53425355 	.word	0x53425355

08008dc4 <MSC_BOT_DataIn>:
{
 8008dc4:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8008dc6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008dca:	7a1a      	ldrb	r2, [r3, #8]
 8008dcc:	2a02      	cmp	r2, #2
{
 8008dce:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8008dd0:	d003      	beq.n	8008dda <MSC_BOT_DataIn+0x16>
 8008dd2:	d314      	bcc.n	8008dfe <MSC_BOT_DataIn+0x3a>
 8008dd4:	2a04      	cmp	r2, #4
 8008dd6:	d910      	bls.n	8008dfa <MSC_BOT_DataIn+0x36>
 8008dd8:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8008dda:	f242 0119 	movw	r1, #8217	; 0x2019
 8008dde:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8008de2:	321b      	adds	r2, #27
 8008de4:	5c59      	ldrb	r1, [r3, r1]
 8008de6:	f000 f8b3 	bl	8008f50 <SCSI_ProcessCmd>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	da07      	bge.n	8008dfe <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008dee:	2101      	movs	r1, #1
 8008df0:	4620      	mov	r0, r4
}
 8008df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008df6:	f7ff bfc7 	b.w	8008d88 <MSC_BOT_SendCSW>
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	e7f9      	b.n	8008df2 <MSC_BOT_DataIn+0x2e>
 8008dfe:	bd10      	pop	{r4, pc}

08008e00 <MSC_BOT_DataOut>:
{
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008e04:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008e08:	7a26      	ldrb	r6, [r4, #8]
{
 8008e0a:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8008e0c:	b11e      	cbz	r6, 8008e16 <MSC_BOT_DataOut+0x16>
 8008e0e:	2e01      	cmp	r6, #1
 8008e10:	d062      	beq.n	8008ed8 <MSC_BOT_DataOut+0xd8>
 8008e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008e16:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e1a:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008e1e:	58e2      	ldr	r2, [r4, r3]
 8008e20:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e24:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008e28:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e2a:	f854 3008 	ldr.w	r3, [r4, r8]
 8008e2e:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008e30:	2101      	movs	r1, #1
 8008e32:	f7fb fc18 	bl	8004666 <USBD_LL_GetRxDataSize>
 8008e36:	281f      	cmp	r0, #31
 8008e38:	d110      	bne.n	8008e5c <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008e3a:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008e3e:	58e2      	ldr	r2, [r4, r3]
 8008e40:	4b2b      	ldr	r3, [pc, #172]	; (8008ef0 <MSC_BOT_DataOut+0xf0>)
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d10a      	bne.n	8008e5c <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 8008e46:	f242 0319 	movw	r3, #8217	; 0x2019
 8008e4a:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008e4c:	2901      	cmp	r1, #1
 8008e4e:	d805      	bhi.n	8008e5c <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 8008e50:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 8008e54:	5ce3      	ldrb	r3, [r4, r3]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b0f      	cmp	r3, #15
 8008e5a:	d90e      	bls.n	8008e7a <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 8008e5c:	f242 0119 	movw	r1, #8217	; 0x2019
 8008e60:	2320      	movs	r3, #32
 8008e62:	2205      	movs	r2, #5
 8008e64:	5c61      	ldrb	r1, [r4, r1]
 8008e66:	4628      	mov	r0, r5
 8008e68:	f000 fac2 	bl	80093f0 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8008e70:	4628      	mov	r0, r5
}
 8008e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 8008e76:	f7ff bf2f 	b.w	8008cd8 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8008e7a:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008e7e:	321b      	adds	r2, #27
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 f865 	bl	8008f50 <SCSI_ProcessCmd>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	7a23      	ldrb	r3, [r4, #8]
 8008e8a:	da07      	bge.n	8008e9c <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8008e8c:	2b05      	cmp	r3, #5
 8008e8e:	d1ef      	bne.n	8008e70 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8008e90:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8008e92:	4628      	mov	r0, r5
}
 8008e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 8008e98:	f7ff bf76 	b.w	8008d88 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d924      	bls.n	8008eec <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8008ea2:	8961      	ldrh	r1, [r4, #10]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d0f4      	beq.n	8008e92 <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008ea8:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8008eac:	f852 3008 	ldr.w	r3, [r2, r8]
 8008eb0:	4299      	cmp	r1, r3
 8008eb2:	bf28      	it	cs
 8008eb4:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8008eb6:	59d3      	ldr	r3, [r2, r7]
 8008eb8:	1a5b      	subs	r3, r3, r1
 8008eba:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008ebc:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008ec0:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008ec2:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008ec8:	b28b      	uxth	r3, r1
 8008eca:	f104 020c 	add.w	r2, r4, #12
 8008ece:	2181      	movs	r1, #129	; 0x81
}
 8008ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008ed4:	f7fb bbb9 	b.w	800464a <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8008ed8:	f242 0319 	movw	r3, #8217	; 0x2019
 8008edc:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008ee0:	321b      	adds	r2, #27
 8008ee2:	5ce1      	ldrb	r1, [r4, r3]
 8008ee4:	f000 f834 	bl	8008f50 <SCSI_ProcessCmd>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dbd1      	blt.n	8008e90 <MSC_BOT_DataOut+0x90>
 8008eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef0:	43425355 	.word	0x43425355

08008ef4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008ef4:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008ef6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8008efa:	7a63      	ldrb	r3, [r4, #9]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d105      	bne.n	8008f0c <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008f00:	2181      	movs	r1, #129	; 0x81
 8008f02:	f7fb fb7a 	bl	80045fa <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8008f06:	2300      	movs	r3, #0
 8008f08:	7263      	strb	r3, [r4, #9]
 8008f0a:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008f0c:	060a      	lsls	r2, r1, #24
 8008f0e:	d506      	bpl.n	8008f1e <MSC_BOT_CplClrFeature+0x2a>
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d004      	beq.n	8008f1e <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008f14:	2101      	movs	r1, #1
  }
  
}
 8008f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008f1a:	f7ff bf35 	b.w	8008d88 <MSC_BOT_SendCSW>
 8008f1e:	bd10      	pop	{r4, pc}

08008f20 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8008f20:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008f22:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008f26:	f242 055d 	movw	r5, #8285	; 0x205d
 8008f2a:	f242 063c 	movw	r6, #8252	; 0x203c
 8008f2e:	5d43      	ldrb	r3, [r0, r5]
 8008f30:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8008f34:	3301      	adds	r3, #1
 8008f36:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008f38:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008f3a:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008f3c:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8008f40:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 8008f44:	bf08      	it	eq
 8008f46:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008f48:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8008f4a:	5543      	strb	r3, [r0, r5]
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f50 <SCSI_ProcessCmd>:
{
 8008f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 8008f54:	7813      	ldrb	r3, [r2, #0]
 8008f56:	2b1e      	cmp	r3, #30
{
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4617      	mov	r7, r2
  switch (params[0])
 8008f5e:	d00f      	beq.n	8008f80 <SCSI_ProcessCmd+0x30>
 8008f60:	d813      	bhi.n	8008f8a <SCSI_ProcessCmd+0x3a>
 8008f62:	2b12      	cmp	r3, #18
 8008f64:	f000 80b4 	beq.w	80090d0 <SCSI_ProcessCmd+0x180>
 8008f68:	d805      	bhi.n	8008f76 <SCSI_ProcessCmd+0x26>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d060      	beq.n	8009030 <SCSI_ProcessCmd+0xe0>
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d07b      	beq.n	800906a <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 8008f72:	2220      	movs	r2, #32
 8008f74:	e14a      	b.n	800920c <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 8008f76:	2b1a      	cmp	r3, #26
 8008f78:	f000 80c8 	beq.w	800910c <SCSI_ProcessCmd+0x1bc>
 8008f7c:	2b1b      	cmp	r3, #27
 8008f7e:	d1f8      	bne.n	8008f72 <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8008f80:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8008f84:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8008f86:	815c      	strh	r4, [r3, #10]
 8008f88:	e06b      	b.n	8009062 <SCSI_ProcessCmd+0x112>
  switch (params[0])
 8008f8a:	2b28      	cmp	r3, #40	; 0x28
 8008f8c:	f000 810b 	beq.w	80091a6 <SCSI_ProcessCmd+0x256>
 8008f90:	d828      	bhi.n	8008fe4 <SCSI_ProcessCmd+0x94>
 8008f92:	2b23      	cmp	r3, #35	; 0x23
 8008f94:	f000 80d8 	beq.w	8009148 <SCSI_ProcessCmd+0x1f8>
 8008f98:	2b25      	cmp	r3, #37	; 0x25
 8008f9a:	d1ea      	bne.n	8008f72 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008f9c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8008fa0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008fa4:	f242 075e 	movw	r7, #8286	; 0x205e
 8008fa8:	f242 0860 	movw	r8, #8288	; 0x2060
 8008fac:	4620      	mov	r0, r4
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	19f2      	adds	r2, r6, r7
 8008fb2:	eb06 0108 	add.w	r1, r6, r8
 8008fb6:	4798      	blx	r3
 8008fb8:	4604      	mov	r4, r0
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f040 80d9 	bne.w	8009172 <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8008fc0:	f856 3008 	ldr.w	r3, [r6, r8]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	0e1a      	lsrs	r2, r3, #24
 8008fc8:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8008fca:	0c1a      	lsrs	r2, r3, #16
 8008fcc:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8008fce:	0a1a      	lsrs	r2, r3, #8
 8008fd0:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8008fd2:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008fd4:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008fd6:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008fd8:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008fda:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008fdc:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008fde:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	e0de      	b.n	80091a2 <SCSI_ProcessCmd+0x252>
  switch (params[0])
 8008fe4:	2b2f      	cmp	r3, #47	; 0x2f
 8008fe6:	f000 81ac 	beq.w	8009342 <SCSI_ProcessCmd+0x3f2>
 8008fea:	2b5a      	cmp	r3, #90	; 0x5a
 8008fec:	f000 809d 	beq.w	800912a <SCSI_ProcessCmd+0x1da>
 8008ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff2:	d1be      	bne.n	8008f72 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008ff4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008ff8:	7a33      	ldrb	r3, [r6, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 815e 	bne.w	80092bc <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8009000:	f242 0318 	movw	r3, #8216	; 0x2018
 8009004:	56f3      	ldrsb	r3, [r6, r3]
 8009006:	2b00      	cmp	r3, #0
 8009008:	dbb3      	blt.n	8008f72 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800900a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800900e:	4608      	mov	r0, r1
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	4798      	blx	r3
 8009014:	2800      	cmp	r0, #0
 8009016:	f040 80ac 	bne.w	8009172 <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 800901a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800901e:	4620      	mov	r0, r4
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4798      	blx	r3
 8009024:	4604      	mov	r4, r0
 8009026:	2800      	cmp	r0, #0
 8009028:	f000 810d 	beq.w	8009246 <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 800902c:	2227      	movs	r2, #39	; 0x27
 800902e:	e0a1      	b.n	8009174 <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8009030:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 8009034:	f242 0314 	movw	r3, #8212	; 0x2014
 8009038:	58f3      	ldr	r3, [r6, r3]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d199      	bne.n	8008f72 <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800903e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009042:	4608      	mov	r0, r1
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	4798      	blx	r3
 8009048:	4604      	mov	r4, r0
 800904a:	b148      	cbz	r0, 8009060 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 800904c:	223a      	movs	r2, #58	; 0x3a
 800904e:	2102      	movs	r1, #2
 8009050:	4628      	mov	r0, r5
 8009052:	f7ff ff65 	bl	8008f20 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009056:	2305      	movs	r3, #5
 8009058:	7233      	strb	r3, [r6, #8]
    return -1;
 800905a:	f04f 34ff 	mov.w	r4, #4294967295
 800905e:	e000      	b.n	8009062 <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 8009060:	8170      	strh	r0, [r6, #10]
}
 8009062:	4620      	mov	r0, r4
 8009064:	b003      	add	sp, #12
 8009066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 800906e:	2400      	movs	r4, #0
 8009070:	f103 020c 	add.w	r2, r3, #12
 8009074:	f103 011e 	add.w	r1, r3, #30
 8009078:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800907c:	428a      	cmp	r2, r1
 800907e:	d1fb      	bne.n	8009078 <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 8009080:	2270      	movs	r2, #112	; 0x70
 8009082:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8009084:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8009088:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800908a:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 800908e:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8009090:	5c1a      	ldrb	r2, [r3, r0]
 8009092:	5c59      	ldrb	r1, [r3, r1]
 8009094:	4291      	cmp	r1, r2
 8009096:	d013      	beq.n	80090c0 <SCSI_ProcessCmd+0x170>
 8009098:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 800909c:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 80090a0:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80090a2:	5d4d      	ldrb	r5, [r1, r5]
 80090a4:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80090a6:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 80090aa:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80090ac:	5d4d      	ldrb	r5, [r1, r5]
 80090ae:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80090b0:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80090b4:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80090b6:	7809      	ldrb	r1, [r1, #0]
 80090b8:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 80090ba:	bf14      	ite	ne
 80090bc:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 80090be:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80090c0:	2212      	movs	r2, #18
 80090c2:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80090c4:	793a      	ldrb	r2, [r7, #4]
 80090c6:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 80090c8:	bf98      	it	ls
 80090ca:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 80090cc:	2400      	movs	r4, #0
 80090ce:	e7c8      	b.n	8009062 <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 80090d0:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80090d2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 80090d6:	07db      	lsls	r3, r3, #31
 80090d8:	d415      	bmi.n	8009106 <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80090da:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 80090e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090e8:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 80090ea:	7923      	ldrb	r3, [r4, #4]
 80090ec:	3305      	adds	r3, #5
 80090ee:	428b      	cmp	r3, r1
 80090f0:	bf28      	it	cs
 80090f2:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 80090f4:	8153      	strh	r3, [r2, #10]
  while (len) 
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0e8      	beq.n	80090cc <SCSI_ProcessCmd+0x17c>
    len--;
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80090fe:	18d1      	adds	r1, r2, r3
 8009100:	5ce0      	ldrb	r0, [r4, r3]
 8009102:	7308      	strb	r0, [r1, #12]
 8009104:	e7f7      	b.n	80090f6 <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 8009106:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8009108:	4cb6      	ldr	r4, [pc, #728]	; (80093e4 <SCSI_ProcessCmd+0x494>)
 800910a:	e7f3      	b.n	80090f4 <SCSI_ProcessCmd+0x1a4>
 800910c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8009110:	49b5      	ldr	r1, [pc, #724]	; (80093e8 <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 8009112:	2208      	movs	r2, #8
 8009114:	815a      	strh	r2, [r3, #10]
 8009116:	f103 0213 	add.w	r2, r3, #19
 800911a:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800911c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8009120:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8009124:	4293      	cmp	r3, r2
 8009126:	d1f9      	bne.n	800911c <SCSI_ProcessCmd+0x1cc>
 8009128:	e7d0      	b.n	80090cc <SCSI_ProcessCmd+0x17c>
 800912a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800912e:	49af      	ldr	r1, [pc, #700]	; (80093ec <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 8009130:	2208      	movs	r2, #8
 8009132:	815a      	strh	r2, [r3, #10]
 8009134:	f103 0213 	add.w	r2, r3, #19
 8009138:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800913a:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 800913e:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8009142:	429a      	cmp	r2, r3
 8009144:	d1f9      	bne.n	800913a <SCSI_ProcessCmd+0x1ea>
 8009146:	e7c1      	b.n	80090cc <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009148:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 800914c:	2100      	movs	r1, #0
 800914e:	f106 030c 	add.w	r3, r6, #12
 8009152:	f106 0218 	add.w	r2, r6, #24
 8009156:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 800915a:	429a      	cmp	r2, r3
 800915c:	d1fb      	bne.n	8009156 <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 800915e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8009162:	4620      	mov	r0, r4
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f10d 0202 	add.w	r2, sp, #2
 800916a:	a901      	add	r1, sp, #4
 800916c:	4798      	blx	r3
 800916e:	4604      	mov	r4, r0
 8009170:	b118      	cbz	r0, 800917a <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 8009172:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8009174:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 8009176:	4628      	mov	r0, r5
 8009178:	e0eb      	b.n	8009352 <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 800917a:	2308      	movs	r3, #8
 800917c:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 800917e:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009180:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8009182:	3b01      	subs	r3, #1
 8009184:	0e1a      	lsrs	r2, r3, #24
 8009186:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8009188:	0c1a      	lsrs	r2, r3, #16
 800918a:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 800918c:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800918e:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8009190:	2302      	movs	r3, #2
 8009192:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009194:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8009198:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800919a:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800919c:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800919e:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 80091a0:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 80091a2:	8173      	strh	r3, [r6, #10]
 80091a4:	e75d      	b.n	8009062 <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80091a6:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80091aa:	7a33      	ldrb	r3, [r6, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f040 80f1 	bne.w	8009394 <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80091b2:	f242 0318 	movw	r3, #8216	; 0x2018
 80091b6:	56f3      	ldrsb	r3, [r6, r3]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f6bf aeda 	bge.w	8008f72 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80091be:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80091c2:	4608      	mov	r0, r1
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	4798      	blx	r3
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d1d2      	bne.n	8009172 <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 80091cc:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091ce:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 80091d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 80091d6:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 80091d8:	4313      	orrs	r3, r2
 80091da:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091dc:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80091e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091e4:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091e8:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 80091ea:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80091ec:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091f0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80091f4:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 80091f8:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091fc:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009200:	185f      	adds	r7, r3, r1
 8009202:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8009204:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009206:	f240 80b5 	bls.w	8009374 <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 800920a:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 800920c:	2105      	movs	r1, #5
 800920e:	e7b2      	b.n	8009176 <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 8009210:	b2bb      	uxth	r3, r7
 8009212:	4652      	mov	r2, sl
 8009214:	2181      	movs	r1, #129	; 0x81
 8009216:	4628      	mov	r0, r5
 8009218:	f7fb fa17 	bl	800464a <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 800921c:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 8009220:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8009224:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 8009228:	443b      	add	r3, r7
 800922a:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 800922e:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 8009230:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 8009232:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 8009234:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8009238:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 800923a:	2c00      	cmp	r4, #0
 800923c:	f47f af46 	bne.w	80090cc <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009240:	2303      	movs	r3, #3
 8009242:	7233      	strb	r3, [r6, #8]
 8009244:	e70d      	b.n	8009062 <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 8009246:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009248:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 800924a:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800924c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 8009250:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 8009252:	431a      	orrs	r2, r3
 8009254:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009256:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 800925a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800925e:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 8009262:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009264:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009266:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800926a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800926e:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8009272:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009276:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800927a:	1857      	adds	r7, r2, r1
 800927c:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800927e:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009280:	d8c3      	bhi.n	800920a <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009282:	f242 035e 	movw	r3, #8286	; 0x205e
 8009286:	5af3      	ldrh	r3, [r6, r3]
 8009288:	435a      	muls	r2, r3
 800928a:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800928e:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009292:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009294:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009296:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009298:	4293      	cmp	r3, r2
 800929a:	f47f ae6a 	bne.w	8008f72 <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800929e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80092a2:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80092a6:	bf28      	it	cs
 80092a8:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80092ac:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	f106 020c 	add.w	r2, r6, #12
 80092b4:	4628      	mov	r0, r5
 80092b6:	f7fb f9cf 	bl	8004658 <USBD_LL_PrepareReceive>
 80092ba:	e6d2      	b.n	8009062 <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092bc:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092c0:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092c4:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092c8:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80092cc:	f242 035e 	movw	r3, #8286	; 0x205e
 80092d0:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092d4:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 80092d8:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092dc:	bf28      	it	cs
 80092de:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80092e2:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092e4:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 80092e8:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092ec:	4620      	mov	r0, r4
 80092ee:	fbb1 f2f2 	udiv	r2, r1, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4641      	mov	r1, r8
 80092f6:	47d8      	blx	fp
 80092f8:	2800      	cmp	r0, #0
 80092fa:	da01      	bge.n	8009300 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 80092fc:	2203      	movs	r2, #3
 80092fe:	e06e      	b.n	80093de <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 8009300:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8009304:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 8009308:	443b      	add	r3, r7
 800930a:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 800930e:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 8009310:	f856 3009 	ldr.w	r3, [r6, r9]
 8009314:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 8009316:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8009318:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 800931c:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 800931e:	b923      	cbnz	r3, 800932a <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8009320:	2100      	movs	r1, #0
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff fd30 	bl	8008d88 <MSC_BOT_SendCSW>
 8009328:	e6d0      	b.n	80090cc <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932e:	bf28      	it	cs
 8009330:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 8009334:	b29b      	uxth	r3, r3
 8009336:	4642      	mov	r2, r8
 8009338:	2101      	movs	r1, #1
 800933a:	4628      	mov	r0, r5
 800933c:	f7fb f98c 	bl	8004658 <USBD_LL_PrepareReceive>
 8009340:	e6c4      	b.n	80090cc <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 8009342:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8009344:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8009348:	f014 0402 	ands.w	r4, r4, #2
 800934c:	d004      	beq.n	8009358 <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 800934e:	2224      	movs	r2, #36	; 0x24
 8009350:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 8009352:	f7ff fde5 	bl	8008f20 <SCSI_SenseCode.constprop.8>
 8009356:	e680      	b.n	800905a <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009358:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 800935c:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009360:	5a9a      	ldrh	r2, [r3, r2]
 8009362:	5859      	ldr	r1, [r3, r1]
 8009364:	440a      	add	r2, r1
 8009366:	f242 0160 	movw	r1, #8288	; 0x2060
 800936a:	5859      	ldr	r1, [r3, r1]
 800936c:	428a      	cmp	r2, r1
 800936e:	f67f ae0a 	bls.w	8008f86 <SCSI_ProcessCmd+0x36>
 8009372:	e74a      	b.n	800920a <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009374:	2202      	movs	r2, #2
 8009376:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009378:	f242 025e 	movw	r2, #8286	; 0x205e
 800937c:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800937e:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009380:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009382:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009386:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800938a:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800938c:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800938e:	4291      	cmp	r1, r2
 8009390:	f47f adef 	bne.w	8008f72 <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8009394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009398:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800939a:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 800939e:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80093a2:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80093a6:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80093aa:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80093ae:	429f      	cmp	r7, r3
 80093b0:	bf28      	it	cs
 80093b2:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80093b4:	f242 0964 	movw	r9, #8292	; 0x2064
 80093b8:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 80093bc:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80093c0:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80093c2:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 80093c6:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80093ca:	4620      	mov	r0, r4
 80093cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	4651      	mov	r1, sl
 80093d4:	47d8      	blx	fp
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f6bf af1a 	bge.w	8009210 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 80093dc:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 80093de:	2104      	movs	r1, #4
 80093e0:	e6c9      	b.n	8009176 <SCSI_ProcessCmd+0x226>
 80093e2:	bf00      	nop
 80093e4:	0800e408 	.word	0x0800e408
 80093e8:	0800e408 	.word	0x0800e408
 80093ec:	0800e400 	.word	0x0800e400

080093f0 <SCSI_SenseCode>:
{
 80093f0:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80093f2:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80093f6:	f242 055d 	movw	r5, #8285	; 0x205d
 80093fa:	f242 063c 	movw	r6, #8252	; 0x203c
 80093fe:	5d41      	ldrb	r1, [r0, r5]
 8009400:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 8009404:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8009406:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 8009408:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800940a:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 800940e:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009410:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8009412:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8009414:	bf0a      	itet	eq
 8009416:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 8009418:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 800941a:	5543      	strbeq	r3, [r0, r5]
 800941c:	bd70      	pop	{r4, r5, r6, pc}

0800941e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800941e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009420:	b180      	cbz	r0, 8009444 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009422:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009426:	b113      	cbz	r3, 800942e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800942e:	b109      	cbz	r1, 8009434 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8009430:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009434:	2301      	movs	r3, #1
 8009436:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800943a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800943c:	f7fb f882 	bl	8004544 <USBD_LL_Init>

  return USBD_OK;
 8009440:	2000      	movs	r0, #0
 8009442:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8009444:	2002      	movs	r0, #2
}
 8009446:	bd08      	pop	{r3, pc}

08009448 <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8009448:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800944c:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 800944e:	bf14      	ite	ne
 8009450:	2002      	movne	r0, #2
 8009452:	2000      	moveq	r0, #0
 8009454:	4770      	bx	lr

08009456 <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009456:	2301      	movs	r3, #1
{
 8009458:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800945a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800945e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009462:	7901      	ldrb	r1, [r0, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
{
 8009466:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009468:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 800946a:	4620      	mov	r0, r4
 800946c:	f7fb f8a6 	bl	80045bc <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8009470:	4620      	mov	r0, r4
 8009472:	f7fb f895 	bl	80045a0 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 8009476:	2000      	movs	r0, #0
 8009478:	bd10      	pop	{r4, pc}

0800947a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800947a:	b119      	cbz	r1, 8009484 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800947c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8009480:	2000      	movs	r0, #0
 8009482:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8009484:	2002      	movs	r0, #2
  }
  
  return status;
}
 8009486:	4770      	bx	lr

08009488 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009488:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800948a:	f7fb f890 	bl	80045ae <USBD_LL_Start>
  
  return USBD_OK;  
}
 800948e:	2000      	movs	r0, #0
 8009490:	bd08      	pop	{r3, pc}

08009492 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8009492:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009494:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009498:	7901      	ldrb	r1, [r0, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
{
 800949c:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800949e:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80094a0:	4620      	mov	r0, r4
 80094a2:	f7fb f88b 	bl	80045bc <USBD_LL_Stop>
  
  return USBD_OK;  
}
 80094a6:	2000      	movs	r0, #0
 80094a8:	bd10      	pop	{r4, pc}

080094aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094aa:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80094ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80094b0:	b90b      	cbnz	r3, 80094b6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80094b2:	2002      	movs	r0, #2
 80094b4:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4798      	blx	r3
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d1f9      	bne.n	80094b2 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80094be:	bd08      	pop	{r3, pc}

080094c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094c0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80094c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	4798      	blx	r3
  return USBD_OK;
}
 80094ca:	2000      	movs	r0, #0
 80094cc:	bd08      	pop	{r3, pc}

080094ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094ce:	b538      	push	{r3, r4, r5, lr}
 80094d0:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094d2:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 fa75 	bl	80099c6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80094dc:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80094de:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80094e2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80094e6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80094ea:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80094ee:	f001 031f 	and.w	r3, r1, #31
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d00e      	beq.n	8009514 <USBD_LL_SetupStage+0x46>
 80094f6:	d307      	bcc.n	8009508 <USBD_LL_SetupStage+0x3a>
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d010      	beq.n	800951e <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80094fc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009500:	4620      	mov	r0, r4
 8009502:	f7fb f87a 	bl	80045fa <USBD_LL_StallEP>
    break;
 8009506:	e003      	b.n	8009510 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8009508:	4629      	mov	r1, r5
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f8e6 	bl	80096dc <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8009510:	2000      	movs	r0, #0
 8009512:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8009514:	4629      	mov	r1, r5
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f9da 	bl	80098d0 <USBD_StdItfReq>
    break;
 800951c:	e7f8      	b.n	8009510 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800951e:	4629      	mov	r1, r5
 8009520:	4620      	mov	r0, r4
 8009522:	f000 f9ed 	bl	8009900 <USBD_StdEPReq>
    break;
 8009526:	e7f3      	b.n	8009510 <USBD_LL_SetupStage+0x42>

08009528 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4604      	mov	r4, r0
 800952c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800952e:	bb11      	cbnz	r1, 8009576 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009530:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8009534:	2b03      	cmp	r3, #3
 8009536:	d10f      	bne.n	8009558 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8009538:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800953c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8009540:	4293      	cmp	r3, r2
 8009542:	d90b      	bls.n	800955c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8009544:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8009546:	429a      	cmp	r2, r3
 8009548:	bf28      	it	cs
 800954a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800954c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8009550:	b292      	uxth	r2, r2
 8009552:	4629      	mov	r1, r5
 8009554:	f000 fa96 	bl	8009a84 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8009558:	2000      	movs	r0, #0
 800955a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800955c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	b123      	cbz	r3, 800956e <USBD_LL_DataOutStage+0x46>
 8009564:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009568:	2a03      	cmp	r2, #3
 800956a:	d100      	bne.n	800956e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800956c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800956e:	4620      	mov	r0, r4
 8009570:	f000 fa90 	bl	8009a94 <USBD_CtlSendStatus>
 8009574:	e7f0      	b.n	8009558 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8009576:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0eb      	beq.n	8009558 <USBD_LL_DataOutStage+0x30>
 8009580:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009584:	2a03      	cmp	r2, #3
 8009586:	d1e7      	bne.n	8009558 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8009588:	4798      	blx	r3
 800958a:	e7e5      	b.n	8009558 <USBD_LL_DataOutStage+0x30>

0800958c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	4613      	mov	r3, r2
 8009590:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8009592:	460e      	mov	r6, r1
 8009594:	2900      	cmp	r1, #0
 8009596:	d13d      	bne.n	8009614 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009598:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800959c:	2a02      	cmp	r2, #2
 800959e:	d10f      	bne.n	80095c0 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80095a0:	69c5      	ldr	r5, [r0, #28]
 80095a2:	6a02      	ldr	r2, [r0, #32]
 80095a4:	4295      	cmp	r5, r2
 80095a6:	d914      	bls.n	80095d2 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80095a8:	1aaa      	subs	r2, r5, r2
 80095aa:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80095ac:	4619      	mov	r1, r3
 80095ae:	b292      	uxth	r2, r2
 80095b0:	f000 fa51 	bl	8009a56 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80095b4:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80095b6:	461a      	mov	r2, r3
 80095b8:	4619      	mov	r1, r3
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7fb f84c 	bl	8004658 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80095c0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d102      	bne.n	80095ce <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80095ce:	2000      	movs	r0, #0
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80095d2:	6983      	ldr	r3, [r0, #24]
 80095d4:	fbb3 f5f2 	udiv	r5, r3, r2
 80095d8:	fb02 3515 	mls	r5, r2, r5, r3
 80095dc:	b965      	cbnz	r5, 80095f8 <USBD_LL_DataInStage+0x6c>
 80095de:	429a      	cmp	r2, r3
 80095e0:	d80a      	bhi.n	80095f8 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80095e2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d206      	bcs.n	80095f8 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80095ea:	462a      	mov	r2, r5
 80095ec:	f000 fa33 	bl	8009a56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80095f0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80095f4:	462b      	mov	r3, r5
 80095f6:	e7de      	b.n	80095b6 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80095f8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	b12b      	cbz	r3, 800960c <USBD_LL_DataInStage+0x80>
 8009600:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8009604:	2a03      	cmp	r2, #3
 8009606:	d101      	bne.n	800960c <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8009608:	4620      	mov	r0, r4
 800960a:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fa4c 	bl	8009aaa <USBD_CtlReceiveStatus>
 8009612:	e7d5      	b.n	80095c0 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8009614:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0d7      	beq.n	80095ce <USBD_LL_DataInStage+0x42>
 800961e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009622:	2a03      	cmp	r2, #3
 8009624:	d1d3      	bne.n	80095ce <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8009626:	4798      	blx	r3
 8009628:	e7d1      	b.n	80095ce <USBD_LL_DataInStage+0x42>

0800962a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800962a:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800962c:	2200      	movs	r2, #0
{
 800962e:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8009630:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009632:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8009634:	2340      	movs	r3, #64	; 0x40
 8009636:	f7fa ffc8 	bl	80045ca <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800963a:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800963c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8009640:	2200      	movs	r2, #0
 8009642:	2180      	movs	r1, #128	; 0x80
 8009644:	4620      	mov	r0, r4
 8009646:	f7fa ffc0 	bl	80045ca <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800964a:	2301      	movs	r3, #1
 800964c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8009650:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009654:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8009656:	b12b      	cbz	r3, 8009664 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009658:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800965c:	7921      	ldrb	r1, [r4, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4620      	mov	r0, r4
 8009662:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8009664:	2000      	movs	r0, #0
 8009666:	bd38      	pop	{r3, r4, r5, pc}

08009668 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009668:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800966a:	2000      	movs	r0, #0
 800966c:	4770      	bx	lr

0800966e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800966e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009672:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009676:	2304      	movs	r3, #4
 8009678:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800967c:	2000      	movs	r0, #0
 800967e:	4770      	bx	lr

08009680 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8009680:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8009684:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8009688:	2000      	movs	r0, #0
 800968a:	4770      	bx	lr

0800968c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800968c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800968e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009692:	2a03      	cmp	r2, #3
 8009694:	d104      	bne.n	80096a0 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8009696:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	b103      	cbz	r3, 80096a0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800969e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80096a0:	2000      	movs	r0, #0
 80096a2:	bd08      	pop	{r3, pc}

080096a4 <USBD_LL_IsoINIncomplete>:
 80096a4:	2000      	movs	r0, #0
 80096a6:	4770      	bx	lr

080096a8 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80096a8:	2000      	movs	r0, #0
 80096aa:	4770      	bx	lr

080096ac <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80096ac:	2000      	movs	r0, #0
 80096ae:	4770      	bx	lr

080096b0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80096b0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096b2:	2201      	movs	r2, #1
 80096b4:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80096b8:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80096bc:	7901      	ldrb	r1, [r0, #4]
 80096be:	6852      	ldr	r2, [r2, #4]
 80096c0:	4790      	blx	r2
   
  return USBD_OK;
}
 80096c2:	2000      	movs	r0, #0
 80096c4:	bd08      	pop	{r3, pc}

080096c6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80096c6:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80096c8:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80096ca:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80096cc:	f7fa ff95 	bl	80045fa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80096d0:	4620      	mov	r0, r4
 80096d2:	2100      	movs	r1, #0
}
 80096d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80096d8:	f7fa bf8f 	b.w	80045fa <USBD_LL_StallEP>

080096dc <USBD_StdDevReq>:
{
 80096dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80096de:	784b      	ldrb	r3, [r1, #1]
{
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80096e4:	2b09      	cmp	r3, #9
 80096e6:	d879      	bhi.n	80097dc <USBD_StdDevReq+0x100>
 80096e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80096ec:	00e500c9 	.word	0x00e500c9
 80096f0:	00d90078 	.word	0x00d90078
 80096f4:	006d0078 	.word	0x006d0078
 80096f8:	0078000a 	.word	0x0078000a
 80096fc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8009700:	884b      	ldrh	r3, [r1, #2]
 8009702:	0a1a      	lsrs	r2, r3, #8
 8009704:	3a01      	subs	r2, #1
 8009706:	2a06      	cmp	r2, #6
 8009708:	d868      	bhi.n	80097dc <USBD_StdDevReq+0x100>
 800970a:	e8df f002 	tbb	[pc, r2]
 800970e:	1c04      	.short	0x1c04
 8009710:	49676729 	.word	0x49676729
 8009714:	52          	.byte	0x52
 8009715:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009716:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800971a:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800971c:	7c20      	ldrb	r0, [r4, #16]
 800971e:	f10d 0106 	add.w	r1, sp, #6
 8009722:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8009724:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009728:	2a00      	cmp	r2, #0
 800972a:	d067      	beq.n	80097fc <USBD_StdDevReq+0x120>
 800972c:	88eb      	ldrh	r3, [r5, #6]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d064      	beq.n	80097fc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8009732:	429a      	cmp	r2, r3
 8009734:	bf28      	it	cs
 8009736:	461a      	movcs	r2, r3
 8009738:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800973c:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f97c 	bl	8009a3c <USBD_CtlSendData>
 8009744:	e05a      	b.n	80097fc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8009746:	7c02      	ldrb	r2, [r0, #16]
 8009748:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800974c:	b932      	cbnz	r2, 800975c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009750:	f10d 0006 	add.w	r0, sp, #6
 8009754:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009756:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009758:	7043      	strb	r3, [r0, #1]
 800975a:	e7e3      	b.n	8009724 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800975c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975e:	e7f7      	b.n	8009750 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b05      	cmp	r3, #5
 8009764:	d83a      	bhi.n	80097dc <USBD_StdDevReq+0x100>
 8009766:	e8df f003 	tbb	[pc, r3]
 800976a:	0703      	.short	0x0703
 800976c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8009770:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	e7d1      	b.n	800971c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009778:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	e7cd      	b.n	800971c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009780:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	e7c9      	b.n	800971c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009788:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	e7c5      	b.n	800971c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009790:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	e7c1      	b.n	800971c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009798:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	e7bd      	b.n	800971c <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80097a0:	7c03      	ldrb	r3, [r0, #16]
 80097a2:	b9db      	cbnz	r3, 80097dc <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097a8:	f10d 0006 	add.w	r0, sp, #6
 80097ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ae:	4798      	blx	r3
 80097b0:	e7b8      	b.n	8009724 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80097b2:	7c03      	ldrb	r3, [r0, #16]
 80097b4:	b993      	cbnz	r3, 80097dc <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097ba:	f10d 0006 	add.w	r0, sp, #6
 80097be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097c2:	2307      	movs	r3, #7
 80097c4:	e7c8      	b.n	8009758 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80097c6:	888b      	ldrh	r3, [r1, #4]
 80097c8:	b943      	cbnz	r3, 80097dc <USBD_StdDevReq+0x100>
 80097ca:	88cb      	ldrh	r3, [r1, #6]
 80097cc:	b933      	cbnz	r3, 80097dc <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80097ce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80097d2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80097d4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80097d6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80097da:	d103      	bne.n	80097e4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80097dc:	4620      	mov	r0, r4
 80097de:	f7ff ff72 	bl	80096c6 <USBD_CtlError.constprop.0>
    break;
 80097e2:	e00b      	b.n	80097fc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80097e4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7fa ff27 	bl	800463c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 f950 	bl	8009a94 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80097f4:	b12d      	cbz	r5, 8009802 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80097f6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80097f8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80097fc:	2000      	movs	r0, #0
 80097fe:	b003      	add	sp, #12
 8009800:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8009802:	2301      	movs	r3, #1
 8009804:	e7f8      	b.n	80097f8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8009806:	7889      	ldrb	r1, [r1, #2]
 8009808:	4d30      	ldr	r5, [pc, #192]	; (80098cc <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800980a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800980c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800980e:	d8e5      	bhi.n	80097dc <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8009810:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009814:	2b02      	cmp	r3, #2
 8009816:	d00c      	beq.n	8009832 <USBD_StdDevReq+0x156>
 8009818:	2b03      	cmp	r3, #3
 800981a:	d1df      	bne.n	80097dc <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 800981c:	b9b1      	cbnz	r1, 800984c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800981e:	2302      	movs	r3, #2
 8009820:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8009824:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8009826:	f7ff fe4b 	bl	80094c0 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800982a:	4620      	mov	r0, r4
 800982c:	f000 f932 	bl	8009a94 <USBD_CtlSendStatus>
 8009830:	e7e4      	b.n	80097fc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8009832:	2900      	cmp	r1, #0
 8009834:	d0f9      	beq.n	800982a <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8009836:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009838:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800983a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800983c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8009840:	4620      	mov	r0, r4
 8009842:	f7ff fe32 	bl	80094aa <USBD_SetClassConfig>
 8009846:	2802      	cmp	r0, #2
 8009848:	d1ef      	bne.n	800982a <USBD_StdDevReq+0x14e>
 800984a:	e7c7      	b.n	80097dc <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800984c:	6841      	ldr	r1, [r0, #4]
 800984e:	2901      	cmp	r1, #1
 8009850:	d0eb      	beq.n	800982a <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8009852:	b2c9      	uxtb	r1, r1
 8009854:	f7ff fe34 	bl	80094c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009858:	7829      	ldrb	r1, [r5, #0]
 800985a:	6061      	str	r1, [r4, #4]
 800985c:	e7f0      	b.n	8009840 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800985e:	88ca      	ldrh	r2, [r1, #6]
 8009860:	2a01      	cmp	r2, #1
 8009862:	d1bb      	bne.n	80097dc <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8009864:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009868:	2b02      	cmp	r3, #2
 800986a:	d003      	beq.n	8009874 <USBD_StdDevReq+0x198>
 800986c:	2b03      	cmp	r3, #3
 800986e:	d1b5      	bne.n	80097dc <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8009870:	1d01      	adds	r1, r0, #4
 8009872:	e764      	b.n	800973e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8009874:	4601      	mov	r1, r0
 8009876:	2300      	movs	r3, #0
 8009878:	f841 3f08 	str.w	r3, [r1, #8]!
 800987c:	e75f      	b.n	800973e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800987e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009882:	3b02      	subs	r3, #2
 8009884:	2b01      	cmp	r3, #1
 8009886:	d8a9      	bhi.n	80097dc <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8009888:	2301      	movs	r3, #1
 800988a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800988c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8009890:	b10b      	cbz	r3, 8009896 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8009892:	2303      	movs	r3, #3
 8009894:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8009896:	2202      	movs	r2, #2
 8009898:	f104 010c 	add.w	r1, r4, #12
 800989c:	e74f      	b.n	800973e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800989e:	884b      	ldrh	r3, [r1, #2]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d1ab      	bne.n	80097fc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80098a4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80098a8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80098ac:	4629      	mov	r1, r5
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	4620      	mov	r0, r4
 80098b2:	4798      	blx	r3
 80098b4:	e7b9      	b.n	800982a <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80098b6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80098ba:	3b02      	subs	r3, #2
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d88d      	bhi.n	80097dc <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80098c0:	884b      	ldrh	r3, [r1, #2]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d19a      	bne.n	80097fc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80098c6:	2300      	movs	r3, #0
 80098c8:	e7ec      	b.n	80098a4 <USBD_StdDevReq+0x1c8>
 80098ca:	bf00      	nop
 80098cc:	200005da 	.word	0x200005da

080098d0 <USBD_StdItfReq>:
{
 80098d0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80098d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80098d6:	2b03      	cmp	r3, #3
{
 80098d8:	4604      	mov	r4, r0
 80098da:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80098dc:	d10d      	bne.n	80098fa <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80098de:	790b      	ldrb	r3, [r1, #4]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d80a      	bhi.n	80098fa <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80098e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80098ec:	88eb      	ldrh	r3, [r5, #6]
 80098ee:	b913      	cbnz	r3, 80098f6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 f8cf 	bl	8009a94 <USBD_CtlSendStatus>
}
 80098f6:	2000      	movs	r0, #0
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80098fa:	f7ff fee4 	bl	80096c6 <USBD_CtlError.constprop.0>
    break;
 80098fe:	e7fa      	b.n	80098f6 <USBD_StdItfReq+0x26>

08009900 <USBD_StdEPReq>:
{
 8009900:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8009902:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8009904:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8009906:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800990a:	2a20      	cmp	r2, #32
{
 800990c:	4604      	mov	r4, r0
 800990e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8009910:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8009912:	d105      	bne.n	8009920 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8009914:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	4798      	blx	r3
}
 800991c:	2000      	movs	r0, #0
 800991e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8009920:	784a      	ldrb	r2, [r1, #1]
 8009922:	2a01      	cmp	r2, #1
 8009924:	d01c      	beq.n	8009960 <USBD_StdEPReq+0x60>
 8009926:	d32a      	bcc.n	800997e <USBD_StdEPReq+0x7e>
 8009928:	2a03      	cmp	r2, #3
 800992a:	d1f7      	bne.n	800991c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800992c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009930:	2a02      	cmp	r2, #2
 8009932:	d040      	beq.n	80099b6 <USBD_StdEPReq+0xb6>
 8009934:	2a03      	cmp	r2, #3
 8009936:	d002      	beq.n	800993e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8009938:	f7ff fec5 	bl	80096c6 <USBD_CtlError.constprop.0>
      break;
 800993c:	e7ee      	b.n	800991c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800993e:	884a      	ldrh	r2, [r1, #2]
 8009940:	b922      	cbnz	r2, 800994c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009942:	065e      	lsls	r6, r3, #25
 8009944:	d002      	beq.n	800994c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8009946:	4619      	mov	r1, r3
 8009948:	f7fa fe57 	bl	80045fa <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800994c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009950:	4629      	mov	r1, r5
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	4620      	mov	r0, r4
 8009956:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f89b 	bl	8009a94 <USBD_CtlSendStatus>
 800995e:	e7dd      	b.n	800991c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8009960:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009964:	2a02      	cmp	r2, #2
 8009966:	d026      	beq.n	80099b6 <USBD_StdEPReq+0xb6>
 8009968:	2a03      	cmp	r2, #3
 800996a:	d1e5      	bne.n	8009938 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800996c:	884a      	ldrh	r2, [r1, #2]
 800996e:	2a00      	cmp	r2, #0
 8009970:	d1d4      	bne.n	800991c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8009972:	0659      	lsls	r1, r3, #25
 8009974:	d0f0      	beq.n	8009958 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8009976:	4619      	mov	r1, r3
 8009978:	f7fa fe46 	bl	8004608 <USBD_LL_ClearStallEP>
 800997c:	e7e6      	b.n	800994c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800997e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009982:	2a02      	cmp	r2, #2
 8009984:	d017      	beq.n	80099b6 <USBD_StdEPReq+0xb6>
 8009986:	2a03      	cmp	r2, #3
 8009988:	d1d6      	bne.n	8009938 <USBD_StdEPReq+0x38>
 800998a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800998e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009992:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009996:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009998:	bf14      	ite	ne
 800999a:	3514      	addne	r5, #20
 800999c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80099a0:	f7fa fe39 	bl	8004616 <USBD_LL_IsStallEP>
 80099a4:	b168      	cbz	r0, 80099c2 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80099a6:	2301      	movs	r3, #1
 80099a8:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80099aa:	2202      	movs	r2, #2
 80099ac:	4629      	mov	r1, r5
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 f844 	bl	8009a3c <USBD_CtlSendData>
      break;
 80099b4:	e7b2      	b.n	800991c <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80099b6:	065a      	lsls	r2, r3, #25
 80099b8:	d0b0      	beq.n	800991c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80099ba:	4619      	mov	r1, r3
 80099bc:	f7fa fe1d 	bl	80045fa <USBD_LL_StallEP>
 80099c0:	e7ac      	b.n	800991c <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80099c2:	6028      	str	r0, [r5, #0]
 80099c4:	e7f1      	b.n	80099aa <USBD_StdEPReq+0xaa>

080099c6 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80099c6:	780b      	ldrb	r3, [r1, #0]
 80099c8:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80099ca:	784b      	ldrb	r3, [r1, #1]
 80099cc:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80099ce:	78ca      	ldrb	r2, [r1, #3]
 80099d0:	788b      	ldrb	r3, [r1, #2]
 80099d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80099d6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80099d8:	794a      	ldrb	r2, [r1, #5]
 80099da:	790b      	ldrb	r3, [r1, #4]
 80099dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80099e0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80099e2:	79ca      	ldrb	r2, [r1, #7]
 80099e4:	798b      	ldrb	r3, [r1, #6]
 80099e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80099ea:	80c3      	strh	r3, [r0, #6]
 80099ec:	4770      	bx	lr

080099ee <USBD_CtlError>:
{
 80099ee:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80099f0:	2180      	movs	r1, #128	; 0x80
{
 80099f2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80099f4:	f7fa fe01 	bl	80045fa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80099f8:	4620      	mov	r0, r4
 80099fa:	2100      	movs	r1, #0
}
 80099fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8009a00:	f7fa bdfb 	b.w	80045fa <USBD_LL_StallEP>

08009a04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a04:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8009a06:	b188      	cbz	r0, 8009a2c <USBD_GetString+0x28>
 8009a08:	4605      	mov	r5, r0
 8009a0a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8009a0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	d1f9      	bne.n	8009a0a <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	3302      	adds	r3, #2
 8009a1a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8009a1c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	704b      	strb	r3, [r1, #1]
 8009a22:	3801      	subs	r0, #1
 8009a24:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8009a26:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009a2a:	b905      	cbnz	r5, 8009a2e <USBD_GetString+0x2a>
 8009a2c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8009a34:	3302      	adds	r3, #2
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	548c      	strb	r4, [r1, r2]
 8009a3a:	e7f4      	b.n	8009a26 <USBD_GetString+0x22>

08009a3c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009a40:	2202      	movs	r2, #2
 8009a42:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8009a46:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009a48:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8009a4a:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	f7fa fdfc 	bl	800464a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009a52:	2000      	movs	r0, #0
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009a56:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009a58:	4613      	mov	r3, r2
 8009a5a:	460a      	mov	r2, r1
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	f7fa fdf4 	bl	800464a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009a62:	2000      	movs	r0, #0
 8009a64:	bd08      	pop	{r3, pc}

08009a66 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8009a66:	b510      	push	{r4, lr}
 8009a68:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8009a70:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8009a74:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8009a76:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	f7fa fdec 	bl	8004658 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8009a80:	2000      	movs	r0, #0
 8009a82:	bd10      	pop	{r4, pc}

08009a84 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8009a84:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8009a86:	4613      	mov	r3, r2
 8009a88:	460a      	mov	r2, r1
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f7fa fde4 	bl	8004658 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8009a90:	2000      	movs	r0, #0
 8009a92:	bd08      	pop	{r3, pc}

08009a94 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8009a94:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a96:	2304      	movs	r3, #4
 8009a98:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f7fa fdd2 	bl	800464a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	bd08      	pop	{r3, pc}

08009aaa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8009aaa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8009aac:	2305      	movs	r3, #5
 8009aae:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	f7fa fdce 	bl	8004658 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8009abc:	2000      	movs	r0, #0
 8009abe:	bd08      	pop	{r3, pc}

08009ac0 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <disk_status+0x10>)
 8009ac2:	181a      	adds	r2, r3, r0
 8009ac4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009ac8:	7a10      	ldrb	r0, [r2, #8]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	4718      	bx	r3
 8009ad0:	200005fc 	.word	0x200005fc

08009ad4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8009ad4:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <disk_initialize+0x1c>)
 8009ad6:	5c1a      	ldrb	r2, [r3, r0]
 8009ad8:	b942      	cbnz	r2, 8009aec <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8009ada:	2201      	movs	r2, #1
 8009adc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ade:	181a      	adds	r2, r3, r0
 8009ae0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009ae4:	7a10      	ldrb	r0, [r2, #8]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4718      	bx	r3
  }
  return stat;
}
 8009aec:	2000      	movs	r0, #0
 8009aee:	4770      	bx	lr
 8009af0:	200005fc 	.word	0x200005fc

08009af4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009af4:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009af6:	4c05      	ldr	r4, [pc, #20]	; (8009b0c <disk_read+0x18>)
 8009af8:	1825      	adds	r5, r4, r0
 8009afa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009afe:	6860      	ldr	r0, [r4, #4]
 8009b00:	6884      	ldr	r4, [r0, #8]
 8009b02:	7a28      	ldrb	r0, [r5, #8]
 8009b04:	46a4      	mov	ip, r4
  return res;
}
 8009b06:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b08:	4760      	bx	ip
 8009b0a:	bf00      	nop
 8009b0c:	200005fc 	.word	0x200005fc

08009b10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b10:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b12:	4c05      	ldr	r4, [pc, #20]	; (8009b28 <disk_write+0x18>)
 8009b14:	1825      	adds	r5, r4, r0
 8009b16:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009b1a:	6860      	ldr	r0, [r4, #4]
 8009b1c:	68c4      	ldr	r4, [r0, #12]
 8009b1e:	7a28      	ldrb	r0, [r5, #8]
 8009b20:	46a4      	mov	ip, r4
  return res;
}
 8009b22:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b24:	4760      	bx	ip
 8009b26:	bf00      	nop
 8009b28:	200005fc 	.word	0x200005fc

08009b2c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <disk_ioctl+0x18>)
{
 8009b2e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b30:	181c      	adds	r4, r3, r0
 8009b32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009b36:	7a20      	ldrb	r0, [r4, #8]
 8009b38:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8009b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	4718      	bx	r3
 8009b42:	bf00      	nop
 8009b44:	200005fc 	.word	0x200005fc

08009b48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009b48:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009b4a:	4c06      	ldr	r4, [pc, #24]	; (8009b64 <SD_initialize+0x1c>)
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009b50:	f7f7 fbc6 	bl	80012e0 <BSP_SD_Init>
 8009b54:	4623      	mov	r3, r4
 8009b56:	b918      	cbnz	r0, 8009b60 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009b58:	7822      	ldrb	r2, [r4, #0]
 8009b5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b5e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8009b60:	7818      	ldrb	r0, [r3, #0]
}
 8009b62:	bd10      	pop	{r4, pc}
 8009b64:	200002a4 	.word	0x200002a4

08009b68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009b68:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009b6a:	4c06      	ldr	r4, [pc, #24]	; (8009b84 <SD_status+0x1c>)
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8009b70:	f7f7 fb20 	bl	80011b4 <BSP_SD_GetStatus>
 8009b74:	4623      	mov	r3, r4
 8009b76:	b918      	cbnz	r0, 8009b80 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009b78:	7822      	ldrb	r2, [r4, #0]
 8009b7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b7e:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8009b80:	7818      	ldrb	r0, [r3, #0]
}
 8009b82:	bd10      	pop	{r4, pc}
 8009b84:	200002a4 	.word	0x200002a4

08009b88 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009b88:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	0252      	lsls	r2, r2, #9
 8009b94:	2300      	movs	r3, #0
 8009b96:	4608      	mov	r0, r1
 8009b98:	f7f7 fb4a 	bl	8001230 <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009b9c:	3000      	adds	r0, #0
 8009b9e:	bf18      	it	ne
 8009ba0:	2001      	movne	r0, #1
 8009ba2:	b003      	add	sp, #12
 8009ba4:	f85d fb04 	ldr.w	pc, [sp], #4

08009ba8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ba8:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	0252      	lsls	r2, r2, #9
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	f7f7 fc14 	bl	80013e4 <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009bbc:	3000      	adds	r0, #0
 8009bbe:	bf18      	it	ne
 8009bc0:	2001      	movne	r0, #1
 8009bc2:	b003      	add	sp, #12
 8009bc4:	f85d fb04 	ldr.w	pc, [sp], #4

08009bc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009bc8:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bca:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <SD_ioctl+0x4c>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	07db      	lsls	r3, r3, #31
{
 8009bd0:	b096      	sub	sp, #88	; 0x58
 8009bd2:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bd4:	d41c      	bmi.n	8009c10 <SD_ioctl+0x48>
  
  switch (cmd)
 8009bd6:	2903      	cmp	r1, #3
 8009bd8:	d803      	bhi.n	8009be2 <SD_ioctl+0x1a>
 8009bda:	e8df f001 	tbb	[pc, r1]
 8009bde:	050e      	.short	0x050e
 8009be0:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8009be2:	2004      	movs	r0, #4
  }
  
  return res;
}
 8009be4:	b016      	add	sp, #88	; 0x58
 8009be6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009be8:	4668      	mov	r0, sp
 8009bea:	f7f7 fae9 	bl	80011c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8009bee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bf2:	0a5b      	lsrs	r3, r3, #9
 8009bf4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009bf8:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e7f2      	b.n	8009be4 <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8009bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c02:	8013      	strh	r3, [r2, #0]
 8009c04:	e7f9      	b.n	8009bfa <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 8009c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c0a:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8009c0c:	2001      	movs	r0, #1
    break;
 8009c0e:	e7e9      	b.n	8009be4 <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c10:	2003      	movs	r0, #3
 8009c12:	e7e7      	b.n	8009be4 <SD_ioctl+0x1c>
 8009c14:	200002a4 	.word	0x200002a4

08009c18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c18:	3801      	subs	r0, #1
 8009c1a:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009c1c:	4291      	cmp	r1, r2
 8009c1e:	d100      	bne.n	8009c22 <mem_cpy+0xa>
		*d++ = *s++;
}
 8009c20:	4770      	bx	lr
		*d++ = *s++;
 8009c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c26:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009c2a:	e7f7      	b.n	8009c1c <mem_cpy+0x4>

08009c2c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c2c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8009c2e:	4290      	cmp	r0, r2
 8009c30:	d100      	bne.n	8009c34 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8009c32:	4770      	bx	lr
		*d++ = (BYTE)val;
 8009c34:	f800 1b01 	strb.w	r1, [r0], #1
 8009c38:	e7f9      	b.n	8009c2e <mem_set+0x2>
	...

08009c3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c3c:	4a17      	ldr	r2, [pc, #92]	; (8009c9c <chk_lock+0x60>)
 8009c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c40:	2400      	movs	r4, #0
 8009c42:	4623      	mov	r3, r4
 8009c44:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8009c46:	6815      	ldr	r5, [r2, #0]
 8009c48:	b1c5      	cbz	r5, 8009c7c <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009c4a:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8009c4e:	42bd      	cmp	r5, r7
 8009c50:	d115      	bne.n	8009c7e <chk_lock+0x42>
 8009c52:	6857      	ldr	r7, [r2, #4]
 8009c54:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009c58:	42af      	cmp	r7, r5
 8009c5a:	d110      	bne.n	8009c7e <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8009c5c:	8917      	ldrh	r7, [r2, #8]
 8009c5e:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8009c62:	42af      	cmp	r7, r5
 8009c64:	d10b      	bne.n	8009c7e <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c66:	b9b9      	cbnz	r1, 8009c98 <chk_lock+0x5c>
 8009c68:	220c      	movs	r2, #12
 8009c6a:	fb02 6303 	mla	r3, r2, r3, r6
 8009c6e:	895b      	ldrh	r3, [r3, #10]
 8009c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c74:	bf14      	ite	ne
 8009c76:	2000      	movne	r0, #0
 8009c78:	2010      	moveq	r0, #16
 8009c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8009c7c:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c7e:	3301      	adds	r3, #1
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	f102 020c 	add.w	r2, r2, #12
 8009c86:	d1de      	bne.n	8009c46 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c88:	b10c      	cbz	r4, 8009c8e <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c8e:	2902      	cmp	r1, #2
 8009c90:	bf0c      	ite	eq
 8009c92:	2000      	moveq	r0, #0
 8009c94:	2012      	movne	r0, #18
 8009c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c98:	2010      	movs	r0, #16
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	200005e0 	.word	0x200005e0

08009ca0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca2:	4c20      	ldr	r4, [pc, #128]	; (8009d24 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8009ca4:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	42b5      	cmp	r5, r6
 8009cb0:	d109      	bne.n	8009cc6 <inc_lock+0x26>
 8009cb2:	6867      	ldr	r7, [r4, #4]
 8009cb4:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009cb8:	42af      	cmp	r7, r5
 8009cba:	d104      	bne.n	8009cc6 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8009cbc:	8927      	ldrh	r7, [r4, #8]
 8009cbe:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8009cc2:	42af      	cmp	r7, r5
 8009cc4:	d022      	beq.n	8009d0c <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	f104 040c 	add.w	r4, r4, #12
 8009cce:	d1ed      	bne.n	8009cac <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cd0:	6813      	ldr	r3, [r2, #0]
 8009cd2:	b113      	cbz	r3, 8009cda <inc_lock+0x3a>
 8009cd4:	68d3      	ldr	r3, [r2, #12]
 8009cd6:	bb1b      	cbnz	r3, 8009d20 <inc_lock+0x80>
 8009cd8:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8009cda:	240c      	movs	r4, #12
 8009cdc:	435c      	muls	r4, r3
 8009cde:	1915      	adds	r5, r2, r4
 8009ce0:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8009ce2:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8009ce6:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8009cea:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8009cec:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8009cee:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8009cf0:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009cf2:	b991      	cbnz	r1, 8009d1a <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009cf4:	210c      	movs	r1, #12
 8009cf6:	fb01 2103 	mla	r1, r1, r3, r2
 8009cfa:	8949      	ldrh	r1, [r1, #10]
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	b289      	uxth	r1, r1
 8009d00:	200c      	movs	r0, #12
 8009d02:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8009d06:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d08:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d0f1      	beq.n	8009cf4 <inc_lock+0x54>
 8009d10:	210c      	movs	r1, #12
 8009d12:	fb01 2103 	mla	r1, r1, r3, r2
 8009d16:	8949      	ldrh	r1, [r1, #10]
 8009d18:	b911      	cbnz	r1, 8009d20 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d1e:	e7ef      	b.n	8009d00 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d20:	2000      	movs	r0, #0
 8009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d24:	200005e0 	.word	0x200005e0

08009d28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d28:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d2a:	1e45      	subs	r5, r0, #1
 8009d2c:	2d01      	cmp	r5, #1
 8009d2e:	d811      	bhi.n	8009d54 <dec_lock+0x2c>
		n = Files[i].ctr;
 8009d30:	490a      	ldr	r1, [pc, #40]	; (8009d5c <dec_lock+0x34>)
 8009d32:	220c      	movs	r2, #12
 8009d34:	fb02 1305 	mla	r3, r2, r5, r1
 8009d38:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8009d3a:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8009d3e:	b298      	uxth	r0, r3
 8009d40:	b108      	cbz	r0, 8009d46 <dec_lock+0x1e>
 8009d42:	3c01      	subs	r4, #1
 8009d44:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8009d46:	fb02 f305 	mul.w	r3, r2, r5
 8009d4a:	18ca      	adds	r2, r1, r3
 8009d4c:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009d4e:	b918      	cbnz	r0, 8009d58 <dec_lock+0x30>
 8009d50:	50c8      	str	r0, [r1, r3]
 8009d52:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009d54:	2002      	movs	r0, #2
 8009d56:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8009d58:	2000      	movs	r0, #0
	}
	return res;
}
 8009d5a:	bd30      	pop	{r4, r5, pc}
 8009d5c:	200005e0 	.word	0x200005e0

08009d60 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d60:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009d64:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d68:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009d6a:	0a49      	lsrs	r1, r1, #9
 8009d6c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009d70:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d74:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8009d76:	b130      	cbz	r0, 8009d86 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009d78:	4281      	cmp	r1, r0
 8009d7a:	d302      	bcc.n	8009d82 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d7c:	1a09      	subs	r1, r1, r0
 8009d7e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d80:	e7f8      	b.n	8009d74 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d82:	6858      	ldr	r0, [r3, #4]
 8009d84:	4408      	add	r0, r1
}
 8009d86:	4770      	bx	lr

08009d88 <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8009d88:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8009d8c:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8009d8e:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8009d92:	b322      	cbz	r2, 8009dde <get_fileinfo+0x56>
		dir = dp->dir;
 8009d94:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 8009d98:	2400      	movs	r4, #0
 8009d9a:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009d9c:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 8009d9e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8009da2:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 8009da4:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8009da8:	d009      	beq.n	8009dbe <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009daa:	2805      	cmp	r0, #5
 8009dac:	bf08      	it	eq
 8009dae:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009db0:	2c09      	cmp	r4, #9
 8009db2:	bf04      	itt	eq
 8009db4:	701e      	strbeq	r6, [r3, #0]
 8009db6:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8009db8:	3301      	adds	r3, #1
 8009dba:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 8009dbe:	2c0b      	cmp	r4, #11
 8009dc0:	d1ed      	bne.n	8009d9e <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009dc2:	7ad0      	ldrb	r0, [r2, #11]
 8009dc4:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8009dc6:	69d0      	ldr	r0, [r2, #28]
 8009dc8:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8009dca:	7e54      	ldrb	r4, [r2, #25]
 8009dcc:	7e10      	ldrb	r0, [r2, #24]
 8009dce:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8009dd2:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8009dd4:	7dd0      	ldrb	r0, [r2, #23]
 8009dd6:	7d92      	ldrb	r2, [r2, #22]
 8009dd8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009ddc:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	bd70      	pop	{r4, r5, r6, pc}

08009de4 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009de4:	6802      	ldr	r2, [r0, #0]
{
 8009de6:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8009de8:	b152      	cbz	r2, 8009e00 <get_ldnumber+0x1c>
 8009dea:	4611      	mov	r1, r2
 8009dec:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df2:	2c20      	cmp	r4, #32
 8009df4:	d90c      	bls.n	8009e10 <get_ldnumber+0x2c>
 8009df6:	2c3a      	cmp	r4, #58	; 0x3a
 8009df8:	d1f8      	bne.n	8009dec <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8009dfa:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	d002      	beq.n	8009e06 <get_ldnumber+0x22>
	int vol = -1;
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8009e04:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009e06:	7812      	ldrb	r2, [r2, #0]
 8009e08:	2a30      	cmp	r2, #48	; 0x30
 8009e0a:	d1f9      	bne.n	8009e00 <get_ldnumber+0x1c>
					*path = ++tt;
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8009e10:	2000      	movs	r0, #0
 8009e12:	bd10      	pop	{r4, pc}

08009e14 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009e14:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009e16:	b190      	cbz	r0, 8009e3e <validate+0x2a>
 8009e18:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009e1c:	b17b      	cbz	r3, 8009e3e <validate+0x2a>
 8009e1e:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8009e22:	b162      	cbz	r2, 8009e3e <validate+0x2a>
 8009e24:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8009e28:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8009e2c:	4291      	cmp	r1, r2
 8009e2e:	d106      	bne.n	8009e3e <validate+0x2a>
 8009e30:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009e34:	f7ff fe44 	bl	8009ac0 <disk_status>
 8009e38:	f010 0001 	ands.w	r0, r0, #1
 8009e3c:	d000      	beq.n	8009e40 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8009e3e:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8009e40:	bd08      	pop	{r3, pc}

08009e42 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8009e42:	7eca      	ldrb	r2, [r1, #27]
 8009e44:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8009e46:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8009e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009e4c:	bf01      	itttt	eq
 8009e4e:	7d48      	ldrbeq	r0, [r1, #21]
 8009e50:	7d0a      	ldrbeq	r2, [r1, #20]
 8009e52:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8009e56:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	4770      	bx	lr

08009e5e <sync_window.part.2>:
FRESULT sync_window (
 8009e5e:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8009e60:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8009e64:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009e66:	4601      	mov	r1, r0
 8009e68:	2301      	movs	r3, #1
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009e70:	f7ff fe4e 	bl	8009b10 <disk_write>
 8009e74:	b9d0      	cbnz	r0, 8009eac <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e76:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8009e7a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8009e7e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e82:	1aeb      	subs	r3, r5, r3
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d301      	bcc.n	8009e8c <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8009e88:	2000      	movs	r0, #0
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e8c:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8009e90:	2e01      	cmp	r6, #1
 8009e92:	d9f9      	bls.n	8009e88 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8009e94:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009e98:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8009e9c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	f7ff fe34 	bl	8009b10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ea8:	3e01      	subs	r6, #1
 8009eaa:	e7f1      	b.n	8009e90 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8009eac:	2001      	movs	r0, #1
}
 8009eae:	bd70      	pop	{r4, r5, r6, pc}

08009eb0 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009eb0:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8009eb4:	b10b      	cbz	r3, 8009eba <sync_window+0xa>
 8009eb6:	f7ff bfd2 	b.w	8009e5e <sync_window.part.2>
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	4770      	bx	lr

08009ebe <sync_fs>:
{
 8009ebe:	b538      	push	{r3, r4, r5, lr}
 8009ec0:	4604      	mov	r4, r0
	res = sync_window(fs);
 8009ec2:	f7ff fff5 	bl	8009eb0 <sync_window>
 8009ec6:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d154      	bne.n	8009f76 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ecc:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d147      	bne.n	8009f64 <sync_fs+0xa6>
 8009ed4:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d143      	bne.n	8009f64 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8009edc:	4601      	mov	r1, r0
 8009ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7ff fea2 	bl	8009c2c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009ee8:	2255      	movs	r2, #85	; 0x55
 8009eea:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8009eee:	22aa      	movs	r2, #170	; 0xaa
 8009ef0:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009ef4:	2252      	movs	r2, #82	; 0x52
 8009ef6:	7022      	strb	r2, [r4, #0]
 8009ef8:	7062      	strb	r2, [r4, #1]
 8009efa:	2261      	movs	r2, #97	; 0x61
 8009efc:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009efe:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009f02:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8009f06:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009f0a:	2141      	movs	r1, #65	; 0x41
 8009f0c:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f0e:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009f12:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009f16:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8009f1a:	0c11      	lsrs	r1, r2, #16
 8009f1c:	0e12      	lsrs	r2, r2, #24
 8009f1e:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f22:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009f26:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f2a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009f2e:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8009f32:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8009f36:	0c11      	lsrs	r1, r2, #16
 8009f38:	0e12      	lsrs	r2, r2, #24
 8009f3a:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8009f3e:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f42:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f46:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8009f48:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f4a:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8009f4e:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8009f52:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009f56:	4621      	mov	r1, r4
 8009f58:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009f5c:	f7ff fdd8 	bl	8009b10 <disk_write>
			fs->fsi_flag = 0;
 8009f60:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4611      	mov	r1, r2
 8009f68:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009f6c:	f7ff fdde 	bl	8009b2c <disk_ioctl>
 8009f70:	3000      	adds	r0, #0
 8009f72:	bf18      	it	ne
 8009f74:	2001      	movne	r0, #1
}
 8009f76:	bd38      	pop	{r3, r4, r5, pc}

08009f78 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f78:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009f7c:	428b      	cmp	r3, r1
{
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	4606      	mov	r6, r0
 8009f82:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f84:	d013      	beq.n	8009fae <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8009f86:	f7ff ff93 	bl	8009eb0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	b968      	cbnz	r0, 8009faa <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009f8e:	462a      	mov	r2, r5
 8009f90:	2301      	movs	r3, #1
 8009f92:	4631      	mov	r1, r6
 8009f94:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8009f98:	f7ff fdac 	bl	8009af4 <disk_read>
 8009f9c:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8009f9e:	bf1c      	itt	ne
 8009fa0:	f04f 35ff 	movne.w	r5, #4294967295
 8009fa4:	2401      	movne	r4, #1
			fs->winsect = sector;
 8009fa6:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8009faa:	4620      	mov	r0, r4
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8009fae:	2400      	movs	r4, #0
 8009fb0:	e7fb      	b.n	8009faa <move_window+0x32>
	...

08009fb4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009fb4:	2300      	movs	r3, #0
{
 8009fb6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009fb8:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8009fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc0:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8009fc4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009fc6:	f7ff ffd7 	bl	8009f78 <move_window>
 8009fca:	b9c0      	cbnz	r0, 8009ffe <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009fcc:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8009fd0:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8009fd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fd8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d110      	bne.n	800a002 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009fe0:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8009fe4:	4a08      	ldr	r2, [pc, #32]	; (800a008 <check_fs+0x54>)
 8009fe6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00a      	beq.n	800a004 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009fee:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8009ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8009ff6:	1a80      	subs	r0, r0, r2
 8009ff8:	bf18      	it	ne
 8009ffa:	2001      	movne	r0, #1
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	2003      	movs	r0, #3
 800a000:	bd10      	pop	{r4, pc}
		return 2;
 800a002:	2002      	movs	r0, #2
}
 800a004:	bd10      	pop	{r4, pc}
 800a006:	bf00      	nop
 800a008:	00544146 	.word	0x00544146

0800a00c <find_volume>:
{
 800a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	6003      	str	r3, [r0, #0]
{
 800a012:	b085      	sub	sp, #20
 800a014:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 800a016:	4608      	mov	r0, r1
{
 800a018:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800a01a:	f7ff fee3 	bl	8009de4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a01e:	1e06      	subs	r6, r0, #0
 800a020:	f2c0 8123 	blt.w	800a26a <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a024:	4b95      	ldr	r3, [pc, #596]	; (800a27c <find_volume+0x270>)
 800a026:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	f000 811f 	beq.w	800a26e <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 800a030:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a032:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800a036:	b173      	cbz	r3, 800a056 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800a038:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800a03c:	f7ff fd40 	bl	8009ac0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a040:	07c7      	lsls	r7, r0, #31
 800a042:	d408      	bmi.n	800a056 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a044:	2d00      	cmp	r5, #0
 800a046:	f000 8114 	beq.w	800a272 <find_volume+0x266>
 800a04a:	f010 0004 	ands.w	r0, r0, #4
 800a04e:	d000      	beq.n	800a052 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800a050:	200a      	movs	r0, #10
}
 800a052:	b005      	add	sp, #20
 800a054:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800a056:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a058:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800a05a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a05e:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a062:	f7ff fd37 	bl	8009ad4 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a066:	07c1      	lsls	r1, r0, #31
 800a068:	f100 8105 	bmi.w	800a276 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a06c:	b10d      	cbz	r5, 800a072 <find_volume+0x66>
 800a06e:	0742      	lsls	r2, r0, #29
 800a070:	d4ee      	bmi.n	800a050 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a072:	2100      	movs	r1, #0
 800a074:	4620      	mov	r0, r4
 800a076:	f7ff ff9d 	bl	8009fb4 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a07a:	2801      	cmp	r0, #1
 800a07c:	f040 80dc 	bne.w	800a238 <find_volume+0x22c>
 800a080:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 800a084:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a086:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800a08a:	b103      	cbz	r3, 800a08e <find_volume+0x82>
 800a08c:	680b      	ldr	r3, [r1, #0]
 800a08e:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a092:	3201      	adds	r2, #1
 800a094:	2a04      	cmp	r2, #4
 800a096:	f101 0110 	add.w	r1, r1, #16
 800a09a:	d1f4      	bne.n	800a086 <find_volume+0x7a>
 800a09c:	2600      	movs	r6, #0
			bsect = br[i];
 800a09e:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a0a2:	2d00      	cmp	r5, #0
 800a0a4:	f000 80bf 	beq.w	800a226 <find_volume+0x21a>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff ff82 	bl	8009fb4 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f040 80b9 	bne.w	800a228 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a0b6:	7b22      	ldrb	r2, [r4, #12]
 800a0b8:	7ae3      	ldrb	r3, [r4, #11]
 800a0ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c2:	f040 80bc 	bne.w	800a23e <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a0c6:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a0c8:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a0ca:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a0cc:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a0d0:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a0d4:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a0d8:	bf08      	it	eq
 800a0da:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 800a0dc:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	f200 80ac 	bhi.w	800a23e <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a0e6:	7b66      	ldrb	r6, [r4, #13]
 800a0e8:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a0ec:	2e00      	cmp	r6, #0
 800a0ee:	f000 80a6 	beq.w	800a23e <find_volume+0x232>
 800a0f2:	1e73      	subs	r3, r6, #1
 800a0f4:	4233      	tst	r3, r6
 800a0f6:	f040 80a2 	bne.w	800a23e <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0fa:	7ca3      	ldrb	r3, [r4, #18]
 800a0fc:	7c67      	ldrb	r7, [r4, #17]
 800a0fe:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a102:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a104:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a108:	f040 8099 	bne.w	800a23e <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a10c:	7d22      	ldrb	r2, [r4, #20]
 800a10e:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a110:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a114:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a118:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a11a:	bf08      	it	eq
 800a11c:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a11e:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800a122:	f000 808c 	beq.w	800a23e <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a126:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a12a:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 800a12e:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a130:	4283      	cmp	r3, r0
 800a132:	f0c0 8084 	bcc.w	800a23e <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a136:	1a1b      	subs	r3, r3, r0
 800a138:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d07e      	beq.n	800a23e <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a140:	f640 76f5 	movw	r6, #4085	; 0xff5
 800a144:	42b3      	cmp	r3, r6
 800a146:	d97e      	bls.n	800a246 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a148:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 800a14c:	42b3      	cmp	r3, r6
 800a14e:	bf94      	ite	ls
 800a150:	2602      	movls	r6, #2
 800a152:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a154:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a156:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 800a158:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 800a15a:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a15c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800a160:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a164:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800a168:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800a16c:	d16d      	bne.n	800a24a <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a16e:	2f00      	cmp	r7, #0
 800a170:	d165      	bne.n	800a23e <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a174:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a178:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a17a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a17e:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800a182:	d35c      	bcc.n	800a23e <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 800a18c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a190:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 800a192:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a196:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a19a:	d12d      	bne.n	800a1f8 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a19c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800a1a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a1a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d125      	bne.n	800a1f8 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a1ac:	1c69      	adds	r1, r5, #1
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f7ff fee2 	bl	8009f78 <move_window>
 800a1b4:	bb00      	cbnz	r0, 800a1f8 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1b6:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800a1ba:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800a1be:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1c6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d114      	bne.n	800a1f8 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a1ce:	6822      	ldr	r2, [r4, #0]
 800a1d0:	4b2b      	ldr	r3, [pc, #172]	; (800a280 <find_volume+0x274>)
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d110      	bne.n	800a1f8 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a1d6:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800a1da:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800a1de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a1e2:	3320      	adds	r3, #32
 800a1e4:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a1e6:	bf01      	itttt	eq
 800a1e8:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800a1ec:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a1f0:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 800a1f4:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 800a1f8:	4a22      	ldr	r2, [pc, #136]	; (800a284 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800a1fa:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800a1fe:	8813      	ldrh	r3, [r2, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	b29b      	uxth	r3, r3
 800a204:	8013      	strh	r3, [r2, #0]
 800a206:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a20a:	4b1f      	ldr	r3, [pc, #124]	; (800a288 <find_volume+0x27c>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4294      	cmp	r4, r2
 800a210:	bf04      	itt	eq
 800a212:	2200      	moveq	r2, #0
 800a214:	601a      	streq	r2, [r3, #0]
 800a216:	68da      	ldr	r2, [r3, #12]
 800a218:	4294      	cmp	r4, r2
 800a21a:	f04f 0000 	mov.w	r0, #0
 800a21e:	f47f af18 	bne.w	800a052 <find_volume+0x46>
 800a222:	60d8      	str	r0, [r3, #12]
 800a224:	e715      	b.n	800a052 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a226:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a228:	3601      	adds	r6, #1
 800a22a:	2e04      	cmp	r6, #4
 800a22c:	f47f af37 	bne.w	800a09e <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a230:	2803      	cmp	r0, #3
 800a232:	d104      	bne.n	800a23e <find_volume+0x232>
 800a234:	2001      	movs	r0, #1
 800a236:	e70c      	b.n	800a052 <find_volume+0x46>
 800a238:	2803      	cmp	r0, #3
 800a23a:	d0fb      	beq.n	800a234 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a23c:	b108      	cbz	r0, 800a242 <find_volume+0x236>
 800a23e:	200d      	movs	r0, #13
 800a240:	e707      	b.n	800a052 <find_volume+0x46>
	bsect = 0;
 800a242:	4605      	mov	r5, r0
 800a244:	e737      	b.n	800a0b6 <find_volume+0xaa>
	fmt = FS_FAT12;
 800a246:	2601      	movs	r6, #1
 800a248:	e784      	b.n	800a154 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a24a:	2f00      	cmp	r7, #0
 800a24c:	d0f7      	beq.n	800a23e <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a24e:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a250:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a252:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 800a256:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a25a:	bf1b      	ittet	ne
 800a25c:	18d2      	addne	r2, r2, r3
 800a25e:	f003 0301 	andne.w	r3, r3, #1
 800a262:	4613      	moveq	r3, r2
 800a264:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800a268:	e787      	b.n	800a17a <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a26a:	200b      	movs	r0, #11
 800a26c:	e6f1      	b.n	800a052 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a26e:	200c      	movs	r0, #12
 800a270:	e6ef      	b.n	800a052 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800a272:	4628      	mov	r0, r5
 800a274:	e6ed      	b.n	800a052 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a276:	2003      	movs	r0, #3
 800a278:	e6eb      	b.n	800a052 <find_volume+0x46>
 800a27a:	bf00      	nop
 800a27c:	200005dc 	.word	0x200005dc
 800a280:	41615252 	.word	0x41615252
 800a284:	200005f8 	.word	0x200005f8
 800a288:	200005e0 	.word	0x200005e0

0800a28c <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a28c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 800a290:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a292:	3b02      	subs	r3, #2
 800a294:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800a296:	bf3d      	ittte	cc
 800a298:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 800a29c:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 800a2a0:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2a4:	2000      	movcs	r0, #0
}
 800a2a6:	4770      	bx	lr

0800a2a8 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a2a8:	2901      	cmp	r1, #1
{
 800a2aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a2b0:	d959      	bls.n	800a366 <get_fat+0xbe>
 800a2b2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a2b6:	4299      	cmp	r1, r3
 800a2b8:	d255      	bcs.n	800a366 <get_fat+0xbe>
		switch (fs->fs_type) {
 800a2ba:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d027      	beq.n	800a312 <get_fat+0x6a>
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d036      	beq.n	800a334 <get_fat+0x8c>
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d14d      	bne.n	800a366 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 800a2ca:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ce:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a2d2:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800a2d6:	f7ff fe4f 	bl	8009f78 <move_window>
 800a2da:	b110      	cbz	r0, 800a2e2 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2e2:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 800a2e6:	1c67      	adds	r7, r4, #1
 800a2e8:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ec:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a2f0:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800a2f2:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f4:	f7ff fe40 	bl	8009f78 <move_window>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d1ef      	bne.n	800a2dc <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a2fc:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a300:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a302:	5df0      	ldrb	r0, [r6, r7]
 800a304:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a308:	bf4c      	ite	mi
 800a30a:	0900      	lsrmi	r0, r0, #4
 800a30c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a312:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a316:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800a31a:	f7ff fe2d 	bl	8009f78 <move_window>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d1dc      	bne.n	800a2dc <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a322:	006d      	lsls	r5, r5, #1
 800a324:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 800a328:	1973      	adds	r3, r6, r5
 800a32a:	5d70      	ldrb	r0, [r6, r5]
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a334:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a338:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800a33c:	f7ff fe1c 	bl	8009f78 <move_window>
 800a340:	2800      	cmp	r0, #0
 800a342:	d1cb      	bne.n	800a2dc <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a344:	00ad      	lsls	r5, r5, #2
 800a346:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800a34a:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a34c:	7898      	ldrb	r0, [r3, #2]
 800a34e:	78da      	ldrb	r2, [r3, #3]
 800a350:	785b      	ldrb	r3, [r3, #1]
 800a352:	0400      	lsls	r0, r0, #16
 800a354:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800a358:	5d72      	ldrb	r2, [r6, r5]
 800a35a:	4310      	orrs	r0, r2
 800a35c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a360:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800a364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800a366:	2001      	movs	r0, #1
}
 800a368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a36a <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a36a:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a372:	2a01      	cmp	r2, #1
{
 800a374:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 800a376:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a37a:	d101      	bne.n	800a380 <dir_sdi+0x16>
		return FR_INT_ERR;
 800a37c:	2002      	movs	r0, #2
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a380:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800a384:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800a388:	428a      	cmp	r2, r1
 800a38a:	d2f7      	bcs.n	800a37c <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a38c:	b9f2      	cbnz	r2, 800a3cc <dir_sdi+0x62>
 800a38e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800a392:	2903      	cmp	r1, #3
 800a394:	d102      	bne.n	800a39c <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800a396:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a39a:	b9c1      	cbnz	r1, 800a3ce <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a39c:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800a3a0:	428d      	cmp	r5, r1
 800a3a2:	d2eb      	bcs.n	800a37c <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 800a3a4:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 800a3a8:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d0e5      	beq.n	800a37c <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a3b0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a3b4:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a3b8:	f005 050f 	and.w	r5, r5, #15
 800a3bc:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a3c0:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a3c4:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a3ce:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 800a3d2:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a3d4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800a3d6:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3d8:	4611      	mov	r1, r2
 800a3da:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800a3de:	d202      	bcs.n	800a3e6 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800a3e0:	f7ff ff54 	bl	800a28c <clust2sect>
 800a3e4:	e7e0      	b.n	800a3a8 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3e6:	f7ff ff5f 	bl	800a2a8 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3ea:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3ec:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3ee:	d009      	beq.n	800a404 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a3f0:	2801      	cmp	r0, #1
 800a3f2:	d9c3      	bls.n	800a37c <dir_sdi+0x12>
 800a3f4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a3f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3fc:	4298      	cmp	r0, r3
 800a3fe:	d2bd      	bcs.n	800a37c <dir_sdi+0x12>
			idx -= ic;
 800a400:	1bad      	subs	r5, r5, r6
 800a402:	e7e8      	b.n	800a3d6 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a404:	2001      	movs	r0, #1
}
 800a406:	bd70      	pop	{r4, r5, r6, pc}

0800a408 <dir_remove>:
{
 800a408:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 800a40a:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 800a40e:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 800a410:	f7ff ffab 	bl	800a36a <dir_sdi>
	if (res == FR_OK) {
 800a414:	4603      	mov	r3, r0
 800a416:	b9b0      	cbnz	r0, 800a446 <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 800a418:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a41c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a420:	f7ff fdaa 	bl	8009f78 <move_window>
		if (res == FR_OK) {
 800a424:	4603      	mov	r3, r0
 800a426:	b970      	cbnz	r0, 800a446 <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 800a428:	4601      	mov	r1, r0
 800a42a:	2220      	movs	r2, #32
 800a42c:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 800a430:	f7ff fbfc 	bl	8009c2c <mem_set>
			*dp->dir = DDEM;
 800a434:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800a438:	21e5      	movs	r1, #229	; 0xe5
 800a43a:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 800a43c:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a440:	2101      	movs	r1, #1
 800a442:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 800a446:	4618      	mov	r0, r3
 800a448:	bd10      	pop	{r4, pc}

0800a44a <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a44a:	2901      	cmp	r1, #1
{
 800a44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a456:	d96f      	bls.n	800a538 <put_fat+0xee>
 800a458:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a45c:	4299      	cmp	r1, r3
 800a45e:	d26b      	bcs.n	800a538 <put_fat+0xee>
		switch (fs->fs_type) {
 800a460:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800a464:	2b02      	cmp	r3, #2
 800a466:	d03d      	beq.n	800a4e4 <put_fat+0x9a>
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d04b      	beq.n	800a504 <put_fat+0xba>
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d163      	bne.n	800a538 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 800a470:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a474:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a478:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a47c:	f7ff fd7c 	bl	8009f78 <move_window>
			if (res != FR_OK) break;
 800a480:	2800      	cmp	r0, #0
 800a482:	d15a      	bne.n	800a53a <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a484:	f107 0801 	add.w	r8, r7, #1
 800a488:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a48c:	f014 0401 	ands.w	r4, r4, #1
 800a490:	bf1f      	itttt	ne
 800a492:	5deb      	ldrbne	r3, [r5, r7]
 800a494:	f003 020f 	andne.w	r2, r3, #15
 800a498:	0133      	lslne	r3, r6, #4
 800a49a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800a49e:	bf14      	ite	ne
 800a4a0:	4313      	orrne	r3, r2
 800a4a2:	b2f3      	uxtbeq	r3, r6
 800a4a4:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4a6:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4b0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f7ff fd5f 	bl	8009f78 <move_window>
			if (res != FR_OK) break;
 800a4ba:	bbf0      	cbnz	r0, 800a53a <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 800a4bc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4c0:	b144      	cbz	r4, 800a4d4 <put_fat+0x8a>
 800a4c2:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800a4c6:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 800a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4d4:	f815 2008 	ldrb.w	r2, [r5, r8]
 800a4d8:	f3c6 2603 	ubfx	r6, r6, #8, #4
 800a4dc:	f022 020f 	bic.w	r2, r2, #15
 800a4e0:	4332      	orrs	r2, r6
 800a4e2:	e7f0      	b.n	800a4c6 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4e4:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a4e8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800a4ec:	f7ff fd44 	bl	8009f78 <move_window>
			if (res != FR_OK) break;
 800a4f0:	bb18      	cbnz	r0, 800a53a <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a4f2:	0064      	lsls	r4, r4, #1
 800a4f4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800a4f8:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800a4fc:	552e      	strb	r6, [r5, r4]
 800a4fe:	442c      	add	r4, r5
 800a500:	7062      	strb	r2, [r4, #1]
 800a502:	e7e2      	b.n	800a4ca <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a504:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a508:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a50c:	f7ff fd34 	bl	8009f78 <move_window>
			if (res != FR_OK) break;
 800a510:	b998      	cbnz	r0, 800a53a <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a512:	00a4      	lsls	r4, r4, #2
 800a514:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800a518:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800a51a:	78cb      	ldrb	r3, [r1, #3]
 800a51c:	061b      	lsls	r3, r3, #24
 800a51e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a522:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800a526:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a52a:	552a      	strb	r2, [r5, r4]
 800a52c:	704b      	strb	r3, [r1, #1]
 800a52e:	0c13      	lsrs	r3, r2, #16
 800a530:	0e12      	lsrs	r2, r2, #24
 800a532:	708b      	strb	r3, [r1, #2]
 800a534:	70ca      	strb	r2, [r1, #3]
 800a536:	e7c8      	b.n	800a4ca <put_fat+0x80>
			res = FR_INT_ERR;
 800a538:	2002      	movs	r0, #2
}
 800a53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a53e <create_chain>:
{
 800a53e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a540:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800a542:	460f      	mov	r7, r1
 800a544:	b989      	cbnz	r1, 800a56a <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800a546:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a54a:	b1fe      	cbz	r6, 800a58c <create_chain+0x4e>
 800a54c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a550:	429e      	cmp	r6, r3
 800a552:	bf28      	it	cs
 800a554:	2601      	movcs	r6, #1
 800a556:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a558:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 800a55c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a55e:	429c      	cmp	r4, r3
 800a560:	d317      	bcc.n	800a592 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800a562:	2e01      	cmp	r6, #1
 800a564:	d814      	bhi.n	800a590 <create_chain+0x52>
 800a566:	2400      	movs	r4, #0
 800a568:	e008      	b.n	800a57c <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a56a:	f7ff fe9d 	bl	800a2a8 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 800a56e:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a570:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800a572:	d93b      	bls.n	800a5ec <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a574:	3001      	adds	r0, #1
 800a576:	d103      	bne.n	800a580 <create_chain+0x42>
			ncl = 2;
 800a578:	f04f 34ff 	mov.w	r4, #4294967295
}
 800a57c:	4620      	mov	r0, r4
 800a57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a580:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a584:	429c      	cmp	r4, r3
 800a586:	d3f9      	bcc.n	800a57c <create_chain+0x3e>
 800a588:	463e      	mov	r6, r7
 800a58a:	e7e4      	b.n	800a556 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a58c:	2601      	movs	r6, #1
 800a58e:	e7e2      	b.n	800a556 <create_chain+0x18>
			ncl = 2;
 800a590:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a592:	4621      	mov	r1, r4
 800a594:	4628      	mov	r0, r5
 800a596:	f7ff fe87 	bl	800a2a8 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800a59a:	b130      	cbz	r0, 800a5aa <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a59c:	1c41      	adds	r1, r0, #1
 800a59e:	d0eb      	beq.n	800a578 <create_chain+0x3a>
 800a5a0:	2801      	cmp	r0, #1
 800a5a2:	d023      	beq.n	800a5ec <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 800a5a4:	42b4      	cmp	r4, r6
 800a5a6:	d1d7      	bne.n	800a558 <create_chain+0x1a>
 800a5a8:	e7dd      	b.n	800a566 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a5aa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f7ff ff4a 	bl	800a44a <put_fat>
	if (res == FR_OK && clst != 0) {
 800a5b6:	b9b8      	cbnz	r0, 800a5e8 <create_chain+0xaa>
 800a5b8:	b97f      	cbnz	r7, 800a5da <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 800a5ba:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 800a5be:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	d0da      	beq.n	800a57c <create_chain+0x3e>
			fs->free_clust--;
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a5cc:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800a5d0:	f043 0301 	orr.w	r3, r3, #1
 800a5d4:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 800a5d8:	e7d0      	b.n	800a57c <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4639      	mov	r1, r7
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7ff ff33 	bl	800a44a <put_fat>
	if (res == FR_OK) {
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d0e8      	beq.n	800a5ba <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a5e8:	2801      	cmp	r0, #1
 800a5ea:	d0c5      	beq.n	800a578 <create_chain+0x3a>
 800a5ec:	2401      	movs	r4, #1
 800a5ee:	e7c5      	b.n	800a57c <create_chain+0x3e>

0800a5f0 <dir_next>:
{
 800a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800a5f4:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 800a5f8:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a5fa:	b2b3      	uxth	r3, r6
{
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a600:	b913      	cbnz	r3, 800a608 <dir_next+0x18>
		return FR_NO_FILE;
 800a602:	2004      	movs	r0, #4
 800a604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a608:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d0f8      	beq.n	800a602 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a610:	f016 080f 	ands.w	r8, r6, #15
 800a614:	d10b      	bne.n	800a62e <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800a616:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 800a61a:	3301      	adds	r3, #1
 800a61c:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800a620:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800a624:	b971      	cbnz	r1, 800a644 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a626:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 800a62a:	429e      	cmp	r6, r3
 800a62c:	d2e9      	bcs.n	800a602 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a62e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800a632:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a636:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a63a:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 800a63e:	2000      	movs	r0, #0
 800a640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a644:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800a648:	3f01      	subs	r7, #1
 800a64a:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 800a64e:	d1ee      	bne.n	800a62e <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a650:	f7ff fe2a 	bl	800a2a8 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800a654:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a656:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 800a658:	d802      	bhi.n	800a660 <dir_next+0x70>
 800a65a:	2002      	movs	r0, #2
 800a65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a660:	1c42      	adds	r2, r0, #1
 800a662:	d102      	bne.n	800a66a <dir_next+0x7a>
 800a664:	2001      	movs	r0, #1
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a66a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a66e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a672:	429d      	cmp	r5, r3
 800a674:	d32f      	bcc.n	800a6d6 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a676:	f1b9 0f00 	cmp.w	r9, #0
 800a67a:	d0c2      	beq.n	800a602 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a67c:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800a680:	f7ff ff5d 	bl	800a53e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a684:	4605      	mov	r5, r0
 800a686:	2800      	cmp	r0, #0
 800a688:	d03e      	beq.n	800a708 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 800a68a:	2801      	cmp	r0, #1
 800a68c:	d0e5      	beq.n	800a65a <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	d0e8      	beq.n	800a664 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a692:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a696:	f7ff fc0b 	bl	8009eb0 <sync_window>
 800a69a:	4601      	mov	r1, r0
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d1e1      	bne.n	800a664 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a6a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a6a8:	f7ff fac0 	bl	8009c2c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a6ac:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	f7ff fdea 	bl	800a28c <clust2sect>
						dp->fs->wflag = 1;
 800a6b8:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a6bc:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a6c0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a6c4:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800a6c8:	429f      	cmp	r7, r3
 800a6ca:	d30e      	bcc.n	800a6ea <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a6cc:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800a6d0:	1bdf      	subs	r7, r3, r7
 800a6d2:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800a6d6:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a6e0:	f7ff fdd4 	bl	800a28c <clust2sect>
 800a6e4:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800a6e8:	e7a1      	b.n	800a62e <dir_next+0x3e>
						dp->fs->wflag = 1;
 800a6ea:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 800a6ee:	f7ff fbb6 	bl	8009e5e <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d1b6      	bne.n	800a664 <dir_next+0x74>
						dp->fs->winsect++;
 800a6f6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a6fa:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 800a6fe:	3301      	adds	r3, #1
 800a700:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a704:	3701      	adds	r7, #1
 800a706:	e7db      	b.n	800a6c0 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a708:	2007      	movs	r0, #7
}
 800a70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800a710 <follow_path>:
{
 800a710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a714:	780b      	ldrb	r3, [r1, #0]
 800a716:	2b2f      	cmp	r3, #47	; 0x2f
{
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a71c:	d001      	beq.n	800a722 <follow_path+0x12>
 800a71e:	2b5c      	cmp	r3, #92	; 0x5c
 800a720:	d100      	bne.n	800a724 <follow_path+0x14>
		path++;
 800a722:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800a724:	2600      	movs	r6, #0
 800a726:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a72a:	782b      	ldrb	r3, [r5, #0]
 800a72c:	2b1f      	cmp	r3, #31
 800a72e:	d936      	bls.n	800a79e <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a730:	4e5f      	ldr	r6, [pc, #380]	; (800a8b0 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a732:	782b      	ldrb	r3, [r5, #0]
 800a734:	2b2f      	cmp	r3, #47	; 0x2f
 800a736:	46a8      	mov	r8, r5
 800a738:	f105 0501 	add.w	r5, r5, #1
 800a73c:	d0f9      	beq.n	800a732 <follow_path+0x22>
 800a73e:	2b5c      	cmp	r3, #92	; 0x5c
 800a740:	d0f7      	beq.n	800a732 <follow_path+0x22>
	sfn = dp->fn;
 800a742:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 800a746:	220b      	movs	r2, #11
 800a748:	2120      	movs	r1, #32
 800a74a:	4638      	mov	r0, r7
 800a74c:	f7ff fa6e 	bl	8009c2c <mem_set>
	si = i = b = 0; ni = 8;
 800a750:	f04f 0e00 	mov.w	lr, #0
 800a754:	f108 39ff 	add.w	r9, r8, #4294967295
 800a758:	46f4      	mov	ip, lr
 800a75a:	2108      	movs	r1, #8
 800a75c:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 800a75e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a762:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800a764:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a768:	d928      	bls.n	800a7bc <follow_path+0xac>
 800a76a:	2b2f      	cmp	r3, #47	; 0x2f
 800a76c:	d026      	beq.n	800a7bc <follow_path+0xac>
 800a76e:	2b5c      	cmp	r3, #92	; 0x5c
 800a770:	d024      	beq.n	800a7bc <follow_path+0xac>
		if (c == '.' || i >= ni) {
 800a772:	2b2e      	cmp	r3, #46	; 0x2e
 800a774:	f000 8085 	beq.w	800a882 <follow_path+0x172>
 800a778:	4571      	cmp	r1, lr
 800a77a:	d90d      	bls.n	800a798 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 800a77c:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a77e:	bf48      	it	mi
 800a780:	3b80      	submi	r3, #128	; 0x80
 800a782:	4d4c      	ldr	r5, [pc, #304]	; (800a8b4 <follow_path+0x1a4>)
 800a784:	bf44      	itt	mi
 800a786:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 800a788:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 800a78c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800a790:	2800      	cmp	r0, #0
 800a792:	d07d      	beq.n	800a890 <follow_path+0x180>
 800a794:	4283      	cmp	r3, r0
 800a796:	d1f9      	bne.n	800a78c <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a798:	2006      	movs	r0, #6
	return res;
 800a79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f7ff fde2 	bl	800a36a <dir_sdi>
		dp->dir = 0;
 800a7a6:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 800a7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 800a7ae:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 800a7b2:	f807 300e 	strb.w	r3, [r7, lr]
 800a7b6:	f10e 0e01 	add.w	lr, lr, #1
 800a7ba:	e7d0      	b.n	800a75e <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a7bc:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 800a7be:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a7c2:	bf34      	ite	cc
 800a7c4:	2304      	movcc	r3, #4
 800a7c6:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800a7c8:	f1be 0f00 	cmp.w	lr, #0
 800a7cc:	d0e4      	beq.n	800a798 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800a7ce:	7838      	ldrb	r0, [r7, #0]
 800a7d0:	28e5      	cmp	r0, #229	; 0xe5
 800a7d2:	bf04      	itt	eq
 800a7d4:	2005      	moveq	r0, #5
 800a7d6:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 800a7d8:	2908      	cmp	r1, #8
 800a7da:	bf04      	itt	eq
 800a7dc:	0092      	lsleq	r2, r2, #2
 800a7de:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a7e0:	f002 0103 	and.w	r1, r2, #3
 800a7e4:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a7e6:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a7ea:	bf08      	it	eq
 800a7ec:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a7f0:	2a04      	cmp	r2, #4
 800a7f2:	bf08      	it	eq
 800a7f4:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800a7f8:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f7ff fdb4 	bl	800a36a <dir_sdi>
	if (res != FR_OK) return res;
 800a802:	b9f8      	cbnz	r0, 800a844 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 800a804:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a808:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a80c:	f7ff fbb4 	bl	8009f78 <move_window>
		if (res != FR_OK) break;
 800a810:	b9c0      	cbnz	r0, 800a844 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a812:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a816:	7813      	ldrb	r3, [r2, #0]
 800a818:	b19b      	cbz	r3, 800a842 <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a81a:	7ad3      	ldrb	r3, [r2, #11]
 800a81c:	0719      	lsls	r1, r3, #28
 800a81e:	d40b      	bmi.n	800a838 <follow_path+0x128>
 800a820:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a824:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a828:	4573      	cmp	r3, lr
 800a82a:	d00b      	beq.n	800a844 <follow_path+0x134>
 800a82c:	f812 7b01 	ldrb.w	r7, [r2], #1
 800a830:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a834:	428f      	cmp	r7, r1
 800a836:	d0f7      	beq.n	800a828 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 800a838:	2100      	movs	r1, #0
 800a83a:	4620      	mov	r0, r4
 800a83c:	f7ff fed8 	bl	800a5f0 <dir_next>
 800a840:	e7df      	b.n	800a802 <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a842:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 800a844:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a848:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a84a:	b138      	cbz	r0, 800a85c <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a84c:	2804      	cmp	r0, #4
 800a84e:	d12c      	bne.n	800a8aa <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a850:	f013 0f04 	tst.w	r3, #4
 800a854:	bf08      	it	eq
 800a856:	2005      	moveq	r0, #5
 800a858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a85c:	075a      	lsls	r2, r3, #29
 800a85e:	d424      	bmi.n	800a8aa <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 800a860:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a864:	7acb      	ldrb	r3, [r1, #11]
 800a866:	06db      	lsls	r3, r3, #27
 800a868:	d508      	bpl.n	800a87c <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 800a86a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a86e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a872:	f7ff fae6 	bl	8009e42 <ld_clust.isra.0>
 800a876:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a87a:	e75a      	b.n	800a732 <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a87c:	2005      	movs	r0, #5
 800a87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a882:	2908      	cmp	r1, #8
 800a884:	d188      	bne.n	800a798 <follow_path+0x88>
			b <<= 2; continue;
 800a886:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 800a888:	468e      	mov	lr, r1
			b <<= 2; continue;
 800a88a:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 800a88c:	210b      	movs	r1, #11
 800a88e:	e766      	b.n	800a75e <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800a890:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800a894:	2819      	cmp	r0, #25
 800a896:	d98a      	bls.n	800a7ae <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 800a898:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 800a89c:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 800a89e:	bf9e      	ittt	ls
 800a8a0:	3b20      	subls	r3, #32
 800a8a2:	f042 0201 	orrls.w	r2, r2, #1
 800a8a6:	b2db      	uxtbls	r3, r3
 800a8a8:	e783      	b.n	800a7b2 <follow_path+0xa2>
}
 800a8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ae:	bf00      	nop
 800a8b0:	0800e424 	.word	0x0800e424
 800a8b4:	0800e4a3 	.word	0x0800e4a3

0800a8b8 <dir_read.constprop.13>:
FRESULT dir_read (
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 800a8bc:	2004      	movs	r0, #4
	while (dp->sect) {
 800a8be:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a8c2:	b909      	cbnz	r1, 800a8c8 <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 800a8c4:	b1b0      	cbz	r0, 800a8f4 <dir_read.constprop.13+0x3c>
 800a8c6:	e01d      	b.n	800a904 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 800a8c8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a8cc:	f7ff fb54 	bl	8009f78 <move_window>
		if (res != FR_OK) break;
 800a8d0:	b9c0      	cbnz	r0, 800a904 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a8d2:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 800a8d6:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8d8:	b1c3      	cbz	r3, 800a90c <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800a8da:	2be5      	cmp	r3, #229	; 0xe5
 800a8dc:	d00c      	beq.n	800a8f8 <dir_read.constprop.13+0x40>
 800a8de:	2b2e      	cmp	r3, #46	; 0x2e
 800a8e0:	d00a      	beq.n	800a8f8 <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 800a8e2:	7ad3      	ldrb	r3, [r2, #11]
 800a8e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800a8e8:	2b0f      	cmp	r3, #15
 800a8ea:	d005      	beq.n	800a8f8 <dir_read.constprop.13+0x40>
 800a8ec:	f023 0320 	bic.w	r3, r3, #32
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d001      	beq.n	800a8f8 <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7ff fe78 	bl	800a5f0 <dir_next>
		if (res != FR_OK) break;
 800a900:	2800      	cmp	r0, #0
 800a902:	d0dc      	beq.n	800a8be <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 800a90a:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a90c:	2004      	movs	r0, #4
 800a90e:	e7f9      	b.n	800a904 <dir_read.constprop.13+0x4c>

0800a910 <dir_register>:
{
 800a910:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800a912:	2100      	movs	r1, #0
{
 800a914:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800a916:	f7ff fd28 	bl	800a36a <dir_sdi>
	if (res == FR_OK) {
 800a91a:	4604      	mov	r4, r0
 800a91c:	bb78      	cbnz	r0, 800a97e <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 800a91e:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800a922:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800a926:	f7ff fb27 	bl	8009f78 <move_window>
			if (res != FR_OK) break;
 800a92a:	4604      	mov	r4, r0
 800a92c:	bb38      	cbnz	r0, 800a97e <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a92e:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2be5      	cmp	r3, #229	; 0xe5
 800a936:	d11b      	bne.n	800a970 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 800a938:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800a93c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800a940:	f7ff fb1a 	bl	8009f78 <move_window>
		if (res == FR_OK) {
 800a944:	4604      	mov	r4, r0
 800a946:	b988      	cbnz	r0, 800a96c <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a948:	4601      	mov	r1, r0
 800a94a:	2220      	movs	r2, #32
 800a94c:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800a950:	f7ff f96c 	bl	8009c2c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a954:	220b      	movs	r2, #11
 800a956:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 800a95a:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800a95e:	f7ff f95b 	bl	8009c18 <mem_cpy>
			dp->fs->wflag = 1;
 800a962:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800a96c:	4620      	mov	r0, r4
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0e1      	beq.n	800a938 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a974:	2101      	movs	r1, #1
 800a976:	4628      	mov	r0, r5
 800a978:	f7ff fe3a 	bl	800a5f0 <dir_next>
 800a97c:	e7cd      	b.n	800a91a <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a97e:	2c04      	cmp	r4, #4
 800a980:	bf08      	it	eq
 800a982:	2407      	moveq	r4, #7
 800a984:	e7f2      	b.n	800a96c <dir_register+0x5c>

0800a986 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a986:	2901      	cmp	r1, #1
{
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a98e:	d801      	bhi.n	800a994 <remove_chain+0xe>
		res = FR_INT_ERR;
 800a990:	2002      	movs	r0, #2
 800a992:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a994:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a998:	4299      	cmp	r1, r3
 800a99a:	d2f9      	bcs.n	800a990 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a99c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800a9a0:	429d      	cmp	r5, r3
 800a9a2:	d205      	bcs.n	800a9b0 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff fc7e 	bl	800a2a8 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	b908      	cbnz	r0, 800a9b4 <remove_chain+0x2e>
		res = FR_INT_ERR;
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a9b4:	2801      	cmp	r0, #1
 800a9b6:	d0eb      	beq.n	800a990 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a9b8:	1c41      	adds	r1, r0, #1
 800a9ba:	d014      	beq.n	800a9e6 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff fd42 	bl	800a44a <put_fat>
			if (res != FR_OK) break;
 800a9c6:	b978      	cbnz	r0, 800a9e8 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a9c8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	d008      	beq.n	800a9e2 <remove_chain+0x5c>
				fs->free_clust++;
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a9d6:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800a9da:	f043 0301 	orr.w	r3, r3, #1
 800a9de:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800a9e2:	4635      	mov	r5, r6
 800a9e4:	e7da      	b.n	800a99c <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a9e6:	2001      	movs	r0, #1
}
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a9ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a9ee:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a9f0:	a804      	add	r0, sp, #16
{
 800a9f2:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800a9f4:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 800a9f8:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 800a9fa:	f7ff f9f3 	bl	8009de4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9fe:	1e05      	subs	r5, r0, #0
 800aa00:	db21      	blt.n	800aa46 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aa02:	4913      	ldr	r1, [pc, #76]	; (800aa50 <f_mount+0x64>)
 800aa04:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800aa08:	b164      	cbz	r4, 800aa24 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aa0a:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <f_mount+0x68>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	4294      	cmp	r4, r2
 800aa10:	bf04      	itt	eq
 800aa12:	2200      	moveq	r2, #0
 800aa14:	601a      	streq	r2, [r3, #0]
 800aa16:	68da      	ldr	r2, [r3, #12]
 800aa18:	2000      	movs	r0, #0
 800aa1a:	4294      	cmp	r4, r2
 800aa1c:	bf08      	it	eq
 800aa1e:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa20:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 800aa24:	9801      	ldr	r0, [sp, #4]
 800aa26:	b110      	cbz	r0, 800aa2e <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aa2e:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa32:	b130      	cbz	r0, 800aa42 <f_mount+0x56>
 800aa34:	2e01      	cmp	r6, #1
 800aa36:	d108      	bne.n	800aa4a <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4669      	mov	r1, sp
 800aa3c:	a801      	add	r0, sp, #4
 800aa3e:	f7ff fae5 	bl	800a00c <find_volume>
	LEAVE_FF(fs, res);
}
 800aa42:	b004      	add	sp, #16
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa46:	200b      	movs	r0, #11
 800aa48:	e7fb      	b.n	800aa42 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e7f9      	b.n	800aa42 <f_mount+0x56>
 800aa4e:	bf00      	nop
 800aa50:	200005dc 	.word	0x200005dc
 800aa54:	200005e0 	.word	0x200005e0

0800aa58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa5c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800aa60:	4690      	mov	r8, r2
 800aa62:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800aa64:	4605      	mov	r5, r0
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f000 80a6 	beq.w	800abb8 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800aa72:	f002 021e 	and.w	r2, r2, #30
 800aa76:	a901      	add	r1, sp, #4
 800aa78:	a886      	add	r0, sp, #536	; 0x218
 800aa7a:	f7ff fac7 	bl	800a00c <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800aa7e:	4606      	mov	r6, r0
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f040 8094 	bne.w	800abae <f_open+0x156>
		INIT_BUF(dj);
 800aa86:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa88:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800aa8a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa8c:	a806      	add	r0, sp, #24
 800aa8e:	f7ff fe3f 	bl	800a710 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800aa92:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800aa96:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa98:	b948      	cbnz	r0, 800aaae <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800aa9a:	2c00      	cmp	r4, #0
 800aa9c:	d05b      	beq.n	800ab56 <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa9e:	f017 0f1e 	tst.w	r7, #30
 800aaa2:	bf14      	ite	ne
 800aaa4:	2101      	movne	r1, #1
 800aaa6:	2100      	moveq	r1, #0
 800aaa8:	a806      	add	r0, sp, #24
 800aaaa:	f7ff f8c7 	bl	8009c3c <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aaae:	f018 0f1c 	tst.w	r8, #28
 800aab2:	d05b      	beq.n	800ab6c <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d050      	beq.n	800ab5a <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800aab8:	2804      	cmp	r0, #4
 800aaba:	d14a      	bne.n	800ab52 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aabc:	4b51      	ldr	r3, [pc, #324]	; (800ac04 <f_open+0x1ac>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	b11a      	cbz	r2, 800aaca <f_open+0x72>
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f040 809b 	bne.w	800ac00 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aaca:	a806      	add	r0, sp, #24
 800aacc:	f7ff ff20 	bl	800a910 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d13e      	bne.n	800ab52 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 800aad4:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aad6:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aada:	073b      	lsls	r3, r7, #28
 800aadc:	d550      	bpl.n	800ab80 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800aade:	f7f6 fd2f 	bl	8001540 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aae2:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800aae6:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aaea:	73a0      	strb	r0, [r4, #14]
 800aaec:	73e3      	strb	r3, [r4, #15]
 800aaee:	0c03      	lsrs	r3, r0, #16
 800aaf0:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800aaf2:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800aaf6:	f884 801c 	strb.w	r8, [r4, #28]
 800aafa:	f884 801d 	strb.w	r8, [r4, #29]
 800aafe:	f884 801e 	strb.w	r8, [r4, #30]
 800ab02:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800ab06:	7423      	strb	r3, [r4, #16]
 800ab08:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800ab0a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800ab12:	f7ff f996 	bl	8009e42 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ab16:	f884 801a 	strb.w	r8, [r4, #26]
 800ab1a:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ab1e:	f884 8014 	strb.w	r8, [r4, #20]
 800ab22:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800ab26:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800ab2e:	4680      	mov	r8, r0
 800ab30:	b330      	cbz	r0, 800ab80 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800ab32:	4601      	mov	r1, r0
 800ab34:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800ab36:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 800ab3a:	f7ff ff24 	bl	800a986 <remove_chain>
					if (res == FR_OK) {
 800ab3e:	b940      	cbnz	r0, 800ab52 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ab40:	9886      	ldr	r0, [sp, #536]	; 0x218
 800ab42:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab46:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7ff fa14 	bl	8009f78 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800ab50:	b1b0      	cbz	r0, 800ab80 <f_open+0x128>
					res = FR_DENIED;
 800ab52:	4606      	mov	r6, r0
 800ab54:	e02b      	b.n	800abae <f_open+0x156>
				res = FR_INVALID_NAME;
 800ab56:	2006      	movs	r0, #6
 800ab58:	e7a9      	b.n	800aaae <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ab5a:	7ae3      	ldrb	r3, [r4, #11]
 800ab5c:	f013 0f11 	tst.w	r3, #17
 800ab60:	d12e      	bne.n	800abc0 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ab62:	f018 0f04 	tst.w	r8, #4
 800ab66:	d0b8      	beq.n	800aada <f_open+0x82>
						res = FR_EXIST;
 800ab68:	2608      	movs	r6, #8
 800ab6a:	e020      	b.n	800abae <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d1f0      	bne.n	800ab52 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ab70:	7ae3      	ldrb	r3, [r4, #11]
 800ab72:	06d8      	lsls	r0, r3, #27
 800ab74:	d422      	bmi.n	800abbc <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ab76:	f018 0f02 	tst.w	r8, #2
 800ab7a:	d001      	beq.n	800ab80 <f_open+0x128>
 800ab7c:	07da      	lsls	r2, r3, #31
 800ab7e:	d41f      	bmi.n	800abc0 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab80:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ab82:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 800ab84:	bf48      	it	mi
 800ab86:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ab8a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ab8e:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab92:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 800ab96:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab9a:	bf14      	ite	ne
 800ab9c:	2101      	movne	r1, #1
 800ab9e:	2100      	moveq	r1, #0
 800aba0:	a806      	add	r0, sp, #24
 800aba2:	f7ff f87d 	bl	8009ca0 <inc_lock>
 800aba6:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800abaa:	b958      	cbnz	r0, 800abc4 <f_open+0x16c>
 800abac:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800abae:	4630      	mov	r0, r6
 800abb0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800abb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 800abb8:	2609      	movs	r6, #9
 800abba:	e7f8      	b.n	800abae <f_open+0x156>
					res = FR_NO_FILE;
 800abbc:	2604      	movs	r6, #4
 800abbe:	e7f6      	b.n	800abae <f_open+0x156>
					res = FR_DENIED;
 800abc0:	2607      	movs	r6, #7
 800abc2:	e7f4      	b.n	800abae <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 800abc4:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800abc8:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 800abcc:	2700      	movs	r7, #0
 800abce:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800abd2:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 800abd6:	4621      	mov	r1, r4
 800abd8:	f7ff f933 	bl	8009e42 <ld_clust.isra.0>
 800abdc:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800abe0:	69e3      	ldr	r3, [r4, #28]
 800abe2:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 800abe6:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 800abea:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 800abee:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800abf2:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800abf6:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 800abfa:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800abfe:	e7d6      	b.n	800abae <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac00:	2012      	movs	r0, #18
 800ac02:	e7a6      	b.n	800ab52 <f_open+0xfa>
 800ac04:	200005e0 	.word	0x200005e0

0800ac08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f8cb 3000 	str.w	r3, [fp]
{
 800ac14:	4604      	mov	r4, r0
 800ac16:	4689      	mov	r9, r1
 800ac18:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 800ac1a:	f7ff f8fb 	bl	8009e14 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ac1e:	4606      	mov	r6, r0
 800ac20:	bb50      	cbnz	r0, 800ac78 <f_write+0x70>
	if (fp->err)							/* Check error */
 800ac22:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f040 80d9 	bne.w	800adde <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ac2c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ac30:	0799      	lsls	r1, r3, #30
 800ac32:	f140 80d6 	bpl.w	800ade2 <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ac36:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ac3a:	42df      	cmn	r7, r3
 800ac3c:	f0c0 8083 	bcc.w	800ad46 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ac40:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ac44:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	f200 80c5 	bhi.w	800add8 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800ac4e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ac52:	f043 0320 	orr.w	r3, r3, #32
 800ac56:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800ac5a:	e00d      	b.n	800ac78 <f_write+0x70>
					if (fp->cltbl)
 800ac5c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800ac60:	b173      	cbz	r3, 800ac80 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff f87c 	bl	8009d60 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac68:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0e8      	beq.n	800ac40 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ac6e:	2901      	cmp	r1, #1
 800ac70:	d109      	bne.n	800ac86 <f_write+0x7e>
 800ac72:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ac74:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 800ac78:	4630      	mov	r0, r6
 800ac7a:	b003      	add	sp, #12
 800ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac80:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800ac84:	e07a      	b.n	800ad7c <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ac86:	1c4a      	adds	r2, r1, #1
 800ac88:	d101      	bne.n	800ac8e <f_write+0x86>
 800ac8a:	2601      	movs	r6, #1
 800ac8c:	e7f2      	b.n	800ac74 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ac8e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 800ac92:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ac96:	b90b      	cbnz	r3, 800ac9c <f_write+0x94>
 800ac98:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800ac9c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800aca0:	065b      	lsls	r3, r3, #25
 800aca2:	d511      	bpl.n	800acc8 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800aca4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800aca8:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800acac:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800acb0:	2301      	movs	r3, #1
 800acb2:	4621      	mov	r1, r4
 800acb4:	f7fe ff2c 	bl	8009b10 <disk_write>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d1e6      	bne.n	800ac8a <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 800acbc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800acc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acc4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800acc8:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 800accc:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800acd0:	4650      	mov	r0, sl
 800acd2:	f7ff fadb 	bl	800a28c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d0cb      	beq.n	800ac72 <f_write+0x6a>
			sect += csect;
 800acda:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acdc:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800acde:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ace2:	d04e      	beq.n	800ad82 <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ace4:	9a01      	ldr	r2, [sp, #4]
 800ace6:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800acea:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800acee:	442a      	add	r2, r5
 800acf0:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800acf2:	bf84      	itt	hi
 800acf4:	9a01      	ldrhi	r2, [sp, #4]
 800acf6:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800acf8:	462b      	mov	r3, r5
 800acfa:	4642      	mov	r2, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7fe ff07 	bl	8009b10 <disk_write>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d1c1      	bne.n	800ac8a <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad06:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800ad0a:	eba1 0108 	sub.w	r1, r1, r8
 800ad0e:	428d      	cmp	r5, r1
 800ad10:	d90c      	bls.n	800ad2c <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800ad12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad16:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f7fe ff7c 	bl	8009c18 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ad20:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ad24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad28:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800ad2c:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ad2e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ad32:	442b      	add	r3, r5
 800ad34:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 800ad38:	f8db 3000 	ldr.w	r3, [fp]
 800ad3c:	442b      	add	r3, r5
 800ad3e:	44a9      	add	r9, r5
 800ad40:	f8cb 3000 	str.w	r3, [fp]
 800ad44:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 800ad46:	2f00      	cmp	r7, #0
 800ad48:	f43f af7a 	beq.w	800ac40 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ad4c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800ad50:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800ad54:	bb5b      	cbnz	r3, 800adae <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ad56:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ad5a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 800ad64:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	d197      	bne.n	800ac9c <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	f47f af75 	bne.w	800ac5c <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 800ad72:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 800ad76:	2900      	cmp	r1, #0
 800ad78:	f47f af79 	bne.w	800ac6e <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ad7c:	f7ff fbdf 	bl	800a53e <create_chain>
 800ad80:	e772      	b.n	800ac68 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800ad82:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800ad86:	4598      	cmp	r8, r3
 800ad88:	d00f      	beq.n	800adaa <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800ad8a:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800ad8e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d209      	bcs.n	800adaa <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800ad96:	2301      	movs	r3, #1
 800ad98:	4642      	mov	r2, r8
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800ada0:	f7fe fea8 	bl	8009af4 <disk_read>
				if (fp->fptr < fp->fsize &&
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f47f af70 	bne.w	800ac8a <f_write+0x82>
			fp->dsect = sect;
 800adaa:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800adae:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 800adb2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800adb6:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800adba:	42bd      	cmp	r5, r7
 800adbc:	bf28      	it	cs
 800adbe:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800adc0:	462a      	mov	r2, r5
 800adc2:	4649      	mov	r1, r9
 800adc4:	4420      	add	r0, r4
 800adc6:	f7fe ff27 	bl	8009c18 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800adca:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800adce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800add6:	e7aa      	b.n	800ad2e <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800add8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800addc:	e737      	b.n	800ac4e <f_write+0x46>
 800adde:	461e      	mov	r6, r3
 800ade0:	e74a      	b.n	800ac78 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ade2:	2607      	movs	r6, #7
 800ade4:	e748      	b.n	800ac78 <f_write+0x70>

0800ade6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ade6:	b570      	push	{r4, r5, r6, lr}
 800ade8:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800adea:	f7ff f813 	bl	8009e14 <validate>
	if (res == FR_OK) {
 800adee:	2800      	cmp	r0, #0
 800adf0:	d158      	bne.n	800aea4 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800adf2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800adf6:	069a      	lsls	r2, r3, #26
 800adf8:	d554      	bpl.n	800aea4 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800adfa:	065b      	lsls	r3, r3, #25
 800adfc:	d511      	bpl.n	800ae22 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800adfe:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ae02:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800ae06:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f7fe fe7f 	bl	8009b10 <disk_write>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d145      	bne.n	800aea2 <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 800ae16:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ae1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae1e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800ae22:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800ae26:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ae2a:	f7ff f8a5 	bl	8009f78 <move_window>
 800ae2e:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800ae30:	bbc0      	cbnz	r0, 800aea4 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800ae32:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800ae36:	7aeb      	ldrb	r3, [r5, #11]
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800ae3e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800ae42:	772b      	strb	r3, [r5, #28]
 800ae44:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800ae48:	0a1b      	lsrs	r3, r3, #8
 800ae4a:	776b      	strb	r3, [r5, #29]
 800ae4c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800ae50:	77ab      	strb	r3, [r5, #30]
 800ae52:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800ae56:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ae58:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ae5c:	76ab      	strb	r3, [r5, #26]
 800ae5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ae62:	0c1b      	lsrs	r3, r3, #16
 800ae64:	752b      	strb	r3, [r5, #20]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ae6a:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800ae6c:	f7f6 fb68 	bl	8001540 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800ae70:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ae74:	75a8      	strb	r0, [r5, #22]
 800ae76:	75eb      	strb	r3, [r5, #23]
 800ae78:	0c03      	lsrs	r3, r0, #16
 800ae7a:	0e00      	lsrs	r0, r0, #24
 800ae7c:	762b      	strb	r3, [r5, #24]
 800ae7e:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800ae80:	74ae      	strb	r6, [r5, #18]
 800ae82:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800ae84:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800ae88:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800ae8c:	f023 0320 	bic.w	r3, r3, #32
 800ae90:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800ae94:	2301      	movs	r3, #1
 800ae96:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800ae9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800ae9e:	f7ff b80e 	b.w	8009ebe <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800aea2:	2001      	movs	r0, #1
}
 800aea4:	bd70      	pop	{r4, r5, r6, pc}

0800aea6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800aea6:	b510      	push	{r4, lr}
 800aea8:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aeaa:	f7ff ff9c 	bl	800ade6 <f_sync>
	if (res == FR_OK)
 800aeae:	b950      	cbnz	r0, 800aec6 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7fe ffaf 	bl	8009e14 <validate>
		if (res == FR_OK) {
 800aeb6:	b930      	cbnz	r0, 800aec6 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800aeb8:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800aebc:	f7fe ff34 	bl	8009d28 <dec_lock>
			if (res == FR_OK)
 800aec0:	b908      	cbnz	r0, 800aec6 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800aec2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800aec6:	bd10      	pop	{r4, pc}

0800aec8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800aec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800aed0:	f7fe ffa0 	bl	8009e14 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800aed4:	4606      	mov	r6, r0
 800aed6:	bb10      	cbnz	r0, 800af1e <f_lseek+0x56>
	if (fp->err)						/* Check error */
 800aed8:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 813e 	bne.w	800b15e <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800aee2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 8087 	beq.w	800affa <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800aeec:	1c6a      	adds	r2, r5, #1
 800aeee:	d13d      	bne.n	800af6c <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800aef0:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aef4:	f8d3 b000 	ldr.w	fp, [r3]
 800aef8:	f103 0a04 	add.w	sl, r3, #4
 800aefc:	2502      	movs	r5, #2
			if (cl) {
 800aefe:	b35f      	cbz	r7, 800af58 <f_lseek+0x90>
 800af00:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800af02:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 800af06:	4641      	mov	r1, r8
 800af08:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800af0c:	f7ff f9cc 	bl	800a2a8 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800af10:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800af12:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800af16:	d807      	bhi.n	800af28 <f_lseek+0x60>
 800af18:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af1a:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800af1e:	4630      	mov	r0, r6
 800af20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af24:	4607      	mov	r7, r0
 800af26:	e7eb      	b.n	800af00 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d101      	bne.n	800af30 <f_lseek+0x68>
 800af2c:	2601      	movs	r6, #1
 800af2e:	e7f4      	b.n	800af1a <f_lseek+0x52>
					} while (cl == pcl + 1);
 800af30:	f108 0301 	add.w	r3, r8, #1
 800af34:	4298      	cmp	r0, r3
 800af36:	4680      	mov	r8, r0
 800af38:	d0e5      	beq.n	800af06 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800af3a:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800af3c:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800af3e:	bf21      	itttt	cs
 800af40:	4653      	movcs	r3, sl
 800af42:	f843 9b08 	strcs.w	r9, [r3], #8
 800af46:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800af4a:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800af4c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800af50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af54:	4298      	cmp	r0, r3
 800af56:	d3e5      	bcc.n	800af24 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800af58:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 800af5c:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800af5e:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 800af60:	f200 80ff 	bhi.w	800b162 <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 800af64:	2300      	movs	r3, #0
 800af66:	f8ca 3000 	str.w	r3, [sl]
 800af6a:	e7d8      	b.n	800af1e <f_lseek+0x56>
 800af6c:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 800af70:	4285      	cmp	r5, r0
 800af72:	bf28      	it	cs
 800af74:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800af76:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	d0cf      	beq.n	800af1e <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af7e:	f105 38ff 	add.w	r8, r5, #4294967295
 800af82:	4641      	mov	r1, r8
 800af84:	4620      	mov	r0, r4
 800af86:	f7fe feeb 	bl	8009d60 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 800af8a:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 800af8e:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 800af92:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 800af94:	4638      	mov	r0, r7
 800af96:	f7ff f979 	bl	800a28c <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d0bc      	beq.n	800af18 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800af9e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	d0bb      	beq.n	800af1e <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800afa6:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800afaa:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800afae:	3d01      	subs	r5, #1
 800afb0:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 800afb4:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800afb6:	4295      	cmp	r5, r2
 800afb8:	d0b1      	beq.n	800af1e <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800afba:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800afbe:	0659      	lsls	r1, r3, #25
 800afc0:	d50d      	bpl.n	800afde <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800afc2:	2301      	movs	r3, #1
 800afc4:	4621      	mov	r1, r4
 800afc6:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800afca:	f7fe fda1 	bl	8009b10 <disk_write>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1ac      	bne.n	800af2c <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800afd2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800afd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afda:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800afde:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800afe2:	2301      	movs	r3, #1
 800afe4:	462a      	mov	r2, r5
 800afe6:	4621      	mov	r1, r4
 800afe8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800afec:	f7fe fd82 	bl	8009af4 <disk_read>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d19b      	bne.n	800af2c <f_lseek+0x64>
					fp->dsect = dsc;
 800aff4:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800aff8:	e791      	b.n	800af1e <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800affa:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800affe:	429d      	cmp	r5, r3
 800b000:	d905      	bls.n	800b00e <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800b002:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800b006:	f012 0f02 	tst.w	r2, #2
 800b00a:	bf08      	it	eq
 800b00c:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800b00e:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800b010:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800b014:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800b018:	2d00      	cmp	r5, #0
 800b01a:	d13e      	bne.n	800b09a <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b01c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b020:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800b024:	4293      	cmp	r3, r2
 800b026:	f67f af7a 	bls.w	800af1e <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800b02a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800b02e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b032:	f043 0320 	orr.w	r3, r3, #32
 800b036:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800b03a:	e770      	b.n	800af1e <f_lseek+0x56>
		fp->fptr = nsect = 0;
 800b03c:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b03e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0e8      	beq.n	800b01c <f_lseek+0x154>
 800b04a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800b04e:	4295      	cmp	r5, r2
 800b050:	d0e4      	beq.n	800b01c <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b052:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b056:	065b      	lsls	r3, r3, #25
 800b058:	d510      	bpl.n	800b07c <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b05a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b05e:	2301      	movs	r3, #1
 800b060:	4621      	mov	r1, r4
 800b062:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b066:	f7fe fd53 	bl	8009b10 <disk_write>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	f47f af5e 	bne.w	800af2c <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 800b070:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b078:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b07c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b080:	2301      	movs	r3, #1
 800b082:	462a      	mov	r2, r5
 800b084:	4621      	mov	r1, r4
 800b086:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b08a:	f7fe fd33 	bl	8009af4 <disk_read>
 800b08e:	2800      	cmp	r0, #0
 800b090:	f47f af4c 	bne.w	800af2c <f_lseek+0x64>
			fp->dsect = nsect;
 800b094:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800b098:	e7c0      	b.n	800b01c <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b09a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b09e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800b0a2:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800b0a4:	b32b      	cbz	r3, 800b0f2 <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	1e6a      	subs	r2, r5, #1
 800b0aa:	fbb3 f1f7 	udiv	r1, r3, r7
 800b0ae:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800b0b2:	428a      	cmp	r2, r1
 800b0b4:	d31d      	bcc.n	800b0f2 <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b0b6:	427a      	negs	r2, r7
 800b0b8:	4013      	ands	r3, r2
				clst = fp->clust;
 800b0ba:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b0be:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800b0c2:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	d0b9      	beq.n	800b03c <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 800b0c8:	42bd      	cmp	r5, r7
 800b0ca:	d823      	bhi.n	800b114 <f_lseek+0x24c>
				fp->fptr += ofs;
 800b0cc:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b0d0:	442b      	add	r3, r5
 800b0d2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800b0d6:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0ae      	beq.n	800b03c <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b0de:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b0e2:	f7ff f8d3 	bl	800a28c <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f43f af16 	beq.w	800af18 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 800b0ec:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800b0f0:	e7a5      	b.n	800b03e <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800b0f2:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b0f6:	b951      	cbnz	r1, 800b10e <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 800b0f8:	f7ff fa21 	bl	800a53e <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b0fc:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800b0fe:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b100:	f43f af0a 	beq.w	800af18 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b104:	1c42      	adds	r2, r0, #1
 800b106:	f43f af11 	beq.w	800af2c <f_lseek+0x64>
					fp->sclust = clst;
 800b10a:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800b10e:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800b112:	e7d7      	b.n	800b0c4 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b114:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b118:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b11c:	079b      	lsls	r3, r3, #30
 800b11e:	d505      	bpl.n	800b12c <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b120:	f7ff fa0d 	bl	800a53e <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b124:	4601      	mov	r1, r0
 800b126:	b920      	cbnz	r0, 800b132 <f_lseek+0x26a>
 800b128:	463d      	mov	r5, r7
 800b12a:	e7cf      	b.n	800b0cc <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b12c:	f7ff f8bc 	bl	800a2a8 <get_fat>
 800b130:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b132:	1c4a      	adds	r2, r1, #1
 800b134:	f43f aefa 	beq.w	800af2c <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b138:	2901      	cmp	r1, #1
 800b13a:	f67f aeed 	bls.w	800af18 <f_lseek+0x50>
 800b13e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800b142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b146:	4299      	cmp	r1, r3
 800b148:	f4bf aee6 	bcs.w	800af18 <f_lseek+0x50>
					fp->fptr += bcs;
 800b14c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800b150:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 800b154:	443b      	add	r3, r7
 800b156:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800b15a:	1bed      	subs	r5, r5, r7
 800b15c:	e7b4      	b.n	800b0c8 <f_lseek+0x200>
 800b15e:	461e      	mov	r6, r3
 800b160:	e6dd      	b.n	800af1e <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b162:	2611      	movs	r6, #17
 800b164:	e6db      	b.n	800af1e <f_lseek+0x56>

0800b166 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b166:	b530      	push	{r4, r5, lr}
 800b168:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800b16a:	4605      	mov	r5, r0
{
 800b16c:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800b16e:	2800      	cmp	r0, #0
 800b170:	d045      	beq.n	800b1fe <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800b172:	2200      	movs	r2, #0
 800b174:	a901      	add	r1, sp, #4
 800b176:	a802      	add	r0, sp, #8
 800b178:	f7fe ff48 	bl	800a00c <find_volume>
	if (res == FR_OK) {
 800b17c:	4604      	mov	r4, r0
 800b17e:	bb30      	cbnz	r0, 800b1ce <f_opendir+0x68>
		dp->fs = fs;
 800b180:	9b02      	ldr	r3, [sp, #8]
 800b182:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 800b186:	ab03      	add	r3, sp, #12
 800b188:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b18c:	9901      	ldr	r1, [sp, #4]
 800b18e:	4628      	mov	r0, r5
 800b190:	f7ff fabe 	bl	800a710 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800b194:	4604      	mov	r4, r0
 800b196:	b9b8      	cbnz	r0, 800b1c8 <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 800b198:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 800b19c:	b149      	cbz	r1, 800b1b2 <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800b19e:	7acb      	ldrb	r3, [r1, #11]
 800b1a0:	06db      	lsls	r3, r3, #27
 800b1a2:	d528      	bpl.n	800b1f6 <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 800b1a4:	9b02      	ldr	r3, [sp, #8]
 800b1a6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800b1aa:	f7fe fe4a 	bl	8009e42 <ld_clust.isra.0>
 800b1ae:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 800b1b2:	9b02      	ldr	r3, [sp, #8]
 800b1b4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800b1b8:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f7ff f8d3 	bl	800a36a <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	b130      	cbz	r0, 800b1d6 <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b1c8:	2c04      	cmp	r4, #4
 800b1ca:	bf08      	it	eq
 800b1cc:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800b1d4:	e009      	b.n	800b1ea <f_opendir+0x84>
					if (dp->sclust) {
 800b1d6:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800b1da:	b14b      	cbz	r3, 800b1f0 <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b1dc:	4621      	mov	r1, r4
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7fe fd5e 	bl	8009ca0 <inc_lock>
 800b1e4:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 800b1e8:	b138      	cbz	r0, 800b1fa <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	b007      	add	sp, #28
 800b1ee:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 800b1f0:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800b1f4:	e7f9      	b.n	800b1ea <f_opendir+0x84>
					res = FR_NO_PATH;
 800b1f6:	2405      	movs	r4, #5
 800b1f8:	e7e9      	b.n	800b1ce <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 800b1fa:	2412      	movs	r4, #18
 800b1fc:	e7e7      	b.n	800b1ce <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800b1fe:	2409      	movs	r4, #9
 800b200:	e7f3      	b.n	800b1ea <f_opendir+0x84>

0800b202 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b202:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b204:	4605      	mov	r5, r0
 800b206:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800b208:	f7fe fe04 	bl	8009e14 <validate>
	if (res == FR_OK) {
 800b20c:	4604      	mov	r4, r0
 800b20e:	b9e8      	cbnz	r0, 800b24c <f_readdir+0x4a>
		if (!fno) {
 800b210:	b92e      	cbnz	r6, 800b21e <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b212:	4601      	mov	r1, r0
 800b214:	4628      	mov	r0, r5
 800b216:	f7ff f8a8 	bl	800a36a <dir_sdi>
 800b21a:	4604      	mov	r4, r0
 800b21c:	e016      	b.n	800b24c <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 800b21e:	ab01      	add	r3, sp, #4
 800b220:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800b224:	4628      	mov	r0, r5
 800b226:	f7ff fb47 	bl	800a8b8 <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800b22a:	2804      	cmp	r0, #4
 800b22c:	d111      	bne.n	800b252 <f_readdir+0x50>
				dp->sect = 0;
 800b22e:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	f7fe fda7 	bl	8009d88 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b23a:	2100      	movs	r1, #0
 800b23c:	4628      	mov	r0, r5
 800b23e:	f7ff f9d7 	bl	800a5f0 <dir_next>
				if (res == FR_NO_FILE) {
 800b242:	2804      	cmp	r0, #4
 800b244:	d1e9      	bne.n	800b21a <f_readdir+0x18>
					dp->sect = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800b24c:	4620      	mov	r0, r4
 800b24e:	b004      	add	sp, #16
 800b250:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 800b252:	2800      	cmp	r0, #0
 800b254:	d1e1      	bne.n	800b21a <f_readdir+0x18>
 800b256:	e7ec      	b.n	800b232 <f_readdir+0x30>

0800b258 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b258:	b530      	push	{r4, r5, lr}
 800b25a:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800b25e:	2201      	movs	r2, #1
{
 800b260:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800b262:	a901      	add	r1, sp, #4
 800b264:	a886      	add	r0, sp, #536	; 0x218
 800b266:	f7fe fed1 	bl	800a00c <find_volume>
	if (res == FR_OK) {
 800b26a:	b988      	cbnz	r0, 800b290 <f_unlink+0x38>
		INIT_BUF(dj);
 800b26c:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800b26e:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800b270:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800b272:	a806      	add	r0, sp, #24
 800b274:	f7ff fa4c 	bl	800a710 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800b278:	b950      	cbnz	r0, 800b290 <f_unlink+0x38>
 800b27a:	2102      	movs	r1, #2
 800b27c:	a806      	add	r0, sp, #24
 800b27e:	f7fe fcdd 	bl	8009c3c <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b282:	b928      	cbnz	r0, 800b290 <f_unlink+0x38>
			dir = dj.dir;
 800b284:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800b286:	b169      	cbz	r1, 800b2a4 <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800b288:	7acd      	ldrb	r5, [r1, #11]
 800b28a:	07ea      	lsls	r2, r5, #31
 800b28c:	d50c      	bpl.n	800b2a8 <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b28e:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800b290:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800b294:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800b296:	4621      	mov	r1, r4
 800b298:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b29a:	f7ff fb74 	bl	800a986 <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d1f6      	bne.n	800b290 <f_unlink+0x38>
 800b2a2:	e026      	b.n	800b2f2 <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b2a4:	2006      	movs	r0, #6
 800b2a6:	e7f3      	b.n	800b290 <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800b2a8:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800b2aa:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800b2ae:	f7fe fdc8 	bl	8009e42 <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	b1b0      	cbz	r0, 800b2e4 <f_unlink+0x8c>
 800b2b6:	06eb      	lsls	r3, r5, #27
 800b2b8:	d514      	bpl.n	800b2e4 <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800b2ba:	a906      	add	r1, sp, #24
 800b2bc:	a88e      	add	r0, sp, #568	; 0x238
 800b2be:	f44f 7208 	mov.w	r2, #544	; 0x220
 800b2c2:	f7fe fca9 	bl	8009c18 <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800b2ca:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800b2ce:	f7ff f84c 	bl	800a36a <dir_sdi>
						if (res == FR_OK) {
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d1dc      	bne.n	800b290 <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800b2d6:	a88e      	add	r0, sp, #568	; 0x238
 800b2d8:	f7ff faee 	bl	800a8b8 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d0d6      	beq.n	800b28e <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800b2e0:	2804      	cmp	r0, #4
 800b2e2:	d1d5      	bne.n	800b290 <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800b2e4:	a806      	add	r0, sp, #24
 800b2e6:	f7ff f88f 	bl	800a408 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d1d0      	bne.n	800b290 <f_unlink+0x38>
 800b2ee:	2c00      	cmp	r4, #0
 800b2f0:	d1d1      	bne.n	800b296 <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800b2f2:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b2f4:	f7fe fde3 	bl	8009ebe <sync_fs>
 800b2f8:	e7ca      	b.n	800b290 <f_unlink+0x38>

0800b2fa <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800b2fa:	b510      	push	{r4, lr}
 800b2fc:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800b300:	460c      	mov	r4, r1
 800b302:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800b304:	2201      	movs	r2, #1
 800b306:	a901      	add	r1, sp, #4
 800b308:	a886      	add	r0, sp, #536	; 0x218
 800b30a:	f7fe fe7f 	bl	800a00c <find_volume>
	if (res == FR_OK) {
 800b30e:	b9c0      	cbnz	r0, 800b342 <f_utime+0x48>
		INIT_BUF(dj);
 800b310:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800b312:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800b314:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800b316:	a806      	add	r0, sp, #24
 800b318:	f7ff f9fa 	bl	800a710 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800b31c:	b988      	cbnz	r0, 800b342 <f_utime+0x48>
			dir = dj.dir;
 800b31e:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800b320:	b193      	cbz	r3, 800b348 <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800b322:	88e2      	ldrh	r2, [r4, #6]
 800b324:	759a      	strb	r2, [r3, #22]
 800b326:	88e2      	ldrh	r2, [r4, #6]
 800b328:	0a12      	lsrs	r2, r2, #8
 800b32a:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800b32c:	88a2      	ldrh	r2, [r4, #4]
 800b32e:	761a      	strb	r2, [r3, #24]
 800b330:	88a2      	ldrh	r2, [r4, #4]
 800b332:	0a12      	lsrs	r2, r2, #8
 800b334:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800b336:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b338:	2301      	movs	r3, #1
 800b33a:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800b33e:	f7fe fdbe 	bl	8009ebe <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800b342:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800b346:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800b348:	2006      	movs	r0, #6
 800b34a:	e7fa      	b.n	800b342 <f_utime+0x48>

0800b34c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b34c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <FATFS_LinkDriverEx+0x40>)
 800b350:	7a5c      	ldrb	r4, [r3, #9]
 800b352:	2c01      	cmp	r4, #1
 800b354:	d818      	bhi.n	800b388 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b356:	7a5d      	ldrb	r5, [r3, #9]
 800b358:	b2ed      	uxtb	r5, r5
 800b35a:	2400      	movs	r4, #0
 800b35c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800b35e:	7a5d      	ldrb	r5, [r3, #9]
 800b360:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b364:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800b366:	7a58      	ldrb	r0, [r3, #9]
 800b368:	4418      	add	r0, r3
 800b36a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800b36c:	7a5a      	ldrb	r2, [r3, #9]
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	1c50      	adds	r0, r2, #1
 800b372:	b2c0      	uxtb	r0, r0
 800b374:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800b376:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800b378:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800b37a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800b37c:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800b37e:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800b380:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800b382:	70cc      	strb	r4, [r1, #3]
 800b384:	4620      	mov	r0, r4
 800b386:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800b388:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800b38a:	bd30      	pop	{r4, r5, pc}
 800b38c:	200005fc 	.word	0x200005fc

0800b390 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800b390:	2200      	movs	r2, #0
 800b392:	f7ff bfdb 	b.w	800b34c <FATFS_LinkDriverEx>
	...

0800b398 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800b398:	4a0a      	ldr	r2, [pc, #40]	; (800b3c4 <FATFS_UnLinkDriverEx+0x2c>)
 800b39a:	7a53      	ldrb	r3, [r2, #9]
 800b39c:	b17b      	cbz	r3, 800b3be <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800b39e:	7803      	ldrb	r3, [r0, #0]
 800b3a0:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b3a8:	6848      	ldr	r0, [r1, #4]
 800b3aa:	b140      	cbz	r0, 800b3be <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800b3ac:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800b3ae:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800b3b0:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800b3b2:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800b3b4:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	7253      	strb	r3, [r2, #9]
 800b3bc:	4770      	bx	lr
  uint8_t ret = 1;
 800b3be:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	200005fc 	.word	0x200005fc

0800b3c8 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	f7ff bfe5 	b.w	800b398 <FATFS_UnLinkDriverEx>
	...

0800b3d0 <__libc_init_array>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	4e0d      	ldr	r6, [pc, #52]	; (800b408 <__libc_init_array+0x38>)
 800b3d4:	4c0d      	ldr	r4, [pc, #52]	; (800b40c <__libc_init_array+0x3c>)
 800b3d6:	1ba4      	subs	r4, r4, r6
 800b3d8:	10a4      	asrs	r4, r4, #2
 800b3da:	2500      	movs	r5, #0
 800b3dc:	42a5      	cmp	r5, r4
 800b3de:	d109      	bne.n	800b3f4 <__libc_init_array+0x24>
 800b3e0:	4e0b      	ldr	r6, [pc, #44]	; (800b410 <__libc_init_array+0x40>)
 800b3e2:	4c0c      	ldr	r4, [pc, #48]	; (800b414 <__libc_init_array+0x44>)
 800b3e4:	f002 feb4 	bl	800e150 <_init>
 800b3e8:	1ba4      	subs	r4, r4, r6
 800b3ea:	10a4      	asrs	r4, r4, #2
 800b3ec:	2500      	movs	r5, #0
 800b3ee:	42a5      	cmp	r5, r4
 800b3f0:	d105      	bne.n	800b3fe <__libc_init_array+0x2e>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3f8:	4798      	blx	r3
 800b3fa:	3501      	adds	r5, #1
 800b3fc:	e7ee      	b.n	800b3dc <__libc_init_array+0xc>
 800b3fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b402:	4798      	blx	r3
 800b404:	3501      	adds	r5, #1
 800b406:	e7f2      	b.n	800b3ee <__libc_init_array+0x1e>
 800b408:	0800e898 	.word	0x0800e898
 800b40c:	0800e898 	.word	0x0800e898
 800b410:	0800e898 	.word	0x0800e898
 800b414:	0800e89c 	.word	0x0800e89c

0800b418 <malloc>:
 800b418:	4b02      	ldr	r3, [pc, #8]	; (800b424 <malloc+0xc>)
 800b41a:	4601      	mov	r1, r0
 800b41c:	6818      	ldr	r0, [r3, #0]
 800b41e:	f000 b86d 	b.w	800b4fc <_malloc_r>
 800b422:	bf00      	nop
 800b424:	200002a8 	.word	0x200002a8

0800b428 <free>:
 800b428:	4b02      	ldr	r3, [pc, #8]	; (800b434 <free+0xc>)
 800b42a:	4601      	mov	r1, r0
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	f000 b817 	b.w	800b460 <_free_r>
 800b432:	bf00      	nop
 800b434:	200002a8 	.word	0x200002a8

0800b438 <memcpy>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	1e43      	subs	r3, r0, #1
 800b43c:	440a      	add	r2, r1
 800b43e:	4291      	cmp	r1, r2
 800b440:	d100      	bne.n	800b444 <memcpy+0xc>
 800b442:	bd10      	pop	{r4, pc}
 800b444:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44c:	e7f7      	b.n	800b43e <memcpy+0x6>

0800b44e <memset>:
 800b44e:	4402      	add	r2, r0
 800b450:	4603      	mov	r3, r0
 800b452:	4293      	cmp	r3, r2
 800b454:	d100      	bne.n	800b458 <memset+0xa>
 800b456:	4770      	bx	lr
 800b458:	f803 1b01 	strb.w	r1, [r3], #1
 800b45c:	e7f9      	b.n	800b452 <memset+0x4>
	...

0800b460 <_free_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4605      	mov	r5, r0
 800b464:	2900      	cmp	r1, #0
 800b466:	d045      	beq.n	800b4f4 <_free_r+0x94>
 800b468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b46c:	1f0c      	subs	r4, r1, #4
 800b46e:	2b00      	cmp	r3, #0
 800b470:	bfb8      	it	lt
 800b472:	18e4      	addlt	r4, r4, r3
 800b474:	f000 f923 	bl	800b6be <__malloc_lock>
 800b478:	4a1f      	ldr	r2, [pc, #124]	; (800b4f8 <_free_r+0x98>)
 800b47a:	6813      	ldr	r3, [r2, #0]
 800b47c:	4610      	mov	r0, r2
 800b47e:	b933      	cbnz	r3, 800b48e <_free_r+0x2e>
 800b480:	6063      	str	r3, [r4, #4]
 800b482:	6014      	str	r4, [r2, #0]
 800b484:	4628      	mov	r0, r5
 800b486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b48a:	f000 b919 	b.w	800b6c0 <__malloc_unlock>
 800b48e:	42a3      	cmp	r3, r4
 800b490:	d90c      	bls.n	800b4ac <_free_r+0x4c>
 800b492:	6821      	ldr	r1, [r4, #0]
 800b494:	1862      	adds	r2, r4, r1
 800b496:	4293      	cmp	r3, r2
 800b498:	bf04      	itt	eq
 800b49a:	681a      	ldreq	r2, [r3, #0]
 800b49c:	685b      	ldreq	r3, [r3, #4]
 800b49e:	6063      	str	r3, [r4, #4]
 800b4a0:	bf04      	itt	eq
 800b4a2:	1852      	addeq	r2, r2, r1
 800b4a4:	6022      	streq	r2, [r4, #0]
 800b4a6:	6004      	str	r4, [r0, #0]
 800b4a8:	e7ec      	b.n	800b484 <_free_r+0x24>
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	b10a      	cbz	r2, 800b4b4 <_free_r+0x54>
 800b4b0:	42a2      	cmp	r2, r4
 800b4b2:	d9fa      	bls.n	800b4aa <_free_r+0x4a>
 800b4b4:	6819      	ldr	r1, [r3, #0]
 800b4b6:	1858      	adds	r0, r3, r1
 800b4b8:	42a0      	cmp	r0, r4
 800b4ba:	d10b      	bne.n	800b4d4 <_free_r+0x74>
 800b4bc:	6820      	ldr	r0, [r4, #0]
 800b4be:	4401      	add	r1, r0
 800b4c0:	1858      	adds	r0, r3, r1
 800b4c2:	4282      	cmp	r2, r0
 800b4c4:	6019      	str	r1, [r3, #0]
 800b4c6:	d1dd      	bne.n	800b484 <_free_r+0x24>
 800b4c8:	6810      	ldr	r0, [r2, #0]
 800b4ca:	6852      	ldr	r2, [r2, #4]
 800b4cc:	605a      	str	r2, [r3, #4]
 800b4ce:	4401      	add	r1, r0
 800b4d0:	6019      	str	r1, [r3, #0]
 800b4d2:	e7d7      	b.n	800b484 <_free_r+0x24>
 800b4d4:	d902      	bls.n	800b4dc <_free_r+0x7c>
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	e7d3      	b.n	800b484 <_free_r+0x24>
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	1821      	adds	r1, r4, r0
 800b4e0:	428a      	cmp	r2, r1
 800b4e2:	bf04      	itt	eq
 800b4e4:	6811      	ldreq	r1, [r2, #0]
 800b4e6:	6852      	ldreq	r2, [r2, #4]
 800b4e8:	6062      	str	r2, [r4, #4]
 800b4ea:	bf04      	itt	eq
 800b4ec:	1809      	addeq	r1, r1, r0
 800b4ee:	6021      	streq	r1, [r4, #0]
 800b4f0:	605c      	str	r4, [r3, #4]
 800b4f2:	e7c7      	b.n	800b484 <_free_r+0x24>
 800b4f4:	bd38      	pop	{r3, r4, r5, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000608 	.word	0x20000608

0800b4fc <_malloc_r>:
 800b4fc:	b570      	push	{r4, r5, r6, lr}
 800b4fe:	1ccd      	adds	r5, r1, #3
 800b500:	f025 0503 	bic.w	r5, r5, #3
 800b504:	3508      	adds	r5, #8
 800b506:	2d0c      	cmp	r5, #12
 800b508:	bf38      	it	cc
 800b50a:	250c      	movcc	r5, #12
 800b50c:	2d00      	cmp	r5, #0
 800b50e:	4606      	mov	r6, r0
 800b510:	db01      	blt.n	800b516 <_malloc_r+0x1a>
 800b512:	42a9      	cmp	r1, r5
 800b514:	d903      	bls.n	800b51e <_malloc_r+0x22>
 800b516:	230c      	movs	r3, #12
 800b518:	6033      	str	r3, [r6, #0]
 800b51a:	2000      	movs	r0, #0
 800b51c:	bd70      	pop	{r4, r5, r6, pc}
 800b51e:	f000 f8ce 	bl	800b6be <__malloc_lock>
 800b522:	4a23      	ldr	r2, [pc, #140]	; (800b5b0 <_malloc_r+0xb4>)
 800b524:	6814      	ldr	r4, [r2, #0]
 800b526:	4621      	mov	r1, r4
 800b528:	b991      	cbnz	r1, 800b550 <_malloc_r+0x54>
 800b52a:	4c22      	ldr	r4, [pc, #136]	; (800b5b4 <_malloc_r+0xb8>)
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	b91b      	cbnz	r3, 800b538 <_malloc_r+0x3c>
 800b530:	4630      	mov	r0, r6
 800b532:	f000 f841 	bl	800b5b8 <_sbrk_r>
 800b536:	6020      	str	r0, [r4, #0]
 800b538:	4629      	mov	r1, r5
 800b53a:	4630      	mov	r0, r6
 800b53c:	f000 f83c 	bl	800b5b8 <_sbrk_r>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d126      	bne.n	800b592 <_malloc_r+0x96>
 800b544:	230c      	movs	r3, #12
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	4630      	mov	r0, r6
 800b54a:	f000 f8b9 	bl	800b6c0 <__malloc_unlock>
 800b54e:	e7e4      	b.n	800b51a <_malloc_r+0x1e>
 800b550:	680b      	ldr	r3, [r1, #0]
 800b552:	1b5b      	subs	r3, r3, r5
 800b554:	d41a      	bmi.n	800b58c <_malloc_r+0x90>
 800b556:	2b0b      	cmp	r3, #11
 800b558:	d90f      	bls.n	800b57a <_malloc_r+0x7e>
 800b55a:	600b      	str	r3, [r1, #0]
 800b55c:	50cd      	str	r5, [r1, r3]
 800b55e:	18cc      	adds	r4, r1, r3
 800b560:	4630      	mov	r0, r6
 800b562:	f000 f8ad 	bl	800b6c0 <__malloc_unlock>
 800b566:	f104 000b 	add.w	r0, r4, #11
 800b56a:	1d23      	adds	r3, r4, #4
 800b56c:	f020 0007 	bic.w	r0, r0, #7
 800b570:	1ac3      	subs	r3, r0, r3
 800b572:	d01b      	beq.n	800b5ac <_malloc_r+0xb0>
 800b574:	425a      	negs	r2, r3
 800b576:	50e2      	str	r2, [r4, r3]
 800b578:	bd70      	pop	{r4, r5, r6, pc}
 800b57a:	428c      	cmp	r4, r1
 800b57c:	bf0d      	iteet	eq
 800b57e:	6863      	ldreq	r3, [r4, #4]
 800b580:	684b      	ldrne	r3, [r1, #4]
 800b582:	6063      	strne	r3, [r4, #4]
 800b584:	6013      	streq	r3, [r2, #0]
 800b586:	bf18      	it	ne
 800b588:	460c      	movne	r4, r1
 800b58a:	e7e9      	b.n	800b560 <_malloc_r+0x64>
 800b58c:	460c      	mov	r4, r1
 800b58e:	6849      	ldr	r1, [r1, #4]
 800b590:	e7ca      	b.n	800b528 <_malloc_r+0x2c>
 800b592:	1cc4      	adds	r4, r0, #3
 800b594:	f024 0403 	bic.w	r4, r4, #3
 800b598:	42a0      	cmp	r0, r4
 800b59a:	d005      	beq.n	800b5a8 <_malloc_r+0xac>
 800b59c:	1a21      	subs	r1, r4, r0
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f000 f80a 	bl	800b5b8 <_sbrk_r>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d0cd      	beq.n	800b544 <_malloc_r+0x48>
 800b5a8:	6025      	str	r5, [r4, #0]
 800b5aa:	e7d9      	b.n	800b560 <_malloc_r+0x64>
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000608 	.word	0x20000608
 800b5b4:	2000060c 	.word	0x2000060c

0800b5b8 <_sbrk_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4c06      	ldr	r4, [pc, #24]	; (800b5d4 <_sbrk_r+0x1c>)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4605      	mov	r5, r0
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	f002 fdb6 	bl	800e134 <_sbrk>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_sbrk_r+0x1a>
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_sbrk_r+0x1a>
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	2000ade8 	.word	0x2000ade8

0800b5d8 <siprintf>:
 800b5d8:	b40e      	push	{r1, r2, r3}
 800b5da:	b500      	push	{lr}
 800b5dc:	b09c      	sub	sp, #112	; 0x70
 800b5de:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b5e2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5e4:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b5e8:	9002      	str	r0, [sp, #8]
 800b5ea:	9006      	str	r0, [sp, #24]
 800b5ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5f0:	480a      	ldr	r0, [pc, #40]	; (800b61c <siprintf+0x44>)
 800b5f2:	9104      	str	r1, [sp, #16]
 800b5f4:	9107      	str	r1, [sp, #28]
 800b5f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fe:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b602:	6800      	ldr	r0, [r0, #0]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	a902      	add	r1, sp, #8
 800b608:	f000 f8b6 	bl	800b778 <_svfiprintf_r>
 800b60c:	9b02      	ldr	r3, [sp, #8]
 800b60e:	2200      	movs	r2, #0
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	b01c      	add	sp, #112	; 0x70
 800b614:	f85d eb04 	ldr.w	lr, [sp], #4
 800b618:	b003      	add	sp, #12
 800b61a:	4770      	bx	lr
 800b61c:	200002a8 	.word	0x200002a8

0800b620 <siscanf>:
 800b620:	b40e      	push	{r1, r2, r3}
 800b622:	b530      	push	{r4, r5, lr}
 800b624:	b09c      	sub	sp, #112	; 0x70
 800b626:	ac1f      	add	r4, sp, #124	; 0x7c
 800b628:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b62c:	f854 5b04 	ldr.w	r5, [r4], #4
 800b630:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b634:	9002      	str	r0, [sp, #8]
 800b636:	9006      	str	r0, [sp, #24]
 800b638:	f7f4 fdca 	bl	80001d0 <strlen>
 800b63c:	4b0b      	ldr	r3, [pc, #44]	; (800b66c <siscanf+0x4c>)
 800b63e:	9003      	str	r0, [sp, #12]
 800b640:	9007      	str	r0, [sp, #28]
 800b642:	930b      	str	r3, [sp, #44]	; 0x2c
 800b644:	480a      	ldr	r0, [pc, #40]	; (800b670 <siscanf+0x50>)
 800b646:	9401      	str	r4, [sp, #4]
 800b648:	2300      	movs	r3, #0
 800b64a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b64c:	9314      	str	r3, [sp, #80]	; 0x50
 800b64e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b652:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b656:	462a      	mov	r2, r5
 800b658:	4623      	mov	r3, r4
 800b65a:	a902      	add	r1, sp, #8
 800b65c:	6800      	ldr	r0, [r0, #0]
 800b65e:	f000 f9d9 	bl	800ba14 <__ssvfiscanf_r>
 800b662:	b01c      	add	sp, #112	; 0x70
 800b664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b668:	b003      	add	sp, #12
 800b66a:	4770      	bx	lr
 800b66c:	0800b675 	.word	0x0800b675
 800b670:	200002a8 	.word	0x200002a8

0800b674 <__seofread>:
 800b674:	2000      	movs	r0, #0
 800b676:	4770      	bx	lr

0800b678 <strcpy>:
 800b678:	4603      	mov	r3, r0
 800b67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b67e:	f803 2b01 	strb.w	r2, [r3], #1
 800b682:	2a00      	cmp	r2, #0
 800b684:	d1f9      	bne.n	800b67a <strcpy+0x2>
 800b686:	4770      	bx	lr

0800b688 <strstr>:
 800b688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b68a:	7803      	ldrb	r3, [r0, #0]
 800b68c:	b133      	cbz	r3, 800b69c <strstr+0x14>
 800b68e:	4603      	mov	r3, r0
 800b690:	4618      	mov	r0, r3
 800b692:	1c5e      	adds	r6, r3, #1
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	b933      	cbnz	r3, 800b6a6 <strstr+0x1e>
 800b698:	4618      	mov	r0, r3
 800b69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b69c:	780b      	ldrb	r3, [r1, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bf18      	it	ne
 800b6a2:	2000      	movne	r0, #0
 800b6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a6:	1e4d      	subs	r5, r1, #1
 800b6a8:	1e44      	subs	r4, r0, #1
 800b6aa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b6ae:	2a00      	cmp	r2, #0
 800b6b0:	d0f3      	beq.n	800b69a <strstr+0x12>
 800b6b2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800b6b6:	4297      	cmp	r7, r2
 800b6b8:	4633      	mov	r3, r6
 800b6ba:	d0f6      	beq.n	800b6aa <strstr+0x22>
 800b6bc:	e7e8      	b.n	800b690 <strstr+0x8>

0800b6be <__malloc_lock>:
 800b6be:	4770      	bx	lr

0800b6c0 <__malloc_unlock>:
 800b6c0:	4770      	bx	lr

0800b6c2 <__ssputs_r>:
 800b6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c6:	688e      	ldr	r6, [r1, #8]
 800b6c8:	429e      	cmp	r6, r3
 800b6ca:	4682      	mov	sl, r0
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	4691      	mov	r9, r2
 800b6d0:	4698      	mov	r8, r3
 800b6d2:	d835      	bhi.n	800b740 <__ssputs_r+0x7e>
 800b6d4:	898a      	ldrh	r2, [r1, #12]
 800b6d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6da:	d031      	beq.n	800b740 <__ssputs_r+0x7e>
 800b6dc:	6825      	ldr	r5, [r4, #0]
 800b6de:	6909      	ldr	r1, [r1, #16]
 800b6e0:	1a6f      	subs	r7, r5, r1
 800b6e2:	6965      	ldr	r5, [r4, #20]
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6ea:	fb95 f5f3 	sdiv	r5, r5, r3
 800b6ee:	f108 0301 	add.w	r3, r8, #1
 800b6f2:	443b      	add	r3, r7
 800b6f4:	429d      	cmp	r5, r3
 800b6f6:	bf38      	it	cc
 800b6f8:	461d      	movcc	r5, r3
 800b6fa:	0553      	lsls	r3, r2, #21
 800b6fc:	d531      	bpl.n	800b762 <__ssputs_r+0xa0>
 800b6fe:	4629      	mov	r1, r5
 800b700:	f7ff fefc 	bl	800b4fc <_malloc_r>
 800b704:	4606      	mov	r6, r0
 800b706:	b950      	cbnz	r0, 800b71e <__ssputs_r+0x5c>
 800b708:	230c      	movs	r3, #12
 800b70a:	f8ca 3000 	str.w	r3, [sl]
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b714:	81a3      	strh	r3, [r4, #12]
 800b716:	f04f 30ff 	mov.w	r0, #4294967295
 800b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71e:	463a      	mov	r2, r7
 800b720:	6921      	ldr	r1, [r4, #16]
 800b722:	f7ff fe89 	bl	800b438 <memcpy>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	6126      	str	r6, [r4, #16]
 800b734:	6165      	str	r5, [r4, #20]
 800b736:	443e      	add	r6, r7
 800b738:	1bed      	subs	r5, r5, r7
 800b73a:	6026      	str	r6, [r4, #0]
 800b73c:	60a5      	str	r5, [r4, #8]
 800b73e:	4646      	mov	r6, r8
 800b740:	4546      	cmp	r6, r8
 800b742:	bf28      	it	cs
 800b744:	4646      	movcs	r6, r8
 800b746:	4632      	mov	r2, r6
 800b748:	4649      	mov	r1, r9
 800b74a:	6820      	ldr	r0, [r4, #0]
 800b74c:	f000 ff54 	bl	800c5f8 <memmove>
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	1b9b      	subs	r3, r3, r6
 800b754:	60a3      	str	r3, [r4, #8]
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	441e      	add	r6, r3
 800b75a:	6026      	str	r6, [r4, #0]
 800b75c:	2000      	movs	r0, #0
 800b75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b762:	462a      	mov	r2, r5
 800b764:	f000 ff62 	bl	800c62c <_realloc_r>
 800b768:	4606      	mov	r6, r0
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d1e1      	bne.n	800b732 <__ssputs_r+0x70>
 800b76e:	6921      	ldr	r1, [r4, #16]
 800b770:	4650      	mov	r0, sl
 800b772:	f7ff fe75 	bl	800b460 <_free_r>
 800b776:	e7c7      	b.n	800b708 <__ssputs_r+0x46>

0800b778 <_svfiprintf_r>:
 800b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	b09d      	sub	sp, #116	; 0x74
 800b77e:	4680      	mov	r8, r0
 800b780:	9303      	str	r3, [sp, #12]
 800b782:	898b      	ldrh	r3, [r1, #12]
 800b784:	061c      	lsls	r4, r3, #24
 800b786:	460d      	mov	r5, r1
 800b788:	4616      	mov	r6, r2
 800b78a:	d50f      	bpl.n	800b7ac <_svfiprintf_r+0x34>
 800b78c:	690b      	ldr	r3, [r1, #16]
 800b78e:	b96b      	cbnz	r3, 800b7ac <_svfiprintf_r+0x34>
 800b790:	2140      	movs	r1, #64	; 0x40
 800b792:	f7ff feb3 	bl	800b4fc <_malloc_r>
 800b796:	6028      	str	r0, [r5, #0]
 800b798:	6128      	str	r0, [r5, #16]
 800b79a:	b928      	cbnz	r0, 800b7a8 <_svfiprintf_r+0x30>
 800b79c:	230c      	movs	r3, #12
 800b79e:	f8c8 3000 	str.w	r3, [r8]
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	e0c5      	b.n	800b934 <_svfiprintf_r+0x1bc>
 800b7a8:	2340      	movs	r3, #64	; 0x40
 800b7aa:	616b      	str	r3, [r5, #20]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b0:	2320      	movs	r3, #32
 800b7b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7b6:	2330      	movs	r3, #48	; 0x30
 800b7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7bc:	f04f 0b01 	mov.w	fp, #1
 800b7c0:	4637      	mov	r7, r6
 800b7c2:	463c      	mov	r4, r7
 800b7c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d13c      	bne.n	800b846 <_svfiprintf_r+0xce>
 800b7cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b7d0:	d00b      	beq.n	800b7ea <_svfiprintf_r+0x72>
 800b7d2:	4653      	mov	r3, sl
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4640      	mov	r0, r8
 800b7da:	f7ff ff72 	bl	800b6c2 <__ssputs_r>
 800b7de:	3001      	adds	r0, #1
 800b7e0:	f000 80a3 	beq.w	800b92a <_svfiprintf_r+0x1b2>
 800b7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e6:	4453      	add	r3, sl
 800b7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ea:	783b      	ldrb	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 809c 	beq.w	800b92a <_svfiprintf_r+0x1b2>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	9307      	str	r3, [sp, #28]
 800b7fc:	9205      	str	r2, [sp, #20]
 800b7fe:	9306      	str	r3, [sp, #24]
 800b800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b804:	931a      	str	r3, [sp, #104]	; 0x68
 800b806:	2205      	movs	r2, #5
 800b808:	7821      	ldrb	r1, [r4, #0]
 800b80a:	4850      	ldr	r0, [pc, #320]	; (800b94c <_svfiprintf_r+0x1d4>)
 800b80c:	f7f4 fce8 	bl	80001e0 <memchr>
 800b810:	1c67      	adds	r7, r4, #1
 800b812:	9b04      	ldr	r3, [sp, #16]
 800b814:	b9d8      	cbnz	r0, 800b84e <_svfiprintf_r+0xd6>
 800b816:	06d9      	lsls	r1, r3, #27
 800b818:	bf44      	itt	mi
 800b81a:	2220      	movmi	r2, #32
 800b81c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b820:	071a      	lsls	r2, r3, #28
 800b822:	bf44      	itt	mi
 800b824:	222b      	movmi	r2, #43	; 0x2b
 800b826:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b82a:	7822      	ldrb	r2, [r4, #0]
 800b82c:	2a2a      	cmp	r2, #42	; 0x2a
 800b82e:	d016      	beq.n	800b85e <_svfiprintf_r+0xe6>
 800b830:	9a07      	ldr	r2, [sp, #28]
 800b832:	2100      	movs	r1, #0
 800b834:	200a      	movs	r0, #10
 800b836:	4627      	mov	r7, r4
 800b838:	3401      	adds	r4, #1
 800b83a:	783b      	ldrb	r3, [r7, #0]
 800b83c:	3b30      	subs	r3, #48	; 0x30
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d951      	bls.n	800b8e6 <_svfiprintf_r+0x16e>
 800b842:	b1c9      	cbz	r1, 800b878 <_svfiprintf_r+0x100>
 800b844:	e011      	b.n	800b86a <_svfiprintf_r+0xf2>
 800b846:	2b25      	cmp	r3, #37	; 0x25
 800b848:	d0c0      	beq.n	800b7cc <_svfiprintf_r+0x54>
 800b84a:	4627      	mov	r7, r4
 800b84c:	e7b9      	b.n	800b7c2 <_svfiprintf_r+0x4a>
 800b84e:	4a3f      	ldr	r2, [pc, #252]	; (800b94c <_svfiprintf_r+0x1d4>)
 800b850:	1a80      	subs	r0, r0, r2
 800b852:	fa0b f000 	lsl.w	r0, fp, r0
 800b856:	4318      	orrs	r0, r3
 800b858:	9004      	str	r0, [sp, #16]
 800b85a:	463c      	mov	r4, r7
 800b85c:	e7d3      	b.n	800b806 <_svfiprintf_r+0x8e>
 800b85e:	9a03      	ldr	r2, [sp, #12]
 800b860:	1d11      	adds	r1, r2, #4
 800b862:	6812      	ldr	r2, [r2, #0]
 800b864:	9103      	str	r1, [sp, #12]
 800b866:	2a00      	cmp	r2, #0
 800b868:	db01      	blt.n	800b86e <_svfiprintf_r+0xf6>
 800b86a:	9207      	str	r2, [sp, #28]
 800b86c:	e004      	b.n	800b878 <_svfiprintf_r+0x100>
 800b86e:	4252      	negs	r2, r2
 800b870:	f043 0302 	orr.w	r3, r3, #2
 800b874:	9207      	str	r2, [sp, #28]
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	783b      	ldrb	r3, [r7, #0]
 800b87a:	2b2e      	cmp	r3, #46	; 0x2e
 800b87c:	d10e      	bne.n	800b89c <_svfiprintf_r+0x124>
 800b87e:	787b      	ldrb	r3, [r7, #1]
 800b880:	2b2a      	cmp	r3, #42	; 0x2a
 800b882:	f107 0101 	add.w	r1, r7, #1
 800b886:	d132      	bne.n	800b8ee <_svfiprintf_r+0x176>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	9203      	str	r2, [sp, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfb8      	it	lt
 800b894:	f04f 33ff 	movlt.w	r3, #4294967295
 800b898:	3702      	adds	r7, #2
 800b89a:	9305      	str	r3, [sp, #20]
 800b89c:	4c2c      	ldr	r4, [pc, #176]	; (800b950 <_svfiprintf_r+0x1d8>)
 800b89e:	7839      	ldrb	r1, [r7, #0]
 800b8a0:	2203      	movs	r2, #3
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7f4 fc9c 	bl	80001e0 <memchr>
 800b8a8:	b138      	cbz	r0, 800b8ba <_svfiprintf_r+0x142>
 800b8aa:	2340      	movs	r3, #64	; 0x40
 800b8ac:	1b00      	subs	r0, r0, r4
 800b8ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b8b2:	9b04      	ldr	r3, [sp, #16]
 800b8b4:	4303      	orrs	r3, r0
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	3701      	adds	r7, #1
 800b8ba:	7839      	ldrb	r1, [r7, #0]
 800b8bc:	4825      	ldr	r0, [pc, #148]	; (800b954 <_svfiprintf_r+0x1dc>)
 800b8be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8c2:	2206      	movs	r2, #6
 800b8c4:	1c7e      	adds	r6, r7, #1
 800b8c6:	f7f4 fc8b 	bl	80001e0 <memchr>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d035      	beq.n	800b93a <_svfiprintf_r+0x1c2>
 800b8ce:	4b22      	ldr	r3, [pc, #136]	; (800b958 <_svfiprintf_r+0x1e0>)
 800b8d0:	b9fb      	cbnz	r3, 800b912 <_svfiprintf_r+0x19a>
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	3307      	adds	r3, #7
 800b8d6:	f023 0307 	bic.w	r3, r3, #7
 800b8da:	3308      	adds	r3, #8
 800b8dc:	9303      	str	r3, [sp, #12]
 800b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e0:	444b      	add	r3, r9
 800b8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e4:	e76c      	b.n	800b7c0 <_svfiprintf_r+0x48>
 800b8e6:	fb00 3202 	mla	r2, r0, r2, r3
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	e7a3      	b.n	800b836 <_svfiprintf_r+0xbe>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9305      	str	r3, [sp, #20]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	240a      	movs	r4, #10
 800b8f6:	460f      	mov	r7, r1
 800b8f8:	3101      	adds	r1, #1
 800b8fa:	783a      	ldrb	r2, [r7, #0]
 800b8fc:	3a30      	subs	r2, #48	; 0x30
 800b8fe:	2a09      	cmp	r2, #9
 800b900:	d903      	bls.n	800b90a <_svfiprintf_r+0x192>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0ca      	beq.n	800b89c <_svfiprintf_r+0x124>
 800b906:	9005      	str	r0, [sp, #20]
 800b908:	e7c8      	b.n	800b89c <_svfiprintf_r+0x124>
 800b90a:	fb04 2000 	mla	r0, r4, r0, r2
 800b90e:	2301      	movs	r3, #1
 800b910:	e7f1      	b.n	800b8f6 <_svfiprintf_r+0x17e>
 800b912:	ab03      	add	r3, sp, #12
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	462a      	mov	r2, r5
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <_svfiprintf_r+0x1e4>)
 800b91a:	a904      	add	r1, sp, #16
 800b91c:	4640      	mov	r0, r8
 800b91e:	f3af 8000 	nop.w
 800b922:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b926:	4681      	mov	r9, r0
 800b928:	d1d9      	bne.n	800b8de <_svfiprintf_r+0x166>
 800b92a:	89ab      	ldrh	r3, [r5, #12]
 800b92c:	065b      	lsls	r3, r3, #25
 800b92e:	f53f af38 	bmi.w	800b7a2 <_svfiprintf_r+0x2a>
 800b932:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b934:	b01d      	add	sp, #116	; 0x74
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	ab03      	add	r3, sp, #12
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	462a      	mov	r2, r5
 800b940:	4b06      	ldr	r3, [pc, #24]	; (800b95c <_svfiprintf_r+0x1e4>)
 800b942:	a904      	add	r1, sp, #16
 800b944:	4640      	mov	r0, r8
 800b946:	f000 fa2f 	bl	800bda8 <_printf_i>
 800b94a:	e7ea      	b.n	800b922 <_svfiprintf_r+0x1aa>
 800b94c:	0800e4b3 	.word	0x0800e4b3
 800b950:	0800e4b9 	.word	0x0800e4b9
 800b954:	0800e4bd 	.word	0x0800e4bd
 800b958:	00000000 	.word	0x00000000
 800b95c:	0800b6c3 	.word	0x0800b6c3

0800b960 <_sungetc_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	1c4b      	adds	r3, r1, #1
 800b964:	4614      	mov	r4, r2
 800b966:	d103      	bne.n	800b970 <_sungetc_r+0x10>
 800b968:	f04f 35ff 	mov.w	r5, #4294967295
 800b96c:	4628      	mov	r0, r5
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	8993      	ldrh	r3, [r2, #12]
 800b972:	f023 0320 	bic.w	r3, r3, #32
 800b976:	8193      	strh	r3, [r2, #12]
 800b978:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b97a:	6852      	ldr	r2, [r2, #4]
 800b97c:	b2cd      	uxtb	r5, r1
 800b97e:	b18b      	cbz	r3, 800b9a4 <_sungetc_r+0x44>
 800b980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b982:	429a      	cmp	r2, r3
 800b984:	da08      	bge.n	800b998 <_sungetc_r+0x38>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	1e5a      	subs	r2, r3, #1
 800b98a:	6022      	str	r2, [r4, #0]
 800b98c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	3301      	adds	r3, #1
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	e7e9      	b.n	800b96c <_sungetc_r+0xc>
 800b998:	4621      	mov	r1, r4
 800b99a:	f000 fdcf 	bl	800c53c <__submore>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d0f1      	beq.n	800b986 <_sungetc_r+0x26>
 800b9a2:	e7e1      	b.n	800b968 <_sungetc_r+0x8>
 800b9a4:	6921      	ldr	r1, [r4, #16]
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	b151      	cbz	r1, 800b9c0 <_sungetc_r+0x60>
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	d208      	bcs.n	800b9c0 <_sungetc_r+0x60>
 800b9ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b9b2:	428d      	cmp	r5, r1
 800b9b4:	d104      	bne.n	800b9c0 <_sungetc_r+0x60>
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	3201      	adds	r2, #1
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	6062      	str	r2, [r4, #4]
 800b9be:	e7d5      	b.n	800b96c <_sungetc_r+0xc>
 800b9c0:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b9c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c6:	6363      	str	r3, [r4, #52]	; 0x34
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	6422      	str	r2, [r4, #64]	; 0x40
 800b9d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e7dc      	b.n	800b994 <_sungetc_r+0x34>

0800b9da <__ssrefill_r>:
 800b9da:	b510      	push	{r4, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9e0:	b169      	cbz	r1, 800b9fe <__ssrefill_r+0x24>
 800b9e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e6:	4299      	cmp	r1, r3
 800b9e8:	d001      	beq.n	800b9ee <__ssrefill_r+0x14>
 800b9ea:	f7ff fd39 	bl	800b460 <_free_r>
 800b9ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9f0:	6063      	str	r3, [r4, #4]
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9f6:	b113      	cbz	r3, 800b9fe <__ssrefill_r+0x24>
 800b9f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	bd10      	pop	{r4, pc}
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f043 0320 	orr.w	r3, r3, #32
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <__ssvfiscanf_r>:
 800ba14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba18:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800ba1c:	f10d 080c 	add.w	r8, sp, #12
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9346      	str	r3, [sp, #280]	; 0x118
 800ba26:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba28:	4ba0      	ldr	r3, [pc, #640]	; (800bcac <__ssvfiscanf_r+0x298>)
 800ba2a:	93a2      	str	r3, [sp, #648]	; 0x288
 800ba2c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800bcb4 <__ssvfiscanf_r+0x2a0>
 800ba30:	4b9f      	ldr	r3, [pc, #636]	; (800bcb0 <__ssvfiscanf_r+0x29c>)
 800ba32:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800ba36:	4606      	mov	r6, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	93a3      	str	r3, [sp, #652]	; 0x28c
 800ba3c:	4692      	mov	sl, r2
 800ba3e:	270a      	movs	r7, #10
 800ba40:	f89a 3000 	ldrb.w	r3, [sl]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 812f 	beq.w	800bca8 <__ssvfiscanf_r+0x294>
 800ba4a:	f000 fdb5 	bl	800c5b8 <__locale_ctype_ptr>
 800ba4e:	f89a b000 	ldrb.w	fp, [sl]
 800ba52:	4458      	add	r0, fp
 800ba54:	7843      	ldrb	r3, [r0, #1]
 800ba56:	f013 0308 	ands.w	r3, r3, #8
 800ba5a:	d143      	bne.n	800bae4 <__ssvfiscanf_r+0xd0>
 800ba5c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ba60:	f10a 0501 	add.w	r5, sl, #1
 800ba64:	f040 8099 	bne.w	800bb9a <__ssvfiscanf_r+0x186>
 800ba68:	9345      	str	r3, [sp, #276]	; 0x114
 800ba6a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba6c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ba70:	2b2a      	cmp	r3, #42	; 0x2a
 800ba72:	d103      	bne.n	800ba7c <__ssvfiscanf_r+0x68>
 800ba74:	2310      	movs	r3, #16
 800ba76:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba78:	f10a 0502 	add.w	r5, sl, #2
 800ba7c:	7829      	ldrb	r1, [r5, #0]
 800ba7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba82:	2a09      	cmp	r2, #9
 800ba84:	46aa      	mov	sl, r5
 800ba86:	f105 0501 	add.w	r5, r5, #1
 800ba8a:	d941      	bls.n	800bb10 <__ssvfiscanf_r+0xfc>
 800ba8c:	2203      	movs	r2, #3
 800ba8e:	4889      	ldr	r0, [pc, #548]	; (800bcb4 <__ssvfiscanf_r+0x2a0>)
 800ba90:	f7f4 fba6 	bl	80001e0 <memchr>
 800ba94:	b138      	cbz	r0, 800baa6 <__ssvfiscanf_r+0x92>
 800ba96:	eba0 0309 	sub.w	r3, r0, r9
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	4098      	lsls	r0, r3
 800ba9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800baa0:	4318      	orrs	r0, r3
 800baa2:	9043      	str	r0, [sp, #268]	; 0x10c
 800baa4:	46aa      	mov	sl, r5
 800baa6:	f89a 3000 	ldrb.w	r3, [sl]
 800baaa:	2b67      	cmp	r3, #103	; 0x67
 800baac:	f10a 0501 	add.w	r5, sl, #1
 800bab0:	d84a      	bhi.n	800bb48 <__ssvfiscanf_r+0x134>
 800bab2:	2b65      	cmp	r3, #101	; 0x65
 800bab4:	f080 80b7 	bcs.w	800bc26 <__ssvfiscanf_r+0x212>
 800bab8:	2b47      	cmp	r3, #71	; 0x47
 800baba:	d82f      	bhi.n	800bb1c <__ssvfiscanf_r+0x108>
 800babc:	2b45      	cmp	r3, #69	; 0x45
 800babe:	f080 80b2 	bcs.w	800bc26 <__ssvfiscanf_r+0x212>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 8082 	beq.w	800bbcc <__ssvfiscanf_r+0x1b8>
 800bac8:	2b25      	cmp	r3, #37	; 0x25
 800baca:	d066      	beq.n	800bb9a <__ssvfiscanf_r+0x186>
 800bacc:	2303      	movs	r3, #3
 800bace:	9349      	str	r3, [sp, #292]	; 0x124
 800bad0:	9744      	str	r7, [sp, #272]	; 0x110
 800bad2:	e045      	b.n	800bb60 <__ssvfiscanf_r+0x14c>
 800bad4:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800bad6:	3101      	adds	r1, #1
 800bad8:	9147      	str	r1, [sp, #284]	; 0x11c
 800bada:	6861      	ldr	r1, [r4, #4]
 800badc:	3301      	adds	r3, #1
 800bade:	3901      	subs	r1, #1
 800bae0:	6061      	str	r1, [r4, #4]
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	6863      	ldr	r3, [r4, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	dd0b      	ble.n	800bb02 <__ssvfiscanf_r+0xee>
 800baea:	f000 fd65 	bl	800c5b8 <__locale_ctype_ptr>
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	7819      	ldrb	r1, [r3, #0]
 800baf2:	4408      	add	r0, r1
 800baf4:	7841      	ldrb	r1, [r0, #1]
 800baf6:	070d      	lsls	r5, r1, #28
 800baf8:	d4ec      	bmi.n	800bad4 <__ssvfiscanf_r+0xc0>
 800bafa:	f10a 0501 	add.w	r5, sl, #1
 800bafe:	46aa      	mov	sl, r5
 800bb00:	e79e      	b.n	800ba40 <__ssvfiscanf_r+0x2c>
 800bb02:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bb04:	4621      	mov	r1, r4
 800bb06:	4630      	mov	r0, r6
 800bb08:	4798      	blx	r3
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d0ed      	beq.n	800baea <__ssvfiscanf_r+0xd6>
 800bb0e:	e7f4      	b.n	800bafa <__ssvfiscanf_r+0xe6>
 800bb10:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb12:	fb07 1303 	mla	r3, r7, r3, r1
 800bb16:	3b30      	subs	r3, #48	; 0x30
 800bb18:	9345      	str	r3, [sp, #276]	; 0x114
 800bb1a:	e7af      	b.n	800ba7c <__ssvfiscanf_r+0x68>
 800bb1c:	2b5b      	cmp	r3, #91	; 0x5b
 800bb1e:	d061      	beq.n	800bbe4 <__ssvfiscanf_r+0x1d0>
 800bb20:	d80c      	bhi.n	800bb3c <__ssvfiscanf_r+0x128>
 800bb22:	2b58      	cmp	r3, #88	; 0x58
 800bb24:	d1d2      	bne.n	800bacc <__ssvfiscanf_r+0xb8>
 800bb26:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bb28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb2c:	9243      	str	r2, [sp, #268]	; 0x10c
 800bb2e:	2210      	movs	r2, #16
 800bb30:	9244      	str	r2, [sp, #272]	; 0x110
 800bb32:	2b6f      	cmp	r3, #111	; 0x6f
 800bb34:	bfb4      	ite	lt
 800bb36:	2303      	movlt	r3, #3
 800bb38:	2304      	movge	r3, #4
 800bb3a:	e010      	b.n	800bb5e <__ssvfiscanf_r+0x14a>
 800bb3c:	2b63      	cmp	r3, #99	; 0x63
 800bb3e:	d05c      	beq.n	800bbfa <__ssvfiscanf_r+0x1e6>
 800bb40:	2b64      	cmp	r3, #100	; 0x64
 800bb42:	d1c3      	bne.n	800bacc <__ssvfiscanf_r+0xb8>
 800bb44:	9744      	str	r7, [sp, #272]	; 0x110
 800bb46:	e7f4      	b.n	800bb32 <__ssvfiscanf_r+0x11e>
 800bb48:	2b70      	cmp	r3, #112	; 0x70
 800bb4a:	d042      	beq.n	800bbd2 <__ssvfiscanf_r+0x1be>
 800bb4c:	d81d      	bhi.n	800bb8a <__ssvfiscanf_r+0x176>
 800bb4e:	2b6e      	cmp	r3, #110	; 0x6e
 800bb50:	d059      	beq.n	800bc06 <__ssvfiscanf_r+0x1f2>
 800bb52:	d843      	bhi.n	800bbdc <__ssvfiscanf_r+0x1c8>
 800bb54:	2b69      	cmp	r3, #105	; 0x69
 800bb56:	d1b9      	bne.n	800bacc <__ssvfiscanf_r+0xb8>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9344      	str	r3, [sp, #272]	; 0x110
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	9349      	str	r3, [sp, #292]	; 0x124
 800bb60:	6863      	ldr	r3, [r4, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dd61      	ble.n	800bc2a <__ssvfiscanf_r+0x216>
 800bb66:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb68:	0659      	lsls	r1, r3, #25
 800bb6a:	d56f      	bpl.n	800bc4c <__ssvfiscanf_r+0x238>
 800bb6c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dc7c      	bgt.n	800bc6c <__ssvfiscanf_r+0x258>
 800bb72:	ab01      	add	r3, sp, #4
 800bb74:	4622      	mov	r2, r4
 800bb76:	a943      	add	r1, sp, #268	; 0x10c
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f000 fa35 	bl	800bfe8 <_scanf_chars>
 800bb7e:	2801      	cmp	r0, #1
 800bb80:	f000 8092 	beq.w	800bca8 <__ssvfiscanf_r+0x294>
 800bb84:	2802      	cmp	r0, #2
 800bb86:	d1ba      	bne.n	800bafe <__ssvfiscanf_r+0xea>
 800bb88:	e01d      	b.n	800bbc6 <__ssvfiscanf_r+0x1b2>
 800bb8a:	2b75      	cmp	r3, #117	; 0x75
 800bb8c:	d0da      	beq.n	800bb44 <__ssvfiscanf_r+0x130>
 800bb8e:	2b78      	cmp	r3, #120	; 0x78
 800bb90:	d0c9      	beq.n	800bb26 <__ssvfiscanf_r+0x112>
 800bb92:	2b73      	cmp	r3, #115	; 0x73
 800bb94:	d19a      	bne.n	800bacc <__ssvfiscanf_r+0xb8>
 800bb96:	2302      	movs	r3, #2
 800bb98:	e7e1      	b.n	800bb5e <__ssvfiscanf_r+0x14a>
 800bb9a:	6863      	ldr	r3, [r4, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	dd0c      	ble.n	800bbba <__ssvfiscanf_r+0x1a6>
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	781a      	ldrb	r2, [r3, #0]
 800bba4:	4593      	cmp	fp, r2
 800bba6:	d17f      	bne.n	800bca8 <__ssvfiscanf_r+0x294>
 800bba8:	3301      	adds	r3, #1
 800bbaa:	6862      	ldr	r2, [r4, #4]
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbb0:	3a01      	subs	r2, #1
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	6062      	str	r2, [r4, #4]
 800bbb6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbb8:	e7a1      	b.n	800bafe <__ssvfiscanf_r+0xea>
 800bbba:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4798      	blx	r3
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d0ec      	beq.n	800bba0 <__ssvfiscanf_r+0x18c>
 800bbc6:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d163      	bne.n	800bc94 <__ssvfiscanf_r+0x280>
 800bbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd0:	e066      	b.n	800bca0 <__ssvfiscanf_r+0x28c>
 800bbd2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bbd4:	f042 0220 	orr.w	r2, r2, #32
 800bbd8:	9243      	str	r2, [sp, #268]	; 0x10c
 800bbda:	e7a4      	b.n	800bb26 <__ssvfiscanf_r+0x112>
 800bbdc:	2308      	movs	r3, #8
 800bbde:	9344      	str	r3, [sp, #272]	; 0x110
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	e7bc      	b.n	800bb5e <__ssvfiscanf_r+0x14a>
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f000 fb56 	bl	800c298 <__sccl>
 800bbec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf2:	9343      	str	r3, [sp, #268]	; 0x10c
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e7b1      	b.n	800bb5e <__ssvfiscanf_r+0x14a>
 800bbfa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc00:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc02:	2300      	movs	r3, #0
 800bc04:	e7ab      	b.n	800bb5e <__ssvfiscanf_r+0x14a>
 800bc06:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bc08:	06d0      	lsls	r0, r2, #27
 800bc0a:	f53f af78 	bmi.w	800bafe <__ssvfiscanf_r+0xea>
 800bc0e:	f012 0f01 	tst.w	r2, #1
 800bc12:	9a01      	ldr	r2, [sp, #4]
 800bc14:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bc16:	f102 0104 	add.w	r1, r2, #4
 800bc1a:	9101      	str	r1, [sp, #4]
 800bc1c:	6812      	ldr	r2, [r2, #0]
 800bc1e:	bf14      	ite	ne
 800bc20:	8013      	strhne	r3, [r2, #0]
 800bc22:	6013      	streq	r3, [r2, #0]
 800bc24:	e76b      	b.n	800bafe <__ssvfiscanf_r+0xea>
 800bc26:	2305      	movs	r3, #5
 800bc28:	e799      	b.n	800bb5e <__ssvfiscanf_r+0x14a>
 800bc2a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4630      	mov	r0, r6
 800bc30:	4798      	blx	r3
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d097      	beq.n	800bb66 <__ssvfiscanf_r+0x152>
 800bc36:	e7c6      	b.n	800bbc6 <__ssvfiscanf_r+0x1b2>
 800bc38:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800bc3a:	3201      	adds	r2, #1
 800bc3c:	9247      	str	r2, [sp, #284]	; 0x11c
 800bc3e:	6862      	ldr	r2, [r4, #4]
 800bc40:	3a01      	subs	r2, #1
 800bc42:	2a00      	cmp	r2, #0
 800bc44:	6062      	str	r2, [r4, #4]
 800bc46:	dd0a      	ble.n	800bc5e <__ssvfiscanf_r+0x24a>
 800bc48:	3301      	adds	r3, #1
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	f000 fcb4 	bl	800c5b8 <__locale_ctype_ptr>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	781a      	ldrb	r2, [r3, #0]
 800bc54:	4410      	add	r0, r2
 800bc56:	7842      	ldrb	r2, [r0, #1]
 800bc58:	0712      	lsls	r2, r2, #28
 800bc5a:	d4ed      	bmi.n	800bc38 <__ssvfiscanf_r+0x224>
 800bc5c:	e786      	b.n	800bb6c <__ssvfiscanf_r+0x158>
 800bc5e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc60:	4621      	mov	r1, r4
 800bc62:	4630      	mov	r0, r6
 800bc64:	4798      	blx	r3
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d0f0      	beq.n	800bc4c <__ssvfiscanf_r+0x238>
 800bc6a:	e7ac      	b.n	800bbc6 <__ssvfiscanf_r+0x1b2>
 800bc6c:	2b04      	cmp	r3, #4
 800bc6e:	dc06      	bgt.n	800bc7e <__ssvfiscanf_r+0x26a>
 800bc70:	ab01      	add	r3, sp, #4
 800bc72:	4622      	mov	r2, r4
 800bc74:	a943      	add	r1, sp, #268	; 0x10c
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 fa1a 	bl	800c0b0 <_scanf_i>
 800bc7c:	e77f      	b.n	800bb7e <__ssvfiscanf_r+0x16a>
 800bc7e:	4b0e      	ldr	r3, [pc, #56]	; (800bcb8 <__ssvfiscanf_r+0x2a4>)
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f43f af3c 	beq.w	800bafe <__ssvfiscanf_r+0xea>
 800bc86:	ab01      	add	r3, sp, #4
 800bc88:	4622      	mov	r2, r4
 800bc8a:	a943      	add	r1, sp, #268	; 0x10c
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f3af 8000 	nop.w
 800bc92:	e774      	b.n	800bb7e <__ssvfiscanf_r+0x16a>
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc9a:	bf18      	it	ne
 800bc9c:	f04f 30ff 	movne.w	r0, #4294967295
 800bca0:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca8:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bcaa:	e7f9      	b.n	800bca0 <__ssvfiscanf_r+0x28c>
 800bcac:	0800b961 	.word	0x0800b961
 800bcb0:	0800b9db 	.word	0x0800b9db
 800bcb4:	0800e4b9 	.word	0x0800e4b9
 800bcb8:	00000000 	.word	0x00000000

0800bcbc <_printf_common>:
 800bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	4691      	mov	r9, r2
 800bcc2:	461f      	mov	r7, r3
 800bcc4:	688a      	ldr	r2, [r1, #8]
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bccc:	4293      	cmp	r3, r2
 800bcce:	bfb8      	it	lt
 800bcd0:	4613      	movlt	r3, r2
 800bcd2:	f8c9 3000 	str.w	r3, [r9]
 800bcd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460c      	mov	r4, r1
 800bcde:	b112      	cbz	r2, 800bce6 <_printf_common+0x2a>
 800bce0:	3301      	adds	r3, #1
 800bce2:	f8c9 3000 	str.w	r3, [r9]
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	0699      	lsls	r1, r3, #26
 800bcea:	bf42      	ittt	mi
 800bcec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcf0:	3302      	addmi	r3, #2
 800bcf2:	f8c9 3000 	strmi.w	r3, [r9]
 800bcf6:	6825      	ldr	r5, [r4, #0]
 800bcf8:	f015 0506 	ands.w	r5, r5, #6
 800bcfc:	d107      	bne.n	800bd0e <_printf_common+0x52>
 800bcfe:	f104 0a19 	add.w	sl, r4, #25
 800bd02:	68e3      	ldr	r3, [r4, #12]
 800bd04:	f8d9 2000 	ldr.w	r2, [r9]
 800bd08:	1a9b      	subs	r3, r3, r2
 800bd0a:	429d      	cmp	r5, r3
 800bd0c:	db29      	blt.n	800bd62 <_printf_common+0xa6>
 800bd0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	3300      	adds	r3, #0
 800bd16:	bf18      	it	ne
 800bd18:	2301      	movne	r3, #1
 800bd1a:	0692      	lsls	r2, r2, #26
 800bd1c:	d42e      	bmi.n	800bd7c <_printf_common+0xc0>
 800bd1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd22:	4639      	mov	r1, r7
 800bd24:	4630      	mov	r0, r6
 800bd26:	47c0      	blx	r8
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d021      	beq.n	800bd70 <_printf_common+0xb4>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	68e5      	ldr	r5, [r4, #12]
 800bd30:	f8d9 2000 	ldr.w	r2, [r9]
 800bd34:	f003 0306 	and.w	r3, r3, #6
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	bf08      	it	eq
 800bd3c:	1aad      	subeq	r5, r5, r2
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	6922      	ldr	r2, [r4, #16]
 800bd42:	bf0c      	ite	eq
 800bd44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd48:	2500      	movne	r5, #0
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	bfc4      	itt	gt
 800bd4e:	1a9b      	subgt	r3, r3, r2
 800bd50:	18ed      	addgt	r5, r5, r3
 800bd52:	f04f 0900 	mov.w	r9, #0
 800bd56:	341a      	adds	r4, #26
 800bd58:	454d      	cmp	r5, r9
 800bd5a:	d11b      	bne.n	800bd94 <_printf_common+0xd8>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd62:	2301      	movs	r3, #1
 800bd64:	4652      	mov	r2, sl
 800bd66:	4639      	mov	r1, r7
 800bd68:	4630      	mov	r0, r6
 800bd6a:	47c0      	blx	r8
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d103      	bne.n	800bd78 <_printf_common+0xbc>
 800bd70:	f04f 30ff 	mov.w	r0, #4294967295
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	3501      	adds	r5, #1
 800bd7a:	e7c2      	b.n	800bd02 <_printf_common+0x46>
 800bd7c:	18e1      	adds	r1, r4, r3
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	2030      	movs	r0, #48	; 0x30
 800bd82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd86:	4422      	add	r2, r4
 800bd88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd90:	3302      	adds	r3, #2
 800bd92:	e7c4      	b.n	800bd1e <_printf_common+0x62>
 800bd94:	2301      	movs	r3, #1
 800bd96:	4622      	mov	r2, r4
 800bd98:	4639      	mov	r1, r7
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	47c0      	blx	r8
 800bd9e:	3001      	adds	r0, #1
 800bda0:	d0e6      	beq.n	800bd70 <_printf_common+0xb4>
 800bda2:	f109 0901 	add.w	r9, r9, #1
 800bda6:	e7d7      	b.n	800bd58 <_printf_common+0x9c>

0800bda8 <_printf_i>:
 800bda8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdac:	4617      	mov	r7, r2
 800bdae:	7e0a      	ldrb	r2, [r1, #24]
 800bdb0:	b085      	sub	sp, #20
 800bdb2:	2a6e      	cmp	r2, #110	; 0x6e
 800bdb4:	4698      	mov	r8, r3
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	460c      	mov	r4, r1
 800bdba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdbc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800bdc0:	f000 80bc 	beq.w	800bf3c <_printf_i+0x194>
 800bdc4:	d81a      	bhi.n	800bdfc <_printf_i+0x54>
 800bdc6:	2a63      	cmp	r2, #99	; 0x63
 800bdc8:	d02e      	beq.n	800be28 <_printf_i+0x80>
 800bdca:	d80a      	bhi.n	800bde2 <_printf_i+0x3a>
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	f000 80c8 	beq.w	800bf62 <_printf_i+0x1ba>
 800bdd2:	2a58      	cmp	r2, #88	; 0x58
 800bdd4:	f000 808a 	beq.w	800beec <_printf_i+0x144>
 800bdd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bddc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bde0:	e02a      	b.n	800be38 <_printf_i+0x90>
 800bde2:	2a64      	cmp	r2, #100	; 0x64
 800bde4:	d001      	beq.n	800bdea <_printf_i+0x42>
 800bde6:	2a69      	cmp	r2, #105	; 0x69
 800bde8:	d1f6      	bne.n	800bdd8 <_printf_i+0x30>
 800bdea:	6821      	ldr	r1, [r4, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bdf2:	d023      	beq.n	800be3c <_printf_i+0x94>
 800bdf4:	1d11      	adds	r1, r2, #4
 800bdf6:	6019      	str	r1, [r3, #0]
 800bdf8:	6813      	ldr	r3, [r2, #0]
 800bdfa:	e027      	b.n	800be4c <_printf_i+0xa4>
 800bdfc:	2a73      	cmp	r2, #115	; 0x73
 800bdfe:	f000 80b4 	beq.w	800bf6a <_printf_i+0x1c2>
 800be02:	d808      	bhi.n	800be16 <_printf_i+0x6e>
 800be04:	2a6f      	cmp	r2, #111	; 0x6f
 800be06:	d02a      	beq.n	800be5e <_printf_i+0xb6>
 800be08:	2a70      	cmp	r2, #112	; 0x70
 800be0a:	d1e5      	bne.n	800bdd8 <_printf_i+0x30>
 800be0c:	680a      	ldr	r2, [r1, #0]
 800be0e:	f042 0220 	orr.w	r2, r2, #32
 800be12:	600a      	str	r2, [r1, #0]
 800be14:	e003      	b.n	800be1e <_printf_i+0x76>
 800be16:	2a75      	cmp	r2, #117	; 0x75
 800be18:	d021      	beq.n	800be5e <_printf_i+0xb6>
 800be1a:	2a78      	cmp	r2, #120	; 0x78
 800be1c:	d1dc      	bne.n	800bdd8 <_printf_i+0x30>
 800be1e:	2278      	movs	r2, #120	; 0x78
 800be20:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800be24:	496e      	ldr	r1, [pc, #440]	; (800bfe0 <_printf_i+0x238>)
 800be26:	e064      	b.n	800bef2 <_printf_i+0x14a>
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800be2e:	1d11      	adds	r1, r2, #4
 800be30:	6019      	str	r1, [r3, #0]
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be38:	2301      	movs	r3, #1
 800be3a:	e0a3      	b.n	800bf84 <_printf_i+0x1dc>
 800be3c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800be40:	f102 0104 	add.w	r1, r2, #4
 800be44:	6019      	str	r1, [r3, #0]
 800be46:	d0d7      	beq.n	800bdf8 <_printf_i+0x50>
 800be48:	f9b2 3000 	ldrsh.w	r3, [r2]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	da03      	bge.n	800be58 <_printf_i+0xb0>
 800be50:	222d      	movs	r2, #45	; 0x2d
 800be52:	425b      	negs	r3, r3
 800be54:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be58:	4962      	ldr	r1, [pc, #392]	; (800bfe4 <_printf_i+0x23c>)
 800be5a:	220a      	movs	r2, #10
 800be5c:	e017      	b.n	800be8e <_printf_i+0xe6>
 800be5e:	6820      	ldr	r0, [r4, #0]
 800be60:	6819      	ldr	r1, [r3, #0]
 800be62:	f010 0f80 	tst.w	r0, #128	; 0x80
 800be66:	d003      	beq.n	800be70 <_printf_i+0xc8>
 800be68:	1d08      	adds	r0, r1, #4
 800be6a:	6018      	str	r0, [r3, #0]
 800be6c:	680b      	ldr	r3, [r1, #0]
 800be6e:	e006      	b.n	800be7e <_printf_i+0xd6>
 800be70:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be74:	f101 0004 	add.w	r0, r1, #4
 800be78:	6018      	str	r0, [r3, #0]
 800be7a:	d0f7      	beq.n	800be6c <_printf_i+0xc4>
 800be7c:	880b      	ldrh	r3, [r1, #0]
 800be7e:	4959      	ldr	r1, [pc, #356]	; (800bfe4 <_printf_i+0x23c>)
 800be80:	2a6f      	cmp	r2, #111	; 0x6f
 800be82:	bf14      	ite	ne
 800be84:	220a      	movne	r2, #10
 800be86:	2208      	moveq	r2, #8
 800be88:	2000      	movs	r0, #0
 800be8a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800be8e:	6865      	ldr	r5, [r4, #4]
 800be90:	60a5      	str	r5, [r4, #8]
 800be92:	2d00      	cmp	r5, #0
 800be94:	f2c0 809c 	blt.w	800bfd0 <_printf_i+0x228>
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	f020 0004 	bic.w	r0, r0, #4
 800be9e:	6020      	str	r0, [r4, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d13f      	bne.n	800bf24 <_printf_i+0x17c>
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	f040 8095 	bne.w	800bfd4 <_printf_i+0x22c>
 800beaa:	4675      	mov	r5, lr
 800beac:	2a08      	cmp	r2, #8
 800beae:	d10b      	bne.n	800bec8 <_printf_i+0x120>
 800beb0:	6823      	ldr	r3, [r4, #0]
 800beb2:	07da      	lsls	r2, r3, #31
 800beb4:	d508      	bpl.n	800bec8 <_printf_i+0x120>
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	6862      	ldr	r2, [r4, #4]
 800beba:	429a      	cmp	r2, r3
 800bebc:	bfde      	ittt	le
 800bebe:	2330      	movle	r3, #48	; 0x30
 800bec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bec8:	ebae 0305 	sub.w	r3, lr, r5
 800becc:	6123      	str	r3, [r4, #16]
 800bece:	f8cd 8000 	str.w	r8, [sp]
 800bed2:	463b      	mov	r3, r7
 800bed4:	aa03      	add	r2, sp, #12
 800bed6:	4621      	mov	r1, r4
 800bed8:	4630      	mov	r0, r6
 800beda:	f7ff feef 	bl	800bcbc <_printf_common>
 800bede:	3001      	adds	r0, #1
 800bee0:	d155      	bne.n	800bf8e <_printf_i+0x1e6>
 800bee2:	f04f 30ff 	mov.w	r0, #4294967295
 800bee6:	b005      	add	sp, #20
 800bee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800bef0:	493c      	ldr	r1, [pc, #240]	; (800bfe4 <_printf_i+0x23c>)
 800bef2:	6822      	ldr	r2, [r4, #0]
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	f012 0f80 	tst.w	r2, #128	; 0x80
 800befa:	f100 0504 	add.w	r5, r0, #4
 800befe:	601d      	str	r5, [r3, #0]
 800bf00:	d001      	beq.n	800bf06 <_printf_i+0x15e>
 800bf02:	6803      	ldr	r3, [r0, #0]
 800bf04:	e002      	b.n	800bf0c <_printf_i+0x164>
 800bf06:	0655      	lsls	r5, r2, #25
 800bf08:	d5fb      	bpl.n	800bf02 <_printf_i+0x15a>
 800bf0a:	8803      	ldrh	r3, [r0, #0]
 800bf0c:	07d0      	lsls	r0, r2, #31
 800bf0e:	bf44      	itt	mi
 800bf10:	f042 0220 	orrmi.w	r2, r2, #32
 800bf14:	6022      	strmi	r2, [r4, #0]
 800bf16:	b91b      	cbnz	r3, 800bf20 <_printf_i+0x178>
 800bf18:	6822      	ldr	r2, [r4, #0]
 800bf1a:	f022 0220 	bic.w	r2, r2, #32
 800bf1e:	6022      	str	r2, [r4, #0]
 800bf20:	2210      	movs	r2, #16
 800bf22:	e7b1      	b.n	800be88 <_printf_i+0xe0>
 800bf24:	4675      	mov	r5, lr
 800bf26:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf2a:	fb02 3310 	mls	r3, r2, r0, r3
 800bf2e:	5ccb      	ldrb	r3, [r1, r3]
 800bf30:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bf34:	4603      	mov	r3, r0
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d1f5      	bne.n	800bf26 <_printf_i+0x17e>
 800bf3a:	e7b7      	b.n	800beac <_printf_i+0x104>
 800bf3c:	6808      	ldr	r0, [r1, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	6949      	ldr	r1, [r1, #20]
 800bf42:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bf46:	d004      	beq.n	800bf52 <_printf_i+0x1aa>
 800bf48:	1d10      	adds	r0, r2, #4
 800bf4a:	6018      	str	r0, [r3, #0]
 800bf4c:	6813      	ldr	r3, [r2, #0]
 800bf4e:	6019      	str	r1, [r3, #0]
 800bf50:	e007      	b.n	800bf62 <_printf_i+0x1ba>
 800bf52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf56:	f102 0004 	add.w	r0, r2, #4
 800bf5a:	6018      	str	r0, [r3, #0]
 800bf5c:	6813      	ldr	r3, [r2, #0]
 800bf5e:	d0f6      	beq.n	800bf4e <_printf_i+0x1a6>
 800bf60:	8019      	strh	r1, [r3, #0]
 800bf62:	2300      	movs	r3, #0
 800bf64:	6123      	str	r3, [r4, #16]
 800bf66:	4675      	mov	r5, lr
 800bf68:	e7b1      	b.n	800bece <_printf_i+0x126>
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	1d11      	adds	r1, r2, #4
 800bf6e:	6019      	str	r1, [r3, #0]
 800bf70:	6815      	ldr	r5, [r2, #0]
 800bf72:	6862      	ldr	r2, [r4, #4]
 800bf74:	2100      	movs	r1, #0
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7f4 f932 	bl	80001e0 <memchr>
 800bf7c:	b108      	cbz	r0, 800bf82 <_printf_i+0x1da>
 800bf7e:	1b40      	subs	r0, r0, r5
 800bf80:	6060      	str	r0, [r4, #4]
 800bf82:	6863      	ldr	r3, [r4, #4]
 800bf84:	6123      	str	r3, [r4, #16]
 800bf86:	2300      	movs	r3, #0
 800bf88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf8c:	e79f      	b.n	800bece <_printf_i+0x126>
 800bf8e:	6923      	ldr	r3, [r4, #16]
 800bf90:	462a      	mov	r2, r5
 800bf92:	4639      	mov	r1, r7
 800bf94:	4630      	mov	r0, r6
 800bf96:	47c0      	blx	r8
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d0a2      	beq.n	800bee2 <_printf_i+0x13a>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	079b      	lsls	r3, r3, #30
 800bfa0:	d507      	bpl.n	800bfb2 <_printf_i+0x20a>
 800bfa2:	2500      	movs	r5, #0
 800bfa4:	f104 0919 	add.w	r9, r4, #25
 800bfa8:	68e3      	ldr	r3, [r4, #12]
 800bfaa:	9a03      	ldr	r2, [sp, #12]
 800bfac:	1a9b      	subs	r3, r3, r2
 800bfae:	429d      	cmp	r5, r3
 800bfb0:	db05      	blt.n	800bfbe <_printf_i+0x216>
 800bfb2:	68e0      	ldr	r0, [r4, #12]
 800bfb4:	9b03      	ldr	r3, [sp, #12]
 800bfb6:	4298      	cmp	r0, r3
 800bfb8:	bfb8      	it	lt
 800bfba:	4618      	movlt	r0, r3
 800bfbc:	e793      	b.n	800bee6 <_printf_i+0x13e>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	464a      	mov	r2, r9
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	47c0      	blx	r8
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d08a      	beq.n	800bee2 <_printf_i+0x13a>
 800bfcc:	3501      	adds	r5, #1
 800bfce:	e7eb      	b.n	800bfa8 <_printf_i+0x200>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1a7      	bne.n	800bf24 <_printf_i+0x17c>
 800bfd4:	780b      	ldrb	r3, [r1, #0]
 800bfd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfde:	e765      	b.n	800beac <_printf_i+0x104>
 800bfe0:	0800e4d5 	.word	0x0800e4d5
 800bfe4:	0800e4c4 	.word	0x0800e4c4

0800bfe8 <_scanf_chars>:
 800bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfec:	4615      	mov	r5, r2
 800bfee:	688a      	ldr	r2, [r1, #8]
 800bff0:	4680      	mov	r8, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	b932      	cbnz	r2, 800c004 <_scanf_chars+0x1c>
 800bff6:	698a      	ldr	r2, [r1, #24]
 800bff8:	2a00      	cmp	r2, #0
 800bffa:	bf0c      	ite	eq
 800bffc:	2201      	moveq	r2, #1
 800bffe:	f04f 32ff 	movne.w	r2, #4294967295
 800c002:	608a      	str	r2, [r1, #8]
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	06d1      	lsls	r1, r2, #27
 800c008:	bf5f      	itttt	pl
 800c00a:	681a      	ldrpl	r2, [r3, #0]
 800c00c:	1d11      	addpl	r1, r2, #4
 800c00e:	6019      	strpl	r1, [r3, #0]
 800c010:	6817      	ldrpl	r7, [r2, #0]
 800c012:	2600      	movs	r6, #0
 800c014:	69a3      	ldr	r3, [r4, #24]
 800c016:	b1db      	cbz	r3, 800c050 <_scanf_chars+0x68>
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d107      	bne.n	800c02c <_scanf_chars+0x44>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	6962      	ldr	r2, [r4, #20]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	5cd3      	ldrb	r3, [r2, r3]
 800c024:	b9a3      	cbnz	r3, 800c050 <_scanf_chars+0x68>
 800c026:	2e00      	cmp	r6, #0
 800c028:	d132      	bne.n	800c090 <_scanf_chars+0xa8>
 800c02a:	e006      	b.n	800c03a <_scanf_chars+0x52>
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d007      	beq.n	800c040 <_scanf_chars+0x58>
 800c030:	2e00      	cmp	r6, #0
 800c032:	d12d      	bne.n	800c090 <_scanf_chars+0xa8>
 800c034:	69a3      	ldr	r3, [r4, #24]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d12a      	bne.n	800c090 <_scanf_chars+0xa8>
 800c03a:	2001      	movs	r0, #1
 800c03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c040:	f000 faba 	bl	800c5b8 <__locale_ctype_ptr>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	4418      	add	r0, r3
 800c04a:	7843      	ldrb	r3, [r0, #1]
 800c04c:	071b      	lsls	r3, r3, #28
 800c04e:	d4ef      	bmi.n	800c030 <_scanf_chars+0x48>
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	06da      	lsls	r2, r3, #27
 800c054:	bf5e      	ittt	pl
 800c056:	682b      	ldrpl	r3, [r5, #0]
 800c058:	781b      	ldrbpl	r3, [r3, #0]
 800c05a:	703b      	strbpl	r3, [r7, #0]
 800c05c:	682a      	ldr	r2, [r5, #0]
 800c05e:	686b      	ldr	r3, [r5, #4]
 800c060:	f102 0201 	add.w	r2, r2, #1
 800c064:	602a      	str	r2, [r5, #0]
 800c066:	68a2      	ldr	r2, [r4, #8]
 800c068:	f103 33ff 	add.w	r3, r3, #4294967295
 800c06c:	f102 32ff 	add.w	r2, r2, #4294967295
 800c070:	606b      	str	r3, [r5, #4]
 800c072:	f106 0601 	add.w	r6, r6, #1
 800c076:	bf58      	it	pl
 800c078:	3701      	addpl	r7, #1
 800c07a:	60a2      	str	r2, [r4, #8]
 800c07c:	b142      	cbz	r2, 800c090 <_scanf_chars+0xa8>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dcc8      	bgt.n	800c014 <_scanf_chars+0x2c>
 800c082:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c086:	4629      	mov	r1, r5
 800c088:	4640      	mov	r0, r8
 800c08a:	4798      	blx	r3
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d0c1      	beq.n	800c014 <_scanf_chars+0x2c>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	f013 0310 	ands.w	r3, r3, #16
 800c096:	d105      	bne.n	800c0a4 <_scanf_chars+0xbc>
 800c098:	68e2      	ldr	r2, [r4, #12]
 800c09a:	3201      	adds	r2, #1
 800c09c:	60e2      	str	r2, [r4, #12]
 800c09e:	69a2      	ldr	r2, [r4, #24]
 800c0a0:	b102      	cbz	r2, 800c0a4 <_scanf_chars+0xbc>
 800c0a2:	703b      	strb	r3, [r7, #0]
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	441e      	add	r6, r3
 800c0a8:	6126      	str	r6, [r4, #16]
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0b0 <_scanf_i>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	469a      	mov	sl, r3
 800c0b6:	4b74      	ldr	r3, [pc, #464]	; (800c288 <_scanf_i+0x1d8>)
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	4683      	mov	fp, r0
 800c0bc:	4616      	mov	r6, r2
 800c0be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	ab03      	add	r3, sp, #12
 800c0c6:	68a7      	ldr	r7, [r4, #8]
 800c0c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c0cc:	4b6f      	ldr	r3, [pc, #444]	; (800c28c <_scanf_i+0x1dc>)
 800c0ce:	69a1      	ldr	r1, [r4, #24]
 800c0d0:	4a6f      	ldr	r2, [pc, #444]	; (800c290 <_scanf_i+0x1e0>)
 800c0d2:	2903      	cmp	r1, #3
 800c0d4:	bf18      	it	ne
 800c0d6:	461a      	movne	r2, r3
 800c0d8:	1e7b      	subs	r3, r7, #1
 800c0da:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c0de:	bf84      	itt	hi
 800c0e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0e4:	60a3      	strhi	r3, [r4, #8]
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	9200      	str	r2, [sp, #0]
 800c0ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c0ee:	bf88      	it	hi
 800c0f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c0f4:	f104 091c 	add.w	r9, r4, #28
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bf8c      	ite	hi
 800c0fc:	197f      	addhi	r7, r7, r5
 800c0fe:	2700      	movls	r7, #0
 800c100:	464b      	mov	r3, r9
 800c102:	f04f 0800 	mov.w	r8, #0
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	6831      	ldr	r1, [r6, #0]
 800c10a:	ab03      	add	r3, sp, #12
 800c10c:	2202      	movs	r2, #2
 800c10e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c112:	7809      	ldrb	r1, [r1, #0]
 800c114:	f7f4 f864 	bl	80001e0 <memchr>
 800c118:	9b01      	ldr	r3, [sp, #4]
 800c11a:	b328      	cbz	r0, 800c168 <_scanf_i+0xb8>
 800c11c:	f1b8 0f01 	cmp.w	r8, #1
 800c120:	d156      	bne.n	800c1d0 <_scanf_i+0x120>
 800c122:	6862      	ldr	r2, [r4, #4]
 800c124:	b92a      	cbnz	r2, 800c132 <_scanf_i+0x82>
 800c126:	2208      	movs	r2, #8
 800c128:	6062      	str	r2, [r4, #4]
 800c12a:	6822      	ldr	r2, [r4, #0]
 800c12c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c130:	6022      	str	r2, [r4, #0]
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c138:	6022      	str	r2, [r4, #0]
 800c13a:	68a2      	ldr	r2, [r4, #8]
 800c13c:	1e51      	subs	r1, r2, #1
 800c13e:	60a1      	str	r1, [r4, #8]
 800c140:	b192      	cbz	r2, 800c168 <_scanf_i+0xb8>
 800c142:	6832      	ldr	r2, [r6, #0]
 800c144:	1c51      	adds	r1, r2, #1
 800c146:	6031      	str	r1, [r6, #0]
 800c148:	7812      	ldrb	r2, [r2, #0]
 800c14a:	701a      	strb	r2, [r3, #0]
 800c14c:	1c5d      	adds	r5, r3, #1
 800c14e:	6873      	ldr	r3, [r6, #4]
 800c150:	3b01      	subs	r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	6073      	str	r3, [r6, #4]
 800c156:	dc06      	bgt.n	800c166 <_scanf_i+0xb6>
 800c158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c15c:	4631      	mov	r1, r6
 800c15e:	4658      	mov	r0, fp
 800c160:	4798      	blx	r3
 800c162:	2800      	cmp	r0, #0
 800c164:	d176      	bne.n	800c254 <_scanf_i+0x1a4>
 800c166:	462b      	mov	r3, r5
 800c168:	f108 0801 	add.w	r8, r8, #1
 800c16c:	f1b8 0f03 	cmp.w	r8, #3
 800c170:	d1c9      	bne.n	800c106 <_scanf_i+0x56>
 800c172:	6862      	ldr	r2, [r4, #4]
 800c174:	b90a      	cbnz	r2, 800c17a <_scanf_i+0xca>
 800c176:	220a      	movs	r2, #10
 800c178:	6062      	str	r2, [r4, #4]
 800c17a:	6862      	ldr	r2, [r4, #4]
 800c17c:	4945      	ldr	r1, [pc, #276]	; (800c294 <_scanf_i+0x1e4>)
 800c17e:	6960      	ldr	r0, [r4, #20]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	1a89      	subs	r1, r1, r2
 800c184:	f000 f888 	bl	800c298 <__sccl>
 800c188:	9b01      	ldr	r3, [sp, #4]
 800c18a:	f04f 0800 	mov.w	r8, #0
 800c18e:	461d      	mov	r5, r3
 800c190:	68a3      	ldr	r3, [r4, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d038      	beq.n	800c208 <_scanf_i+0x158>
 800c196:	6831      	ldr	r1, [r6, #0]
 800c198:	6960      	ldr	r0, [r4, #20]
 800c19a:	780a      	ldrb	r2, [r1, #0]
 800c19c:	5c80      	ldrb	r0, [r0, r2]
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d032      	beq.n	800c208 <_scanf_i+0x158>
 800c1a2:	2a30      	cmp	r2, #48	; 0x30
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	d121      	bne.n	800c1ec <_scanf_i+0x13c>
 800c1a8:	0510      	lsls	r0, r2, #20
 800c1aa:	d51f      	bpl.n	800c1ec <_scanf_i+0x13c>
 800c1ac:	f108 0801 	add.w	r8, r8, #1
 800c1b0:	b117      	cbz	r7, 800c1b8 <_scanf_i+0x108>
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	3f01      	subs	r7, #1
 800c1b6:	60a3      	str	r3, [r4, #8]
 800c1b8:	6873      	ldr	r3, [r6, #4]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	6073      	str	r3, [r6, #4]
 800c1c0:	dd1b      	ble.n	800c1fa <_scanf_i+0x14a>
 800c1c2:	6833      	ldr	r3, [r6, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	e7df      	b.n	800c190 <_scanf_i+0xe0>
 800c1d0:	f1b8 0f02 	cmp.w	r8, #2
 800c1d4:	d1b1      	bne.n	800c13a <_scanf_i+0x8a>
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c1dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1e0:	d1c2      	bne.n	800c168 <_scanf_i+0xb8>
 800c1e2:	2110      	movs	r1, #16
 800c1e4:	6061      	str	r1, [r4, #4]
 800c1e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1ea:	e7a5      	b.n	800c138 <_scanf_i+0x88>
 800c1ec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c1f0:	6022      	str	r2, [r4, #0]
 800c1f2:	780b      	ldrb	r3, [r1, #0]
 800c1f4:	702b      	strb	r3, [r5, #0]
 800c1f6:	3501      	adds	r5, #1
 800c1f8:	e7de      	b.n	800c1b8 <_scanf_i+0x108>
 800c1fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c1fe:	4631      	mov	r1, r6
 800c200:	4658      	mov	r0, fp
 800c202:	4798      	blx	r3
 800c204:	2800      	cmp	r0, #0
 800c206:	d0df      	beq.n	800c1c8 <_scanf_i+0x118>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	05d9      	lsls	r1, r3, #23
 800c20c:	d50c      	bpl.n	800c228 <_scanf_i+0x178>
 800c20e:	454d      	cmp	r5, r9
 800c210:	d908      	bls.n	800c224 <_scanf_i+0x174>
 800c212:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c21a:	4632      	mov	r2, r6
 800c21c:	4658      	mov	r0, fp
 800c21e:	4798      	blx	r3
 800c220:	1e6f      	subs	r7, r5, #1
 800c222:	463d      	mov	r5, r7
 800c224:	454d      	cmp	r5, r9
 800c226:	d02c      	beq.n	800c282 <_scanf_i+0x1d2>
 800c228:	6822      	ldr	r2, [r4, #0]
 800c22a:	f012 0210 	ands.w	r2, r2, #16
 800c22e:	d11e      	bne.n	800c26e <_scanf_i+0x1be>
 800c230:	702a      	strb	r2, [r5, #0]
 800c232:	6863      	ldr	r3, [r4, #4]
 800c234:	9e00      	ldr	r6, [sp, #0]
 800c236:	4649      	mov	r1, r9
 800c238:	4658      	mov	r0, fp
 800c23a:	47b0      	blx	r6
 800c23c:	6822      	ldr	r2, [r4, #0]
 800c23e:	f8da 3000 	ldr.w	r3, [sl]
 800c242:	f012 0f20 	tst.w	r2, #32
 800c246:	d008      	beq.n	800c25a <_scanf_i+0x1aa>
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	f8ca 2000 	str.w	r2, [sl]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6018      	str	r0, [r3, #0]
 800c252:	e009      	b.n	800c268 <_scanf_i+0x1b8>
 800c254:	f04f 0800 	mov.w	r8, #0
 800c258:	e7d6      	b.n	800c208 <_scanf_i+0x158>
 800c25a:	07d2      	lsls	r2, r2, #31
 800c25c:	d5f4      	bpl.n	800c248 <_scanf_i+0x198>
 800c25e:	1d1a      	adds	r2, r3, #4
 800c260:	f8ca 2000 	str.w	r2, [sl]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	8018      	strh	r0, [r3, #0]
 800c268:	68e3      	ldr	r3, [r4, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	60e3      	str	r3, [r4, #12]
 800c26e:	eba5 0509 	sub.w	r5, r5, r9
 800c272:	44a8      	add	r8, r5
 800c274:	6925      	ldr	r5, [r4, #16]
 800c276:	4445      	add	r5, r8
 800c278:	6125      	str	r5, [r4, #16]
 800c27a:	2000      	movs	r0, #0
 800c27c:	b007      	add	sp, #28
 800c27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c282:	2001      	movs	r0, #1
 800c284:	e7fa      	b.n	800c27c <_scanf_i+0x1cc>
 800c286:	bf00      	nop
 800c288:	0800e168 	.word	0x0800e168
 800c28c:	0800c519 	.word	0x0800c519
 800c290:	0800c3f9 	.word	0x0800c3f9
 800c294:	0800e4f6 	.word	0x0800e4f6

0800c298 <__sccl>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	780b      	ldrb	r3, [r1, #0]
 800c29c:	2b5e      	cmp	r3, #94	; 0x5e
 800c29e:	bf13      	iteet	ne
 800c2a0:	1c4a      	addne	r2, r1, #1
 800c2a2:	1c8a      	addeq	r2, r1, #2
 800c2a4:	784b      	ldrbeq	r3, [r1, #1]
 800c2a6:	2100      	movne	r1, #0
 800c2a8:	bf08      	it	eq
 800c2aa:	2101      	moveq	r1, #1
 800c2ac:	1e44      	subs	r4, r0, #1
 800c2ae:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c2b2:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c2b6:	42a5      	cmp	r5, r4
 800c2b8:	d1fb      	bne.n	800c2b2 <__sccl+0x1a>
 800c2ba:	b913      	cbnz	r3, 800c2c2 <__sccl+0x2a>
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	4610      	mov	r0, r2
 800c2c0:	bd70      	pop	{r4, r5, r6, pc}
 800c2c2:	f081 0401 	eor.w	r4, r1, #1
 800c2c6:	54c4      	strb	r4, [r0, r3]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	780d      	ldrb	r5, [r1, #0]
 800c2cc:	2d2d      	cmp	r5, #45	; 0x2d
 800c2ce:	f101 0201 	add.w	r2, r1, #1
 800c2d2:	d006      	beq.n	800c2e2 <__sccl+0x4a>
 800c2d4:	2d5d      	cmp	r5, #93	; 0x5d
 800c2d6:	d0f2      	beq.n	800c2be <__sccl+0x26>
 800c2d8:	b90d      	cbnz	r5, 800c2de <__sccl+0x46>
 800c2da:	460a      	mov	r2, r1
 800c2dc:	e7ef      	b.n	800c2be <__sccl+0x26>
 800c2de:	462b      	mov	r3, r5
 800c2e0:	e7f1      	b.n	800c2c6 <__sccl+0x2e>
 800c2e2:	784e      	ldrb	r6, [r1, #1]
 800c2e4:	2e5d      	cmp	r6, #93	; 0x5d
 800c2e6:	d0fa      	beq.n	800c2de <__sccl+0x46>
 800c2e8:	42b3      	cmp	r3, r6
 800c2ea:	dcf8      	bgt.n	800c2de <__sccl+0x46>
 800c2ec:	3102      	adds	r1, #2
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	429e      	cmp	r6, r3
 800c2f2:	54c4      	strb	r4, [r0, r3]
 800c2f4:	dcfb      	bgt.n	800c2ee <__sccl+0x56>
 800c2f6:	e7e8      	b.n	800c2ca <__sccl+0x32>

0800c2f8 <_strtol_l.isra.0>:
 800c2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	4680      	mov	r8, r0
 800c2fe:	4689      	mov	r9, r1
 800c300:	4692      	mov	sl, r2
 800c302:	461f      	mov	r7, r3
 800c304:	468b      	mov	fp, r1
 800c306:	465d      	mov	r5, fp
 800c308:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c30a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c30e:	f000 f950 	bl	800c5b2 <__locale_ctype_ptr_l>
 800c312:	4420      	add	r0, r4
 800c314:	7846      	ldrb	r6, [r0, #1]
 800c316:	f016 0608 	ands.w	r6, r6, #8
 800c31a:	d10b      	bne.n	800c334 <_strtol_l.isra.0+0x3c>
 800c31c:	2c2d      	cmp	r4, #45	; 0x2d
 800c31e:	d10b      	bne.n	800c338 <_strtol_l.isra.0+0x40>
 800c320:	782c      	ldrb	r4, [r5, #0]
 800c322:	2601      	movs	r6, #1
 800c324:	f10b 0502 	add.w	r5, fp, #2
 800c328:	b167      	cbz	r7, 800c344 <_strtol_l.isra.0+0x4c>
 800c32a:	2f10      	cmp	r7, #16
 800c32c:	d114      	bne.n	800c358 <_strtol_l.isra.0+0x60>
 800c32e:	2c30      	cmp	r4, #48	; 0x30
 800c330:	d00a      	beq.n	800c348 <_strtol_l.isra.0+0x50>
 800c332:	e011      	b.n	800c358 <_strtol_l.isra.0+0x60>
 800c334:	46ab      	mov	fp, r5
 800c336:	e7e6      	b.n	800c306 <_strtol_l.isra.0+0xe>
 800c338:	2c2b      	cmp	r4, #43	; 0x2b
 800c33a:	bf04      	itt	eq
 800c33c:	782c      	ldrbeq	r4, [r5, #0]
 800c33e:	f10b 0502 	addeq.w	r5, fp, #2
 800c342:	e7f1      	b.n	800c328 <_strtol_l.isra.0+0x30>
 800c344:	2c30      	cmp	r4, #48	; 0x30
 800c346:	d127      	bne.n	800c398 <_strtol_l.isra.0+0xa0>
 800c348:	782b      	ldrb	r3, [r5, #0]
 800c34a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c34e:	2b58      	cmp	r3, #88	; 0x58
 800c350:	d14b      	bne.n	800c3ea <_strtol_l.isra.0+0xf2>
 800c352:	786c      	ldrb	r4, [r5, #1]
 800c354:	2710      	movs	r7, #16
 800c356:	3502      	adds	r5, #2
 800c358:	2e00      	cmp	r6, #0
 800c35a:	bf0c      	ite	eq
 800c35c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c360:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c364:	2200      	movs	r2, #0
 800c366:	fbb1 fef7 	udiv	lr, r1, r7
 800c36a:	4610      	mov	r0, r2
 800c36c:	fb07 1c1e 	mls	ip, r7, lr, r1
 800c370:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c374:	2b09      	cmp	r3, #9
 800c376:	d811      	bhi.n	800c39c <_strtol_l.isra.0+0xa4>
 800c378:	461c      	mov	r4, r3
 800c37a:	42a7      	cmp	r7, r4
 800c37c:	dd1d      	ble.n	800c3ba <_strtol_l.isra.0+0xc2>
 800c37e:	1c53      	adds	r3, r2, #1
 800c380:	d007      	beq.n	800c392 <_strtol_l.isra.0+0x9a>
 800c382:	4586      	cmp	lr, r0
 800c384:	d316      	bcc.n	800c3b4 <_strtol_l.isra.0+0xbc>
 800c386:	d101      	bne.n	800c38c <_strtol_l.isra.0+0x94>
 800c388:	45a4      	cmp	ip, r4
 800c38a:	db13      	blt.n	800c3b4 <_strtol_l.isra.0+0xbc>
 800c38c:	fb00 4007 	mla	r0, r0, r7, r4
 800c390:	2201      	movs	r2, #1
 800c392:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c396:	e7eb      	b.n	800c370 <_strtol_l.isra.0+0x78>
 800c398:	270a      	movs	r7, #10
 800c39a:	e7dd      	b.n	800c358 <_strtol_l.isra.0+0x60>
 800c39c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c3a0:	2b19      	cmp	r3, #25
 800c3a2:	d801      	bhi.n	800c3a8 <_strtol_l.isra.0+0xb0>
 800c3a4:	3c37      	subs	r4, #55	; 0x37
 800c3a6:	e7e8      	b.n	800c37a <_strtol_l.isra.0+0x82>
 800c3a8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c3ac:	2b19      	cmp	r3, #25
 800c3ae:	d804      	bhi.n	800c3ba <_strtol_l.isra.0+0xc2>
 800c3b0:	3c57      	subs	r4, #87	; 0x57
 800c3b2:	e7e2      	b.n	800c37a <_strtol_l.isra.0+0x82>
 800c3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b8:	e7eb      	b.n	800c392 <_strtol_l.isra.0+0x9a>
 800c3ba:	1c53      	adds	r3, r2, #1
 800c3bc:	d108      	bne.n	800c3d0 <_strtol_l.isra.0+0xd8>
 800c3be:	2322      	movs	r3, #34	; 0x22
 800c3c0:	f8c8 3000 	str.w	r3, [r8]
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	f1ba 0f00 	cmp.w	sl, #0
 800c3ca:	d107      	bne.n	800c3dc <_strtol_l.isra.0+0xe4>
 800c3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	b106      	cbz	r6, 800c3d4 <_strtol_l.isra.0+0xdc>
 800c3d2:	4240      	negs	r0, r0
 800c3d4:	f1ba 0f00 	cmp.w	sl, #0
 800c3d8:	d00c      	beq.n	800c3f4 <_strtol_l.isra.0+0xfc>
 800c3da:	b122      	cbz	r2, 800c3e6 <_strtol_l.isra.0+0xee>
 800c3dc:	3d01      	subs	r5, #1
 800c3de:	f8ca 5000 	str.w	r5, [sl]
 800c3e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e6:	464d      	mov	r5, r9
 800c3e8:	e7f9      	b.n	800c3de <_strtol_l.isra.0+0xe6>
 800c3ea:	2430      	movs	r4, #48	; 0x30
 800c3ec:	2f00      	cmp	r7, #0
 800c3ee:	d1b3      	bne.n	800c358 <_strtol_l.isra.0+0x60>
 800c3f0:	2708      	movs	r7, #8
 800c3f2:	e7b1      	b.n	800c358 <_strtol_l.isra.0+0x60>
 800c3f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3f8 <_strtol_r>:
 800c3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3fa:	4c06      	ldr	r4, [pc, #24]	; (800c414 <_strtol_r+0x1c>)
 800c3fc:	4d06      	ldr	r5, [pc, #24]	; (800c418 <_strtol_r+0x20>)
 800c3fe:	6824      	ldr	r4, [r4, #0]
 800c400:	6a24      	ldr	r4, [r4, #32]
 800c402:	2c00      	cmp	r4, #0
 800c404:	bf08      	it	eq
 800c406:	462c      	moveq	r4, r5
 800c408:	9400      	str	r4, [sp, #0]
 800c40a:	f7ff ff75 	bl	800c2f8 <_strtol_l.isra.0>
 800c40e:	b003      	add	sp, #12
 800c410:	bd30      	pop	{r4, r5, pc}
 800c412:	bf00      	nop
 800c414:	200002a8 	.word	0x200002a8
 800c418:	2000030c 	.word	0x2000030c

0800c41c <_strtoul_l.isra.0>:
 800c41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c420:	4680      	mov	r8, r0
 800c422:	4689      	mov	r9, r1
 800c424:	4692      	mov	sl, r2
 800c426:	461e      	mov	r6, r3
 800c428:	460f      	mov	r7, r1
 800c42a:	463d      	mov	r5, r7
 800c42c:	9808      	ldr	r0, [sp, #32]
 800c42e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c432:	f000 f8be 	bl	800c5b2 <__locale_ctype_ptr_l>
 800c436:	4420      	add	r0, r4
 800c438:	7843      	ldrb	r3, [r0, #1]
 800c43a:	f013 0308 	ands.w	r3, r3, #8
 800c43e:	d10a      	bne.n	800c456 <_strtoul_l.isra.0+0x3a>
 800c440:	2c2d      	cmp	r4, #45	; 0x2d
 800c442:	d10a      	bne.n	800c45a <_strtoul_l.isra.0+0x3e>
 800c444:	782c      	ldrb	r4, [r5, #0]
 800c446:	2301      	movs	r3, #1
 800c448:	1cbd      	adds	r5, r7, #2
 800c44a:	b15e      	cbz	r6, 800c464 <_strtoul_l.isra.0+0x48>
 800c44c:	2e10      	cmp	r6, #16
 800c44e:	d113      	bne.n	800c478 <_strtoul_l.isra.0+0x5c>
 800c450:	2c30      	cmp	r4, #48	; 0x30
 800c452:	d009      	beq.n	800c468 <_strtoul_l.isra.0+0x4c>
 800c454:	e010      	b.n	800c478 <_strtoul_l.isra.0+0x5c>
 800c456:	462f      	mov	r7, r5
 800c458:	e7e7      	b.n	800c42a <_strtoul_l.isra.0+0xe>
 800c45a:	2c2b      	cmp	r4, #43	; 0x2b
 800c45c:	bf04      	itt	eq
 800c45e:	782c      	ldrbeq	r4, [r5, #0]
 800c460:	1cbd      	addeq	r5, r7, #2
 800c462:	e7f2      	b.n	800c44a <_strtoul_l.isra.0+0x2e>
 800c464:	2c30      	cmp	r4, #48	; 0x30
 800c466:	d125      	bne.n	800c4b4 <_strtoul_l.isra.0+0x98>
 800c468:	782a      	ldrb	r2, [r5, #0]
 800c46a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c46e:	2a58      	cmp	r2, #88	; 0x58
 800c470:	d14a      	bne.n	800c508 <_strtoul_l.isra.0+0xec>
 800c472:	786c      	ldrb	r4, [r5, #1]
 800c474:	2610      	movs	r6, #16
 800c476:	3502      	adds	r5, #2
 800c478:	f04f 31ff 	mov.w	r1, #4294967295
 800c47c:	2700      	movs	r7, #0
 800c47e:	fbb1 f1f6 	udiv	r1, r1, r6
 800c482:	fb06 fe01 	mul.w	lr, r6, r1
 800c486:	ea6f 0e0e 	mvn.w	lr, lr
 800c48a:	4638      	mov	r0, r7
 800c48c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c490:	2a09      	cmp	r2, #9
 800c492:	d811      	bhi.n	800c4b8 <_strtoul_l.isra.0+0x9c>
 800c494:	4614      	mov	r4, r2
 800c496:	42a6      	cmp	r6, r4
 800c498:	dd1d      	ble.n	800c4d6 <_strtoul_l.isra.0+0xba>
 800c49a:	2f00      	cmp	r7, #0
 800c49c:	db18      	blt.n	800c4d0 <_strtoul_l.isra.0+0xb4>
 800c49e:	4281      	cmp	r1, r0
 800c4a0:	d316      	bcc.n	800c4d0 <_strtoul_l.isra.0+0xb4>
 800c4a2:	d101      	bne.n	800c4a8 <_strtoul_l.isra.0+0x8c>
 800c4a4:	45a6      	cmp	lr, r4
 800c4a6:	db13      	blt.n	800c4d0 <_strtoul_l.isra.0+0xb4>
 800c4a8:	fb00 4006 	mla	r0, r0, r6, r4
 800c4ac:	2701      	movs	r7, #1
 800c4ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4b2:	e7eb      	b.n	800c48c <_strtoul_l.isra.0+0x70>
 800c4b4:	260a      	movs	r6, #10
 800c4b6:	e7df      	b.n	800c478 <_strtoul_l.isra.0+0x5c>
 800c4b8:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800c4bc:	2a19      	cmp	r2, #25
 800c4be:	d801      	bhi.n	800c4c4 <_strtoul_l.isra.0+0xa8>
 800c4c0:	3c37      	subs	r4, #55	; 0x37
 800c4c2:	e7e8      	b.n	800c496 <_strtoul_l.isra.0+0x7a>
 800c4c4:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800c4c8:	2a19      	cmp	r2, #25
 800c4ca:	d804      	bhi.n	800c4d6 <_strtoul_l.isra.0+0xba>
 800c4cc:	3c57      	subs	r4, #87	; 0x57
 800c4ce:	e7e2      	b.n	800c496 <_strtoul_l.isra.0+0x7a>
 800c4d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c4d4:	e7eb      	b.n	800c4ae <_strtoul_l.isra.0+0x92>
 800c4d6:	2f00      	cmp	r7, #0
 800c4d8:	da09      	bge.n	800c4ee <_strtoul_l.isra.0+0xd2>
 800c4da:	2322      	movs	r3, #34	; 0x22
 800c4dc:	f8c8 3000 	str.w	r3, [r8]
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e4:	f1ba 0f00 	cmp.w	sl, #0
 800c4e8:	d107      	bne.n	800c4fa <_strtoul_l.isra.0+0xde>
 800c4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ee:	b103      	cbz	r3, 800c4f2 <_strtoul_l.isra.0+0xd6>
 800c4f0:	4240      	negs	r0, r0
 800c4f2:	f1ba 0f00 	cmp.w	sl, #0
 800c4f6:	d00c      	beq.n	800c512 <_strtoul_l.isra.0+0xf6>
 800c4f8:	b127      	cbz	r7, 800c504 <_strtoul_l.isra.0+0xe8>
 800c4fa:	3d01      	subs	r5, #1
 800c4fc:	f8ca 5000 	str.w	r5, [sl]
 800c500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c504:	464d      	mov	r5, r9
 800c506:	e7f9      	b.n	800c4fc <_strtoul_l.isra.0+0xe0>
 800c508:	2430      	movs	r4, #48	; 0x30
 800c50a:	2e00      	cmp	r6, #0
 800c50c:	d1b4      	bne.n	800c478 <_strtoul_l.isra.0+0x5c>
 800c50e:	2608      	movs	r6, #8
 800c510:	e7b2      	b.n	800c478 <_strtoul_l.isra.0+0x5c>
 800c512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c518 <_strtoul_r>:
 800c518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c51a:	4c06      	ldr	r4, [pc, #24]	; (800c534 <_strtoul_r+0x1c>)
 800c51c:	4d06      	ldr	r5, [pc, #24]	; (800c538 <_strtoul_r+0x20>)
 800c51e:	6824      	ldr	r4, [r4, #0]
 800c520:	6a24      	ldr	r4, [r4, #32]
 800c522:	2c00      	cmp	r4, #0
 800c524:	bf08      	it	eq
 800c526:	462c      	moveq	r4, r5
 800c528:	9400      	str	r4, [sp, #0]
 800c52a:	f7ff ff77 	bl	800c41c <_strtoul_l.isra.0>
 800c52e:	b003      	add	sp, #12
 800c530:	bd30      	pop	{r4, r5, pc}
 800c532:	bf00      	nop
 800c534:	200002a8 	.word	0x200002a8
 800c538:	2000030c 	.word	0x2000030c

0800c53c <__submore>:
 800c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	460c      	mov	r4, r1
 800c542:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c548:	4299      	cmp	r1, r3
 800c54a:	d11e      	bne.n	800c58a <__submore+0x4e>
 800c54c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c550:	f7fe ffd4 	bl	800b4fc <_malloc_r>
 800c554:	b918      	cbnz	r0, 800c55e <__submore+0x22>
 800c556:	f04f 30ff 	mov.w	r0, #4294967295
 800c55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c562:	63a3      	str	r3, [r4, #56]	; 0x38
 800c564:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c568:	6360      	str	r0, [r4, #52]	; 0x34
 800c56a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c56e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c572:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c576:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c57a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c57e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c582:	6020      	str	r0, [r4, #0]
 800c584:	2000      	movs	r0, #0
 800c586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c58a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c58c:	0077      	lsls	r7, r6, #1
 800c58e:	463a      	mov	r2, r7
 800c590:	f000 f84c 	bl	800c62c <_realloc_r>
 800c594:	4605      	mov	r5, r0
 800c596:	2800      	cmp	r0, #0
 800c598:	d0dd      	beq.n	800c556 <__submore+0x1a>
 800c59a:	eb00 0806 	add.w	r8, r0, r6
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	f7fe ff48 	bl	800b438 <memcpy>
 800c5a8:	f8c4 8000 	str.w	r8, [r4]
 800c5ac:	6365      	str	r5, [r4, #52]	; 0x34
 800c5ae:	63a7      	str	r7, [r4, #56]	; 0x38
 800c5b0:	e7e8      	b.n	800c584 <__submore+0x48>

0800c5b2 <__locale_ctype_ptr_l>:
 800c5b2:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c5b6:	4770      	bx	lr

0800c5b8 <__locale_ctype_ptr>:
 800c5b8:	4b04      	ldr	r3, [pc, #16]	; (800c5cc <__locale_ctype_ptr+0x14>)
 800c5ba:	4a05      	ldr	r2, [pc, #20]	; (800c5d0 <__locale_ctype_ptr+0x18>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	bf08      	it	eq
 800c5c4:	4613      	moveq	r3, r2
 800c5c6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c5ca:	4770      	bx	lr
 800c5cc:	200002a8 	.word	0x200002a8
 800c5d0:	2000030c 	.word	0x2000030c

0800c5d4 <__ascii_mbtowc>:
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	b901      	cbnz	r1, 800c5da <__ascii_mbtowc+0x6>
 800c5d8:	a901      	add	r1, sp, #4
 800c5da:	b142      	cbz	r2, 800c5ee <__ascii_mbtowc+0x1a>
 800c5dc:	b14b      	cbz	r3, 800c5f2 <__ascii_mbtowc+0x1e>
 800c5de:	7813      	ldrb	r3, [r2, #0]
 800c5e0:	600b      	str	r3, [r1, #0]
 800c5e2:	7812      	ldrb	r2, [r2, #0]
 800c5e4:	1c10      	adds	r0, r2, #0
 800c5e6:	bf18      	it	ne
 800c5e8:	2001      	movne	r0, #1
 800c5ea:	b002      	add	sp, #8
 800c5ec:	4770      	bx	lr
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	e7fb      	b.n	800c5ea <__ascii_mbtowc+0x16>
 800c5f2:	f06f 0001 	mvn.w	r0, #1
 800c5f6:	e7f8      	b.n	800c5ea <__ascii_mbtowc+0x16>

0800c5f8 <memmove>:
 800c5f8:	4288      	cmp	r0, r1
 800c5fa:	b510      	push	{r4, lr}
 800c5fc:	eb01 0302 	add.w	r3, r1, r2
 800c600:	d803      	bhi.n	800c60a <memmove+0x12>
 800c602:	1e42      	subs	r2, r0, #1
 800c604:	4299      	cmp	r1, r3
 800c606:	d10c      	bne.n	800c622 <memmove+0x2a>
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	4298      	cmp	r0, r3
 800c60c:	d2f9      	bcs.n	800c602 <memmove+0xa>
 800c60e:	1881      	adds	r1, r0, r2
 800c610:	1ad2      	subs	r2, r2, r3
 800c612:	42d3      	cmn	r3, r2
 800c614:	d100      	bne.n	800c618 <memmove+0x20>
 800c616:	bd10      	pop	{r4, pc}
 800c618:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c61c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c620:	e7f7      	b.n	800c612 <memmove+0x1a>
 800c622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c626:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c62a:	e7eb      	b.n	800c604 <memmove+0xc>

0800c62c <_realloc_r>:
 800c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62e:	4607      	mov	r7, r0
 800c630:	4614      	mov	r4, r2
 800c632:	460e      	mov	r6, r1
 800c634:	b921      	cbnz	r1, 800c640 <_realloc_r+0x14>
 800c636:	4611      	mov	r1, r2
 800c638:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c63c:	f7fe bf5e 	b.w	800b4fc <_malloc_r>
 800c640:	b922      	cbnz	r2, 800c64c <_realloc_r+0x20>
 800c642:	f7fe ff0d 	bl	800b460 <_free_r>
 800c646:	4625      	mov	r5, r4
 800c648:	4628      	mov	r0, r5
 800c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c64c:	f000 f821 	bl	800c692 <_malloc_usable_size_r>
 800c650:	4284      	cmp	r4, r0
 800c652:	d90f      	bls.n	800c674 <_realloc_r+0x48>
 800c654:	4621      	mov	r1, r4
 800c656:	4638      	mov	r0, r7
 800c658:	f7fe ff50 	bl	800b4fc <_malloc_r>
 800c65c:	4605      	mov	r5, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	d0f2      	beq.n	800c648 <_realloc_r+0x1c>
 800c662:	4631      	mov	r1, r6
 800c664:	4622      	mov	r2, r4
 800c666:	f7fe fee7 	bl	800b438 <memcpy>
 800c66a:	4631      	mov	r1, r6
 800c66c:	4638      	mov	r0, r7
 800c66e:	f7fe fef7 	bl	800b460 <_free_r>
 800c672:	e7e9      	b.n	800c648 <_realloc_r+0x1c>
 800c674:	4635      	mov	r5, r6
 800c676:	e7e7      	b.n	800c648 <_realloc_r+0x1c>

0800c678 <__ascii_wctomb>:
 800c678:	b149      	cbz	r1, 800c68e <__ascii_wctomb+0x16>
 800c67a:	2aff      	cmp	r2, #255	; 0xff
 800c67c:	bf85      	ittet	hi
 800c67e:	238a      	movhi	r3, #138	; 0x8a
 800c680:	6003      	strhi	r3, [r0, #0]
 800c682:	700a      	strbls	r2, [r1, #0]
 800c684:	f04f 30ff 	movhi.w	r0, #4294967295
 800c688:	bf98      	it	ls
 800c68a:	2001      	movls	r0, #1
 800c68c:	4770      	bx	lr
 800c68e:	4608      	mov	r0, r1
 800c690:	4770      	bx	lr

0800c692 <_malloc_usable_size_r>:
 800c692:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c696:	2800      	cmp	r0, #0
 800c698:	f1a0 0004 	sub.w	r0, r0, #4
 800c69c:	bfbc      	itt	lt
 800c69e:	580b      	ldrlt	r3, [r1, r0]
 800c6a0:	18c0      	addlt	r0, r0, r3
 800c6a2:	4770      	bx	lr
 800c6a4:	0000      	movs	r0, r0
	...

0800c6a8 <atan>:
 800c6a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	ec55 4b10 	vmov	r4, r5, d0
 800c6b0:	4bc7      	ldr	r3, [pc, #796]	; (800c9d0 <atan+0x328>)
 800c6b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c6b6:	429e      	cmp	r6, r3
 800c6b8:	46ab      	mov	fp, r5
 800c6ba:	dd18      	ble.n	800c6ee <atan+0x46>
 800c6bc:	4ac5      	ldr	r2, [pc, #788]	; (800c9d4 <atan+0x32c>)
 800c6be:	4296      	cmp	r6, r2
 800c6c0:	dc01      	bgt.n	800c6c6 <atan+0x1e>
 800c6c2:	d109      	bne.n	800c6d8 <atan+0x30>
 800c6c4:	b144      	cbz	r4, 800c6d8 <atan+0x30>
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	f7f3 fddd 	bl	800028c <__adddf3>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	e006      	b.n	800c6e6 <atan+0x3e>
 800c6d8:	f1bb 0f00 	cmp.w	fp, #0
 800c6dc:	f300 813a 	bgt.w	800c954 <atan+0x2ac>
 800c6e0:	a59f      	add	r5, pc, #636	; (adr r5, 800c960 <atan+0x2b8>)
 800c6e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6e6:	ec45 4b10 	vmov	d0, r4, r5
 800c6ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	4bba      	ldr	r3, [pc, #744]	; (800c9d8 <atan+0x330>)
 800c6f0:	429e      	cmp	r6, r3
 800c6f2:	dc14      	bgt.n	800c71e <atan+0x76>
 800c6f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c6f8:	429e      	cmp	r6, r3
 800c6fa:	dc0d      	bgt.n	800c718 <atan+0x70>
 800c6fc:	a39a      	add	r3, pc, #616	; (adr r3, 800c968 <atan+0x2c0>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	ee10 0a10 	vmov	r0, s0
 800c706:	4629      	mov	r1, r5
 800c708:	f7f3 fdc0 	bl	800028c <__adddf3>
 800c70c:	2200      	movs	r2, #0
 800c70e:	4bb3      	ldr	r3, [pc, #716]	; (800c9dc <atan+0x334>)
 800c710:	f7f4 f9fe 	bl	8000b10 <__aeabi_dcmpgt>
 800c714:	2800      	cmp	r0, #0
 800c716:	d1e6      	bne.n	800c6e6 <atan+0x3e>
 800c718:	f04f 3aff 	mov.w	sl, #4294967295
 800c71c:	e02b      	b.n	800c776 <atan+0xce>
 800c71e:	f000 f9af 	bl	800ca80 <fabs>
 800c722:	4baf      	ldr	r3, [pc, #700]	; (800c9e0 <atan+0x338>)
 800c724:	429e      	cmp	r6, r3
 800c726:	ec55 4b10 	vmov	r4, r5, d0
 800c72a:	f300 80bf 	bgt.w	800c8ac <atan+0x204>
 800c72e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c732:	429e      	cmp	r6, r3
 800c734:	f300 80a0 	bgt.w	800c878 <atan+0x1d0>
 800c738:	ee10 2a10 	vmov	r2, s0
 800c73c:	ee10 0a10 	vmov	r0, s0
 800c740:	462b      	mov	r3, r5
 800c742:	4629      	mov	r1, r5
 800c744:	f7f3 fda2 	bl	800028c <__adddf3>
 800c748:	2200      	movs	r2, #0
 800c74a:	4ba4      	ldr	r3, [pc, #656]	; (800c9dc <atan+0x334>)
 800c74c:	f7f3 fd9c 	bl	8000288 <__aeabi_dsub>
 800c750:	2200      	movs	r2, #0
 800c752:	4606      	mov	r6, r0
 800c754:	460f      	mov	r7, r1
 800c756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c75a:	4620      	mov	r0, r4
 800c75c:	4629      	mov	r1, r5
 800c75e:	f7f3 fd95 	bl	800028c <__adddf3>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f4 f86b 	bl	8000844 <__aeabi_ddiv>
 800c76e:	f04f 0a00 	mov.w	sl, #0
 800c772:	4604      	mov	r4, r0
 800c774:	460d      	mov	r5, r1
 800c776:	4622      	mov	r2, r4
 800c778:	462b      	mov	r3, r5
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f3 ff37 	bl	80005f0 <__aeabi_dmul>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4680      	mov	r8, r0
 800c788:	4689      	mov	r9, r1
 800c78a:	f7f3 ff31 	bl	80005f0 <__aeabi_dmul>
 800c78e:	a378      	add	r3, pc, #480	; (adr r3, 800c970 <atan+0x2c8>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	4606      	mov	r6, r0
 800c796:	460f      	mov	r7, r1
 800c798:	f7f3 ff2a 	bl	80005f0 <__aeabi_dmul>
 800c79c:	a376      	add	r3, pc, #472	; (adr r3, 800c978 <atan+0x2d0>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 fd73 	bl	800028c <__adddf3>
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	f7f3 ff21 	bl	80005f0 <__aeabi_dmul>
 800c7ae:	a374      	add	r3, pc, #464	; (adr r3, 800c980 <atan+0x2d8>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f7f3 fd6a 	bl	800028c <__adddf3>
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	f7f3 ff18 	bl	80005f0 <__aeabi_dmul>
 800c7c0:	a371      	add	r3, pc, #452	; (adr r3, 800c988 <atan+0x2e0>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fd61 	bl	800028c <__adddf3>
 800c7ca:	4632      	mov	r2, r6
 800c7cc:	463b      	mov	r3, r7
 800c7ce:	f7f3 ff0f 	bl	80005f0 <__aeabi_dmul>
 800c7d2:	a36f      	add	r3, pc, #444	; (adr r3, 800c990 <atan+0x2e8>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f3 fd58 	bl	800028c <__adddf3>
 800c7dc:	4632      	mov	r2, r6
 800c7de:	463b      	mov	r3, r7
 800c7e0:	f7f3 ff06 	bl	80005f0 <__aeabi_dmul>
 800c7e4:	a36c      	add	r3, pc, #432	; (adr r3, 800c998 <atan+0x2f0>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 fd4f 	bl	800028c <__adddf3>
 800c7ee:	4642      	mov	r2, r8
 800c7f0:	464b      	mov	r3, r9
 800c7f2:	f7f3 fefd 	bl	80005f0 <__aeabi_dmul>
 800c7f6:	a36a      	add	r3, pc, #424	; (adr r3, 800c9a0 <atan+0x2f8>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	4689      	mov	r9, r1
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f3 fef4 	bl	80005f0 <__aeabi_dmul>
 800c808:	a367      	add	r3, pc, #412	; (adr r3, 800c9a8 <atan+0x300>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 fd3b 	bl	8000288 <__aeabi_dsub>
 800c812:	4632      	mov	r2, r6
 800c814:	463b      	mov	r3, r7
 800c816:	f7f3 feeb 	bl	80005f0 <__aeabi_dmul>
 800c81a:	a365      	add	r3, pc, #404	; (adr r3, 800c9b0 <atan+0x308>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fd32 	bl	8000288 <__aeabi_dsub>
 800c824:	4632      	mov	r2, r6
 800c826:	463b      	mov	r3, r7
 800c828:	f7f3 fee2 	bl	80005f0 <__aeabi_dmul>
 800c82c:	a362      	add	r3, pc, #392	; (adr r3, 800c9b8 <atan+0x310>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f7f3 fd29 	bl	8000288 <__aeabi_dsub>
 800c836:	4632      	mov	r2, r6
 800c838:	463b      	mov	r3, r7
 800c83a:	f7f3 fed9 	bl	80005f0 <__aeabi_dmul>
 800c83e:	a360      	add	r3, pc, #384	; (adr r3, 800c9c0 <atan+0x318>)
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	f7f3 fd20 	bl	8000288 <__aeabi_dsub>
 800c848:	4632      	mov	r2, r6
 800c84a:	463b      	mov	r3, r7
 800c84c:	f7f3 fed0 	bl	80005f0 <__aeabi_dmul>
 800c850:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	d155      	bne.n	800c906 <atan+0x25e>
 800c85a:	4640      	mov	r0, r8
 800c85c:	4649      	mov	r1, r9
 800c85e:	f7f3 fd15 	bl	800028c <__adddf3>
 800c862:	4622      	mov	r2, r4
 800c864:	462b      	mov	r3, r5
 800c866:	f7f3 fec3 	bl	80005f0 <__aeabi_dmul>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	4620      	mov	r0, r4
 800c870:	4629      	mov	r1, r5
 800c872:	f7f3 fd09 	bl	8000288 <__aeabi_dsub>
 800c876:	e72c      	b.n	800c6d2 <atan+0x2a>
 800c878:	ee10 0a10 	vmov	r0, s0
 800c87c:	2200      	movs	r2, #0
 800c87e:	4b57      	ldr	r3, [pc, #348]	; (800c9dc <atan+0x334>)
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 fd01 	bl	8000288 <__aeabi_dsub>
 800c886:	2200      	movs	r2, #0
 800c888:	4606      	mov	r6, r0
 800c88a:	460f      	mov	r7, r1
 800c88c:	4b53      	ldr	r3, [pc, #332]	; (800c9dc <atan+0x334>)
 800c88e:	4620      	mov	r0, r4
 800c890:	4629      	mov	r1, r5
 800c892:	f7f3 fcfb 	bl	800028c <__adddf3>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4630      	mov	r0, r6
 800c89c:	4639      	mov	r1, r7
 800c89e:	f7f3 ffd1 	bl	8000844 <__aeabi_ddiv>
 800c8a2:	f04f 0a01 	mov.w	sl, #1
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	e764      	b.n	800c776 <atan+0xce>
 800c8ac:	4b4d      	ldr	r3, [pc, #308]	; (800c9e4 <atan+0x33c>)
 800c8ae:	429e      	cmp	r6, r3
 800c8b0:	dc1d      	bgt.n	800c8ee <atan+0x246>
 800c8b2:	ee10 0a10 	vmov	r0, s0
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	4b4b      	ldr	r3, [pc, #300]	; (800c9e8 <atan+0x340>)
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fce4 	bl	8000288 <__aeabi_dsub>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	4b48      	ldr	r3, [pc, #288]	; (800c9e8 <atan+0x340>)
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f7f3 fe90 	bl	80005f0 <__aeabi_dmul>
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	4b42      	ldr	r3, [pc, #264]	; (800c9dc <atan+0x334>)
 800c8d4:	f7f3 fcda 	bl	800028c <__adddf3>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4630      	mov	r0, r6
 800c8de:	4639      	mov	r1, r7
 800c8e0:	f7f3 ffb0 	bl	8000844 <__aeabi_ddiv>
 800c8e4:	f04f 0a02 	mov.w	sl, #2
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	e743      	b.n	800c776 <atan+0xce>
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	ee10 2a10 	vmov	r2, s0
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	493d      	ldr	r1, [pc, #244]	; (800c9ec <atan+0x344>)
 800c8f8:	f7f3 ffa4 	bl	8000844 <__aeabi_ddiv>
 800c8fc:	f04f 0a03 	mov.w	sl, #3
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	e737      	b.n	800c776 <atan+0xce>
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f3 fcbf 	bl	800028c <__adddf3>
 800c90e:	4622      	mov	r2, r4
 800c910:	462b      	mov	r3, r5
 800c912:	f7f3 fe6d 	bl	80005f0 <__aeabi_dmul>
 800c916:	4e36      	ldr	r6, [pc, #216]	; (800c9f0 <atan+0x348>)
 800c918:	4b36      	ldr	r3, [pc, #216]	; (800c9f4 <atan+0x34c>)
 800c91a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c91e:	4456      	add	r6, sl
 800c920:	449a      	add	sl, r3
 800c922:	e9da 2300 	ldrd	r2, r3, [sl]
 800c926:	f7f3 fcaf 	bl	8000288 <__aeabi_dsub>
 800c92a:	4622      	mov	r2, r4
 800c92c:	462b      	mov	r3, r5
 800c92e:	f7f3 fcab 	bl	8000288 <__aeabi_dsub>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c93a:	f7f3 fca5 	bl	8000288 <__aeabi_dsub>
 800c93e:	f1bb 0f00 	cmp.w	fp, #0
 800c942:	4604      	mov	r4, r0
 800c944:	460d      	mov	r5, r1
 800c946:	f6bf aece 	bge.w	800c6e6 <atan+0x3e>
 800c94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c94e:	4604      	mov	r4, r0
 800c950:	461d      	mov	r5, r3
 800c952:	e6c8      	b.n	800c6e6 <atan+0x3e>
 800c954:	a51c      	add	r5, pc, #112	; (adr r5, 800c9c8 <atan+0x320>)
 800c956:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c95a:	e6c4      	b.n	800c6e6 <atan+0x3e>
 800c95c:	f3af 8000 	nop.w
 800c960:	54442d18 	.word	0x54442d18
 800c964:	bff921fb 	.word	0xbff921fb
 800c968:	8800759c 	.word	0x8800759c
 800c96c:	7e37e43c 	.word	0x7e37e43c
 800c970:	e322da11 	.word	0xe322da11
 800c974:	3f90ad3a 	.word	0x3f90ad3a
 800c978:	24760deb 	.word	0x24760deb
 800c97c:	3fa97b4b 	.word	0x3fa97b4b
 800c980:	a0d03d51 	.word	0xa0d03d51
 800c984:	3fb10d66 	.word	0x3fb10d66
 800c988:	c54c206e 	.word	0xc54c206e
 800c98c:	3fb745cd 	.word	0x3fb745cd
 800c990:	920083ff 	.word	0x920083ff
 800c994:	3fc24924 	.word	0x3fc24924
 800c998:	5555550d 	.word	0x5555550d
 800c99c:	3fd55555 	.word	0x3fd55555
 800c9a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c9a4:	bfa2b444 	.word	0xbfa2b444
 800c9a8:	52defd9a 	.word	0x52defd9a
 800c9ac:	3fadde2d 	.word	0x3fadde2d
 800c9b0:	af749a6d 	.word	0xaf749a6d
 800c9b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c9b8:	fe231671 	.word	0xfe231671
 800c9bc:	3fbc71c6 	.word	0x3fbc71c6
 800c9c0:	9998ebc4 	.word	0x9998ebc4
 800c9c4:	3fc99999 	.word	0x3fc99999
 800c9c8:	54442d18 	.word	0x54442d18
 800c9cc:	3ff921fb 	.word	0x3ff921fb
 800c9d0:	440fffff 	.word	0x440fffff
 800c9d4:	7ff00000 	.word	0x7ff00000
 800c9d8:	3fdbffff 	.word	0x3fdbffff
 800c9dc:	3ff00000 	.word	0x3ff00000
 800c9e0:	3ff2ffff 	.word	0x3ff2ffff
 800c9e4:	40037fff 	.word	0x40037fff
 800c9e8:	3ff80000 	.word	0x3ff80000
 800c9ec:	bff00000 	.word	0xbff00000
 800c9f0:	0800e670 	.word	0x0800e670
 800c9f4:	0800e690 	.word	0x0800e690

0800c9f8 <cos>:
 800c9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9fa:	ec51 0b10 	vmov	r0, r1, d0
 800c9fe:	4a1e      	ldr	r2, [pc, #120]	; (800ca78 <cos+0x80>)
 800ca00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca04:	4293      	cmp	r3, r2
 800ca06:	dc06      	bgt.n	800ca16 <cos+0x1e>
 800ca08:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ca70 <cos+0x78>
 800ca0c:	f000 fbb8 	bl	800d180 <__kernel_cos>
 800ca10:	ec51 0b10 	vmov	r0, r1, d0
 800ca14:	e007      	b.n	800ca26 <cos+0x2e>
 800ca16:	4a19      	ldr	r2, [pc, #100]	; (800ca7c <cos+0x84>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	dd09      	ble.n	800ca30 <cos+0x38>
 800ca1c:	ee10 2a10 	vmov	r2, s0
 800ca20:	460b      	mov	r3, r1
 800ca22:	f7f3 fc31 	bl	8000288 <__aeabi_dsub>
 800ca26:	ec41 0b10 	vmov	d0, r0, r1
 800ca2a:	b005      	add	sp, #20
 800ca2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca30:	4668      	mov	r0, sp
 800ca32:	f000 f901 	bl	800cc38 <__ieee754_rem_pio2>
 800ca36:	f000 0003 	and.w	r0, r0, #3
 800ca3a:	2801      	cmp	r0, #1
 800ca3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca40:	ed9d 0b00 	vldr	d0, [sp]
 800ca44:	d007      	beq.n	800ca56 <cos+0x5e>
 800ca46:	2802      	cmp	r0, #2
 800ca48:	d00e      	beq.n	800ca68 <cos+0x70>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d0de      	beq.n	800ca0c <cos+0x14>
 800ca4e:	2001      	movs	r0, #1
 800ca50:	f000 ffce 	bl	800d9f0 <__kernel_sin>
 800ca54:	e7dc      	b.n	800ca10 <cos+0x18>
 800ca56:	f000 ffcb 	bl	800d9f0 <__kernel_sin>
 800ca5a:	ec53 2b10 	vmov	r2, r3, d0
 800ca5e:	ee10 0a10 	vmov	r0, s0
 800ca62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ca66:	e7de      	b.n	800ca26 <cos+0x2e>
 800ca68:	f000 fb8a 	bl	800d180 <__kernel_cos>
 800ca6c:	e7f5      	b.n	800ca5a <cos+0x62>
 800ca6e:	bf00      	nop
	...
 800ca78:	3fe921fb 	.word	0x3fe921fb
 800ca7c:	7fefffff 	.word	0x7fefffff

0800ca80 <fabs>:
 800ca80:	ec53 2b10 	vmov	r2, r3, d0
 800ca84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca88:	ec43 2b10 	vmov	d0, r2, r3
 800ca8c:	4770      	bx	lr
	...

0800ca90 <sin>:
 800ca90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca92:	ec51 0b10 	vmov	r0, r1, d0
 800ca96:	4a20      	ldr	r2, [pc, #128]	; (800cb18 <sin+0x88>)
 800ca98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	dc07      	bgt.n	800cab0 <sin+0x20>
 800caa0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800cb10 <sin+0x80>
 800caa4:	2000      	movs	r0, #0
 800caa6:	f000 ffa3 	bl	800d9f0 <__kernel_sin>
 800caaa:	ec51 0b10 	vmov	r0, r1, d0
 800caae:	e007      	b.n	800cac0 <sin+0x30>
 800cab0:	4a1a      	ldr	r2, [pc, #104]	; (800cb1c <sin+0x8c>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	dd09      	ble.n	800caca <sin+0x3a>
 800cab6:	ee10 2a10 	vmov	r2, s0
 800caba:	460b      	mov	r3, r1
 800cabc:	f7f3 fbe4 	bl	8000288 <__aeabi_dsub>
 800cac0:	ec41 0b10 	vmov	d0, r0, r1
 800cac4:	b005      	add	sp, #20
 800cac6:	f85d fb04 	ldr.w	pc, [sp], #4
 800caca:	4668      	mov	r0, sp
 800cacc:	f000 f8b4 	bl	800cc38 <__ieee754_rem_pio2>
 800cad0:	f000 0003 	and.w	r0, r0, #3
 800cad4:	2801      	cmp	r0, #1
 800cad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cada:	ed9d 0b00 	vldr	d0, [sp]
 800cade:	d004      	beq.n	800caea <sin+0x5a>
 800cae0:	2802      	cmp	r0, #2
 800cae2:	d005      	beq.n	800caf0 <sin+0x60>
 800cae4:	b970      	cbnz	r0, 800cb04 <sin+0x74>
 800cae6:	2001      	movs	r0, #1
 800cae8:	e7dd      	b.n	800caa6 <sin+0x16>
 800caea:	f000 fb49 	bl	800d180 <__kernel_cos>
 800caee:	e7dc      	b.n	800caaa <sin+0x1a>
 800caf0:	2001      	movs	r0, #1
 800caf2:	f000 ff7d 	bl	800d9f0 <__kernel_sin>
 800caf6:	ec53 2b10 	vmov	r2, r3, d0
 800cafa:	ee10 0a10 	vmov	r0, s0
 800cafe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cb02:	e7dd      	b.n	800cac0 <sin+0x30>
 800cb04:	f000 fb3c 	bl	800d180 <__kernel_cos>
 800cb08:	e7f5      	b.n	800caf6 <sin+0x66>
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w
	...
 800cb18:	3fe921fb 	.word	0x3fe921fb
 800cb1c:	7fefffff 	.word	0x7fefffff

0800cb20 <tan>:
 800cb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb22:	ec51 0b10 	vmov	r0, r1, d0
 800cb26:	4a14      	ldr	r2, [pc, #80]	; (800cb78 <tan+0x58>)
 800cb28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	dc05      	bgt.n	800cb3c <tan+0x1c>
 800cb30:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800cb70 <tan+0x50>
 800cb34:	2001      	movs	r0, #1
 800cb36:	f001 f817 	bl	800db68 <__kernel_tan>
 800cb3a:	e009      	b.n	800cb50 <tan+0x30>
 800cb3c:	4a0f      	ldr	r2, [pc, #60]	; (800cb7c <tan+0x5c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	dd09      	ble.n	800cb56 <tan+0x36>
 800cb42:	ee10 2a10 	vmov	r2, s0
 800cb46:	460b      	mov	r3, r1
 800cb48:	f7f3 fb9e 	bl	8000288 <__aeabi_dsub>
 800cb4c:	ec41 0b10 	vmov	d0, r0, r1
 800cb50:	b005      	add	sp, #20
 800cb52:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb56:	4668      	mov	r0, sp
 800cb58:	f000 f86e 	bl	800cc38 <__ieee754_rem_pio2>
 800cb5c:	0040      	lsls	r0, r0, #1
 800cb5e:	f000 0002 	and.w	r0, r0, #2
 800cb62:	f1c0 0001 	rsb	r0, r0, #1
 800cb66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb6a:	ed9d 0b00 	vldr	d0, [sp]
 800cb6e:	e7e2      	b.n	800cb36 <tan+0x16>
	...
 800cb78:	3fe921fb 	.word	0x3fe921fb
 800cb7c:	7fefffff 	.word	0x7fefffff

0800cb80 <sqrt>:
 800cb80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb84:	ed2d 8b02 	vpush	{d8}
 800cb88:	b08b      	sub	sp, #44	; 0x2c
 800cb8a:	ec55 4b10 	vmov	r4, r5, d0
 800cb8e:	f000 fa45 	bl	800d01c <__ieee754_sqrt>
 800cb92:	4b26      	ldr	r3, [pc, #152]	; (800cc2c <sqrt+0xac>)
 800cb94:	eeb0 8a40 	vmov.f32	s16, s0
 800cb98:	eef0 8a60 	vmov.f32	s17, s1
 800cb9c:	f993 6000 	ldrsb.w	r6, [r3]
 800cba0:	1c73      	adds	r3, r6, #1
 800cba2:	d02a      	beq.n	800cbfa <sqrt+0x7a>
 800cba4:	4622      	mov	r2, r4
 800cba6:	462b      	mov	r3, r5
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	f7f3 ffba 	bl	8000b24 <__aeabi_dcmpun>
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	bb10      	cbnz	r0, 800cbfa <sqrt+0x7a>
 800cbb4:	f04f 0800 	mov.w	r8, #0
 800cbb8:	f04f 0900 	mov.w	r9, #0
 800cbbc:	4642      	mov	r2, r8
 800cbbe:	464b      	mov	r3, r9
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	f7f3 ff86 	bl	8000ad4 <__aeabi_dcmplt>
 800cbc8:	b1b8      	cbz	r0, 800cbfa <sqrt+0x7a>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	4b18      	ldr	r3, [pc, #96]	; (800cc30 <sqrt+0xb0>)
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	9708      	str	r7, [sp, #32]
 800cbd4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cbd8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cbdc:	b9b6      	cbnz	r6, 800cc0c <sqrt+0x8c>
 800cbde:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800cbe2:	4668      	mov	r0, sp
 800cbe4:	f001 fa14 	bl	800e010 <matherr>
 800cbe8:	b1d0      	cbz	r0, 800cc20 <sqrt+0xa0>
 800cbea:	9b08      	ldr	r3, [sp, #32]
 800cbec:	b11b      	cbz	r3, 800cbf6 <sqrt+0x76>
 800cbee:	f001 fa9b 	bl	800e128 <__errno>
 800cbf2:	9b08      	ldr	r3, [sp, #32]
 800cbf4:	6003      	str	r3, [r0, #0]
 800cbf6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cbfa:	eeb0 0a48 	vmov.f32	s0, s16
 800cbfe:	eef0 0a68 	vmov.f32	s1, s17
 800cc02:	b00b      	add	sp, #44	; 0x2c
 800cc04:	ecbd 8b02 	vpop	{d8}
 800cc08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc0c:	4642      	mov	r2, r8
 800cc0e:	464b      	mov	r3, r9
 800cc10:	4640      	mov	r0, r8
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7f3 fe16 	bl	8000844 <__aeabi_ddiv>
 800cc18:	2e02      	cmp	r6, #2
 800cc1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc1e:	d1e0      	bne.n	800cbe2 <sqrt+0x62>
 800cc20:	f001 fa82 	bl	800e128 <__errno>
 800cc24:	2321      	movs	r3, #33	; 0x21
 800cc26:	6003      	str	r3, [r0, #0]
 800cc28:	e7df      	b.n	800cbea <sqrt+0x6a>
 800cc2a:	bf00      	nop
 800cc2c:	20000478 	.word	0x20000478
 800cc30:	0800e6b0 	.word	0x0800e6b0
 800cc34:	00000000 	.word	0x00000000

0800cc38 <__ieee754_rem_pio2>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	ec57 6b10 	vmov	r6, r7, d0
 800cc40:	4bc3      	ldr	r3, [pc, #780]	; (800cf50 <__ieee754_rem_pio2+0x318>)
 800cc42:	b08d      	sub	sp, #52	; 0x34
 800cc44:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cc48:	4598      	cmp	r8, r3
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	9704      	str	r7, [sp, #16]
 800cc4e:	dc07      	bgt.n	800cc60 <__ieee754_rem_pio2+0x28>
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	ed84 0b00 	vstr	d0, [r4]
 800cc58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	e027      	b.n	800ccb0 <__ieee754_rem_pio2+0x78>
 800cc60:	4bbc      	ldr	r3, [pc, #752]	; (800cf54 <__ieee754_rem_pio2+0x31c>)
 800cc62:	4598      	cmp	r8, r3
 800cc64:	dc75      	bgt.n	800cd52 <__ieee754_rem_pio2+0x11a>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	4dbb      	ldr	r5, [pc, #748]	; (800cf58 <__ieee754_rem_pio2+0x320>)
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	ee10 0a10 	vmov	r0, s0
 800cc70:	a3a9      	add	r3, pc, #676	; (adr r3, 800cf18 <__ieee754_rem_pio2+0x2e0>)
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	4639      	mov	r1, r7
 800cc78:	dd36      	ble.n	800cce8 <__ieee754_rem_pio2+0xb0>
 800cc7a:	f7f3 fb05 	bl	8000288 <__aeabi_dsub>
 800cc7e:	45a8      	cmp	r8, r5
 800cc80:	4606      	mov	r6, r0
 800cc82:	460f      	mov	r7, r1
 800cc84:	d018      	beq.n	800ccb8 <__ieee754_rem_pio2+0x80>
 800cc86:	a3a6      	add	r3, pc, #664	; (adr r3, 800cf20 <__ieee754_rem_pio2+0x2e8>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f7f3 fafc 	bl	8000288 <__aeabi_dsub>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	e9c4 2300 	strd	r2, r3, [r4]
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 faf4 	bl	8000288 <__aeabi_dsub>
 800cca0:	a39f      	add	r3, pc, #636	; (adr r3, 800cf20 <__ieee754_rem_pio2+0x2e8>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f3 faef 	bl	8000288 <__aeabi_dsub>
 800ccaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ccae:	2501      	movs	r5, #1
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	b00d      	add	sp, #52	; 0x34
 800ccb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb8:	a39b      	add	r3, pc, #620	; (adr r3, 800cf28 <__ieee754_rem_pio2+0x2f0>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fae3 	bl	8000288 <__aeabi_dsub>
 800ccc2:	a39b      	add	r3, pc, #620	; (adr r3, 800cf30 <__ieee754_rem_pio2+0x2f8>)
 800ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc8:	4606      	mov	r6, r0
 800ccca:	460f      	mov	r7, r1
 800cccc:	f7f3 fadc 	bl	8000288 <__aeabi_dsub>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	e9c4 2300 	strd	r2, r3, [r4]
 800ccd8:	4630      	mov	r0, r6
 800ccda:	4639      	mov	r1, r7
 800ccdc:	f7f3 fad4 	bl	8000288 <__aeabi_dsub>
 800cce0:	a393      	add	r3, pc, #588	; (adr r3, 800cf30 <__ieee754_rem_pio2+0x2f8>)
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	e7de      	b.n	800cca6 <__ieee754_rem_pio2+0x6e>
 800cce8:	f7f3 fad0 	bl	800028c <__adddf3>
 800ccec:	45a8      	cmp	r8, r5
 800ccee:	4606      	mov	r6, r0
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	d016      	beq.n	800cd22 <__ieee754_rem_pio2+0xea>
 800ccf4:	a38a      	add	r3, pc, #552	; (adr r3, 800cf20 <__ieee754_rem_pio2+0x2e8>)
 800ccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfa:	f7f3 fac7 	bl	800028c <__adddf3>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	e9c4 2300 	strd	r2, r3, [r4]
 800cd06:	4630      	mov	r0, r6
 800cd08:	4639      	mov	r1, r7
 800cd0a:	f7f3 fabd 	bl	8000288 <__aeabi_dsub>
 800cd0e:	a384      	add	r3, pc, #528	; (adr r3, 800cf20 <__ieee754_rem_pio2+0x2e8>)
 800cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd14:	f7f3 faba 	bl	800028c <__adddf3>
 800cd18:	f04f 35ff 	mov.w	r5, #4294967295
 800cd1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd20:	e7c6      	b.n	800ccb0 <__ieee754_rem_pio2+0x78>
 800cd22:	a381      	add	r3, pc, #516	; (adr r3, 800cf28 <__ieee754_rem_pio2+0x2f0>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fab0 	bl	800028c <__adddf3>
 800cd2c:	a380      	add	r3, pc, #512	; (adr r3, 800cf30 <__ieee754_rem_pio2+0x2f8>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	4606      	mov	r6, r0
 800cd34:	460f      	mov	r7, r1
 800cd36:	f7f3 faa9 	bl	800028c <__adddf3>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	e9c4 2300 	strd	r2, r3, [r4]
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fa9f 	bl	8000288 <__aeabi_dsub>
 800cd4a:	a379      	add	r3, pc, #484	; (adr r3, 800cf30 <__ieee754_rem_pio2+0x2f8>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	e7e0      	b.n	800cd14 <__ieee754_rem_pio2+0xdc>
 800cd52:	4b82      	ldr	r3, [pc, #520]	; (800cf5c <__ieee754_rem_pio2+0x324>)
 800cd54:	4598      	cmp	r8, r3
 800cd56:	f300 80d0 	bgt.w	800cefa <__ieee754_rem_pio2+0x2c2>
 800cd5a:	f7ff fe91 	bl	800ca80 <fabs>
 800cd5e:	ec57 6b10 	vmov	r6, r7, d0
 800cd62:	ee10 0a10 	vmov	r0, s0
 800cd66:	a374      	add	r3, pc, #464	; (adr r3, 800cf38 <__ieee754_rem_pio2+0x300>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fc3f 	bl	80005f0 <__aeabi_dmul>
 800cd72:	2200      	movs	r2, #0
 800cd74:	4b7a      	ldr	r3, [pc, #488]	; (800cf60 <__ieee754_rem_pio2+0x328>)
 800cd76:	f7f3 fa89 	bl	800028c <__adddf3>
 800cd7a:	f7f3 fee9 	bl	8000b50 <__aeabi_d2iz>
 800cd7e:	4605      	mov	r5, r0
 800cd80:	f7f3 fbd0 	bl	8000524 <__aeabi_i2d>
 800cd84:	a364      	add	r3, pc, #400	; (adr r3, 800cf18 <__ieee754_rem_pio2+0x2e0>)
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd8e:	f7f3 fc2f 	bl	80005f0 <__aeabi_dmul>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fa75 	bl	8000288 <__aeabi_dsub>
 800cd9e:	a360      	add	r3, pc, #384	; (adr r3, 800cf20 <__ieee754_rem_pio2+0x2e8>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	4682      	mov	sl, r0
 800cda6:	468b      	mov	fp, r1
 800cda8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdac:	f7f3 fc20 	bl	80005f0 <__aeabi_dmul>
 800cdb0:	2d1f      	cmp	r5, #31
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460f      	mov	r7, r1
 800cdb6:	dc2a      	bgt.n	800ce0e <__ieee754_rem_pio2+0x1d6>
 800cdb8:	1e6a      	subs	r2, r5, #1
 800cdba:	4b6a      	ldr	r3, [pc, #424]	; (800cf64 <__ieee754_rem_pio2+0x32c>)
 800cdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc0:	4598      	cmp	r8, r3
 800cdc2:	d024      	beq.n	800ce0e <__ieee754_rem_pio2+0x1d6>
 800cdc4:	4632      	mov	r2, r6
 800cdc6:	463b      	mov	r3, r7
 800cdc8:	4650      	mov	r0, sl
 800cdca:	4659      	mov	r1, fp
 800cdcc:	f7f3 fa5c 	bl	8000288 <__aeabi_dsub>
 800cdd0:	e9c4 0100 	strd	r0, r1, [r4]
 800cdd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cdd8:	4650      	mov	r0, sl
 800cdda:	4642      	mov	r2, r8
 800cddc:	464b      	mov	r3, r9
 800cdde:	4659      	mov	r1, fp
 800cde0:	f7f3 fa52 	bl	8000288 <__aeabi_dsub>
 800cde4:	463b      	mov	r3, r7
 800cde6:	4632      	mov	r2, r6
 800cde8:	f7f3 fa4e 	bl	8000288 <__aeabi_dsub>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cdf4:	f6bf af5c 	bge.w	800ccb0 <__ieee754_rem_pio2+0x78>
 800cdf8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cdfc:	6063      	str	r3, [r4, #4]
 800cdfe:	f8c4 8000 	str.w	r8, [r4]
 800ce02:	60a0      	str	r0, [r4, #8]
 800ce04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce08:	60e3      	str	r3, [r4, #12]
 800ce0a:	426d      	negs	r5, r5
 800ce0c:	e750      	b.n	800ccb0 <__ieee754_rem_pio2+0x78>
 800ce0e:	4632      	mov	r2, r6
 800ce10:	463b      	mov	r3, r7
 800ce12:	4650      	mov	r0, sl
 800ce14:	4659      	mov	r1, fp
 800ce16:	f7f3 fa37 	bl	8000288 <__aeabi_dsub>
 800ce1a:	ea4f 5228 	mov.w	r2, r8, asr #20
 800ce1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b10      	cmp	r3, #16
 800ce26:	e9c4 0100 	strd	r0, r1, [r4]
 800ce2a:	9205      	str	r2, [sp, #20]
 800ce2c:	ddd2      	ble.n	800cdd4 <__ieee754_rem_pio2+0x19c>
 800ce2e:	a33e      	add	r3, pc, #248	; (adr r3, 800cf28 <__ieee754_rem_pio2+0x2f0>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce38:	f7f3 fbda 	bl	80005f0 <__aeabi_dmul>
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	460f      	mov	r7, r1
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	4650      	mov	r0, sl
 800ce46:	4659      	mov	r1, fp
 800ce48:	f7f3 fa1e 	bl	8000288 <__aeabi_dsub>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	4680      	mov	r8, r0
 800ce52:	4689      	mov	r9, r1
 800ce54:	4650      	mov	r0, sl
 800ce56:	4659      	mov	r1, fp
 800ce58:	f7f3 fa16 	bl	8000288 <__aeabi_dsub>
 800ce5c:	4632      	mov	r2, r6
 800ce5e:	463b      	mov	r3, r7
 800ce60:	f7f3 fa12 	bl	8000288 <__aeabi_dsub>
 800ce64:	a332      	add	r3, pc, #200	; (adr r3, 800cf30 <__ieee754_rem_pio2+0x2f8>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460f      	mov	r7, r1
 800ce6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce72:	f7f3 fbbd 	bl	80005f0 <__aeabi_dmul>
 800ce76:	4632      	mov	r2, r6
 800ce78:	463b      	mov	r3, r7
 800ce7a:	f7f3 fa05 	bl	8000288 <__aeabi_dsub>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	4606      	mov	r6, r0
 800ce84:	460f      	mov	r7, r1
 800ce86:	4640      	mov	r0, r8
 800ce88:	4649      	mov	r1, r9
 800ce8a:	f7f3 f9fd 	bl	8000288 <__aeabi_dsub>
 800ce8e:	9a05      	ldr	r2, [sp, #20]
 800ce90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	2b31      	cmp	r3, #49	; 0x31
 800ce98:	e9c4 0100 	strd	r0, r1, [r4]
 800ce9c:	dd2a      	ble.n	800cef4 <__ieee754_rem_pio2+0x2bc>
 800ce9e:	a328      	add	r3, pc, #160	; (adr r3, 800cf40 <__ieee754_rem_pio2+0x308>)
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cea8:	f7f3 fba2 	bl	80005f0 <__aeabi_dmul>
 800ceac:	4606      	mov	r6, r0
 800ceae:	460f      	mov	r7, r1
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 f9e6 	bl	8000288 <__aeabi_dsub>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4682      	mov	sl, r0
 800cec2:	468b      	mov	fp, r1
 800cec4:	4640      	mov	r0, r8
 800cec6:	4649      	mov	r1, r9
 800cec8:	f7f3 f9de 	bl	8000288 <__aeabi_dsub>
 800cecc:	4632      	mov	r2, r6
 800cece:	463b      	mov	r3, r7
 800ced0:	f7f3 f9da 	bl	8000288 <__aeabi_dsub>
 800ced4:	a31c      	add	r3, pc, #112	; (adr r3, 800cf48 <__ieee754_rem_pio2+0x310>)
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cee2:	f7f3 fb85 	bl	80005f0 <__aeabi_dmul>
 800cee6:	4632      	mov	r2, r6
 800cee8:	463b      	mov	r3, r7
 800ceea:	f7f3 f9cd 	bl	8000288 <__aeabi_dsub>
 800ceee:	4606      	mov	r6, r0
 800cef0:	460f      	mov	r7, r1
 800cef2:	e767      	b.n	800cdc4 <__ieee754_rem_pio2+0x18c>
 800cef4:	46c2      	mov	sl, r8
 800cef6:	46cb      	mov	fp, r9
 800cef8:	e76c      	b.n	800cdd4 <__ieee754_rem_pio2+0x19c>
 800cefa:	4b1b      	ldr	r3, [pc, #108]	; (800cf68 <__ieee754_rem_pio2+0x330>)
 800cefc:	4598      	cmp	r8, r3
 800cefe:	dd35      	ble.n	800cf6c <__ieee754_rem_pio2+0x334>
 800cf00:	ee10 2a10 	vmov	r2, s0
 800cf04:	463b      	mov	r3, r7
 800cf06:	4630      	mov	r0, r6
 800cf08:	4639      	mov	r1, r7
 800cf0a:	f7f3 f9bd 	bl	8000288 <__aeabi_dsub>
 800cf0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf12:	e9c4 0100 	strd	r0, r1, [r4]
 800cf16:	e6a1      	b.n	800cc5c <__ieee754_rem_pio2+0x24>
 800cf18:	54400000 	.word	0x54400000
 800cf1c:	3ff921fb 	.word	0x3ff921fb
 800cf20:	1a626331 	.word	0x1a626331
 800cf24:	3dd0b461 	.word	0x3dd0b461
 800cf28:	1a600000 	.word	0x1a600000
 800cf2c:	3dd0b461 	.word	0x3dd0b461
 800cf30:	2e037073 	.word	0x2e037073
 800cf34:	3ba3198a 	.word	0x3ba3198a
 800cf38:	6dc9c883 	.word	0x6dc9c883
 800cf3c:	3fe45f30 	.word	0x3fe45f30
 800cf40:	2e000000 	.word	0x2e000000
 800cf44:	3ba3198a 	.word	0x3ba3198a
 800cf48:	252049c1 	.word	0x252049c1
 800cf4c:	397b839a 	.word	0x397b839a
 800cf50:	3fe921fb 	.word	0x3fe921fb
 800cf54:	4002d97b 	.word	0x4002d97b
 800cf58:	3ff921fb 	.word	0x3ff921fb
 800cf5c:	413921fb 	.word	0x413921fb
 800cf60:	3fe00000 	.word	0x3fe00000
 800cf64:	0800e6b8 	.word	0x0800e6b8
 800cf68:	7fefffff 	.word	0x7fefffff
 800cf6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cf70:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cf74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cf78:	4630      	mov	r0, r6
 800cf7a:	460f      	mov	r7, r1
 800cf7c:	f7f3 fde8 	bl	8000b50 <__aeabi_d2iz>
 800cf80:	f7f3 fad0 	bl	8000524 <__aeabi_i2d>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4630      	mov	r0, r6
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf90:	f7f3 f97a 	bl	8000288 <__aeabi_dsub>
 800cf94:	2200      	movs	r2, #0
 800cf96:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <__ieee754_rem_pio2+0x3dc>)
 800cf98:	f7f3 fb2a 	bl	80005f0 <__aeabi_dmul>
 800cf9c:	460f      	mov	r7, r1
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	f7f3 fdd6 	bl	8000b50 <__aeabi_d2iz>
 800cfa4:	f7f3 fabe 	bl	8000524 <__aeabi_i2d>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4630      	mov	r0, r6
 800cfae:	4639      	mov	r1, r7
 800cfb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfb4:	f7f3 f968 	bl	8000288 <__aeabi_dsub>
 800cfb8:	2200      	movs	r2, #0
 800cfba:	4b16      	ldr	r3, [pc, #88]	; (800d014 <__ieee754_rem_pio2+0x3dc>)
 800cfbc:	f7f3 fb18 	bl	80005f0 <__aeabi_dmul>
 800cfc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cfc4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800cfc8:	f04f 0803 	mov.w	r8, #3
 800cfcc:	2600      	movs	r6, #0
 800cfce:	2700      	movs	r7, #0
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	463b      	mov	r3, r7
 800cfd4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cfd8:	f108 3aff 	add.w	sl, r8, #4294967295
 800cfdc:	f7f3 fd70 	bl	8000ac0 <__aeabi_dcmpeq>
 800cfe0:	b9b0      	cbnz	r0, 800d010 <__ieee754_rem_pio2+0x3d8>
 800cfe2:	4b0d      	ldr	r3, [pc, #52]	; (800d018 <__ieee754_rem_pio2+0x3e0>)
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	2302      	movs	r3, #2
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4643      	mov	r3, r8
 800cfee:	4621      	mov	r1, r4
 800cff0:	a806      	add	r0, sp, #24
 800cff2:	f000 f9ad 	bl	800d350 <__kernel_rem_pio2>
 800cff6:	9b04      	ldr	r3, [sp, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	4605      	mov	r5, r0
 800cffc:	f6bf ae58 	bge.w	800ccb0 <__ieee754_rem_pio2+0x78>
 800d000:	6863      	ldr	r3, [r4, #4]
 800d002:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d006:	6063      	str	r3, [r4, #4]
 800d008:	68e3      	ldr	r3, [r4, #12]
 800d00a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d00e:	e6fb      	b.n	800ce08 <__ieee754_rem_pio2+0x1d0>
 800d010:	46d0      	mov	r8, sl
 800d012:	e7dd      	b.n	800cfd0 <__ieee754_rem_pio2+0x398>
 800d014:	41700000 	.word	0x41700000
 800d018:	0800e738 	.word	0x0800e738

0800d01c <__ieee754_sqrt>:
 800d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d020:	ec55 4b10 	vmov	r4, r5, d0
 800d024:	4e54      	ldr	r6, [pc, #336]	; (800d178 <__ieee754_sqrt+0x15c>)
 800d026:	43ae      	bics	r6, r5
 800d028:	ee10 0a10 	vmov	r0, s0
 800d02c:	462b      	mov	r3, r5
 800d02e:	462a      	mov	r2, r5
 800d030:	4621      	mov	r1, r4
 800d032:	d113      	bne.n	800d05c <__ieee754_sqrt+0x40>
 800d034:	ee10 2a10 	vmov	r2, s0
 800d038:	462b      	mov	r3, r5
 800d03a:	ee10 0a10 	vmov	r0, s0
 800d03e:	4629      	mov	r1, r5
 800d040:	f7f3 fad6 	bl	80005f0 <__aeabi_dmul>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4620      	mov	r0, r4
 800d04a:	4629      	mov	r1, r5
 800d04c:	f7f3 f91e 	bl	800028c <__adddf3>
 800d050:	4604      	mov	r4, r0
 800d052:	460d      	mov	r5, r1
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d05c:	2d00      	cmp	r5, #0
 800d05e:	dc10      	bgt.n	800d082 <__ieee754_sqrt+0x66>
 800d060:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d064:	4330      	orrs	r0, r6
 800d066:	d0f5      	beq.n	800d054 <__ieee754_sqrt+0x38>
 800d068:	b15d      	cbz	r5, 800d082 <__ieee754_sqrt+0x66>
 800d06a:	ee10 2a10 	vmov	r2, s0
 800d06e:	462b      	mov	r3, r5
 800d070:	4620      	mov	r0, r4
 800d072:	4629      	mov	r1, r5
 800d074:	f7f3 f908 	bl	8000288 <__aeabi_dsub>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	f7f3 fbe2 	bl	8000844 <__aeabi_ddiv>
 800d080:	e7e6      	b.n	800d050 <__ieee754_sqrt+0x34>
 800d082:	151b      	asrs	r3, r3, #20
 800d084:	d10c      	bne.n	800d0a0 <__ieee754_sqrt+0x84>
 800d086:	2a00      	cmp	r2, #0
 800d088:	d06d      	beq.n	800d166 <__ieee754_sqrt+0x14a>
 800d08a:	2000      	movs	r0, #0
 800d08c:	02d6      	lsls	r6, r2, #11
 800d08e:	d56e      	bpl.n	800d16e <__ieee754_sqrt+0x152>
 800d090:	1e44      	subs	r4, r0, #1
 800d092:	1b1b      	subs	r3, r3, r4
 800d094:	f1c0 0420 	rsb	r4, r0, #32
 800d098:	fa21 f404 	lsr.w	r4, r1, r4
 800d09c:	4322      	orrs	r2, r4
 800d09e:	4081      	lsls	r1, r0
 800d0a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0a4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d0a8:	07dd      	lsls	r5, r3, #31
 800d0aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d0ae:	bf42      	ittt	mi
 800d0b0:	0052      	lslmi	r2, r2, #1
 800d0b2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800d0b6:	0049      	lslmi	r1, r1, #1
 800d0b8:	1058      	asrs	r0, r3, #1
 800d0ba:	2500      	movs	r5, #0
 800d0bc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800d0c0:	441a      	add	r2, r3
 800d0c2:	0049      	lsls	r1, r1, #1
 800d0c4:	2316      	movs	r3, #22
 800d0c6:	462c      	mov	r4, r5
 800d0c8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d0cc:	19a7      	adds	r7, r4, r6
 800d0ce:	4297      	cmp	r7, r2
 800d0d0:	bfde      	ittt	le
 800d0d2:	1bd2      	suble	r2, r2, r7
 800d0d4:	19bc      	addle	r4, r7, r6
 800d0d6:	19ad      	addle	r5, r5, r6
 800d0d8:	0052      	lsls	r2, r2, #1
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d0e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d0e8:	d1f0      	bne.n	800d0cc <__ieee754_sqrt+0xb0>
 800d0ea:	f04f 0e20 	mov.w	lr, #32
 800d0ee:	469c      	mov	ip, r3
 800d0f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0f4:	42a2      	cmp	r2, r4
 800d0f6:	eb06 070c 	add.w	r7, r6, ip
 800d0fa:	dc02      	bgt.n	800d102 <__ieee754_sqrt+0xe6>
 800d0fc:	d112      	bne.n	800d124 <__ieee754_sqrt+0x108>
 800d0fe:	428f      	cmp	r7, r1
 800d100:	d810      	bhi.n	800d124 <__ieee754_sqrt+0x108>
 800d102:	2f00      	cmp	r7, #0
 800d104:	eb07 0c06 	add.w	ip, r7, r6
 800d108:	da34      	bge.n	800d174 <__ieee754_sqrt+0x158>
 800d10a:	f1bc 0f00 	cmp.w	ip, #0
 800d10e:	db31      	blt.n	800d174 <__ieee754_sqrt+0x158>
 800d110:	f104 0801 	add.w	r8, r4, #1
 800d114:	1b12      	subs	r2, r2, r4
 800d116:	428f      	cmp	r7, r1
 800d118:	bf88      	it	hi
 800d11a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d11e:	1bc9      	subs	r1, r1, r7
 800d120:	4433      	add	r3, r6
 800d122:	4644      	mov	r4, r8
 800d124:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800d128:	f1be 0e01 	subs.w	lr, lr, #1
 800d12c:	443a      	add	r2, r7
 800d12e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d132:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d136:	d1dd      	bne.n	800d0f4 <__ieee754_sqrt+0xd8>
 800d138:	430a      	orrs	r2, r1
 800d13a:	d006      	beq.n	800d14a <__ieee754_sqrt+0x12e>
 800d13c:	1c5c      	adds	r4, r3, #1
 800d13e:	bf13      	iteet	ne
 800d140:	3301      	addne	r3, #1
 800d142:	3501      	addeq	r5, #1
 800d144:	4673      	moveq	r3, lr
 800d146:	f023 0301 	bicne.w	r3, r3, #1
 800d14a:	106a      	asrs	r2, r5, #1
 800d14c:	085b      	lsrs	r3, r3, #1
 800d14e:	07e9      	lsls	r1, r5, #31
 800d150:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d154:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d158:	bf48      	it	mi
 800d15a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d15e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d162:	461c      	mov	r4, r3
 800d164:	e776      	b.n	800d054 <__ieee754_sqrt+0x38>
 800d166:	0aca      	lsrs	r2, r1, #11
 800d168:	3b15      	subs	r3, #21
 800d16a:	0549      	lsls	r1, r1, #21
 800d16c:	e78b      	b.n	800d086 <__ieee754_sqrt+0x6a>
 800d16e:	0052      	lsls	r2, r2, #1
 800d170:	3001      	adds	r0, #1
 800d172:	e78b      	b.n	800d08c <__ieee754_sqrt+0x70>
 800d174:	46a0      	mov	r8, r4
 800d176:	e7cd      	b.n	800d114 <__ieee754_sqrt+0xf8>
 800d178:	7ff00000 	.word	0x7ff00000
 800d17c:	00000000 	.word	0x00000000

0800d180 <__kernel_cos>:
 800d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	ec59 8b10 	vmov	r8, r9, d0
 800d188:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800d18c:	b085      	sub	sp, #20
 800d18e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800d192:	ed8d 1b00 	vstr	d1, [sp]
 800d196:	da07      	bge.n	800d1a8 <__kernel_cos+0x28>
 800d198:	ee10 0a10 	vmov	r0, s0
 800d19c:	4649      	mov	r1, r9
 800d19e:	f7f3 fcd7 	bl	8000b50 <__aeabi_d2iz>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f000 80aa 	beq.w	800d2fc <__kernel_cos+0x17c>
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	464b      	mov	r3, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	f7f3 fa1e 	bl	80005f0 <__aeabi_dmul>
 800d1b4:	a359      	add	r3, pc, #356	; (adr r3, 800d31c <__kernel_cos+0x19c>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	460d      	mov	r5, r1
 800d1be:	f7f3 fa17 	bl	80005f0 <__aeabi_dmul>
 800d1c2:	a358      	add	r3, pc, #352	; (adr r3, 800d324 <__kernel_cos+0x1a4>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 f860 	bl	800028c <__adddf3>
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	f7f3 fa0e 	bl	80005f0 <__aeabi_dmul>
 800d1d4:	a355      	add	r3, pc, #340	; (adr r3, 800d32c <__kernel_cos+0x1ac>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f3 f855 	bl	8000288 <__aeabi_dsub>
 800d1de:	4622      	mov	r2, r4
 800d1e0:	462b      	mov	r3, r5
 800d1e2:	f7f3 fa05 	bl	80005f0 <__aeabi_dmul>
 800d1e6:	a353      	add	r3, pc, #332	; (adr r3, 800d334 <__kernel_cos+0x1b4>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 f84e 	bl	800028c <__adddf3>
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	f7f3 f9fc 	bl	80005f0 <__aeabi_dmul>
 800d1f8:	a350      	add	r3, pc, #320	; (adr r3, 800d33c <__kernel_cos+0x1bc>)
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	f7f3 f843 	bl	8000288 <__aeabi_dsub>
 800d202:	4622      	mov	r2, r4
 800d204:	462b      	mov	r3, r5
 800d206:	f7f3 f9f3 	bl	80005f0 <__aeabi_dmul>
 800d20a:	a34e      	add	r3, pc, #312	; (adr r3, 800d344 <__kernel_cos+0x1c4>)
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f7f3 f83c 	bl	800028c <__adddf3>
 800d214:	462b      	mov	r3, r5
 800d216:	4622      	mov	r2, r4
 800d218:	f7f3 f9ea 	bl	80005f0 <__aeabi_dmul>
 800d21c:	4b3a      	ldr	r3, [pc, #232]	; (800d308 <__kernel_cos+0x188>)
 800d21e:	429f      	cmp	r7, r3
 800d220:	4682      	mov	sl, r0
 800d222:	468b      	mov	fp, r1
 800d224:	dc2c      	bgt.n	800d280 <__kernel_cos+0x100>
 800d226:	2200      	movs	r2, #0
 800d228:	4b38      	ldr	r3, [pc, #224]	; (800d30c <__kernel_cos+0x18c>)
 800d22a:	4620      	mov	r0, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	f7f3 f9df 	bl	80005f0 <__aeabi_dmul>
 800d232:	4652      	mov	r2, sl
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	465b      	mov	r3, fp
 800d23a:	4620      	mov	r0, r4
 800d23c:	4629      	mov	r1, r5
 800d23e:	f7f3 f9d7 	bl	80005f0 <__aeabi_dmul>
 800d242:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	4640      	mov	r0, r8
 800d24c:	4649      	mov	r1, r9
 800d24e:	f7f3 f9cf 	bl	80005f0 <__aeabi_dmul>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4620      	mov	r0, r4
 800d258:	4629      	mov	r1, r5
 800d25a:	f7f3 f815 	bl	8000288 <__aeabi_dsub>
 800d25e:	4602      	mov	r2, r0
 800d260:	460b      	mov	r3, r1
 800d262:	4630      	mov	r0, r6
 800d264:	4639      	mov	r1, r7
 800d266:	f7f3 f80f 	bl	8000288 <__aeabi_dsub>
 800d26a:	460b      	mov	r3, r1
 800d26c:	4928      	ldr	r1, [pc, #160]	; (800d310 <__kernel_cos+0x190>)
 800d26e:	4602      	mov	r2, r0
 800d270:	2000      	movs	r0, #0
 800d272:	f7f3 f809 	bl	8000288 <__aeabi_dsub>
 800d276:	ec41 0b10 	vmov	d0, r0, r1
 800d27a:	b005      	add	sp, #20
 800d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d280:	4b24      	ldr	r3, [pc, #144]	; (800d314 <__kernel_cos+0x194>)
 800d282:	4923      	ldr	r1, [pc, #140]	; (800d310 <__kernel_cos+0x190>)
 800d284:	429f      	cmp	r7, r3
 800d286:	bfd7      	itett	le
 800d288:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800d28c:	4f22      	ldrgt	r7, [pc, #136]	; (800d318 <__kernel_cos+0x198>)
 800d28e:	2200      	movle	r2, #0
 800d290:	4616      	movle	r6, r2
 800d292:	bfd4      	ite	le
 800d294:	461f      	movle	r7, r3
 800d296:	2600      	movgt	r6, #0
 800d298:	4632      	mov	r2, r6
 800d29a:	463b      	mov	r3, r7
 800d29c:	2000      	movs	r0, #0
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2a8:	4b18      	ldr	r3, [pc, #96]	; (800d30c <__kernel_cos+0x18c>)
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	f7f3 f99f 	bl	80005f0 <__aeabi_dmul>
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	463b      	mov	r3, r7
 800d2b6:	f7f2 ffe7 	bl	8000288 <__aeabi_dsub>
 800d2ba:	4652      	mov	r2, sl
 800d2bc:	4606      	mov	r6, r0
 800d2be:	460f      	mov	r7, r1
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f3 f993 	bl	80005f0 <__aeabi_dmul>
 800d2ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	460d      	mov	r5, r1
 800d2d2:	4640      	mov	r0, r8
 800d2d4:	4649      	mov	r1, r9
 800d2d6:	f7f3 f98b 	bl	80005f0 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4620      	mov	r0, r4
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	f7f2 ffd1 	bl	8000288 <__aeabi_dsub>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	4639      	mov	r1, r7
 800d2ee:	f7f2 ffcb 	bl	8000288 <__aeabi_dsub>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2fa:	e7ba      	b.n	800d272 <__kernel_cos+0xf2>
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	4904      	ldr	r1, [pc, #16]	; (800d310 <__kernel_cos+0x190>)
 800d300:	e7b9      	b.n	800d276 <__kernel_cos+0xf6>
 800d302:	bf00      	nop
 800d304:	f3af 8000 	nop.w
 800d308:	3fd33332 	.word	0x3fd33332
 800d30c:	3fe00000 	.word	0x3fe00000
 800d310:	3ff00000 	.word	0x3ff00000
 800d314:	3fe90000 	.word	0x3fe90000
 800d318:	3fd20000 	.word	0x3fd20000
 800d31c:	be8838d4 	.word	0xbe8838d4
 800d320:	bda8fae9 	.word	0xbda8fae9
 800d324:	bdb4b1c4 	.word	0xbdb4b1c4
 800d328:	3e21ee9e 	.word	0x3e21ee9e
 800d32c:	809c52ad 	.word	0x809c52ad
 800d330:	3e927e4f 	.word	0x3e927e4f
 800d334:	19cb1590 	.word	0x19cb1590
 800d338:	3efa01a0 	.word	0x3efa01a0
 800d33c:	16c15177 	.word	0x16c15177
 800d340:	3f56c16c 	.word	0x3f56c16c
 800d344:	5555554c 	.word	0x5555554c
 800d348:	3fa55555 	.word	0x3fa55555
 800d34c:	00000000 	.word	0x00000000

0800d350 <__kernel_rem_pio2>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	ed2d 8b02 	vpush	{d8}
 800d358:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d35c:	1ed4      	subs	r4, r2, #3
 800d35e:	9306      	str	r3, [sp, #24]
 800d360:	9102      	str	r1, [sp, #8]
 800d362:	4bc3      	ldr	r3, [pc, #780]	; (800d670 <__kernel_rem_pio2+0x320>)
 800d364:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d366:	9009      	str	r0, [sp, #36]	; 0x24
 800d368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	9b06      	ldr	r3, [sp, #24]
 800d370:	3b01      	subs	r3, #1
 800d372:	9304      	str	r3, [sp, #16]
 800d374:	2318      	movs	r3, #24
 800d376:	fb94 f4f3 	sdiv	r4, r4, r3
 800d37a:	f06f 0317 	mvn.w	r3, #23
 800d37e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d382:	fb04 3303 	mla	r3, r4, r3, r3
 800d386:	eb03 0a02 	add.w	sl, r3, r2
 800d38a:	9b00      	ldr	r3, [sp, #0]
 800d38c:	9a04      	ldr	r2, [sp, #16]
 800d38e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d660 <__kernel_rem_pio2+0x310>
 800d392:	eb03 0802 	add.w	r8, r3, r2
 800d396:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d398:	1aa7      	subs	r7, r4, r2
 800d39a:	ae20      	add	r6, sp, #128	; 0x80
 800d39c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d3a0:	2500      	movs	r5, #0
 800d3a2:	4545      	cmp	r5, r8
 800d3a4:	dd13      	ble.n	800d3ce <__kernel_rem_pio2+0x7e>
 800d3a6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d660 <__kernel_rem_pio2+0x310>
 800d3aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d3ae:	2600      	movs	r6, #0
 800d3b0:	9b00      	ldr	r3, [sp, #0]
 800d3b2:	429e      	cmp	r6, r3
 800d3b4:	dc32      	bgt.n	800d41c <__kernel_rem_pio2+0xcc>
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	9303      	str	r3, [sp, #12]
 800d3ba:	9b06      	ldr	r3, [sp, #24]
 800d3bc:	199d      	adds	r5, r3, r6
 800d3be:	ab20      	add	r3, sp, #128	; 0x80
 800d3c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3c4:	9308      	str	r3, [sp, #32]
 800d3c6:	ec59 8b18 	vmov	r8, r9, d8
 800d3ca:	2700      	movs	r7, #0
 800d3cc:	e01f      	b.n	800d40e <__kernel_rem_pio2+0xbe>
 800d3ce:	42ef      	cmn	r7, r5
 800d3d0:	d407      	bmi.n	800d3e2 <__kernel_rem_pio2+0x92>
 800d3d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d3d6:	f7f3 f8a5 	bl	8000524 <__aeabi_i2d>
 800d3da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d3de:	3501      	adds	r5, #1
 800d3e0:	e7df      	b.n	800d3a2 <__kernel_rem_pio2+0x52>
 800d3e2:	ec51 0b18 	vmov	r0, r1, d8
 800d3e6:	e7f8      	b.n	800d3da <__kernel_rem_pio2+0x8a>
 800d3e8:	9908      	ldr	r1, [sp, #32]
 800d3ea:	9d03      	ldr	r5, [sp, #12]
 800d3ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d3f0:	9108      	str	r1, [sp, #32]
 800d3f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d3f6:	9503      	str	r5, [sp, #12]
 800d3f8:	f7f3 f8fa 	bl	80005f0 <__aeabi_dmul>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	f7f2 ff42 	bl	800028c <__adddf3>
 800d408:	3701      	adds	r7, #1
 800d40a:	4680      	mov	r8, r0
 800d40c:	4689      	mov	r9, r1
 800d40e:	9b04      	ldr	r3, [sp, #16]
 800d410:	429f      	cmp	r7, r3
 800d412:	dde9      	ble.n	800d3e8 <__kernel_rem_pio2+0x98>
 800d414:	e8eb 8902 	strd	r8, r9, [fp], #8
 800d418:	3601      	adds	r6, #1
 800d41a:	e7c9      	b.n	800d3b0 <__kernel_rem_pio2+0x60>
 800d41c:	9b00      	ldr	r3, [sp, #0]
 800d41e:	9f00      	ldr	r7, [sp, #0]
 800d420:	aa0c      	add	r2, sp, #48	; 0x30
 800d422:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d426:	930b      	str	r3, [sp, #44]	; 0x2c
 800d428:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d42a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d42e:	930a      	str	r3, [sp, #40]	; 0x28
 800d430:	ab98      	add	r3, sp, #608	; 0x260
 800d432:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800d436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d43a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d43e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d442:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d446:	9308      	str	r3, [sp, #32]
 800d448:	9a08      	ldr	r2, [sp, #32]
 800d44a:	ab98      	add	r3, sp, #608	; 0x260
 800d44c:	4413      	add	r3, r2
 800d44e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800d452:	2600      	movs	r6, #0
 800d454:	1bbb      	subs	r3, r7, r6
 800d456:	2b00      	cmp	r3, #0
 800d458:	dc77      	bgt.n	800d54a <__kernel_rem_pio2+0x1fa>
 800d45a:	ec49 8b10 	vmov	d0, r8, r9
 800d45e:	4650      	mov	r0, sl
 800d460:	f000 fdda 	bl	800e018 <scalbn>
 800d464:	ec55 4b10 	vmov	r4, r5, d0
 800d468:	2200      	movs	r2, #0
 800d46a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d46e:	ee10 0a10 	vmov	r0, s0
 800d472:	4629      	mov	r1, r5
 800d474:	f7f3 f8bc 	bl	80005f0 <__aeabi_dmul>
 800d478:	ec41 0b10 	vmov	d0, r0, r1
 800d47c:	f000 fd44 	bl	800df08 <floor>
 800d480:	2200      	movs	r2, #0
 800d482:	ec51 0b10 	vmov	r0, r1, d0
 800d486:	4b7b      	ldr	r3, [pc, #492]	; (800d674 <__kernel_rem_pio2+0x324>)
 800d488:	f7f3 f8b2 	bl	80005f0 <__aeabi_dmul>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	4620      	mov	r0, r4
 800d492:	4629      	mov	r1, r5
 800d494:	f7f2 fef8 	bl	8000288 <__aeabi_dsub>
 800d498:	460d      	mov	r5, r1
 800d49a:	4604      	mov	r4, r0
 800d49c:	f7f3 fb58 	bl	8000b50 <__aeabi_d2iz>
 800d4a0:	9003      	str	r0, [sp, #12]
 800d4a2:	f7f3 f83f 	bl	8000524 <__aeabi_i2d>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	f7f2 feeb 	bl	8000288 <__aeabi_dsub>
 800d4b2:	f1ba 0f00 	cmp.w	sl, #0
 800d4b6:	4680      	mov	r8, r0
 800d4b8:	4689      	mov	r9, r1
 800d4ba:	dd6b      	ble.n	800d594 <__kernel_rem_pio2+0x244>
 800d4bc:	1e7a      	subs	r2, r7, #1
 800d4be:	ab0c      	add	r3, sp, #48	; 0x30
 800d4c0:	f1ca 0118 	rsb	r1, sl, #24
 800d4c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d4c8:	9c03      	ldr	r4, [sp, #12]
 800d4ca:	fa40 f301 	asr.w	r3, r0, r1
 800d4ce:	441c      	add	r4, r3
 800d4d0:	408b      	lsls	r3, r1
 800d4d2:	1ac0      	subs	r0, r0, r3
 800d4d4:	ab0c      	add	r3, sp, #48	; 0x30
 800d4d6:	9403      	str	r4, [sp, #12]
 800d4d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d4dc:	f1ca 0317 	rsb	r3, sl, #23
 800d4e0:	fa40 fb03 	asr.w	fp, r0, r3
 800d4e4:	f1bb 0f00 	cmp.w	fp, #0
 800d4e8:	dd62      	ble.n	800d5b0 <__kernel_rem_pio2+0x260>
 800d4ea:	9b03      	ldr	r3, [sp, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	9303      	str	r3, [sp, #12]
 800d4f2:	4614      	mov	r4, r2
 800d4f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d4f8:	4297      	cmp	r7, r2
 800d4fa:	f300 8089 	bgt.w	800d610 <__kernel_rem_pio2+0x2c0>
 800d4fe:	f1ba 0f00 	cmp.w	sl, #0
 800d502:	dd07      	ble.n	800d514 <__kernel_rem_pio2+0x1c4>
 800d504:	f1ba 0f01 	cmp.w	sl, #1
 800d508:	f000 8096 	beq.w	800d638 <__kernel_rem_pio2+0x2e8>
 800d50c:	f1ba 0f02 	cmp.w	sl, #2
 800d510:	f000 809c 	beq.w	800d64c <__kernel_rem_pio2+0x2fc>
 800d514:	f1bb 0f02 	cmp.w	fp, #2
 800d518:	d14a      	bne.n	800d5b0 <__kernel_rem_pio2+0x260>
 800d51a:	4642      	mov	r2, r8
 800d51c:	464b      	mov	r3, r9
 800d51e:	2000      	movs	r0, #0
 800d520:	4955      	ldr	r1, [pc, #340]	; (800d678 <__kernel_rem_pio2+0x328>)
 800d522:	f7f2 feb1 	bl	8000288 <__aeabi_dsub>
 800d526:	4680      	mov	r8, r0
 800d528:	4689      	mov	r9, r1
 800d52a:	2c00      	cmp	r4, #0
 800d52c:	d040      	beq.n	800d5b0 <__kernel_rem_pio2+0x260>
 800d52e:	4650      	mov	r0, sl
 800d530:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d668 <__kernel_rem_pio2+0x318>
 800d534:	f000 fd70 	bl	800e018 <scalbn>
 800d538:	4640      	mov	r0, r8
 800d53a:	4649      	mov	r1, r9
 800d53c:	ec53 2b10 	vmov	r2, r3, d0
 800d540:	f7f2 fea2 	bl	8000288 <__aeabi_dsub>
 800d544:	4680      	mov	r8, r0
 800d546:	4689      	mov	r9, r1
 800d548:	e032      	b.n	800d5b0 <__kernel_rem_pio2+0x260>
 800d54a:	2200      	movs	r2, #0
 800d54c:	4b4b      	ldr	r3, [pc, #300]	; (800d67c <__kernel_rem_pio2+0x32c>)
 800d54e:	4640      	mov	r0, r8
 800d550:	4649      	mov	r1, r9
 800d552:	f7f3 f84d 	bl	80005f0 <__aeabi_dmul>
 800d556:	f7f3 fafb 	bl	8000b50 <__aeabi_d2iz>
 800d55a:	f7f2 ffe3 	bl	8000524 <__aeabi_i2d>
 800d55e:	2200      	movs	r2, #0
 800d560:	4b47      	ldr	r3, [pc, #284]	; (800d680 <__kernel_rem_pio2+0x330>)
 800d562:	4604      	mov	r4, r0
 800d564:	460d      	mov	r5, r1
 800d566:	f7f3 f843 	bl	80005f0 <__aeabi_dmul>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4640      	mov	r0, r8
 800d570:	4649      	mov	r1, r9
 800d572:	f7f2 fe89 	bl	8000288 <__aeabi_dsub>
 800d576:	f7f3 faeb 	bl	8000b50 <__aeabi_d2iz>
 800d57a:	ab0c      	add	r3, sp, #48	; 0x30
 800d57c:	4629      	mov	r1, r5
 800d57e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800d582:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d586:	4620      	mov	r0, r4
 800d588:	f7f2 fe80 	bl	800028c <__adddf3>
 800d58c:	3601      	adds	r6, #1
 800d58e:	4680      	mov	r8, r0
 800d590:	4689      	mov	r9, r1
 800d592:	e75f      	b.n	800d454 <__kernel_rem_pio2+0x104>
 800d594:	d106      	bne.n	800d5a4 <__kernel_rem_pio2+0x254>
 800d596:	1e7b      	subs	r3, r7, #1
 800d598:	aa0c      	add	r2, sp, #48	; 0x30
 800d59a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d59e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d5a2:	e79f      	b.n	800d4e4 <__kernel_rem_pio2+0x194>
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	4b37      	ldr	r3, [pc, #220]	; (800d684 <__kernel_rem_pio2+0x334>)
 800d5a8:	f7f3 faa8 	bl	8000afc <__aeabi_dcmpge>
 800d5ac:	bb68      	cbnz	r0, 800d60a <__kernel_rem_pio2+0x2ba>
 800d5ae:	4683      	mov	fp, r0
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4640      	mov	r0, r8
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	f7f3 fa82 	bl	8000ac0 <__aeabi_dcmpeq>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	f000 80c1 	beq.w	800d744 <__kernel_rem_pio2+0x3f4>
 800d5c2:	1e7c      	subs	r4, r7, #1
 800d5c4:	4623      	mov	r3, r4
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	9900      	ldr	r1, [sp, #0]
 800d5ca:	428b      	cmp	r3, r1
 800d5cc:	da5c      	bge.n	800d688 <__kernel_rem_pio2+0x338>
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	f040 808b 	bne.w	800d6ea <__kernel_rem_pio2+0x39a>
 800d5d4:	2401      	movs	r4, #1
 800d5d6:	f06f 0203 	mvn.w	r2, #3
 800d5da:	fb02 f304 	mul.w	r3, r2, r4
 800d5de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5e0:	58cb      	ldr	r3, [r1, r3]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d056      	beq.n	800d694 <__kernel_rem_pio2+0x344>
 800d5e6:	9b08      	ldr	r3, [sp, #32]
 800d5e8:	aa98      	add	r2, sp, #608	; 0x260
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 800d5f0:	9b06      	ldr	r3, [sp, #24]
 800d5f2:	19dd      	adds	r5, r3, r7
 800d5f4:	ab20      	add	r3, sp, #128	; 0x80
 800d5f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d5fa:	19e3      	adds	r3, r4, r7
 800d5fc:	1c7e      	adds	r6, r7, #1
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	9b03      	ldr	r3, [sp, #12]
 800d602:	429e      	cmp	r6, r3
 800d604:	dd48      	ble.n	800d698 <__kernel_rem_pio2+0x348>
 800d606:	461f      	mov	r7, r3
 800d608:	e712      	b.n	800d430 <__kernel_rem_pio2+0xe0>
 800d60a:	f04f 0b02 	mov.w	fp, #2
 800d60e:	e76c      	b.n	800d4ea <__kernel_rem_pio2+0x19a>
 800d610:	ab0c      	add	r3, sp, #48	; 0x30
 800d612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d616:	b94c      	cbnz	r4, 800d62c <__kernel_rem_pio2+0x2dc>
 800d618:	b12b      	cbz	r3, 800d626 <__kernel_rem_pio2+0x2d6>
 800d61a:	a80c      	add	r0, sp, #48	; 0x30
 800d61c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d620:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d624:	2301      	movs	r3, #1
 800d626:	3201      	adds	r2, #1
 800d628:	461c      	mov	r4, r3
 800d62a:	e765      	b.n	800d4f8 <__kernel_rem_pio2+0x1a8>
 800d62c:	a80c      	add	r0, sp, #48	; 0x30
 800d62e:	1acb      	subs	r3, r1, r3
 800d630:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d634:	4623      	mov	r3, r4
 800d636:	e7f6      	b.n	800d626 <__kernel_rem_pio2+0x2d6>
 800d638:	1e7a      	subs	r2, r7, #1
 800d63a:	ab0c      	add	r3, sp, #48	; 0x30
 800d63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d640:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d644:	a90c      	add	r1, sp, #48	; 0x30
 800d646:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d64a:	e763      	b.n	800d514 <__kernel_rem_pio2+0x1c4>
 800d64c:	1e7a      	subs	r2, r7, #1
 800d64e:	ab0c      	add	r3, sp, #48	; 0x30
 800d650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d654:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d658:	e7f4      	b.n	800d644 <__kernel_rem_pio2+0x2f4>
 800d65a:	bf00      	nop
 800d65c:	f3af 8000 	nop.w
	...
 800d66c:	3ff00000 	.word	0x3ff00000
 800d670:	0800e880 	.word	0x0800e880
 800d674:	40200000 	.word	0x40200000
 800d678:	3ff00000 	.word	0x3ff00000
 800d67c:	3e700000 	.word	0x3e700000
 800d680:	41700000 	.word	0x41700000
 800d684:	3fe00000 	.word	0x3fe00000
 800d688:	a90c      	add	r1, sp, #48	; 0x30
 800d68a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d68e:	3b01      	subs	r3, #1
 800d690:	430a      	orrs	r2, r1
 800d692:	e799      	b.n	800d5c8 <__kernel_rem_pio2+0x278>
 800d694:	3401      	adds	r4, #1
 800d696:	e7a0      	b.n	800d5da <__kernel_rem_pio2+0x28a>
 800d698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d69a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d69e:	f7f2 ff41 	bl	8000524 <__aeabi_i2d>
 800d6a2:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6a8:	9508      	str	r5, [sp, #32]
 800d6aa:	461c      	mov	r4, r3
 800d6ac:	2700      	movs	r7, #0
 800d6ae:	f04f 0800 	mov.w	r8, #0
 800d6b2:	f04f 0900 	mov.w	r9, #0
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	429f      	cmp	r7, r3
 800d6ba:	dd03      	ble.n	800d6c4 <__kernel_rem_pio2+0x374>
 800d6bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800d6c0:	3601      	adds	r6, #1
 800d6c2:	e79d      	b.n	800d600 <__kernel_rem_pio2+0x2b0>
 800d6c4:	9908      	ldr	r1, [sp, #32]
 800d6c6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d6ca:	9108      	str	r1, [sp, #32]
 800d6cc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d6d0:	f7f2 ff8e 	bl	80005f0 <__aeabi_dmul>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	4640      	mov	r0, r8
 800d6da:	4649      	mov	r1, r9
 800d6dc:	f7f2 fdd6 	bl	800028c <__adddf3>
 800d6e0:	3701      	adds	r7, #1
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	4689      	mov	r9, r1
 800d6e6:	e7e6      	b.n	800d6b6 <__kernel_rem_pio2+0x366>
 800d6e8:	3c01      	subs	r4, #1
 800d6ea:	ab0c      	add	r3, sp, #48	; 0x30
 800d6ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800d6f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d0f7      	beq.n	800d6e8 <__kernel_rem_pio2+0x398>
 800d6f8:	4650      	mov	r0, sl
 800d6fa:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 800d9d0 <__kernel_rem_pio2+0x680>
 800d6fe:	f000 fc8b 	bl	800e018 <scalbn>
 800d702:	00e5      	lsls	r5, r4, #3
 800d704:	ab98      	add	r3, sp, #608	; 0x260
 800d706:	eb03 0905 	add.w	r9, r3, r5
 800d70a:	ec57 6b10 	vmov	r6, r7, d0
 800d70e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800d712:	46a0      	mov	r8, r4
 800d714:	f1b8 0f00 	cmp.w	r8, #0
 800d718:	da4d      	bge.n	800d7b6 <__kernel_rem_pio2+0x466>
 800d71a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 800d9d8 <__kernel_rem_pio2+0x688>
 800d71e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800d722:	2300      	movs	r3, #0
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	4657      	mov	r7, sl
 800d728:	9b04      	ldr	r3, [sp, #16]
 800d72a:	ebb4 0903 	subs.w	r9, r4, r3
 800d72e:	d476      	bmi.n	800d81e <__kernel_rem_pio2+0x4ce>
 800d730:	4bab      	ldr	r3, [pc, #684]	; (800d9e0 <__kernel_rem_pio2+0x690>)
 800d732:	461e      	mov	r6, r3
 800d734:	ab70      	add	r3, sp, #448	; 0x1c0
 800d736:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d73a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d73e:	f04f 0800 	mov.w	r8, #0
 800d742:	e05e      	b.n	800d802 <__kernel_rem_pio2+0x4b2>
 800d744:	f1ca 0000 	rsb	r0, sl, #0
 800d748:	ec49 8b10 	vmov	d0, r8, r9
 800d74c:	f000 fc64 	bl	800e018 <scalbn>
 800d750:	ec55 4b10 	vmov	r4, r5, d0
 800d754:	2200      	movs	r2, #0
 800d756:	4ba3      	ldr	r3, [pc, #652]	; (800d9e4 <__kernel_rem_pio2+0x694>)
 800d758:	ee10 0a10 	vmov	r0, s0
 800d75c:	4629      	mov	r1, r5
 800d75e:	f7f3 f9cd 	bl	8000afc <__aeabi_dcmpge>
 800d762:	b1f8      	cbz	r0, 800d7a4 <__kernel_rem_pio2+0x454>
 800d764:	2200      	movs	r2, #0
 800d766:	4ba0      	ldr	r3, [pc, #640]	; (800d9e8 <__kernel_rem_pio2+0x698>)
 800d768:	4620      	mov	r0, r4
 800d76a:	4629      	mov	r1, r5
 800d76c:	f7f2 ff40 	bl	80005f0 <__aeabi_dmul>
 800d770:	f7f3 f9ee 	bl	8000b50 <__aeabi_d2iz>
 800d774:	4606      	mov	r6, r0
 800d776:	f7f2 fed5 	bl	8000524 <__aeabi_i2d>
 800d77a:	2200      	movs	r2, #0
 800d77c:	4b99      	ldr	r3, [pc, #612]	; (800d9e4 <__kernel_rem_pio2+0x694>)
 800d77e:	f7f2 ff37 	bl	80005f0 <__aeabi_dmul>
 800d782:	460b      	mov	r3, r1
 800d784:	4602      	mov	r2, r0
 800d786:	4629      	mov	r1, r5
 800d788:	4620      	mov	r0, r4
 800d78a:	f7f2 fd7d 	bl	8000288 <__aeabi_dsub>
 800d78e:	f7f3 f9df 	bl	8000b50 <__aeabi_d2iz>
 800d792:	1c7c      	adds	r4, r7, #1
 800d794:	ab0c      	add	r3, sp, #48	; 0x30
 800d796:	f10a 0a18 	add.w	sl, sl, #24
 800d79a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d79e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d7a2:	e7a9      	b.n	800d6f8 <__kernel_rem_pio2+0x3a8>
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f3 f9d2 	bl	8000b50 <__aeabi_d2iz>
 800d7ac:	ab0c      	add	r3, sp, #48	; 0x30
 800d7ae:	463c      	mov	r4, r7
 800d7b0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d7b4:	e7a0      	b.n	800d6f8 <__kernel_rem_pio2+0x3a8>
 800d7b6:	ab0c      	add	r3, sp, #48	; 0x30
 800d7b8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d7bc:	f7f2 feb2 	bl	8000524 <__aeabi_i2d>
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	f7f2 ff14 	bl	80005f0 <__aeabi_dmul>
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800d7ce:	4b86      	ldr	r3, [pc, #536]	; (800d9e8 <__kernel_rem_pio2+0x698>)
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	f7f2 ff0c 	bl	80005f0 <__aeabi_dmul>
 800d7d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7dc:	4606      	mov	r6, r0
 800d7de:	460f      	mov	r7, r1
 800d7e0:	e798      	b.n	800d714 <__kernel_rem_pio2+0x3c4>
 800d7e2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d7e6:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d7ea:	f7f2 ff01 	bl	80005f0 <__aeabi_dmul>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7f6:	f7f2 fd49 	bl	800028c <__adddf3>
 800d7fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d7fe:	f108 0801 	add.w	r8, r8, #1
 800d802:	9b00      	ldr	r3, [sp, #0]
 800d804:	4598      	cmp	r8, r3
 800d806:	dc02      	bgt.n	800d80e <__kernel_rem_pio2+0x4be>
 800d808:	9b04      	ldr	r3, [sp, #16]
 800d80a:	4598      	cmp	r8, r3
 800d80c:	dde9      	ble.n	800d7e2 <__kernel_rem_pio2+0x492>
 800d80e:	9b04      	ldr	r3, [sp, #16]
 800d810:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d814:	3301      	adds	r3, #1
 800d816:	ecaa 7b02 	vstmia	sl!, {d7}
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	e784      	b.n	800d728 <__kernel_rem_pio2+0x3d8>
 800d81e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d820:	2b03      	cmp	r3, #3
 800d822:	d85d      	bhi.n	800d8e0 <__kernel_rem_pio2+0x590>
 800d824:	e8df f003 	tbb	[pc, r3]
 800d828:	0226264b 	.word	0x0226264b
 800d82c:	ab98      	add	r3, sp, #608	; 0x260
 800d82e:	441d      	add	r5, r3
 800d830:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800d834:	462e      	mov	r6, r5
 800d836:	46a2      	mov	sl, r4
 800d838:	f1ba 0f00 	cmp.w	sl, #0
 800d83c:	dc6e      	bgt.n	800d91c <__kernel_rem_pio2+0x5cc>
 800d83e:	462e      	mov	r6, r5
 800d840:	46a2      	mov	sl, r4
 800d842:	f1ba 0f01 	cmp.w	sl, #1
 800d846:	f300 808a 	bgt.w	800d95e <__kernel_rem_pio2+0x60e>
 800d84a:	2000      	movs	r0, #0
 800d84c:	2100      	movs	r1, #0
 800d84e:	2c01      	cmp	r4, #1
 800d850:	f300 80a6 	bgt.w	800d9a0 <__kernel_rem_pio2+0x650>
 800d854:	f1bb 0f00 	cmp.w	fp, #0
 800d858:	f040 80a8 	bne.w	800d9ac <__kernel_rem_pio2+0x65c>
 800d85c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800d860:	9c02      	ldr	r4, [sp, #8]
 800d862:	e9c4 2300 	strd	r2, r3, [r4]
 800d866:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800d86a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800d86e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d872:	e035      	b.n	800d8e0 <__kernel_rem_pio2+0x590>
 800d874:	3508      	adds	r5, #8
 800d876:	ab48      	add	r3, sp, #288	; 0x120
 800d878:	441d      	add	r5, r3
 800d87a:	4626      	mov	r6, r4
 800d87c:	2000      	movs	r0, #0
 800d87e:	2100      	movs	r1, #0
 800d880:	2e00      	cmp	r6, #0
 800d882:	da3c      	bge.n	800d8fe <__kernel_rem_pio2+0x5ae>
 800d884:	f1bb 0f00 	cmp.w	fp, #0
 800d888:	d03f      	beq.n	800d90a <__kernel_rem_pio2+0x5ba>
 800d88a:	4602      	mov	r2, r0
 800d88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d890:	9d02      	ldr	r5, [sp, #8]
 800d892:	e9c5 2300 	strd	r2, r3, [r5]
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d89e:	f7f2 fcf3 	bl	8000288 <__aeabi_dsub>
 800d8a2:	ae4a      	add	r6, sp, #296	; 0x128
 800d8a4:	2501      	movs	r5, #1
 800d8a6:	42ac      	cmp	r4, r5
 800d8a8:	da32      	bge.n	800d910 <__kernel_rem_pio2+0x5c0>
 800d8aa:	f1bb 0f00 	cmp.w	fp, #0
 800d8ae:	d002      	beq.n	800d8b6 <__kernel_rem_pio2+0x566>
 800d8b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	9b02      	ldr	r3, [sp, #8]
 800d8b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d8bc:	e010      	b.n	800d8e0 <__kernel_rem_pio2+0x590>
 800d8be:	ab98      	add	r3, sp, #608	; 0x260
 800d8c0:	441d      	add	r5, r3
 800d8c2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	2c00      	cmp	r4, #0
 800d8cc:	da11      	bge.n	800d8f2 <__kernel_rem_pio2+0x5a2>
 800d8ce:	f1bb 0f00 	cmp.w	fp, #0
 800d8d2:	d002      	beq.n	800d8da <__kernel_rem_pio2+0x58a>
 800d8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8d8:	4619      	mov	r1, r3
 800d8da:	9b02      	ldr	r3, [sp, #8]
 800d8dc:	e9c3 0100 	strd	r0, r1, [r3]
 800d8e0:	9b03      	ldr	r3, [sp, #12]
 800d8e2:	f003 0007 	and.w	r0, r3, #7
 800d8e6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d8ea:	ecbd 8b02 	vpop	{d8}
 800d8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d8f6:	f7f2 fcc9 	bl	800028c <__adddf3>
 800d8fa:	3c01      	subs	r4, #1
 800d8fc:	e7e5      	b.n	800d8ca <__kernel_rem_pio2+0x57a>
 800d8fe:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d902:	f7f2 fcc3 	bl	800028c <__adddf3>
 800d906:	3e01      	subs	r6, #1
 800d908:	e7ba      	b.n	800d880 <__kernel_rem_pio2+0x530>
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	e7bf      	b.n	800d890 <__kernel_rem_pio2+0x540>
 800d910:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d914:	f7f2 fcba 	bl	800028c <__adddf3>
 800d918:	3501      	adds	r5, #1
 800d91a:	e7c4      	b.n	800d8a6 <__kernel_rem_pio2+0x556>
 800d91c:	ed16 7b02 	vldr	d7, [r6, #-8]
 800d920:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800d924:	ec53 2b17 	vmov	r2, r3, d7
 800d928:	4640      	mov	r0, r8
 800d92a:	4649      	mov	r1, r9
 800d92c:	ed8d 7b00 	vstr	d7, [sp]
 800d930:	f7f2 fcac 	bl	800028c <__adddf3>
 800d934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4640      	mov	r0, r8
 800d93e:	4649      	mov	r1, r9
 800d940:	f7f2 fca2 	bl	8000288 <__aeabi_dsub>
 800d944:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d948:	f7f2 fca0 	bl	800028c <__adddf3>
 800d94c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d950:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800d954:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d958:	ed06 7b02 	vstr	d7, [r6, #-8]
 800d95c:	e76c      	b.n	800d838 <__kernel_rem_pio2+0x4e8>
 800d95e:	ed16 7b02 	vldr	d7, [r6, #-8]
 800d962:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800d966:	ec53 2b17 	vmov	r2, r3, d7
 800d96a:	4640      	mov	r0, r8
 800d96c:	4649      	mov	r1, r9
 800d96e:	ed8d 7b00 	vstr	d7, [sp]
 800d972:	f7f2 fc8b 	bl	800028c <__adddf3>
 800d976:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fc81 	bl	8000288 <__aeabi_dsub>
 800d986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d98a:	f7f2 fc7f 	bl	800028c <__adddf3>
 800d98e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d992:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800d996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d99a:	ed06 7b02 	vstr	d7, [r6, #-8]
 800d99e:	e750      	b.n	800d842 <__kernel_rem_pio2+0x4f2>
 800d9a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d9a4:	f7f2 fc72 	bl	800028c <__adddf3>
 800d9a8:	3c01      	subs	r4, #1
 800d9aa:	e750      	b.n	800d84e <__kernel_rem_pio2+0x4fe>
 800d9ac:	9a02      	ldr	r2, [sp, #8]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6110      	str	r0, [r2, #16]
 800d9b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d9ba:	6053      	str	r3, [r2, #4]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	6093      	str	r3, [r2, #8]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d9c6:	60d3      	str	r3, [r2, #12]
 800d9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9cc:	6153      	str	r3, [r2, #20]
 800d9ce:	e787      	b.n	800d8e0 <__kernel_rem_pio2+0x590>
 800d9d0:	00000000 	.word	0x00000000
 800d9d4:	3ff00000 	.word	0x3ff00000
	...
 800d9e0:	0800e840 	.word	0x0800e840
 800d9e4:	41700000 	.word	0x41700000
 800d9e8:	3e700000 	.word	0x3e700000
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <__kernel_sin>:
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	ec55 4b10 	vmov	r4, r5, d0
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d9fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800da02:	ed8d 1b00 	vstr	d1, [sp]
 800da06:	9002      	str	r0, [sp, #8]
 800da08:	da06      	bge.n	800da18 <__kernel_sin+0x28>
 800da0a:	ee10 0a10 	vmov	r0, s0
 800da0e:	4629      	mov	r1, r5
 800da10:	f7f3 f89e 	bl	8000b50 <__aeabi_d2iz>
 800da14:	2800      	cmp	r0, #0
 800da16:	d051      	beq.n	800dabc <__kernel_sin+0xcc>
 800da18:	4622      	mov	r2, r4
 800da1a:	462b      	mov	r3, r5
 800da1c:	4620      	mov	r0, r4
 800da1e:	4629      	mov	r1, r5
 800da20:	f7f2 fde6 	bl	80005f0 <__aeabi_dmul>
 800da24:	4682      	mov	sl, r0
 800da26:	468b      	mov	fp, r1
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4620      	mov	r0, r4
 800da2e:	4629      	mov	r1, r5
 800da30:	f7f2 fdde 	bl	80005f0 <__aeabi_dmul>
 800da34:	a341      	add	r3, pc, #260	; (adr r3, 800db3c <__kernel_sin+0x14c>)
 800da36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3a:	4680      	mov	r8, r0
 800da3c:	4689      	mov	r9, r1
 800da3e:	4650      	mov	r0, sl
 800da40:	4659      	mov	r1, fp
 800da42:	f7f2 fdd5 	bl	80005f0 <__aeabi_dmul>
 800da46:	a33f      	add	r3, pc, #252	; (adr r3, 800db44 <__kernel_sin+0x154>)
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	f7f2 fc1c 	bl	8000288 <__aeabi_dsub>
 800da50:	4652      	mov	r2, sl
 800da52:	465b      	mov	r3, fp
 800da54:	f7f2 fdcc 	bl	80005f0 <__aeabi_dmul>
 800da58:	a33c      	add	r3, pc, #240	; (adr r3, 800db4c <__kernel_sin+0x15c>)
 800da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5e:	f7f2 fc15 	bl	800028c <__adddf3>
 800da62:	4652      	mov	r2, sl
 800da64:	465b      	mov	r3, fp
 800da66:	f7f2 fdc3 	bl	80005f0 <__aeabi_dmul>
 800da6a:	a33a      	add	r3, pc, #232	; (adr r3, 800db54 <__kernel_sin+0x164>)
 800da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da70:	f7f2 fc0a 	bl	8000288 <__aeabi_dsub>
 800da74:	4652      	mov	r2, sl
 800da76:	465b      	mov	r3, fp
 800da78:	f7f2 fdba 	bl	80005f0 <__aeabi_dmul>
 800da7c:	a337      	add	r3, pc, #220	; (adr r3, 800db5c <__kernel_sin+0x16c>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f7f2 fc03 	bl	800028c <__adddf3>
 800da86:	9b02      	ldr	r3, [sp, #8]
 800da88:	4606      	mov	r6, r0
 800da8a:	460f      	mov	r7, r1
 800da8c:	b9db      	cbnz	r3, 800dac6 <__kernel_sin+0xd6>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	f7f2 fdab 	bl	80005f0 <__aeabi_dmul>
 800da9a:	a325      	add	r3, pc, #148	; (adr r3, 800db30 <__kernel_sin+0x140>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	f7f2 fbf2 	bl	8000288 <__aeabi_dsub>
 800daa4:	4642      	mov	r2, r8
 800daa6:	464b      	mov	r3, r9
 800daa8:	f7f2 fda2 	bl	80005f0 <__aeabi_dmul>
 800daac:	4602      	mov	r2, r0
 800daae:	460b      	mov	r3, r1
 800dab0:	4620      	mov	r0, r4
 800dab2:	4629      	mov	r1, r5
 800dab4:	f7f2 fbea 	bl	800028c <__adddf3>
 800dab8:	4604      	mov	r4, r0
 800daba:	460d      	mov	r5, r1
 800dabc:	ec45 4b10 	vmov	d0, r4, r5
 800dac0:	b005      	add	sp, #20
 800dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac6:	2200      	movs	r2, #0
 800dac8:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <__kernel_sin+0x148>)
 800daca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dace:	f7f2 fd8f 	bl	80005f0 <__aeabi_dmul>
 800dad2:	4632      	mov	r2, r6
 800dad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dad8:	463b      	mov	r3, r7
 800dada:	4640      	mov	r0, r8
 800dadc:	4649      	mov	r1, r9
 800dade:	f7f2 fd87 	bl	80005f0 <__aeabi_dmul>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daea:	f7f2 fbcd 	bl	8000288 <__aeabi_dsub>
 800daee:	4652      	mov	r2, sl
 800daf0:	465b      	mov	r3, fp
 800daf2:	f7f2 fd7d 	bl	80005f0 <__aeabi_dmul>
 800daf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dafa:	f7f2 fbc5 	bl	8000288 <__aeabi_dsub>
 800dafe:	a30c      	add	r3, pc, #48	; (adr r3, 800db30 <__kernel_sin+0x140>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	4606      	mov	r6, r0
 800db06:	460f      	mov	r7, r1
 800db08:	4640      	mov	r0, r8
 800db0a:	4649      	mov	r1, r9
 800db0c:	f7f2 fd70 	bl	80005f0 <__aeabi_dmul>
 800db10:	4602      	mov	r2, r0
 800db12:	460b      	mov	r3, r1
 800db14:	4630      	mov	r0, r6
 800db16:	4639      	mov	r1, r7
 800db18:	f7f2 fbb8 	bl	800028c <__adddf3>
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	4620      	mov	r0, r4
 800db22:	4629      	mov	r1, r5
 800db24:	f7f2 fbb0 	bl	8000288 <__aeabi_dsub>
 800db28:	e7c6      	b.n	800dab8 <__kernel_sin+0xc8>
 800db2a:	bf00      	nop
 800db2c:	f3af 8000 	nop.w
 800db30:	55555549 	.word	0x55555549
 800db34:	3fc55555 	.word	0x3fc55555
 800db38:	3fe00000 	.word	0x3fe00000
 800db3c:	5acfd57c 	.word	0x5acfd57c
 800db40:	3de5d93a 	.word	0x3de5d93a
 800db44:	8a2b9ceb 	.word	0x8a2b9ceb
 800db48:	3e5ae5e6 	.word	0x3e5ae5e6
 800db4c:	57b1fe7d 	.word	0x57b1fe7d
 800db50:	3ec71de3 	.word	0x3ec71de3
 800db54:	19c161d5 	.word	0x19c161d5
 800db58:	3f2a01a0 	.word	0x3f2a01a0
 800db5c:	1110f8a6 	.word	0x1110f8a6
 800db60:	3f811111 	.word	0x3f811111
 800db64:	00000000 	.word	0x00000000

0800db68 <__kernel_tan>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	ec5b ab10 	vmov	sl, fp, d0
 800db70:	4bc1      	ldr	r3, [pc, #772]	; (800de78 <__kernel_tan+0x310>)
 800db72:	b089      	sub	sp, #36	; 0x24
 800db74:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800db78:	429f      	cmp	r7, r3
 800db7a:	ec59 8b11 	vmov	r8, r9, d1
 800db7e:	4606      	mov	r6, r0
 800db80:	f8cd b008 	str.w	fp, [sp, #8]
 800db84:	dc23      	bgt.n	800dbce <__kernel_tan+0x66>
 800db86:	ee10 0a10 	vmov	r0, s0
 800db8a:	4659      	mov	r1, fp
 800db8c:	f7f2 ffe0 	bl	8000b50 <__aeabi_d2iz>
 800db90:	2800      	cmp	r0, #0
 800db92:	d146      	bne.n	800dc22 <__kernel_tan+0xba>
 800db94:	4653      	mov	r3, sl
 800db96:	431f      	orrs	r7, r3
 800db98:	1c73      	adds	r3, r6, #1
 800db9a:	433b      	orrs	r3, r7
 800db9c:	d110      	bne.n	800dbc0 <__kernel_tan+0x58>
 800db9e:	ec4b ab10 	vmov	d0, sl, fp
 800dba2:	f7fe ff6d 	bl	800ca80 <fabs>
 800dba6:	49b5      	ldr	r1, [pc, #724]	; (800de7c <__kernel_tan+0x314>)
 800dba8:	ec53 2b10 	vmov	r2, r3, d0
 800dbac:	2000      	movs	r0, #0
 800dbae:	f7f2 fe49 	bl	8000844 <__aeabi_ddiv>
 800dbb2:	4682      	mov	sl, r0
 800dbb4:	468b      	mov	fp, r1
 800dbb6:	ec4b ab10 	vmov	d0, sl, fp
 800dbba:	b009      	add	sp, #36	; 0x24
 800dbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc0:	2e01      	cmp	r6, #1
 800dbc2:	d0f8      	beq.n	800dbb6 <__kernel_tan+0x4e>
 800dbc4:	4652      	mov	r2, sl
 800dbc6:	465b      	mov	r3, fp
 800dbc8:	2000      	movs	r0, #0
 800dbca:	49ad      	ldr	r1, [pc, #692]	; (800de80 <__kernel_tan+0x318>)
 800dbcc:	e7ef      	b.n	800dbae <__kernel_tan+0x46>
 800dbce:	4bad      	ldr	r3, [pc, #692]	; (800de84 <__kernel_tan+0x31c>)
 800dbd0:	429f      	cmp	r7, r3
 800dbd2:	dd26      	ble.n	800dc22 <__kernel_tan+0xba>
 800dbd4:	9b02      	ldr	r3, [sp, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	da09      	bge.n	800dbee <__kernel_tan+0x86>
 800dbda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dbde:	469b      	mov	fp, r3
 800dbe0:	ee10 aa10 	vmov	sl, s0
 800dbe4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbe8:	ee11 8a10 	vmov	r8, s2
 800dbec:	4699      	mov	r9, r3
 800dbee:	4652      	mov	r2, sl
 800dbf0:	465b      	mov	r3, fp
 800dbf2:	a183      	add	r1, pc, #524	; (adr r1, 800de00 <__kernel_tan+0x298>)
 800dbf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbf8:	f7f2 fb46 	bl	8000288 <__aeabi_dsub>
 800dbfc:	4642      	mov	r2, r8
 800dbfe:	464b      	mov	r3, r9
 800dc00:	4604      	mov	r4, r0
 800dc02:	460d      	mov	r5, r1
 800dc04:	a180      	add	r1, pc, #512	; (adr r1, 800de08 <__kernel_tan+0x2a0>)
 800dc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0a:	f7f2 fb3d 	bl	8000288 <__aeabi_dsub>
 800dc0e:	4622      	mov	r2, r4
 800dc10:	462b      	mov	r3, r5
 800dc12:	f7f2 fb3b 	bl	800028c <__adddf3>
 800dc16:	f04f 0800 	mov.w	r8, #0
 800dc1a:	4682      	mov	sl, r0
 800dc1c:	468b      	mov	fp, r1
 800dc1e:	f04f 0900 	mov.w	r9, #0
 800dc22:	4652      	mov	r2, sl
 800dc24:	465b      	mov	r3, fp
 800dc26:	4650      	mov	r0, sl
 800dc28:	4659      	mov	r1, fp
 800dc2a:	f7f2 fce1 	bl	80005f0 <__aeabi_dmul>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	e9cd 0100 	strd	r0, r1, [sp]
 800dc36:	f7f2 fcdb 	bl	80005f0 <__aeabi_dmul>
 800dc3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc3e:	4604      	mov	r4, r0
 800dc40:	460d      	mov	r5, r1
 800dc42:	4650      	mov	r0, sl
 800dc44:	4659      	mov	r1, fp
 800dc46:	f7f2 fcd3 	bl	80005f0 <__aeabi_dmul>
 800dc4a:	a371      	add	r3, pc, #452	; (adr r3, 800de10 <__kernel_tan+0x2a8>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc54:	4620      	mov	r0, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	f7f2 fcca 	bl	80005f0 <__aeabi_dmul>
 800dc5c:	a36e      	add	r3, pc, #440	; (adr r3, 800de18 <__kernel_tan+0x2b0>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	f7f2 fb13 	bl	800028c <__adddf3>
 800dc66:	4622      	mov	r2, r4
 800dc68:	462b      	mov	r3, r5
 800dc6a:	f7f2 fcc1 	bl	80005f0 <__aeabi_dmul>
 800dc6e:	a36c      	add	r3, pc, #432	; (adr r3, 800de20 <__kernel_tan+0x2b8>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	f7f2 fb0a 	bl	800028c <__adddf3>
 800dc78:	4622      	mov	r2, r4
 800dc7a:	462b      	mov	r3, r5
 800dc7c:	f7f2 fcb8 	bl	80005f0 <__aeabi_dmul>
 800dc80:	a369      	add	r3, pc, #420	; (adr r3, 800de28 <__kernel_tan+0x2c0>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 fb01 	bl	800028c <__adddf3>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	f7f2 fcaf 	bl	80005f0 <__aeabi_dmul>
 800dc92:	a367      	add	r3, pc, #412	; (adr r3, 800de30 <__kernel_tan+0x2c8>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	f7f2 faf8 	bl	800028c <__adddf3>
 800dc9c:	4622      	mov	r2, r4
 800dc9e:	462b      	mov	r3, r5
 800dca0:	f7f2 fca6 	bl	80005f0 <__aeabi_dmul>
 800dca4:	a364      	add	r3, pc, #400	; (adr r3, 800de38 <__kernel_tan+0x2d0>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	f7f2 faef 	bl	800028c <__adddf3>
 800dcae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcb2:	f7f2 fc9d 	bl	80005f0 <__aeabi_dmul>
 800dcb6:	a362      	add	r3, pc, #392	; (adr r3, 800de40 <__kernel_tan+0x2d8>)
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	f7f2 fc94 	bl	80005f0 <__aeabi_dmul>
 800dcc8:	a35f      	add	r3, pc, #380	; (adr r3, 800de48 <__kernel_tan+0x2e0>)
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	f7f2 fadd 	bl	800028c <__adddf3>
 800dcd2:	4622      	mov	r2, r4
 800dcd4:	462b      	mov	r3, r5
 800dcd6:	f7f2 fc8b 	bl	80005f0 <__aeabi_dmul>
 800dcda:	a35d      	add	r3, pc, #372	; (adr r3, 800de50 <__kernel_tan+0x2e8>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	f7f2 fad4 	bl	800028c <__adddf3>
 800dce4:	4622      	mov	r2, r4
 800dce6:	462b      	mov	r3, r5
 800dce8:	f7f2 fc82 	bl	80005f0 <__aeabi_dmul>
 800dcec:	a35a      	add	r3, pc, #360	; (adr r3, 800de58 <__kernel_tan+0x2f0>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	f7f2 facb 	bl	800028c <__adddf3>
 800dcf6:	4622      	mov	r2, r4
 800dcf8:	462b      	mov	r3, r5
 800dcfa:	f7f2 fc79 	bl	80005f0 <__aeabi_dmul>
 800dcfe:	a358      	add	r3, pc, #352	; (adr r3, 800de60 <__kernel_tan+0x2f8>)
 800dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd04:	f7f2 fac2 	bl	800028c <__adddf3>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	f7f2 fc70 	bl	80005f0 <__aeabi_dmul>
 800dd10:	a355      	add	r3, pc, #340	; (adr r3, 800de68 <__kernel_tan+0x300>)
 800dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd16:	f7f2 fab9 	bl	800028c <__adddf3>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd22:	f7f2 fab3 	bl	800028c <__adddf3>
 800dd26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd2a:	f7f2 fc61 	bl	80005f0 <__aeabi_dmul>
 800dd2e:	4642      	mov	r2, r8
 800dd30:	464b      	mov	r3, r9
 800dd32:	f7f2 faab 	bl	800028c <__adddf3>
 800dd36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd3a:	f7f2 fc59 	bl	80005f0 <__aeabi_dmul>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4640      	mov	r0, r8
 800dd44:	4649      	mov	r1, r9
 800dd46:	f7f2 faa1 	bl	800028c <__adddf3>
 800dd4a:	a349      	add	r3, pc, #292	; (adr r3, 800de70 <__kernel_tan+0x308>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	4604      	mov	r4, r0
 800dd52:	460d      	mov	r5, r1
 800dd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd58:	f7f2 fc4a 	bl	80005f0 <__aeabi_dmul>
 800dd5c:	4622      	mov	r2, r4
 800dd5e:	462b      	mov	r3, r5
 800dd60:	f7f2 fa94 	bl	800028c <__adddf3>
 800dd64:	e9cd 0100 	strd	r0, r1, [sp]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4659      	mov	r1, fp
 800dd6e:	4650      	mov	r0, sl
 800dd70:	f7f2 fa8c 	bl	800028c <__adddf3>
 800dd74:	4b43      	ldr	r3, [pc, #268]	; (800de84 <__kernel_tan+0x31c>)
 800dd76:	429f      	cmp	r7, r3
 800dd78:	4604      	mov	r4, r0
 800dd7a:	460d      	mov	r5, r1
 800dd7c:	f340 8084 	ble.w	800de88 <__kernel_tan+0x320>
 800dd80:	4630      	mov	r0, r6
 800dd82:	f7f2 fbcf 	bl	8000524 <__aeabi_i2d>
 800dd86:	4622      	mov	r2, r4
 800dd88:	4680      	mov	r8, r0
 800dd8a:	4689      	mov	r9, r1
 800dd8c:	462b      	mov	r3, r5
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 fc2d 	bl	80005f0 <__aeabi_dmul>
 800dd96:	4642      	mov	r2, r8
 800dd98:	4606      	mov	r6, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	464b      	mov	r3, r9
 800dd9e:	4620      	mov	r0, r4
 800dda0:	4629      	mov	r1, r5
 800dda2:	f7f2 fa73 	bl	800028c <__adddf3>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4639      	mov	r1, r7
 800ddae:	f7f2 fd49 	bl	8000844 <__aeabi_ddiv>
 800ddb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddb6:	f7f2 fa67 	bl	8000288 <__aeabi_dsub>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	4650      	mov	r0, sl
 800ddc0:	4659      	mov	r1, fp
 800ddc2:	f7f2 fa61 	bl	8000288 <__aeabi_dsub>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	f7f2 fa5f 	bl	800028c <__adddf3>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	4649      	mov	r1, r9
 800ddd6:	f7f2 fa57 	bl	8000288 <__aeabi_dsub>
 800ddda:	9b02      	ldr	r3, [sp, #8]
 800dddc:	4604      	mov	r4, r0
 800ddde:	1798      	asrs	r0, r3, #30
 800dde0:	f000 0002 	and.w	r0, r0, #2
 800dde4:	f1c0 0001 	rsb	r0, r0, #1
 800dde8:	460d      	mov	r5, r1
 800ddea:	f7f2 fb9b 	bl	8000524 <__aeabi_i2d>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	f7f2 fbfb 	bl	80005f0 <__aeabi_dmul>
 800ddfa:	e6da      	b.n	800dbb2 <__kernel_tan+0x4a>
 800ddfc:	f3af 8000 	nop.w
 800de00:	54442d18 	.word	0x54442d18
 800de04:	3fe921fb 	.word	0x3fe921fb
 800de08:	33145c07 	.word	0x33145c07
 800de0c:	3c81a626 	.word	0x3c81a626
 800de10:	74bf7ad4 	.word	0x74bf7ad4
 800de14:	3efb2a70 	.word	0x3efb2a70
 800de18:	32f0a7e9 	.word	0x32f0a7e9
 800de1c:	3f12b80f 	.word	0x3f12b80f
 800de20:	1a8d1068 	.word	0x1a8d1068
 800de24:	3f3026f7 	.word	0x3f3026f7
 800de28:	fee08315 	.word	0xfee08315
 800de2c:	3f57dbc8 	.word	0x3f57dbc8
 800de30:	e96e8493 	.word	0xe96e8493
 800de34:	3f8226e3 	.word	0x3f8226e3
 800de38:	1bb341fe 	.word	0x1bb341fe
 800de3c:	3faba1ba 	.word	0x3faba1ba
 800de40:	db605373 	.word	0xdb605373
 800de44:	bef375cb 	.word	0xbef375cb
 800de48:	a03792a6 	.word	0xa03792a6
 800de4c:	3f147e88 	.word	0x3f147e88
 800de50:	f2f26501 	.word	0xf2f26501
 800de54:	3f4344d8 	.word	0x3f4344d8
 800de58:	c9560328 	.word	0xc9560328
 800de5c:	3f6d6d22 	.word	0x3f6d6d22
 800de60:	8406d637 	.word	0x8406d637
 800de64:	3f9664f4 	.word	0x3f9664f4
 800de68:	1110fe7a 	.word	0x1110fe7a
 800de6c:	3fc11111 	.word	0x3fc11111
 800de70:	55555563 	.word	0x55555563
 800de74:	3fd55555 	.word	0x3fd55555
 800de78:	3e2fffff 	.word	0x3e2fffff
 800de7c:	3ff00000 	.word	0x3ff00000
 800de80:	bff00000 	.word	0xbff00000
 800de84:	3fe59427 	.word	0x3fe59427
 800de88:	2e01      	cmp	r6, #1
 800de8a:	d036      	beq.n	800defa <__kernel_tan+0x392>
 800de8c:	460f      	mov	r7, r1
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	2000      	movs	r0, #0
 800de94:	491a      	ldr	r1, [pc, #104]	; (800df00 <__kernel_tan+0x398>)
 800de96:	f7f2 fcd5 	bl	8000844 <__aeabi_ddiv>
 800de9a:	2600      	movs	r6, #0
 800de9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dea0:	4652      	mov	r2, sl
 800dea2:	465b      	mov	r3, fp
 800dea4:	4630      	mov	r0, r6
 800dea6:	4639      	mov	r1, r7
 800dea8:	f7f2 f9ee 	bl	8000288 <__aeabi_dsub>
 800deac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800deb8:	f7f2 f9e6 	bl	8000288 <__aeabi_dsub>
 800debc:	4632      	mov	r2, r6
 800debe:	462b      	mov	r3, r5
 800dec0:	f7f2 fb96 	bl	80005f0 <__aeabi_dmul>
 800dec4:	4632      	mov	r2, r6
 800dec6:	4682      	mov	sl, r0
 800dec8:	468b      	mov	fp, r1
 800deca:	462b      	mov	r3, r5
 800decc:	4630      	mov	r0, r6
 800dece:	4639      	mov	r1, r7
 800ded0:	f7f2 fb8e 	bl	80005f0 <__aeabi_dmul>
 800ded4:	2200      	movs	r2, #0
 800ded6:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <__kernel_tan+0x39c>)
 800ded8:	f7f2 f9d8 	bl	800028c <__adddf3>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4650      	mov	r0, sl
 800dee2:	4659      	mov	r1, fp
 800dee4:	f7f2 f9d2 	bl	800028c <__adddf3>
 800dee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800deec:	f7f2 fb80 	bl	80005f0 <__aeabi_dmul>
 800def0:	4632      	mov	r2, r6
 800def2:	462b      	mov	r3, r5
 800def4:	f7f2 f9ca 	bl	800028c <__adddf3>
 800def8:	e65b      	b.n	800dbb2 <__kernel_tan+0x4a>
 800defa:	4682      	mov	sl, r0
 800defc:	468b      	mov	fp, r1
 800defe:	e65a      	b.n	800dbb6 <__kernel_tan+0x4e>
 800df00:	bff00000 	.word	0xbff00000
 800df04:	3ff00000 	.word	0x3ff00000

0800df08 <floor>:
 800df08:	ec51 0b10 	vmov	r0, r1, d0
 800df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800df14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800df18:	2e13      	cmp	r6, #19
 800df1a:	ee10 8a10 	vmov	r8, s0
 800df1e:	460c      	mov	r4, r1
 800df20:	ee10 5a10 	vmov	r5, s0
 800df24:	dc35      	bgt.n	800df92 <floor+0x8a>
 800df26:	2e00      	cmp	r6, #0
 800df28:	da17      	bge.n	800df5a <floor+0x52>
 800df2a:	a335      	add	r3, pc, #212	; (adr r3, 800e000 <floor+0xf8>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 f9ac 	bl	800028c <__adddf3>
 800df34:	2200      	movs	r2, #0
 800df36:	2300      	movs	r3, #0
 800df38:	f7f2 fdea 	bl	8000b10 <__aeabi_dcmpgt>
 800df3c:	b150      	cbz	r0, 800df54 <floor+0x4c>
 800df3e:	2c00      	cmp	r4, #0
 800df40:	da5a      	bge.n	800dff8 <floor+0xf0>
 800df42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800df46:	ea53 0308 	orrs.w	r3, r3, r8
 800df4a:	4b2f      	ldr	r3, [pc, #188]	; (800e008 <floor+0x100>)
 800df4c:	f04f 0500 	mov.w	r5, #0
 800df50:	bf18      	it	ne
 800df52:	461c      	movne	r4, r3
 800df54:	4621      	mov	r1, r4
 800df56:	4628      	mov	r0, r5
 800df58:	e025      	b.n	800dfa6 <floor+0x9e>
 800df5a:	4f2c      	ldr	r7, [pc, #176]	; (800e00c <floor+0x104>)
 800df5c:	4137      	asrs	r7, r6
 800df5e:	ea01 0307 	and.w	r3, r1, r7
 800df62:	4303      	orrs	r3, r0
 800df64:	d01f      	beq.n	800dfa6 <floor+0x9e>
 800df66:	a326      	add	r3, pc, #152	; (adr r3, 800e000 <floor+0xf8>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	f7f2 f98e 	bl	800028c <__adddf3>
 800df70:	2200      	movs	r2, #0
 800df72:	2300      	movs	r3, #0
 800df74:	f7f2 fdcc 	bl	8000b10 <__aeabi_dcmpgt>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d0eb      	beq.n	800df54 <floor+0x4c>
 800df7c:	2c00      	cmp	r4, #0
 800df7e:	bfbe      	ittt	lt
 800df80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800df84:	fa43 f606 	asrlt.w	r6, r3, r6
 800df88:	19a4      	addlt	r4, r4, r6
 800df8a:	ea24 0407 	bic.w	r4, r4, r7
 800df8e:	2500      	movs	r5, #0
 800df90:	e7e0      	b.n	800df54 <floor+0x4c>
 800df92:	2e33      	cmp	r6, #51	; 0x33
 800df94:	dd0b      	ble.n	800dfae <floor+0xa6>
 800df96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800df9a:	d104      	bne.n	800dfa6 <floor+0x9e>
 800df9c:	ee10 2a10 	vmov	r2, s0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	f7f2 f973 	bl	800028c <__adddf3>
 800dfa6:	ec41 0b10 	vmov	d0, r0, r1
 800dfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfae:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dfb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb6:	fa23 f707 	lsr.w	r7, r3, r7
 800dfba:	4238      	tst	r0, r7
 800dfbc:	d0f3      	beq.n	800dfa6 <floor+0x9e>
 800dfbe:	a310      	add	r3, pc, #64	; (adr r3, 800e000 <floor+0xf8>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 f962 	bl	800028c <__adddf3>
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f7f2 fda0 	bl	8000b10 <__aeabi_dcmpgt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d0bf      	beq.n	800df54 <floor+0x4c>
 800dfd4:	2c00      	cmp	r4, #0
 800dfd6:	da02      	bge.n	800dfde <floor+0xd6>
 800dfd8:	2e14      	cmp	r6, #20
 800dfda:	d103      	bne.n	800dfe4 <floor+0xdc>
 800dfdc:	3401      	adds	r4, #1
 800dfde:	ea25 0507 	bic.w	r5, r5, r7
 800dfe2:	e7b7      	b.n	800df54 <floor+0x4c>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dfea:	fa03 f606 	lsl.w	r6, r3, r6
 800dfee:	4435      	add	r5, r6
 800dff0:	45a8      	cmp	r8, r5
 800dff2:	bf88      	it	hi
 800dff4:	18e4      	addhi	r4, r4, r3
 800dff6:	e7f2      	b.n	800dfde <floor+0xd6>
 800dff8:	2500      	movs	r5, #0
 800dffa:	462c      	mov	r4, r5
 800dffc:	e7aa      	b.n	800df54 <floor+0x4c>
 800dffe:	bf00      	nop
 800e000:	8800759c 	.word	0x8800759c
 800e004:	7e37e43c 	.word	0x7e37e43c
 800e008:	bff00000 	.word	0xbff00000
 800e00c:	000fffff 	.word	0x000fffff

0800e010 <matherr>:
 800e010:	2000      	movs	r0, #0
 800e012:	4770      	bx	lr
 800e014:	0000      	movs	r0, r0
	...

0800e018 <scalbn>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	ec55 4b10 	vmov	r4, r5, d0
 800e01e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e022:	4606      	mov	r6, r0
 800e024:	462b      	mov	r3, r5
 800e026:	b9b2      	cbnz	r2, 800e056 <scalbn+0x3e>
 800e028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e02c:	4323      	orrs	r3, r4
 800e02e:	d03c      	beq.n	800e0aa <scalbn+0x92>
 800e030:	2200      	movs	r2, #0
 800e032:	4b33      	ldr	r3, [pc, #204]	; (800e100 <scalbn+0xe8>)
 800e034:	4629      	mov	r1, r5
 800e036:	ee10 0a10 	vmov	r0, s0
 800e03a:	f7f2 fad9 	bl	80005f0 <__aeabi_dmul>
 800e03e:	4a31      	ldr	r2, [pc, #196]	; (800e104 <scalbn+0xec>)
 800e040:	4296      	cmp	r6, r2
 800e042:	4604      	mov	r4, r0
 800e044:	460d      	mov	r5, r1
 800e046:	460b      	mov	r3, r1
 800e048:	da13      	bge.n	800e072 <scalbn+0x5a>
 800e04a:	a329      	add	r3, pc, #164	; (adr r3, 800e0f0 <scalbn+0xd8>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f2 face 	bl	80005f0 <__aeabi_dmul>
 800e054:	e00a      	b.n	800e06c <scalbn+0x54>
 800e056:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e05a:	428a      	cmp	r2, r1
 800e05c:	d10c      	bne.n	800e078 <scalbn+0x60>
 800e05e:	ee10 2a10 	vmov	r2, s0
 800e062:	462b      	mov	r3, r5
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 f910 	bl	800028c <__adddf3>
 800e06c:	4604      	mov	r4, r0
 800e06e:	460d      	mov	r5, r1
 800e070:	e01b      	b.n	800e0aa <scalbn+0x92>
 800e072:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e076:	3a36      	subs	r2, #54	; 0x36
 800e078:	4432      	add	r2, r6
 800e07a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e07e:	428a      	cmp	r2, r1
 800e080:	dd0b      	ble.n	800e09a <scalbn+0x82>
 800e082:	ec45 4b11 	vmov	d1, r4, r5
 800e086:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e0f8 <scalbn+0xe0>
 800e08a:	f000 f83f 	bl	800e10c <copysign>
 800e08e:	a31a      	add	r3, pc, #104	; (adr r3, 800e0f8 <scalbn+0xe0>)
 800e090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e094:	ec51 0b10 	vmov	r0, r1, d0
 800e098:	e7da      	b.n	800e050 <scalbn+0x38>
 800e09a:	2a00      	cmp	r2, #0
 800e09c:	dd08      	ble.n	800e0b0 <scalbn+0x98>
 800e09e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0aa:	ec45 4b10 	vmov	d0, r4, r5
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
 800e0b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e0b4:	da0d      	bge.n	800e0d2 <scalbn+0xba>
 800e0b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e0ba:	429e      	cmp	r6, r3
 800e0bc:	ec45 4b11 	vmov	d1, r4, r5
 800e0c0:	dce1      	bgt.n	800e086 <scalbn+0x6e>
 800e0c2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800e0f0 <scalbn+0xd8>
 800e0c6:	f000 f821 	bl	800e10c <copysign>
 800e0ca:	a309      	add	r3, pc, #36	; (adr r3, 800e0f0 <scalbn+0xd8>)
 800e0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d0:	e7e0      	b.n	800e094 <scalbn+0x7c>
 800e0d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0d6:	3236      	adds	r2, #54	; 0x36
 800e0d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	4b08      	ldr	r3, [pc, #32]	; (800e108 <scalbn+0xf0>)
 800e0e8:	e7b2      	b.n	800e050 <scalbn+0x38>
 800e0ea:	bf00      	nop
 800e0ec:	f3af 8000 	nop.w
 800e0f0:	c2f8f359 	.word	0xc2f8f359
 800e0f4:	01a56e1f 	.word	0x01a56e1f
 800e0f8:	8800759c 	.word	0x8800759c
 800e0fc:	7e37e43c 	.word	0x7e37e43c
 800e100:	43500000 	.word	0x43500000
 800e104:	ffff3cb0 	.word	0xffff3cb0
 800e108:	3c900000 	.word	0x3c900000

0800e10c <copysign>:
 800e10c:	ec53 2b10 	vmov	r2, r3, d0
 800e110:	ee11 0a90 	vmov	r0, s3
 800e114:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e118:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e11c:	ea41 0300 	orr.w	r3, r1, r0
 800e120:	ec43 2b10 	vmov	d0, r2, r3
 800e124:	4770      	bx	lr
	...

0800e128 <__errno>:
 800e128:	4b01      	ldr	r3, [pc, #4]	; (800e130 <__errno+0x8>)
 800e12a:	6818      	ldr	r0, [r3, #0]
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	200002a8 	.word	0x200002a8

0800e134 <_sbrk>:
 800e134:	4b04      	ldr	r3, [pc, #16]	; (800e148 <_sbrk+0x14>)
 800e136:	6819      	ldr	r1, [r3, #0]
 800e138:	4602      	mov	r2, r0
 800e13a:	b909      	cbnz	r1, 800e140 <_sbrk+0xc>
 800e13c:	4903      	ldr	r1, [pc, #12]	; (800e14c <_sbrk+0x18>)
 800e13e:	6019      	str	r1, [r3, #0]
 800e140:	6818      	ldr	r0, [r3, #0]
 800e142:	4402      	add	r2, r0
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	4770      	bx	lr
 800e148:	20000610 	.word	0x20000610
 800e14c:	2000adec 	.word	0x2000adec

0800e150 <_init>:
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	bf00      	nop
 800e154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e156:	bc08      	pop	{r3}
 800e158:	469e      	mov	lr, r3
 800e15a:	4770      	bx	lr

0800e15c <_fini>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	bf00      	nop
 800e160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e162:	bc08      	pop	{r3}
 800e164:	469e      	mov	lr, r3
 800e166:	4770      	bx	lr
