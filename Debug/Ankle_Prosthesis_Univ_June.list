
Ankle_Prosthesis_Univ_June.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800b94c  0800b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000049c  20000000  0800be7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002049c  2**0
                  CONTENTS
  8 .bss          0000a930  200004a0  200004a0  000204a0  2**3
                  ALLOC
  9 ._user_heap_stack 00003000  2000add0  2000add0  000204a0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004f2db  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008669  00000000  00000000  0006f7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001942d  00000000  00000000  00077e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c30  00000000  00000000  00091240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000033c0  00000000  00000000  00092e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000168ac  00000000  00000000  00096230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a3da  00000000  00000000  000acadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000b6eb6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005c00  00000000  00000000  000b6f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000bcb34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a0 	.word	0x200004a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b934 	.word	0x0800b934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a4 	.word	0x200004a4
 80001cc:	0800b934 	.word	0x0800b934

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295
 8000c68:	f000 b97a 	b.w	8000f60 <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f806 	bl	8000c84 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	468c      	mov	ip, r1
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	9e08      	ldr	r6, [sp, #32]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d151      	bne.n	8000d38 <__udivmoddi4+0xb4>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d96d      	bls.n	8000d76 <__udivmoddi4+0xf2>
 8000c9a:	fab2 fe82 	clz	lr, r2
 8000c9e:	f1be 0f00 	cmp.w	lr, #0
 8000ca2:	d00b      	beq.n	8000cbc <__udivmoddi4+0x38>
 8000ca4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cc0:	0c25      	lsrs	r5, r4, #16
 8000cc2:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc6:	fa1f f987 	uxth.w	r9, r7
 8000cca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cd2:	fb08 f309 	mul.w	r3, r8, r9
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x6c>
 8000cda:	19ed      	adds	r5, r5, r7
 8000cdc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ce0:	f080 8123 	bcs.w	8000f2a <__udivmoddi4+0x2a6>
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	f240 8120 	bls.w	8000f2a <__udivmoddi4+0x2a6>
 8000cea:	f1a8 0802 	sub.w	r8, r8, #2
 8000cee:	443d      	add	r5, r7
 8000cf0:	1aed      	subs	r5, r5, r3
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb00 f909 	mul.w	r9, r0, r9
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x98>
 8000d08:	19e4      	adds	r4, r4, r7
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0e:	f080 810a 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000d12:	45a1      	cmp	r9, r4
 8000d14:	f240 8107 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	443c      	add	r4, r7
 8000d1c:	eba4 0409 	sub.w	r4, r4, r9
 8000d20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d24:	2100      	movs	r1, #0
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d061      	beq.n	8000dee <__udivmoddi4+0x16a>
 8000d2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2e:	2300      	movs	r3, #0
 8000d30:	6034      	str	r4, [r6, #0]
 8000d32:	6073      	str	r3, [r6, #4]
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xc8>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d054      	beq.n	8000dea <__udivmoddi4+0x166>
 8000d40:	2100      	movs	r1, #0
 8000d42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d46:	4608      	mov	r0, r1
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	fab3 f183 	clz	r1, r3
 8000d50:	2900      	cmp	r1, #0
 8000d52:	f040 808e 	bne.w	8000e72 <__udivmoddi4+0x1ee>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xdc>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80fa 	bhi.w	8000f54 <__udivmoddi4+0x2d0>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb65 0503 	sbc.w	r5, r5, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	46ac      	mov	ip, r5
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d03f      	beq.n	8000dee <__udivmoddi4+0x16a>
 8000d6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	b912      	cbnz	r2, 8000d7e <__udivmoddi4+0xfa>
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7e:	fab7 fe87 	clz	lr, r7
 8000d82:	f1be 0f00 	cmp.w	lr, #0
 8000d86:	d134      	bne.n	8000df2 <__udivmoddi4+0x16e>
 8000d88:	1beb      	subs	r3, r5, r7
 8000d8a:	0c3a      	lsrs	r2, r7, #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d96:	0c25      	lsrs	r5, r4, #16
 8000d98:	fb02 3318 	mls	r3, r2, r8, r3
 8000d9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da0:	fb0c f308 	mul.w	r3, ip, r8
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x134>
 8000da8:	19ed      	adds	r5, r5, r7
 8000daa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x132>
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	f200 80d1 	bhi.w	8000f58 <__udivmoddi4+0x2d4>
 8000db6:	4680      	mov	r8, r0
 8000db8:	1aed      	subs	r5, r5, r3
 8000dba:	b2a3      	uxth	r3, r4
 8000dbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x15c>
 8000dd0:	19e4      	adds	r4, r4, r7
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x15a>
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	f200 80b8 	bhi.w	8000f4e <__udivmoddi4+0x2ca>
 8000dde:	4618      	mov	r0, r3
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de8:	e79d      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000dea:	4631      	mov	r1, r6
 8000dec:	4630      	mov	r0, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1ce 0420 	rsb	r4, lr, #32
 8000df6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000e02:	0c3a      	lsrs	r2, r7, #16
 8000e04:	fa25 f404 	lsr.w	r4, r5, r4
 8000e08:	ea48 0803 	orr.w	r8, r8, r3
 8000e0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e14:	fb02 4411 	mls	r4, r2, r1, r4
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e20:	fb01 f30c 	mul.w	r3, r1, ip
 8000e24:	42ab      	cmp	r3, r5
 8000e26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x1bc>
 8000e2c:	19ed      	adds	r5, r5, r7
 8000e2e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e32:	f080 808a 	bcs.w	8000f4a <__udivmoddi4+0x2c6>
 8000e36:	42ab      	cmp	r3, r5
 8000e38:	f240 8087 	bls.w	8000f4a <__udivmoddi4+0x2c6>
 8000e3c:	3902      	subs	r1, #2
 8000e3e:	443d      	add	r5, r7
 8000e40:	1aeb      	subs	r3, r5, r3
 8000e42:	fa1f f588 	uxth.w	r5, r8
 8000e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e52:	fb00 f30c 	mul.w	r3, r0, ip
 8000e56:	42ab      	cmp	r3, r5
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1e6>
 8000e5a:	19ed      	adds	r5, r5, r7
 8000e5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e60:	d26f      	bcs.n	8000f42 <__udivmoddi4+0x2be>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d96d      	bls.n	8000f42 <__udivmoddi4+0x2be>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443d      	add	r5, r7
 8000e6a:	1aeb      	subs	r3, r5, r3
 8000e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e70:	e78f      	b.n	8000d92 <__udivmoddi4+0x10e>
 8000e72:	f1c1 0720 	rsb	r7, r1, #32
 8000e76:	fa22 f807 	lsr.w	r8, r2, r7
 8000e7a:	408b      	lsls	r3, r1
 8000e7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000e80:	ea48 0303 	orr.w	r3, r8, r3
 8000e84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9e:	fa1f f883 	uxth.w	r8, r3
 8000ea2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea6:	fb09 f408 	mul.w	r4, r9, r8
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x244>
 8000eb6:	18ed      	adds	r5, r5, r3
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d243      	bcs.n	8000f46 <__udivmoddi4+0x2c2>
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	d941      	bls.n	8000f46 <__udivmoddi4+0x2c2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	441d      	add	r5, r3
 8000ec8:	1b2d      	subs	r5, r5, r4
 8000eca:	fa1f fe8e 	uxth.w	lr, lr
 8000ece:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ed2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45a0      	cmp	r8, r4
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x26e>
 8000ee2:	18e4      	adds	r4, r4, r3
 8000ee4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee8:	d229      	bcs.n	8000f3e <__udivmoddi4+0x2ba>
 8000eea:	45a0      	cmp	r8, r4
 8000eec:	d927      	bls.n	8000f3e <__udivmoddi4+0x2ba>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	441c      	add	r4, r3
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba4 0408 	sub.w	r4, r4, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	464d      	mov	r5, r9
 8000f04:	d315      	bcc.n	8000f32 <__udivmoddi4+0x2ae>
 8000f06:	d012      	beq.n	8000f2e <__udivmoddi4+0x2aa>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x29c>
 8000f0a:	ebba 030e 	subs.w	r3, sl, lr
 8000f0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40cb      	lsrs	r3, r1
 8000f18:	431f      	orrs	r7, r3
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	6037      	str	r7, [r6, #0]
 8000f1e:	6074      	str	r4, [r6, #4]
 8000f20:	2100      	movs	r1, #0
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	4618      	mov	r0, r3
 8000f28:	e6f8      	b.n	8000d1c <__udivmoddi4+0x98>
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	e6e0      	b.n	8000cf0 <__udivmoddi4+0x6c>
 8000f2e:	45c2      	cmp	sl, r8
 8000f30:	d2ea      	bcs.n	8000f08 <__udivmoddi4+0x284>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 0503 	sbc.w	r5, r9, r3
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e4      	b.n	8000f08 <__udivmoddi4+0x284>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d7      	b.n	8000ef2 <__udivmoddi4+0x26e>
 8000f42:	4640      	mov	r0, r8
 8000f44:	e791      	b.n	8000e6a <__udivmoddi4+0x1e6>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7be      	b.n	8000ec8 <__udivmoddi4+0x244>
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	e778      	b.n	8000e40 <__udivmoddi4+0x1bc>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	e745      	b.n	8000de0 <__udivmoddi4+0x15c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xe6>
 8000f58:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5c:	443d      	add	r5, r7
 8000f5e:	e72b      	b.n	8000db8 <__udivmoddi4+0x134>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8000f64:	b530      	push	{r4, r5, lr}
    
    return -1*(K1*(KneeAngle-Theta_E)+B*Knee_Velocity);
 8000f66:	ec53 2b14 	vmov	r2, r3, d4
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8000f6a:	b087      	sub	sp, #28
    return -1*(K1*(KneeAngle-Theta_E)+B*Knee_Velocity);
 8000f6c:	ec51 0b10 	vmov	r0, r1, d0
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8000f70:	ed8d 1b04 	vstr	d1, [sp, #16]
 8000f74:	ed8d 3b00 	vstr	d3, [sp]
 8000f78:	ed8d 2b02 	vstr	d2, [sp, #8]
    return -1*(K1*(KneeAngle-Theta_E)+B*Knee_Velocity);
 8000f7c:	f7ff f984 	bl	8000288 <__aeabi_dsub>
 8000f80:	ed9d 2b02 	vldr	d2, [sp, #8]
 8000f84:	ec53 2b12 	vmov	r2, r3, d2
 8000f88:	f7ff fb32 	bl	80005f0 <__aeabi_dmul>
 8000f8c:	ed9d 1b04 	vldr	d1, [sp, #16]
 8000f90:	ed9d 3b00 	vldr	d3, [sp]
 8000f94:	ec53 2b11 	vmov	r2, r3, d1
 8000f98:	4604      	mov	r4, r0
 8000f9a:	460d      	mov	r5, r1
 8000f9c:	ec51 0b13 	vmov	r0, r1, d3
 8000fa0:	f7ff fb26 	bl	80005f0 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4620      	mov	r0, r4
 8000faa:	4629      	mov	r1, r5
 8000fac:	f7ff f96e 	bl	800028c <__adddf3>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
}
 8000fb6:	ec43 2b10 	vmov	d0, r2, r3
 8000fba:	b007      	add	sp, #28
 8000fbc:	bd30      	pop	{r4, r5, pc}
	...

08000fc0 <RateLimiter>:
            control_command = 0;
    return control_command;
}

float RateLimiter(float percent_old,float percent)
{
 8000fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    
    float percent_new = percent;
    float rate;

    rate = (percent_new-percent_old)/loop_time;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <RateLimiter+0x98>)
 8000fc6:	ee70 7ac0 	vsub.f32	s15, s1, s0
 8000fca:	e9d3 4500 	ldrd	r4, r5, [r3]
{
 8000fce:	ed2d 8b02 	vpush	{d8}
    rate = (percent_new-percent_old)/loop_time;
 8000fd2:	ee17 0a90 	vmov	r0, s15
{
 8000fd6:	eef0 8a40 	vmov.f32	s17, s0
 8000fda:	eeb0 8a60 	vmov.f32	s16, s1
    rate = (percent_new-percent_old)/loop_time;
 8000fde:	f7ff fab3 	bl	8000548 <__aeabi_f2d>
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	f7ff fc2d 	bl	8000844 <__aeabi_ddiv>
 8000fea:	f7ff fde3 	bl	8000bb4 <__aeabi_d2f>
    if (rate > rising_slew_rate)
 8000fee:	f7ff faab 	bl	8000548 <__aeabi_f2d>
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <RateLimiter+0x9c>)
 8000ff4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8000ff8:	4632      	mov	r2, r6
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4680      	mov	r8, r0
 8000ffe:	4689      	mov	r9, r1
 8001000:	f7ff fd86 	bl	8000b10 <__aeabi_dcmpgt>
 8001004:	b1b0      	cbz	r0, 8001034 <RateLimiter+0x74>
        percent_new = loop_time*rising_slew_rate + percent_old;
    else if (rate < falling_slew_rate)
        percent_new = loop_time*falling_slew_rate + percent_old;
 8001006:	4632      	mov	r2, r6
 8001008:	463b      	mov	r3, r7
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff faef 	bl	80005f0 <__aeabi_dmul>
 8001012:	4604      	mov	r4, r0
 8001014:	ee18 0a90 	vmov	r0, s17
 8001018:	460d      	mov	r5, r1
 800101a:	f7ff fa95 	bl	8000548 <__aeabi_f2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	f7ff fdc3 	bl	8000bb4 <__aeabi_d2f>
 800102e:	ee08 0a10 	vmov	s16, r0
 8001032:	e00a      	b.n	800104a <RateLimiter+0x8a>
    else if (rate < falling_slew_rate)
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <RateLimiter+0xa0>)
 8001036:	e9d3 6700 	ldrd	r6, r7, [r3]
 800103a:	4640      	mov	r0, r8
 800103c:	4632      	mov	r2, r6
 800103e:	463b      	mov	r3, r7
 8001040:	4649      	mov	r1, r9
 8001042:	f7ff fd47 	bl	8000ad4 <__aeabi_dcmplt>
 8001046:	2800      	cmp	r0, #0
 8001048:	d1dd      	bne.n	8001006 <RateLimiter+0x46>
    return percent_new;
    
}
 800104a:	eeb0 0a48 	vmov.f32	s0, s16
 800104e:	ecbd 8b02 	vpop	{d8}
 8001052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20000010 	.word	0x20000010
 8001060:	20000000 	.word	0x20000000

08001064 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8001064:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8001066:	2301      	movs	r3, #1
  
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001068:	2110      	movs	r1, #16
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <BSP_SD_IsDetected+0x24>)
  __IO uint8_t status = SD_PRESENT;
 800106c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001070:	f003 fde0 	bl	8004c34 <HAL_GPIO_ReadPin>
 8001074:	b110      	cbz	r0, 800107c <BSP_SD_IsDetected+0x18>
  {
   status = SD_NOT_PRESENT;
 8001076:	2300      	movs	r3, #0
 8001078:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  return status;
 800107c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001080:	b003      	add	sp, #12
 8001082:	f85d fb04 	ldr.w	pc, [sp], #4
 8001086:	bf00      	nop
 8001088:	48000800 	.word	0x48000800

0800108c <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 800108c:	4801      	ldr	r0, [pc, #4]	; (8001094 <BSP_SD_IRQHandler+0x8>)
 800108e:	f005 b869 	b.w	8006164 <HAL_SD_IRQHandler>
 8001092:	bf00      	nop
 8001094:	20008660 	.word	0x20008660

08001098 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 800109a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800109c:	f003 bca6 	b.w	80049ec <HAL_DMA_IRQHandler>
 80010a0:	20008660 	.word	0x20008660

080010a4 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80010a4:	4b01      	ldr	r3, [pc, #4]	; (80010ac <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80010a6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80010a8:	f003 bca0 	b.w	80049ec <HAL_DMA_IRQHandler>
 80010ac:	20008660 	.word	0x20008660

080010b0 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <BSP_SD_GetStatus+0x8>)
 80010b2:	f005 bca5 	b.w	8006a00 <HAL_SD_GetStatus>
 80010b6:	bf00      	nop
 80010b8:	20008660 	.word	0x20008660

080010bc <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80010bc:	4601      	mov	r1, r0
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <BSP_SD_GetCardInfo+0x8>)
 80010c0:	f005 b8b0 	b.w	8006224 <HAL_SD_Get_CardInfo>
 80010c4:	20008660 	.word	0x20008660

080010c8 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80010c8:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80010ca:	4c15      	ldr	r4, [pc, #84]	; (8001120 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80010cc:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80010ce:	2307      	movs	r3, #7
 80010d0:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80010d6:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e0:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80010e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010e6:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80010e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ec:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80010ee:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <SD_DMAConfigRx+0x5c>)
 80010f2:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80010f4:	4620      	mov	r0, r4
 80010f6:	f003 fc5b 	bl	80049b0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80010fa:	4620      	mov	r0, r4
 80010fc:	f003 fbd2 	bl	80048a4 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8001100:	4620      	mov	r0, r4
 8001102:	f003 fb5f 	bl	80047c4 <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <SD_DMAConfigRx+0x60>)
 8001108:	2230      	movs	r2, #48	; 0x30
 800110a:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800110e:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001114:	605a      	str	r2, [r3, #4]
}
 8001116:	bf14      	ite	ne
 8001118:	2029      	movne	r0, #41	; 0x29
 800111a:	2000      	moveq	r0, #0
 800111c:	bd10      	pop	{r4, pc}
 800111e:	bf00      	nop
 8001120:	200004bc 	.word	0x200004bc
 8001124:	40020444 	.word	0x40020444
 8001128:	e000e100 	.word	0xe000e100

0800112c <BSP_SD_ReadBlocks_DMA>:
{
 800112c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 800112e:	4c10      	ldr	r4, [pc, #64]	; (8001170 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 8001130:	4605      	mov	r5, r0
 8001132:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001134:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 8001136:	2300      	movs	r3, #0
{
 8001138:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 800113a:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800113c:	f7ff ffc4 	bl	80010c8 <SD_DMAConfigRx>
  if(state == MSD_OK)
 8001140:	b998      	cbnz	r0, 800116a <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	9b08      	ldr	r3, [sp, #32]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4632      	mov	r2, r6
 800114c:	463b      	mov	r3, r7
 800114e:	4629      	mov	r1, r5
 8001150:	4620      	mov	r0, r4
 8001152:	f004 ff0d 	bl	8005f70 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 8001156:	b940      	cbnz	r0, 800116a <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001158:	4906      	ldr	r1, [pc, #24]	; (8001174 <BSP_SD_ReadBlocks_DMA+0x48>)
 800115a:	4620      	mov	r0, r4
 800115c:	f005 fc1f 	bl	800699e <HAL_SD_CheckReadOperation>
 8001160:	3000      	adds	r0, #0
 8001162:	bf18      	it	ne
 8001164:	2001      	movne	r0, #1
}
 8001166:	b003      	add	sp, #12
 8001168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800116a:	2001      	movs	r0, #1
 800116c:	e7fb      	b.n	8001166 <BSP_SD_ReadBlocks_DMA+0x3a>
 800116e:	bf00      	nop
 8001170:	20008660 	.word	0x20008660
 8001174:	00989680 	.word	0x00989680

08001178 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8001178:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800117a:	4c15      	ldr	r4, [pc, #84]	; (80011d0 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 800117c:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800117e:	2307      	movs	r3, #7
 8001180:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001182:	2310      	movs	r3, #16
 8001184:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800118e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001192:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001198:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800119a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800119e:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80011a0:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <SD_DMAConfigTx+0x5c>)
 80011a4:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80011a6:	4620      	mov	r0, r4
 80011a8:	f003 fc02 	bl	80049b0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f003 fb79 	bl	80048a4 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f003 fb06 	bl	80047c4 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <SD_DMAConfigTx+0x60>)
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80011c0:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c6:	605a      	str	r2, [r3, #4]
}
 80011c8:	bf14      	ite	ne
 80011ca:	2029      	movne	r0, #41	; 0x29
 80011cc:	2000      	moveq	r0, #0
 80011ce:	bd10      	pop	{r4, pc}
 80011d0:	20000504 	.word	0x20000504
 80011d4:	40020444 	.word	0x40020444
 80011d8:	e000e100 	.word	0xe000e100

080011dc <BSP_SD_Init>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 80011de:	2214      	movs	r2, #20
{
 80011e0:	b08a      	sub	sp, #40	; 0x28
  uSdHandle.Instance = SDMMC1;
 80011e2:	4c37      	ldr	r4, [pc, #220]	; (80012c0 <BSP_SD_Init+0xe4>)
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <BSP_SD_Init+0xe8>)
 80011e6:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80011e8:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 80011ea:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 80011ec:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80011f0:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80011f2:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011f4:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80011f6:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011f8:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 80011fa:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80011fc:	f009 fa61 	bl	800a6c2 <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <BSP_SD_Init+0xec>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001202:	4832      	ldr	r0, [pc, #200]	; (80012cc <BSP_SD_Init+0xf0>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001206:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800120a:	661a      	str	r2, [r3, #96]	; 0x60
 800120c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800120e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8001216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001218:	f042 0202 	orr.w	r2, r2, #2
 800121c:	649a      	str	r2, [r3, #72]	; 0x48
 800121e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001220:	f002 0202 	and.w	r2, r2, #2
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122a:	f042 0204 	orr.w	r2, r2, #4
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001232:	f002 0204 	and.w	r2, r2, #4
 8001236:	9202      	str	r2, [sp, #8]
 8001238:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800123c:	f042 0208 	orr.w	r2, r2, #8
 8001240:	64da      	str	r2, [r3, #76]	; 0x4c
 8001242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001244:	f002 0208 	and.w	r2, r2, #8
 8001248:	9203      	str	r2, [sp, #12]
 800124a:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 800124c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124e:	432a      	orrs	r2, r5
 8001250:	64da      	str	r2, [r3, #76]	; 0x4c
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8001254:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8001256:	402b      	ands	r3, r5
 8001258:	9304      	str	r3, [sp, #16]
 800125a:	9b04      	ldr	r3, [sp, #16]
 800125c:	4d1c      	ldr	r5, [pc, #112]	; (80012d0 <BSP_SD_Init+0xf4>)
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8001266:	230c      	movs	r3, #12
 8001268:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800126a:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800126c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001270:	9305      	str	r3, [sp, #20]
 8001272:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001276:	f003 fc01 	bl	8004a7c <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 800127a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800127c:	4815      	ldr	r0, [pc, #84]	; (80012d4 <BSP_SD_Init+0xf8>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 800127e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8001280:	a905      	add	r1, sp, #20
 8001282:	f003 fbfb 	bl	8004a7c <HAL_GPIO_Init>
 8001286:	606e      	str	r6, [r5, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff ff75 	bl	8001178 <SD_DMAConfigTx>
 800128e:	b900      	cbnz	r0, 8001292 <BSP_SD_Init+0xb6>
 8001290:	606e      	str	r6, [r5, #4]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 8001292:	f7ff fee7 	bl	8001064 <BSP_SD_IsDetected>
 8001296:	2801      	cmp	r0, #1
 8001298:	d002      	beq.n	80012a0 <BSP_SD_Init+0xc4>
    return MSD_ERROR;
 800129a:	2001      	movs	r0, #1
}
 800129c:	b00a      	add	sp, #40	; 0x28
 800129e:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80012a0:	490d      	ldr	r1, [pc, #52]	; (80012d8 <BSP_SD_Init+0xfc>)
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <BSP_SD_Init+0xe4>)
 80012a4:	f005 f8f8 	bl	8006498 <HAL_SD_Init>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d1f6      	bne.n	800129a <BSP_SD_Init+0xbe>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <BSP_SD_Init+0xe4>)
 80012b2:	f005 fac9 	bl	8006848 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80012b6:	3000      	adds	r0, #0
 80012b8:	bf18      	it	ne
 80012ba:	2001      	movne	r0, #1
 80012bc:	e7ee      	b.n	800129c <BSP_SD_Init+0xc0>
 80012be:	bf00      	nop
 80012c0:	20008660 	.word	0x20008660
 80012c4:	40012800 	.word	0x40012800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000800 	.word	0x48000800
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	20000550 	.word	0x20000550

080012dc <BSP_SD_WriteBlocks_DMA>:
{
 80012dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 80012de:	4c10      	ldr	r4, [pc, #64]	; (8001320 <BSP_SD_WriteBlocks_DMA+0x44>)
{
 80012e0:	4605      	mov	r5, r0
 80012e2:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 80012e4:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 80012e6:	2300      	movs	r3, #0
{
 80012e8:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 80012ea:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 80012ec:	f7ff ff44 	bl	8001178 <SD_DMAConfigTx>
  if(state == MSD_OK)
 80012f0:	b998      	cbnz	r0, 800131a <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80012f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	9b08      	ldr	r3, [sp, #32]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4632      	mov	r2, r6
 80012fc:	463b      	mov	r3, r7
 80012fe:	4629      	mov	r1, r5
 8001300:	4620      	mov	r0, r4
 8001302:	f004 feaf 	bl	8006064 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 8001306:	b940      	cbnz	r0, 800131a <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001308:	4906      	ldr	r1, [pc, #24]	; (8001324 <BSP_SD_WriteBlocks_DMA+0x48>)
 800130a:	4620      	mov	r0, r4
 800130c:	f005 fb9d 	bl	8006a4a <HAL_SD_CheckWriteOperation>
 8001310:	3000      	adds	r0, #0
 8001312:	bf18      	it	ne
 8001314:	2001      	movne	r0, #1
}
 8001316:	b003      	add	sp, #12
 8001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800131a:	2001      	movs	r0, #1
 800131c:	e7fb      	b.n	8001316 <BSP_SD_WriteBlocks_DMA+0x3a>
 800131e:	bf00      	nop
 8001320:	20008660 	.word	0x20008660
 8001324:	00989680 	.word	0x00989680

08001328 <controller_impedance>:


//struct st_impedance controller_impedance(float angle, float ankle_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float ankle_velocity,float Heel_pressure, float Toe_pressure)
{
 8001328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    switch (state)
 800132c:	4cca      	ldr	r4, [pc, #808]	; (8001658 <controller_impedance+0x330>)
 800132e:	4ecb      	ldr	r6, [pc, #812]	; (800165c <controller_impedance+0x334>)
 8001330:	7823      	ldrb	r3, [r4, #0]
 8001332:	4dcb      	ldr	r5, [pc, #812]	; (8001660 <controller_impedance+0x338>)
{
 8001334:	ed2d 8b02 	vpush	{d8}
 8001338:	4607      	mov	r7, r0
 800133a:	b082      	sub	sp, #8
 800133c:	eeb0 8a40 	vmov.f32	s16, s0
 8001340:	ee10 0a90 	vmov	r0, s1
    switch (state)
 8001344:	2b04      	cmp	r3, #4
 8001346:	d85d      	bhi.n	8001404 <controller_impedance+0xdc>
 8001348:	e8df f013 	tbh	[pc, r3, lsl #1]
 800134c:	007c0005 	.word	0x007c0005
 8001350:	00f800d9 	.word	0x00f800d9
 8001354:	0110      	.short	0x0110
    // state 0
    case ST_EARLY_STANCE:

//            if (angle > MS_LS_switching_angle && ankle_velocity>=40)

        if (angle > ES_LS_switching_angle && Toe_pressure>=Loadcell_Toe_pressure)
 8001356:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800135a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd09      	ble.n	8001378 <controller_impedance+0x50>
 8001364:	eddf 7abf 	vldr	s15, [pc, #764]	; 8001664 <controller_impedance+0x33c>
 8001368:	eef4 1ae7 	vcmpe.f32	s3, s15
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	db02      	blt.n	8001378 <controller_impedance+0x50>
        {
           state = ST_LATE_STANCE;
 8001372:	2302      	movs	r3, #2
      case ST_LATE_SWING:

          //if (fabsf(ac_x)>= 32000)  // 32767 is 2g
       if (Heel_pressure>= Loadcell_Heel_Strike)
      {
              state = ST_EARLY_STANCE;
 8001374:	7023      	strb	r3, [r4, #0]
              
              break;
 8001376:	e045      	b.n	8001404 <controller_impedance+0xdc>
        d_torque = Impedance(angle, ankle_velocity, ES_stiffness, ES_damping, ES_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8001378:	f7ff f8e6 	bl	8000548 <__aeabi_f2d>
 800137c:	e9cd 0100 	strd	r0, r1, [sp]
 8001380:	ee18 0a10 	vmov	r0, s16
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	ed9f 4b9b 	vldr	d4, [pc, #620]	; 80015f8 <controller_impedance+0x2d0>
 800138c:	ed9f 3b9c 	vldr	d3, [pc, #624]	; 8001600 <controller_impedance+0x2d8>
 8001390:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 8001608 <controller_impedance+0x2e0>
          }
        d_torque = Impedance(angle, ankle_velocity, LSW_stiffness, LSW_damping, LSW_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//1.7, 0.001 //previous equi angle=-10
 8001394:	ed9d 1b00 	vldr	d1, [sp]
 8001398:	ec41 0b10 	vmov	d0, r0, r1
 800139c:	f7ff fde2 	bl	8000f64 <Impedance>
 80013a0:	ec59 8b10 	vmov	r8, r9, d0
 80013a4:	ed86 0b00 	vstr	d0, [r6]
            
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80013a8:	ee10 0a10 	vmov	r0, s0
 80013ac:	4649      	mov	r1, r9
 80013ae:	f7ff fc01 	bl	8000bb4 <__aeabi_d2f>
 80013b2:	ee07 0a90 	vmov	s15, r0
 80013b6:	eeb0 7ae7 	vabs.f32	s14, s15
 80013ba:	eddf 7aab 	vldr	s15, [pc, #684]	; 8001668 <controller_impedance+0x340>
 80013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c2:	ee17 0a90 	vmov	r0, s15
 80013c6:	f7ff f8bf 	bl	8000548 <__aeabi_f2d>
 80013ca:	a391      	add	r3, pc, #580	; (adr r3, 8001610 <controller_impedance+0x2e8>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fa38 	bl	8000844 <__aeabi_ddiv>
 80013d4:	2200      	movs	r2, #0
 80013d6:	4ba5      	ldr	r3, [pc, #660]	; (800166c <controller_impedance+0x344>)
 80013d8:	f7fe ff58 	bl	800028c <__adddf3>
 80013dc:	f7ff fbea 	bl	8000bb4 <__aeabi_d2f>



             if (percent >= max_duty_cycle)
 80013e0:	4aa3      	ldr	r2, [pc, #652]	; (8001670 <controller_impedance+0x348>)
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80013e2:	4ba4      	ldr	r3, [pc, #656]	; (8001674 <controller_impedance+0x34c>)
             if (percent >= max_duty_cycle)
 80013e4:	edd2 7a00 	vldr	s15, [r2]
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80013e8:	6018      	str	r0, [r3, #0]
 80013ea:	ee07 0a10 	vmov	s14, r0
             if (percent >= max_duty_cycle)
 80013ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	f2c0 80d1 	blt.w	800159c <controller_impedance+0x274>
                 percent = max_duty_cycle;
             else if (percent <= - max_duty_cycle)
                 percent = - max_duty_cycle;
 80013fa:	edc3 7a00 	vstr	s15, [r3]
 80013fe:	e0d5      	b.n	80015ac <controller_impedance+0x284>
            	Stop_MOTOR2();
 8001400:	f000 fb58 	bl	8001ab4 <Stop_MOTOR2>
        break;


    }

    my_st_impedance.st = state;
 8001404:	7823      	ldrb	r3, [r4, #0]
 8001406:	4c9c      	ldr	r4, [pc, #624]	; (8001678 <controller_impedance+0x350>)
    my_st_impedance.impedance = d_torque;
 8001408:	e9d6 0100 	ldrd	r0, r1, [r6]
    my_st_impedance.st = state;
 800140c:	6023      	str	r3, [r4, #0]
    my_st_impedance.impedance = d_torque;
 800140e:	f7ff fbd1 	bl	8000bb4 <__aeabi_d2f>
    my_st_impedance.torque_now = n_torque;
 8001412:	4b9a      	ldr	r3, [pc, #616]	; (800167c <controller_impedance+0x354>)
    my_st_impedance.impedance = d_torque;
 8001414:	6060      	str	r0, [r4, #4]
    my_st_impedance.torque_now = n_torque;
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	f7ff fbcb 	bl	8000bb4 <__aeabi_d2f>
 800141e:	60a0      	str	r0, [r4, #8]
    my_st_impedance.pwm_percent = percent_new;
 8001420:	6828      	ldr	r0, [r5, #0]
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	e9c4 0104 	strd	r0, r1, [r4, #16]
    return my_st_impedance;
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	463d      	mov	r5, r7
 800142e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001434:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001438:	4638      	mov	r0, r7
 800143a:	b002      	add	sp, #8
 800143c:	ecbd 8b02 	vpop	{d8}
 8001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (angle > MS_LS_switching_angle)
 8001444:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8001448:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	dc8f      	bgt.n	8001372 <controller_impedance+0x4a>
        d_torque = Impedance(angle, ankle_velocity, MS_stiffness, MS_damping, MS_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//0.4, 0.001 //previous equi angle=-10
 8001452:	f7ff f879 	bl	8000548 <__aeabi_f2d>
 8001456:	e9cd 0100 	strd	r0, r1, [sp]
 800145a:	ee18 0a10 	vmov	r0, s16
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8001618 <controller_impedance+0x2f0>
 8001466:	ed9f 2b6e 	vldr	d2, [pc, #440]	; 8001620 <controller_impedance+0x2f8>
 800146a:	eeb0 3a44 	vmov.f32	s6, s8
 800146e:	eef0 3a64 	vmov.f32	s7, s9
 8001472:	ed9d 1b00 	vldr	d1, [sp]
 8001476:	ec41 0b10 	vmov	d0, r0, r1
 800147a:	f7ff fd73 	bl	8000f64 <Impedance>
 800147e:	ec51 0b10 	vmov	r0, r1, d0
 8001482:	ed86 0b00 	vstr	d0, [r6]
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 8001486:	f7ff fb95 	bl	8000bb4 <__aeabi_d2f>
 800148a:	ee07 0a90 	vmov	s15, r0
 800148e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001492:	eddf 7a75 	vldr	s15, [pc, #468]	; 8001668 <controller_impedance+0x340>
 8001496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149a:	ee17 0a90 	vmov	r0, s15
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	a35b      	add	r3, pc, #364	; (adr r3, 8001610 <controller_impedance+0x2e8>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f9cc 	bl	8000844 <__aeabi_ddiv>
 80014ac:	2200      	movs	r2, #0
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <controller_impedance+0x344>)
 80014b0:	f7fe feec 	bl	800028c <__adddf3>
 80014b4:	f7ff fb7e 	bl	8000bb4 <__aeabi_d2f>
            if (percent >= max_duty_cycle)
 80014b8:	4a6d      	ldr	r2, [pc, #436]	; (8001670 <controller_impedance+0x348>)
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80014ba:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <controller_impedance+0x34c>)
            if (percent >= max_duty_cycle)
 80014bc:	edd2 7a00 	vldr	s15, [r2]
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80014c0:	6018      	str	r0, [r3, #0]
 80014c2:	ee07 0a10 	vmov	s14, r0
            if (percent >= max_duty_cycle)
 80014c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	db02      	blt.n	80014d6 <controller_impedance+0x1ae>
                percent = - max_duty_cycle;
 80014d0:	edc3 7a00 	vstr	s15, [r3]
 80014d4:	e006      	b.n	80014e4 <controller_impedance+0x1bc>
            else if (percent <= - max_duty_cycle)
 80014d6:	eef1 7a67 	vneg.f32	s15, s15
 80014da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d9f5      	bls.n	80014d0 <controller_impedance+0x1a8>
            percent_new = RateLimiter(percent_old,percent);                 
 80014e4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001684 <controller_impedance+0x35c>
 80014e8:	edd3 0a00 	vldr	s1, [r3]
 80014ec:	ed98 0a00 	vldr	s0, [r8]
 80014f0:	f7ff fd66 	bl	8000fc0 <RateLimiter>
 80014f4:	ed85 0a00 	vstr	s0, [r5]
            percent_old = percent_new;
 80014f8:	ed88 0a00 	vstr	s0, [r8]
        break;
 80014fc:	e782      	b.n	8001404 <controller_impedance+0xdc>
        if (angle < LS_ESW_switching_angle && Toe_pressure<=LS_ESW_Toe_pressure) // earlier angle <-18
 80014fe:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8001502:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	d508      	bpl.n	800151e <controller_impedance+0x1f6>
 800150c:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8001680 <controller_impedance+0x358>
 8001510:	eef4 1ae7 	vcmpe.f32	s3, s15
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	d801      	bhi.n	800151e <controller_impedance+0x1f6>
            state = ST_EARLY_SWING;
 800151a:	2303      	movs	r3, #3
 800151c:	e72a      	b.n	8001374 <controller_impedance+0x4c>
        d_torque = Impedance(angle, ankle_velocity, LS_stiffness, LS_damping, LS_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//1.7, 0.001 //previous equi angle=-18
 800151e:	f7ff f813 	bl	8000548 <__aeabi_f2d>
 8001522:	e9cd 0100 	strd	r0, r1, [sp]
 8001526:	ee18 0a10 	vmov	r0, s16
 800152a:	f7ff f80d 	bl	8000548 <__aeabi_f2d>
 800152e:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 8001628 <controller_impedance+0x300>
 8001532:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8001618 <controller_impedance+0x2f0>
 8001536:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 8001630 <controller_impedance+0x308>
 800153a:	e72b      	b.n	8001394 <controller_impedance+0x6c>
        if (angle>=ESW_LSW_switching_angle)  // ankle_velocity < -5: did not transit, ankle_velocity < -3: transit
 800153c:	eef9 7a0c 	vmov.f32	s15, #156	; 0xc0e00000 -7.0
 8001540:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	db01      	blt.n	800154e <controller_impedance+0x226>
           state = ST_LATE_SWING;
 800154a:	2304      	movs	r3, #4
 800154c:	e712      	b.n	8001374 <controller_impedance+0x4c>
        d_torque = Impedance(angle, ankle_velocity, ESW_stiffness, ESW_damping, ESW_equilibrium); //earlier equilibrium angle 10 //stiffness 1.4
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	e9cd 0100 	strd	r0, r1, [sp]
 8001556:	ee18 0a10 	vmov	r0, s16
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	ed9f 4b26 	vldr	d4, [pc, #152]	; 80015f8 <controller_impedance+0x2d0>
 8001562:	ed9f 3b27 	vldr	d3, [pc, #156]	; 8001600 <controller_impedance+0x2d8>
 8001566:	ed9f 2b34 	vldr	d2, [pc, #208]	; 8001638 <controller_impedance+0x310>
 800156a:	e713      	b.n	8001394 <controller_impedance+0x6c>
       if (Heel_pressure>= Loadcell_Heel_Strike)
 800156c:	eddf 7a44 	vldr	s15, [pc, #272]	; 8001680 <controller_impedance+0x358>
 8001570:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	db01      	blt.n	800157e <controller_impedance+0x256>
              state = ST_EARLY_STANCE;
 800157a:	2300      	movs	r3, #0
 800157c:	e6fa      	b.n	8001374 <controller_impedance+0x4c>
        d_torque = Impedance(angle, ankle_velocity, LSW_stiffness, LSW_damping, LSW_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//1.7, 0.001 //previous equi angle=-10
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	e9cd 0100 	strd	r0, r1, [sp]
 8001586:	ee18 0a10 	vmov	r0, s16
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8001640 <controller_impedance+0x318>
 8001592:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 8001648 <controller_impedance+0x320>
 8001596:	ed9f 2b2e 	vldr	d2, [pc, #184]	; 8001650 <controller_impedance+0x328>
 800159a:	e6fb      	b.n	8001394 <controller_impedance+0x6c>
             else if (percent <= - max_duty_cycle)
 800159c:	eef1 7a67 	vneg.f32	s15, s15
 80015a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	f67f af27 	bls.w	80013fa <controller_impedance+0xd2>
             percent_new=percent;
 80015ac:	f8d3 a000 	ldr.w	sl, [r3]
 80015b0:	f8c5 a000 	str.w	sl, [r5]
             if (d_torque < 0)
 80015b4:	2200      	movs	r2, #0
 80015b6:	2300      	movs	r3, #0
 80015b8:	4640      	mov	r0, r8
 80015ba:	4649      	mov	r1, r9
 80015bc:	f7ff fa8a 	bl	8000ad4 <__aeabi_dcmplt>
 80015c0:	b138      	cbz	r0, 80015d2 <controller_impedance+0x2aa>
                 PF_MOTOR2(percent_new);
 80015c2:	4650      	mov	r0, sl
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	ec41 0b10 	vmov	d0, r0, r1
 80015cc:	f000 fa3a 	bl	8001a44 <PF_MOTOR2>
 80015d0:	e718      	b.n	8001404 <controller_impedance+0xdc>
             else if (d_torque > 0)
 80015d2:	2200      	movs	r2, #0
 80015d4:	2300      	movs	r3, #0
 80015d6:	4640      	mov	r0, r8
 80015d8:	4649      	mov	r1, r9
 80015da:	f7ff fa99 	bl	8000b10 <__aeabi_dcmpgt>
 80015de:	2800      	cmp	r0, #0
 80015e0:	f43f af0e 	beq.w	8001400 <controller_impedance+0xd8>
                 DF_MOTOR2(percent_new);
 80015e4:	4650      	mov	r0, sl
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	ec41 0b10 	vmov	d0, r0, r1
 80015ee:	f000 fa45 	bl	8001a7c <DF_MOTOR2>
 80015f2:	e707      	b.n	8001404 <controller_impedance+0xdc>
 80015f4:	f3af 8000 	nop.w
 80015f8:	00000000 	.word	0x00000000
 80015fc:	c0140000 	.word	0xc0140000
 8001600:	47ae147b 	.word	0x47ae147b
 8001604:	3f947ae1 	.word	0x3f947ae1
 8001608:	00000000 	.word	0x00000000
 800160c:	3ff80000 	.word	0x3ff80000
 8001610:	5953586d 	.word	0x5953586d
 8001614:	40512214 	.word	0x40512214
	...
 8001624:	40000000 	.word	0x40000000
 8001628:	00000000 	.word	0x00000000
 800162c:	c0340000 	.word	0xc0340000
 8001630:	66666666 	.word	0x66666666
 8001634:	3ffa6666 	.word	0x3ffa6666
 8001638:	66666666 	.word	0x66666666
 800163c:	3fe66666 	.word	0x3fe66666
 8001640:	00000000 	.word	0x00000000
 8001644:	c0000000 	.word	0xc0000000
 8001648:	eb851eb8 	.word	0xeb851eb8
 800164c:	3f9eb851 	.word	0x3f9eb851
 8001650:	33333333 	.word	0x33333333
 8001654:	3fd33333 	.word	0x3fd33333
 8001658:	2000001c 	.word	0x2000001c
 800165c:	200005a8 	.word	0x200005a8
 8001660:	200005bc 	.word	0x200005bc
 8001664:	45174000 	.word	0x45174000
 8001668:	42a00000 	.word	0x42a00000
 800166c:	40240000 	.word	0x40240000
 8001670:	20000018 	.word	0x20000018
 8001674:	200005b8 	.word	0x200005b8
 8001678:	200086c8 	.word	0x200086c8
 800167c:	200005b0 	.word	0x200005b0
 8001680:	450fc000 	.word	0x450fc000
 8001684:	200005c0 	.word	0x200005c0

08001688 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8001688:	2000      	movs	r0, #0
 800168a:	4770      	bx	lr

0800168c <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <LL_AHB2_GRP1_EnableClock+0x18>)
 800168e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001690:	4302      	orrs	r2, r0
 8001692:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8001696:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001698:	4018      	ands	r0, r3
 800169a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800169c:	9b01      	ldr	r3, [sp, #4]
}
 800169e:	b002      	add	sp, #8
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <MX_GPIO_Init>:

}


void MX_GPIO_Init(void)
{
 80016a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}



  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80016ac:	2004      	movs	r0, #4
 80016ae:	f7ff ffed 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80016b2:	2080      	movs	r0, #128	; 0x80
 80016b4:	f7ff ffea 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016b8:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  /**/
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80016ba:	4c4d      	ldr	r4, [pc, #308]	; (80017f0 <MX_GPIO_Init+0x148>)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016bc:	f7ff ffe6 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff ffe3 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80016c6:	2008      	movs	r0, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016c8:	2500      	movs	r5, #0
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80016ca:	f7ff ffdf 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016ce:	2601      	movs	r6, #1
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80016d0:	f04f 4b90 	mov.w	fp, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80016d4:	f04f 080c 	mov.w	r8, #12
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	4621      	mov	r1, r4
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80016de:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80016e0:	f8c4 8000 	str.w	r8, [r4]
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80016e4:	f44f 7900 	mov.w	r9, #512	; 0x200
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016e8:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016ea:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016ec:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016ee:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f005 fcc6 	bl	8007080 <LL_GPIO_Init>
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80016f4:	4621      	mov	r1, r4
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80016fa:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016fe:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001700:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8001702:	f005 fcbd 	bl	8007080 <LL_GPIO_Init>
 8001706:	f8cb 8028 	str.w	r8, [fp, #40]	; 0x28
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80017f4 <MX_GPIO_Init+0x14c>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800170e:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pin = LED_B_PIN;
 8001710:	f04f 0a80 	mov.w	sl, #128	; 0x80
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	4621      	mov	r1, r4
 8001716:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED_B_PIN;
 8001718:	f8c4 a000 	str.w	sl, [r4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800171c:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800171e:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001720:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f005 fcad 	bl	8007080 <LL_GPIO_Init>
 8001726:	f8c8 a028 	str.w	sl, [r8, #40]	; 0x28

  /**/
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 800172a:	4621      	mov	r1, r4
 800172c:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 800172e:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001732:	6065      	str	r5, [r4, #4]


  GPIO_InitStruct.Pin = MOTOR2_DIR_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001738:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 800173a:	f005 fca1 	bl	8007080 <LL_GPIO_Init>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MOTOR2_DIR_GPIO_Port, &GPIO_InitStruct);
 800173e:	4621      	mov	r1, r4
 8001740:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = MOTOR2_DIR_Pin;
 8001742:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001744:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	f8c4 9008 	str.w	r9, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800174a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800174c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(MOTOR2_DIR_GPIO_Port, &GPIO_InitStruct);
 800174e:	f005 fc97 	bl	8007080 <LL_GPIO_Init>
 8001752:	f8cb 7028 	str.w	r7, [fp, #40]	; 0x28
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MOTOR1_DIR_GPIO_Port, &GPIO_InitStruct);
 8001756:	f50b 6b00 	add.w	fp, fp, #2048	; 0x800
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin;
 800175a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(MOTOR1_DIR_GPIO_Port, &GPIO_InitStruct);
 800175e:	4621      	mov	r1, r4
 8001760:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin;
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001766:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	f8c4 9008 	str.w	r9, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800176c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800176e:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(MOTOR1_DIR_GPIO_Port, &GPIO_InitStruct);
 8001770:	f005 fc86 	bl	8007080 <LL_GPIO_Init>
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 800177a:	4621      	mov	r1, r4
 800177c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
 800177e:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001780:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	f8c4 9008 	str.w	r9, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001786:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001788:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 800178a:	f005 fc79 	bl	8007080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 800178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8001792:	4621      	mov	r1, r4
 8001794:	4640      	mov	r0, r8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	e884 0248 	stmia.w	r4, {r3, r6, r9}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800179a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800179c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800179e:	f005 fc6f 	bl	8007080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC1_DATA_PIN;
 80017a2:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 80017a4:	4621      	mov	r1, r4
 80017a6:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017a8:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80017ac:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 80017ae:	f005 fc67 	bl	8007080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 80017b2:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 80017b4:	4621      	mov	r1, r4
 80017b6:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	e884 0248 	stmia.w	r4, {r3, r6, r9}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017bc:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017be:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 80017c0:	f005 fc5e 	bl	8007080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 80017c4:	4621      	mov	r1, r4
 80017c6:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 80017c8:	f8c4 a000 	str.w	sl, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017cc:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80017ce:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 80017d0:	f005 fc56 	bl	8007080 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 80017d4:	4621      	mov	r1, r4
 80017d6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 80017d8:	f8c4 a000 	str.w	sl, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017dc:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	f8c4 9008 	str.w	r9, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017e2:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017e4:	6125      	str	r5, [r4, #16]

}
 80017e6:	b003      	add	sp, #12
 80017e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 80017ec:	f005 bc48 	b.w	8007080 <LL_GPIO_Init>
 80017f0:	200086e0 	.word	0x200086e0
 80017f4:	48000400 	.word	0x48000400

080017f8 <RED_LED_OFF>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017fc:	2208      	movs	r2, #8
 80017fe:	619a      	str	r2, [r3, #24]
 8001800:	4770      	bx	lr

08001802 <MOTOR2_DIR_HIGH>:
 8001802:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001806:	2202      	movs	r2, #2
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	4770      	bx	lr

0800180c <MOTOR2_DIR_LOW>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800180c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001810:	2202      	movs	r2, #2
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
 8001814:	4770      	bx	lr

08001816 <GREEN_LED_OFF>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001816:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800181a:	2204      	movs	r2, #4
 800181c:	619a      	str	r2, [r3, #24]
 800181e:	4770      	bx	lr

08001820 <BLUE_LED_OFF>:
 8001820:	4b01      	ldr	r3, [pc, #4]	; (8001828 <BLUE_LED_OFF+0x8>)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	4770      	bx	lr
 8001828:	48000400 	.word	0x48000400

0800182c <ALL_LED_OFF>:
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <ALL_LED_OFF+0x14>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001836:	2204      	movs	r2, #4
 8001838:	619a      	str	r2, [r3, #24]
 800183a:	2208      	movs	r2, #8
 800183c:	619a      	str	r2, [r3, #24]
 800183e:	4770      	bx	lr
 8001840:	48000400 	.word	0x48000400

08001844 <ALL_LED_ON>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <ALL_LED_ON+0x14>)
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
 800184a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800184e:	2204      	movs	r2, #4
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
 8001852:	2208      	movs	r2, #8
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
 8001856:	4770      	bx	lr
 8001858:	48000400 	.word	0x48000400

0800185c <GREEN_LED_ONLY>:
 800185c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001860:	2204      	movs	r2, #4
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001864:	4a02      	ldr	r2, [pc, #8]	; (8001870 <GREEN_LED_ONLY+0x14>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	6191      	str	r1, [r2, #24]
 800186a:	2208      	movs	r2, #8
 800186c:	619a      	str	r2, [r3, #24]
 800186e:	4770      	bx	lr
 8001870:	48000400 	.word	0x48000400

08001874 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001878:	2208      	movs	r2, #8
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800187c:	4a02      	ldr	r2, [pc, #8]	; (8001888 <RED_LED_ONLY+0x14>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	6191      	str	r1, [r2, #24]
 8001882:	2204      	movs	r2, #4
 8001884:	619a      	str	r2, [r3, #24]
 8001886:	4770      	bx	lr
 8001888:	48000400 	.word	0x48000400

0800188c <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <BLUE_LED_ONLY+0x14>)
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001892:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001896:	2204      	movs	r2, #4
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	2208      	movs	r2, #8
 800189c:	619a      	str	r2, [r3, #24]
 800189e:	4770      	bx	lr
 80018a0:	48000400 	.word	0x48000400

080018a4 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <VIOLET_LED_ONLY+0x14>)
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018ae:	2204      	movs	r2, #4
 80018b0:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80018b2:	2208      	movs	r2, #8
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
 80018b6:	4770      	bx	lr
 80018b8:	48000400 	.word	0x48000400

080018bc <SD_POWER_ON>:
 80018bc:	4770      	bx	lr

080018be <SD_POWER_OFF>:
{

}

void SD_POWER_OFF(void)
{
 80018be:	4770      	bx	lr

080018c0 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <EXTI9_5_IRQHandler+0x18>)
 80018c2:	695a      	ldr	r2, [r3, #20]

}

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 80018c4:	0592      	lsls	r2, r2, #22
 80018c6:	d505      	bpl.n	80018d4 <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <EXTI9_5_IRQHandler+0x1c>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80018ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40010400 	.word	0x40010400
 80018dc:	200005cc 	.word	0x200005cc

080018e0 <MOTOR2_Configure_TIMPWMOutput>:




void  MOTOR2_Configure_TIMPWMOutput(void)
{
 80018e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018e2:	4c53      	ldr	r4, [pc, #332]	; (8001a30 <MOTOR2_Configure_TIMPWMOutput+0x150>)
 80018e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018f8:	9b01      	ldr	r3, [sp, #4]
 80018fa:	6815      	ldr	r5, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	2301      	movs	r3, #1
 80018fe:	fa93 f0a3 	rbit	r0, r3
 8001902:	fab0 f080 	clz	r0, r0
 8001906:	fa93 f1a3 	rbit	r1, r3
 800190a:	2603      	movs	r6, #3
 800190c:	4098      	lsls	r0, r3
 800190e:	fa06 f000 	lsl.w	r0, r6, r0
 8001912:	fab1 f181 	clz	r1, r1
 8001916:	ea25 0000 	bic.w	r0, r5, r0
 800191a:	4099      	lsls	r1, r3
 800191c:	2502      	movs	r5, #2
 800191e:	fa05 f101 	lsl.w	r1, r5, r1
 8001922:	4301      	orrs	r1, r0
 8001924:	6011      	str	r1, [r2, #0]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001926:	68d7      	ldr	r7, [r2, #12]
 8001928:	fa93 f0a3 	rbit	r0, r3
 800192c:	fab0 f080 	clz	r0, r0
 8001930:	fa93 f1a3 	rbit	r1, r3
 8001934:	4098      	lsls	r0, r3
 8001936:	fab1 f181 	clz	r1, r1
 800193a:	fa06 f000 	lsl.w	r0, r6, r0
 800193e:	4099      	lsls	r1, r3
 8001940:	ea27 0000 	bic.w	r0, r7, r0
 8001944:	fa05 f101 	lsl.w	r1, r5, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800194c:	6891      	ldr	r1, [r2, #8]
 800194e:	fa93 f7a3 	rbit	r7, r3
 8001952:	fab7 f787 	clz	r7, r7
 8001956:	fa93 f0a3 	rbit	r0, r3
 800195a:	409f      	lsls	r7, r3
 800195c:	fab0 f080 	clz	r0, r0
 8001960:	40be      	lsls	r6, r7
 8001962:	ea21 0606 	bic.w	r6, r1, r6
 8001966:	fa00 f103 	lsl.w	r1, r0, r3
 800196a:	408d      	lsls	r5, r1
 800196c:	4335      	orrs	r5, r6
 800196e:	6095      	str	r5, [r2, #8]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001970:	6a11      	ldr	r1, [r2, #32]
 8001972:	fa93 f5a3 	rbit	r5, r3
 8001976:	fab5 f585 	clz	r5, r5
 800197a:	fa93 f0a3 	rbit	r0, r3
 800197e:	260f      	movs	r6, #15
 8001980:	fab0 f080 	clz	r0, r0
 8001984:	00ad      	lsls	r5, r5, #2
 8001986:	fa06 f505 	lsl.w	r5, r6, r5
 800198a:	0080      	lsls	r0, r0, #2
 800198c:	ea21 0105 	bic.w	r1, r1, r5
 8001990:	4083      	lsls	r3, r0
 8001992:	430b      	orrs	r3, r1
 8001994:	6213      	str	r3, [r2, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800199e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80019a6:	9b00      	ldr	r3, [sp, #0]
  /* Set counter mode */
  /* Reset value is LL_TIM_COUNTERMODE_UP */
  //LL_TIM_SetCounterMode(TIM5, LL_TIM_COUNTERMODE_UP);

  /* Set the pre-scaler value to have TIM5 counter clock equal to 100 kHz */
  LL_TIM_SetPrescaler(TIM5, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000));
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <MOTOR2_Configure_TIMPWMOutput+0x154>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MOTOR2_Configure_TIMPWMOutput+0x158>)
 80019ae:	429a      	cmp	r2, r3
 80019b0:	bf88      	it	hi
 80019b2:	4922      	ldrhi	r1, [pc, #136]	; (8001a3c <MOTOR2_Configure_TIMPWMOutput+0x15c>)
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
  WRITE_REG(TIMx->PSC, Prescaler);
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <MOTOR2_Configure_TIMPWMOutput+0x160>)
 80019b6:	bf8a      	itet	hi
 80019b8:	fbb2 f1f1 	udivhi	r1, r2, r1
 80019bc:	2100      	movls	r1, #0
 80019be:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80019c2:	6299      	str	r1, [r3, #40]	; 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80019ca:	6019      	str	r1, [r3, #0]
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
  return (uint32_t)(READ_REG(TIMx->PSC));
 80019cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  /* preload register are transferred into the shadow register at each update */
  /* event (UEV).                                                             */
  LL_TIM_EnableARRPreload(TIM5);

  /* Set the auto-reload value to have a counter frequency of PWM_Freq_Motor Hz */
  LL_TIM_SetAutoReload(TIM5, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIM5), PWM_Freq_Motor));
 80019ce:	f640 30b7 	movw	r0, #2999	; 0xbb7
 80019d2:	3101      	adds	r1, #1
 80019d4:	fbb2 f1f1 	udiv	r1, r2, r1
 80019d8:	4281      	cmp	r1, r0
 80019da:	bf83      	ittte	hi
 80019dc:	6a98      	ldrhi	r0, [r3, #40]	; 0x28
 80019de:	f640 31b8 	movwhi	r1, #3000	; 0xbb8
 80019e2:	fb00 1101 	mlahi	r1, r0, r1, r1
 80019e6:	2200      	movls	r2, #0
 80019e8:	bf84      	itt	hi
 80019ea:	fbb2 f2f1 	udivhi	r2, r2, r1
 80019ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80019f4:	699a      	ldr	r2, [r3, #24]
  return (uint32_t)(READ_REG(TIMx->ARR));
 80019f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80019f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019fc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Set output channel polarity */
  /* Reset value is LL_TIM_OCPOLARITY_HIGH */
  //LL_TIM_OC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);

  /* Set compare value to Duty cycle ) */
  LL_TIM_OC_SetCompareCH1(TIM5, ((LL_TIM_GetAutoReload(TIM5)*Duty_cycle_motor)/100));
 8001a00:	210a      	movs	r1, #10
 8001a02:	4341      	muls	r1, r0
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a04:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	fbb1 f1f0 	udiv	r1, r1, r0
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001a0e:	6359      	str	r1, [r3, #52]	; 0x34
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a10:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	615a      	str	r2, [r3, #20]
  /* Enable counter */
  LL_TIM_EnableCounter(TIM5);

  /* Force update generation */
  LL_TIM_GenerateEvent_UPDATE(TIM5);
}
 8001a2a:	b003      	add	sp, #12
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	20000034 	.word	0x20000034
 8001a38:	000f423f 	.word	0x000f423f
 8001a3c:	000f4240 	.word	0x000f4240
 8001a40:	40000c00 	.word	0x40000c00

08001a44 <PF_MOTOR2>:

}

//MOTOR2_PWM_TIM5_CH1
void PF_MOTOR2(double D)   // D in Percentage, say D=20 meaning 20%
{	MOTOR2_DIR_HIGH();
 8001a44:	b513      	push	{r0, r1, r4, lr}
 8001a46:	ec53 2b10 	vmov	r2, r3, d0
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001a4a:	4c0a      	ldr	r4, [pc, #40]	; (8001a74 <PF_MOTOR2+0x30>)
 8001a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a50:	f7ff fed7 	bl	8001802 <MOTOR2_DIR_HIGH>
 8001a54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c

	double P;    /* Pulse duration */
	double T;    /* PWM signal period */

 /* PWM signal period is determined by the value of the auto-reload register */
 T = LL_TIM_GetAutoReload(TIM5);
 8001a56:	f7fe fd55 	bl	8000504 <__aeabi_ui2d>

 /* Pulse duration is determined by the value of the compare register.       */
 /* Its value is calculated in order to match the requested duty cycle.      */
 P = (D*T)/100;
 8001a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a5e:	f7fe fdc7 	bl	80005f0 <__aeabi_dmul>
 8001a62:	2200      	movs	r2, #0
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <PF_MOTOR2+0x34>)
 8001a66:	f7fe feed 	bl	8000844 <__aeabi_ddiv>
 LL_TIM_OC_SetCompareCH1(TIM5, P);
 8001a6a:	f7ff f883 	bl	8000b74 <__aeabi_d2uiz>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001a6e:	6360      	str	r0, [r4, #52]	; 0x34

}
 8001a70:	b002      	add	sp, #8
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	40000c00 	.word	0x40000c00
 8001a78:	40590000 	.word	0x40590000

08001a7c <DF_MOTOR2>:

//MOTOR2_PWM_TIM5_CH1
void DF_MOTOR2(double D)   // D in Percentage, say D=20 meaning 20%
{
 8001a7c:	b513      	push	{r0, r1, r4, lr}
 8001a7e:	ec53 2b10 	vmov	r2, r3, d0
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001a82:	4c0a      	ldr	r4, [pc, #40]	; (8001aac <DF_MOTOR2+0x30>)
 8001a84:	e9cd 2300 	strd	r2, r3, [sp]
	MOTOR2_DIR_LOW();
 8001a88:	f7ff fec0 	bl	800180c <MOTOR2_DIR_LOW>
 8001a8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	double P;    /* Pulse duration */
	double T;    /* PWM signal period */

 /* PWM signal period is determined by the value of the auto-reload register */
 T = LL_TIM_GetAutoReload(TIM5);
 8001a8e:	f7fe fd39 	bl	8000504 <__aeabi_ui2d>

 /* Pulse duration is determined by the value of the compare register.       */
 /* Its value is calculated in order to match the requested duty cycle.      */
 P = (D*T)/100;
 8001a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a96:	f7fe fdab 	bl	80005f0 <__aeabi_dmul>
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <DF_MOTOR2+0x34>)
 8001a9e:	f7fe fed1 	bl	8000844 <__aeabi_ddiv>
 LL_TIM_OC_SetCompareCH1(TIM5, P);
 8001aa2:	f7ff f867 	bl	8000b74 <__aeabi_d2uiz>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001aa6:	6360      	str	r0, [r4, #52]	; 0x34

}
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd10      	pop	{r4, pc}
 8001aac:	40000c00 	.word	0x40000c00
 8001ab0:	40590000 	.word	0x40590000

08001ab4 <Stop_MOTOR2>:
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <Stop_MOTOR2+0x14>)
 8001ab6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  /* PWM signal period is determined by the value of the auto-reload register */
  T = LL_TIM_GetAutoReload(TIM5);

  /* Pulse duration is determined by the value of the compare register.       */
  /* Its value is calculated in order to match the requested duty cycle.      */
  P = (10*T)/100;
 8001ab8:	230a      	movs	r3, #10
 8001aba:	434b      	muls	r3, r1
 8001abc:	2164      	movs	r1, #100	; 0x64
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001ac2:	6353      	str	r3, [r2, #52]	; 0x34
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40000c00 	.word	0x40000c00
 8001acc:	00000000 	.word	0x00000000

08001ad0 <LPTIM2_IRQHandler>:
{
 8001ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8001ad4:	4bac      	ldr	r3, [pc, #688]	; (8001d88 <LPTIM2_IRQHandler+0x2b8>)
 8001ad6:	ed2d 8b04 	vpush	{d8-d9}
 8001ada:	681b      	ldr	r3, [r3, #0]
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001adc:	079b      	lsls	r3, r3, #30
{
 8001ade:	b08b      	sub	sp, #44	; 0x2c
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001ae0:	f140 8119 	bpl.w	8001d16 <LPTIM2_IRQHandler+0x246>
			 all_ADC_read_test();
 8001ae4:	f001 f994 	bl	8002e10 <all_ADC_read_test>
			 Enc_raw=Enc2_GetPosition();
 8001ae8:	f001 fcd0 	bl	800348c <Enc2_GetPosition>
 8001aec:	4da7      	ldr	r5, [pc, #668]	; (8001d8c <LPTIM2_IRQHandler+0x2bc>)
			 angle = (Enc_raw-3326)*0.088+220;
 8001aee:	4ca8      	ldr	r4, [pc, #672]	; (8001d90 <LPTIM2_IRQHandler+0x2c0>)
			       angular_velocity = (2*(angle - angle_old)+(2*tau -T)*old_angular_velocity) / (T+2*tau);
 8001af0:	4fa8      	ldr	r7, [pc, #672]	; (8001d94 <LPTIM2_IRQHandler+0x2c4>)
 8001af2:	4ea9      	ldr	r6, [pc, #676]	; (8001d98 <LPTIM2_IRQHandler+0x2c8>)
			 Enc_raw=Enc2_GetPosition();
 8001af4:	b200      	sxth	r0, r0
 8001af6:	8028      	strh	r0, [r5, #0]
			 angle = (Enc_raw-3326)*0.088+220;
 8001af8:	8828      	ldrh	r0, [r5, #0]
 8001afa:	b200      	sxth	r0, r0
 8001afc:	f6a0 40fe 	subw	r0, r0, #3326	; 0xcfe
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	a39e      	add	r3, pc, #632	; (adr r3, 8001d80 <LPTIM2_IRQHandler+0x2b0>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fd71 	bl	80005f0 <__aeabi_dmul>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4ba2      	ldr	r3, [pc, #648]	; (8001d9c <LPTIM2_IRQHandler+0x2cc>)
 8001b12:	f7fe fbbb 	bl	800028c <__adddf3>
 8001b16:	f7ff f84d 	bl	8000bb4 <__aeabi_d2f>
			       angular_velocity = (2*(angle - angle_old)+(2*tau -T)*old_angular_velocity) / (T+2*tau);
 8001b1a:	4aa1      	ldr	r2, [pc, #644]	; (8001da0 <LPTIM2_IRQHandler+0x2d0>)
 8001b1c:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <LPTIM2_IRQHandler+0x2d4>)
			 angle = (Enc_raw-3326)*0.088+220;
 8001b1e:	6020      	str	r0, [r4, #0]
			       angular_velocity = (2*(angle - angle_old)+(2*tau -T)*old_angular_velocity) / (T+2*tau);
 8001b20:	ed94 8a00 	vldr	s16, [r4]
 8001b24:	edd6 8a00 	vldr	s17, [r6]
 8001b28:	e9d2 0100 	ldrd	r0, r1, [r2]
 8001b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001b30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001b34:	ed92 7b00 	vldr	d7, [r2]
 8001b38:	ed8d 7b00 	vstr	d7, [sp]
 8001b3c:	ed93 7b00 	vldr	d7, [r3]
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b48:	f7fe fba0 	bl	800028c <__adddf3>
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	464b      	mov	r3, r9
 8001b50:	f7fe fb9a 	bl	8000288 <__aeabi_dsub>
 8001b54:	4652      	mov	r2, sl
 8001b56:	465b      	mov	r3, fp
 8001b58:	f7fe fd4a 	bl	80005f0 <__aeabi_dmul>
 8001b5c:	ee78 7a68 	vsub.f32	s15, s16, s17
 8001b60:	4680      	mov	r8, r0
 8001b62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b66:	4689      	mov	r9, r1
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fcec 	bl	8000548 <__aeabi_f2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4640      	mov	r0, r8
 8001b76:	4649      	mov	r1, r9
 8001b78:	f7fe fb88 	bl	800028c <__adddf3>
 8001b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001b80:	4680      	mov	r8, r0
 8001b82:	4689      	mov	r9, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7fe fb80 	bl	800028c <__adddf3>
 8001b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001b90:	f7fe fb7c 	bl	800028c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4640      	mov	r0, r8
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	f7fe fe52 	bl	8000844 <__aeabi_ddiv>
 8001ba0:	4b81      	ldr	r3, [pc, #516]	; (8001da8 <LPTIM2_IRQHandler+0x2d8>)
 8001ba2:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8001dd8 <LPTIM2_IRQHandler+0x308>
 8001ba6:	e9c3 0100 	strd	r0, r1, [r3]
			       old_angular_velocity = angular_velocity;
 8001baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bae:	e9c7 0100 	strd	r0, r1, [r7]
			       angle_old = angle;
 8001bb2:	6822      	ldr	r2, [r4, #0]
 8001bb4:	6032      	str	r2, [r6, #0]
			        if((angle>=20)||(angle<=-35)){
 8001bb6:	ed94 7a00 	vldr	s14, [r4]
 8001bba:	4f7c      	ldr	r7, [pc, #496]	; (8001dac <LPTIM2_IRQHandler+0x2dc>)
 8001bbc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	46aa      	mov	sl, r5
 8001bca:	4698      	mov	r8, r3
 8001bcc:	4d78      	ldr	r5, [pc, #480]	; (8001db0 <LPTIM2_IRQHandler+0x2e0>)
 8001bce:	da09      	bge.n	8001be4 <LPTIM2_IRQHandler+0x114>
 8001bd0:	ed94 7a00 	vldr	s14, [r4]
 8001bd4:	eddf 7a77 	vldr	s15, [pc, #476]	; 8001db4 <LPTIM2_IRQHandler+0x2e4>
 8001bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	f200 809e 	bhi.w	8001d20 <LPTIM2_IRQHandler+0x250>
			      	  Stop_MOTOR2();
 8001be4:	f7ff ff66 	bl	8001ab4 <Stop_MOTOR2>
				BSbuffer[s_flag].LoadCell1[Sub_cnt]= Test1_mV;
 8001be8:	4c73      	ldr	r4, [pc, #460]	; (8001db8 <LPTIM2_IRQHandler+0x2e8>)
 8001bea:	4e74      	ldr	r6, [pc, #464]	; (8001dbc <LPTIM2_IRQHandler+0x2ec>)
 8001bec:	7831      	ldrb	r1, [r6, #0]
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	883a      	ldrh	r2, [r7, #0]
 8001bf2:	4f73      	ldr	r7, [pc, #460]	; (8001dc0 <LPTIM2_IRQHandler+0x2f0>)
 8001bf4:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001bf8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
				BSbuffer[s_flag].LoadCell2[Sub_cnt]= Test2_mV;
 8001bfc:	7831      	ldrb	r1, [r6, #0]
				BSbuffer[s_flag].LoadCell1[Sub_cnt]= Test1_mV;
 8001bfe:	815a      	strh	r2, [r3, #10]
				BSbuffer[s_flag].LoadCell2[Sub_cnt]= Test2_mV;
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	f8b9 2000 	ldrh.w	r2, [r9]
 8001c06:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001c0a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
				BSbuffer[s_flag].Enc2[Sub_cnt]=Enc_raw;
 8001c0e:	7831      	ldrb	r1, [r6, #0]
				BSbuffer[s_flag].LoadCell2[Sub_cnt]= Test2_mV;
 8001c10:	f8a3 292c 	strh.w	r2, [r3, #2348]	; 0x92c
				BSbuffer[s_flag].Enc2[Sub_cnt]=Enc_raw;
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	f8ba 2000 	ldrh.w	r2, [sl]
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001c1a:	f896 9000 	ldrb.w	r9, [r6]
				BSbuffer[s_flag].Enc2[Sub_cnt]=Enc_raw;
 8001c1e:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001c22:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001c26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8001c2a:	80da      	strh	r2, [r3, #6]
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	e9d8 0100 	ldrd	r0, r1, [r8]
 8001c34:	eb03 3949 	add.w	r9, r3, r9, lsl #13
 8001c38:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <LPTIM2_IRQHandler+0x2f4>)
 8001c3a:	f7fe fcd9 	bl	80005f0 <__aeabi_dmul>
 8001c3e:	f7fe ff71 	bl	8000b24 <__aeabi_d2iz>
				BSbuffer[s_flag].st_100[Sub_cnt]=my_st_impedance.st*100;
 8001c42:	7831      	ldrb	r1, [r6, #0]
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	682a      	ldr	r2, [r5, #0]
				BSbuffer[s_flag].torque_desired_100[Sub_cnt]= my_st_impedance.impedance*100;
 8001c48:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001dc8 <LPTIM2_IRQHandler+0x2f8>
				BSbuffer[s_flag].st_100[Sub_cnt]=my_st_impedance.st*100;
 8001c4c:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001c50:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8001c54:	3308      	adds	r3, #8
 8001c56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c5a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8001c5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	805a      	strh	r2, [r3, #2]
				BSbuffer[s_flag].torque_desired_100[Sub_cnt]= my_st_impedance.impedance*100;
 8001c66:	7832      	ldrb	r2, [r6, #0]
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	edd5 7a01 	vldr	s15, [r5, #4]
 8001c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c72:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8001c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7a:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8001c7e:	3318      	adds	r3, #24
 8001c80:	ee17 2a90 	vmov	r2, s15
 8001c84:	eb07 0343 	add.w	r3, r7, r3, lsl #1
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001c88:	f609 59b8 	addw	r9, r9, #3512	; 0xdb8
				BSbuffer[s_flag].torque_desired_100[Sub_cnt]= my_st_impedance.impedance*100;
 8001c8c:	809a      	strh	r2, [r3, #4]
				BSbuffer[s_flag].pwm_percent_100[Sub_cnt]=my_st_impedance.pwm_percent*100;
 8001c8e:	7832      	ldrb	r2, [r6, #0]
 8001c90:	6823      	ldr	r3, [r4, #0]
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001c92:	f827 0019 	strh.w	r0, [r7, r9, lsl #1]
				BSbuffer[s_flag].pwm_percent_100[Sub_cnt]=my_st_impedance.pwm_percent*100;
 8001c96:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8001c9a:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	eb07 0843 	add.w	r8, r7, r3, lsl #1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <LPTIM2_IRQHandler+0x2f4>)
 8001ca8:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8001cac:	f7fe fca0 	bl	80005f0 <__aeabi_dmul>
 8001cb0:	f7fe ff38 	bl	8000b24 <__aeabi_d2iz>
				if (Sub_cnt == 5)
 8001cb4:	6823      	ldr	r3, [r4, #0]
				BSbuffer[s_flag].pwm_percent_100[Sub_cnt]=my_st_impedance.pwm_percent*100;
 8001cb6:	f8a8 0006 	strh.w	r0, [r8, #6]
				if (Sub_cnt == 5)
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d116      	bne.n	8001cec <LPTIM2_IRQHandler+0x21c>
					BSbuffer[s_flag].RTC_Time = (uint32_t)(RTC->TR & 0x007F7F7F);
 8001cbe:	4943      	ldr	r1, [pc, #268]	; (8001dcc <LPTIM2_IRQHandler+0x2fc>)
 8001cc0:	7832      	ldrb	r2, [r6, #0]
 8001cc2:	680b      	ldr	r3, [r1, #0]
 8001cc4:	eb07 3282 	add.w	r2, r7, r2, lsl #14
 8001cc8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001ccc:	f643 70f8 	movw	r0, #16376	; 0x3ff8
 8001cd0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001cd4:	5013      	str	r3, [r2, r0]
					BSbuffer[s_flag].RTC_Date= (uint32_t)(RTC->DR & 0x00FFFF3F);
 8001cd6:	7832      	ldrb	r2, [r6, #0]
 8001cd8:	684b      	ldr	r3, [r1, #4]
 8001cda:	eb07 3782 	add.w	r7, r7, r2, lsl #14
 8001cde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ce2:	f643 72fc 	movw	r2, #16380	; 0x3ffc
 8001ce6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001cea:	50bb      	str	r3, [r7, r2]
				if(Sub_cnt==Highest_sensor_count)   // Total samples to be stored in a 16KB buffer
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8001cf2:	d13f      	bne.n	8001d74 <LPTIM2_IRQHandler+0x2a4>
								SD_write_Flag = 1;   // Flag set to write filled buffer content
 8001cf4:	4936      	ldr	r1, [pc, #216]	; (8001dd0 <LPTIM2_IRQHandler+0x300>)
								Sub_cnt=0;           // Reset Counter of sensor element
 8001cf6:	2200      	movs	r2, #0
								SD_write_Flag = 1;   // Flag set to write filled buffer content
 8001cf8:	2301      	movs	r3, #1
								Sub_cnt=0;           // Reset Counter of sensor element
 8001cfa:	6022      	str	r2, [r4, #0]
								SD_write_Flag = 1;   // Flag set to write filled buffer content
 8001cfc:	700b      	strb	r3, [r1, #0]
								if (s_flag==0)       // if current storgae_buffer was 0
 8001cfe:	7830      	ldrb	r0, [r6, #0]
 8001d00:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <LPTIM2_IRQHandler+0x304>)
 8001d02:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 8001d06:	bb90      	cbnz	r0, 8001d6e <LPTIM2_IRQHandler+0x29e>
									w_flag=0;            // write_buffer to be saved in SD card = 0
 8001d08:	700c      	strb	r4, [r1, #0]
									s_flag=1;            // current storgae_buffer is set 1
 8001d0a:	7033      	strb	r3, [r6, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <LPTIM2_IRQHandler+0x2b8>)
 8001d0e:	6853      	ldr	r3, [r2, #4]
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6053      	str	r3, [r2, #4]
}
 8001d16:	b00b      	add	sp, #44	; 0x2c
 8001d18:	ecbd 8b04 	vpop	{d8-d9}
 8001d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			         my_st_impedance = controller_impedance(angle,angular_velocity,Test2_mV,Test1_mV);
 8001d20:	ed94 9a00 	vldr	s18, [r4]
 8001d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d28:	f8b9 3000 	ldrh.w	r3, [r9]
 8001d2c:	883a      	ldrh	r2, [r7, #0]
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	ee07 2a90 	vmov	s15, r2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	eef8 8a67 	vcvt.f32.u32	s17, s15
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001d42:	f7fe ff37 	bl	8000bb4 <__aeabi_d2f>
 8001d46:	ac04      	add	r4, sp, #16
 8001d48:	ee00 0a90 	vmov	s1, r0
 8001d4c:	eef0 1a68 	vmov.f32	s3, s17
 8001d50:	a804      	add	r0, sp, #16
 8001d52:	eeb0 1a48 	vmov.f32	s2, s16
 8001d56:	eeb0 0a49 	vmov.f32	s0, s18
 8001d5a:	f7ff fae5 	bl	8001328 <controller_impedance>
 8001d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d60:	462e      	mov	r6, r5
 8001d62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d68:	e886 0003 	stmia.w	r6, {r0, r1}
 8001d6c:	e73c      	b.n	8001be8 <LPTIM2_IRQHandler+0x118>
									w_flag=1;           // write_buffer to be saved in SD card = 1
 8001d6e:	700b      	strb	r3, [r1, #0]
									s_flag=0;           // current storgae_buffer is set 0
 8001d70:	7032      	strb	r2, [r6, #0]
 8001d72:	e7cb      	b.n	8001d0c <LPTIM2_IRQHandler+0x23c>
								Sub_cnt++;              // Increment Counter of sensor element
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	e7c7      	b.n	8001d0c <LPTIM2_IRQHandler+0x23c>
 8001d7c:	f3af 8000 	nop.w
 8001d80:	020c49ba 	.word	0x020c49ba
 8001d84:	3fb6872b 	.word	0x3fb6872b
 8001d88:	40009400 	.word	0x40009400
 8001d8c:	20008986 	.word	0x20008986
 8001d90:	200005d0 	.word	0x200005d0
 8001d94:	200005e0 	.word	0x200005e0
 8001d98:	200005d4 	.word	0x200005d4
 8001d9c:	406b8000 	.word	0x406b8000
 8001da0:	20000028 	.word	0x20000028
 8001da4:	20000020 	.word	0x20000020
 8001da8:	200005d8 	.word	0x200005d8
 8001dac:	20008a74 	.word	0x20008a74
 8001db0:	200086c8 	.word	0x200086c8
 8001db4:	c20c0000 	.word	0xc20c0000
 8001db8:	200005c8 	.word	0x200005c8
 8001dbc:	200005e8 	.word	0x200005e8
 8001dc0:	2000062c 	.word	0x2000062c
 8001dc4:	40590000 	.word	0x40590000
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	40002800 	.word	0x40002800
 8001dd0:	20008708 	.word	0x20008708
 8001dd4:	20000030 	.word	0x20000030
 8001dd8:	200089d2 	.word	0x200089d2

08001ddc <MOTOR2_Configure_DutyCycle>:
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001ddc:	4a03      	ldr	r2, [pc, #12]	; (8001dec <MOTOR2_Configure_DutyCycle+0x10>)
 8001dde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* PWM signal period is determined by the value of the auto-reload register */
  T = LL_TIM_GetAutoReload(TIM5);

  /* Pulse duration is determined by the value of the compare register.       */
  /* Its value is calculated in order to match the requested duty cycle.      */
  P = (D*T)/100;
 8001de0:	4358      	muls	r0, r3
 8001de2:	2364      	movs	r3, #100	; 0x64
 8001de4:	fbb0 f0f3 	udiv	r0, r0, r3
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001de8:	6350      	str	r0, [r2, #52]	; 0x34
 8001dea:	4770      	bx	lr
 8001dec:	40000c00 	.word	0x40000c00

08001df0 <main>:
int main(void){
 8001df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Pros_state =  LP_STOP;                                  // Default state after power ON reset
 8001df2:	4c31      	ldr	r4, [pc, #196]	; (8001eb8 <main+0xc8>)
 8001df4:	2501      	movs	r5, #1
 8001df6:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	                        // Configure the system clock to 80 MHz from MSI driven PLL
 8001df8:	f001 fc88 	bl	800370c <SystemClock_Config_MSI_80MHz>
 if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	482f      	ldr	r0, [pc, #188]	; (8001ebc <main+0xcc>)
 8001e00:	f000 fd2a 	bl	8002858 <RTC_BAK_GetRegister>
 8001e04:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001e08:	4298      	cmp	r0, r3
 8001e0a:	d001      	beq.n	8001e10 <main+0x20>
			MX_RTC_Init();   // Set RTC clock source and parameters
 8001e0c:	f000 fc92 	bl	8002734 <MX_RTC_Init>
  MX_GPIO_Init();              // Encoder, Motor GPIO configured.
 8001e10:	f7ff fc4a 	bl	80016a8 <MX_GPIO_Init>
  HAL_Init();                 // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8001e14:	f002 fc3a 	bl	800468c <HAL_Init>
  MOTOR2_Configure_TIMPWMOutput();
 8001e18:	f7ff fd62 	bl	80018e0 <MOTOR2_Configure_TIMPWMOutput>
  DutyCyclePrt=20;            // 20 meaning 20%
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <main+0xd0>)
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8001e1e:	4d29      	ldr	r5, [pc, #164]	; (8001ec4 <main+0xd4>)
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8001e20:	4e29      	ldr	r6, [pc, #164]	; (8001ec8 <main+0xd8>)
  DutyCyclePrt=20;            // 20 meaning 20%
 8001e22:	2014      	movs	r0, #20
 8001e24:	8018      	strh	r0, [r3, #0]
  MOTOR2_Configure_DutyCycle(DutyCyclePrt);   //Function for changing duty cycle
 8001e26:	f7ff ffd9 	bl	8001ddc <MOTOR2_Configure_DutyCycle>
    DFU_Bypass();         // Do not change this part
 8001e2a:	f000 fa1d 	bl	8002268 <DFU_Bypass>
    Configure_USART_1();  // Debug with PC
 8001e2e:	f000 ffff 	bl	8002e30 <Configure_USART_1>
    sprintf(PrintBuf,"Hello");
 8001e32:	4926      	ldr	r1, [pc, #152]	; (8001ecc <main+0xdc>)
 8001e34:	4826      	ldr	r0, [pc, #152]	; (8001ed0 <main+0xe0>)
 8001e36:	f008 fd59 	bl	800a8ec <strcpy>
    USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8001e3a:	2132      	movs	r1, #50	; 0x32
 8001e3c:	4824      	ldr	r0, [pc, #144]	; (8001ed0 <main+0xe0>)
 8001e3e:	f001 f831 	bl	8002ea4 <USART1_wr_print>
  P_ADC_Sensor_GPIO_Init(); //ADC GPIOs
 8001e42:	f000 fe43 	bl	8002acc <P_ADC_Sensor_GPIO_Init>
  all_ADC_read_test();
 8001e46:	f000 ffe3 	bl	8002e10 <all_ADC_read_test>
  sprintf(PrintBuf,"Toe:%u,Heel:%u,Load1:%u",Test1_mV,Test2_mV,Test3_mV);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <main+0xe4>)
 8001e4c:	4922      	ldr	r1, [pc, #136]	; (8001ed8 <main+0xe8>)
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <main+0xec>)
 8001e52:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <main+0xe0>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	8809      	ldrh	r1, [r1, #0]
 8001e58:	b289      	uxth	r1, r1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	9100      	str	r1, [sp, #0]
 8001e60:	491f      	ldr	r1, [pc, #124]	; (8001ee0 <main+0xf0>)
 8001e62:	f008 fcf3 	bl	800a84c <siprintf>
  	  USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8001e66:	2132      	movs	r1, #50	; 0x32
 8001e68:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <main+0xe0>)
 8001e6a:	f001 f81b 	bl	8002ea4 <USART1_wr_print>
  USB_PA9_EXTI_conf();         // USB connectivity pin detect Interrupt
 8001e6e:	f000 fcf7 	bl	8002860 <USB_PA9_EXTI_conf>
  Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8001e72:	f001 fcbb 	bl	80037ec <Configure_LPTIM2_Int>
  Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8001e76:	f000 f9a5 	bl	80021c4 <Configure_Interrupt>
  AIM_DataStart_at_Reset();
 8001e7a:	f001 fad7 	bl	800342c <AIM_DataStart_at_Reset>
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <main+0xf4>)
 8001e80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e84:	601a      	str	r2, [r3, #0]
 GREEN_LED_ONLY();
 8001e86:	f7ff fce9 	bl	800185c <GREEN_LED_ONLY>
							SD_write_Flag = 0;                           // Reset Flag to avoid looping
 8001e8a:	2700      	movs	r7, #0
				  switch(Pros_state) {
 8001e8c:	7823      	ldrb	r3, [r4, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d004      	beq.n	8001e9c <main+0xac>
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d1fb      	bne.n	8001e8e <main+0x9e>
						USB_Init_Start();            // Initialize USB and Stay USB mode as long as USB cable connected
 8001e96:	f001 fa61 	bl	800335c <USB_Init_Start>
  					    break;
 8001e9a:	e7f7      	b.n	8001e8c <main+0x9c>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8001e9c:	782b      	ldrb	r3, [r5, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d103      	bne.n	8001eaa <main+0xba>
						 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	7023      	strb	r3, [r4, #0]
						 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8001ea6:	702f      	strb	r7, [r5, #0]
 8001ea8:	e7f0      	b.n	8001e8c <main+0x9c>
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8001eaa:	7833      	ldrb	r3, [r6, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d1ed      	bne.n	8001e8c <main+0x9c>
							 SD_Sensor_write();
 8001eb0:	f000 faf4 	bl	800249c <SD_Sensor_write>
							SD_write_Flag = 0;                           // Reset Flag to avoid looping
 8001eb4:	7037      	strb	r7, [r6, #0]
 8001eb6:	e7e9      	b.n	8001e8c <main+0x9c>
 8001eb8:	200086c0 	.word	0x200086c0
 8001ebc:	40002800 	.word	0x40002800
 8001ec0:	20008980 	.word	0x20008980
 8001ec4:	200005cc 	.word	0x200005cc
 8001ec8:	20008708 	.word	0x20008708
 8001ecc:	0800b958 	.word	0x0800b958
 8001ed0:	20008990 	.word	0x20008990
 8001ed4:	20008a74 	.word	0x20008a74
 8001ed8:	20008a7c 	.word	0x20008a7c
 8001edc:	200089d2 	.word	0x200089d2
 8001ee0:	0800b95e 	.word	0x0800b95e
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee8:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001eec:	4905      	ldr	r1, [pc, #20]	; (8001f04 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ef0:	68ca      	ldr	r2, [r1, #12]
 8001ef2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60cb      	str	r3, [r1, #12]
 8001efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001efe:	bf00      	nop
 8001f00:	e7fd      	b.n	8001efe <NVIC_SystemReset+0x16>
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	05fa0004 	.word	0x05fa0004

08001f0c <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0c:	6883      	ldr	r3, [r0, #8]
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6083      	str	r3, [r0, #8]
 8001f1c:	4770      	bx	lr
	...

08001f20 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LL_AHB2_GRP1_EnableClock+0x18>)
 8001f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f24:	4302      	orrs	r2, r0
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8001f2a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f2c:	4018      	ands	r0, r3
 8001f2e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001f30:	9b01      	ldr	r3, [sp, #4]
}
 8001f32:	b002      	add	sp, #8
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <LL_APB2_GRP1_EnableClock+0x18>)
 8001f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f40:	4302      	orrs	r2, r0
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8001f46:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f48:	4018      	ands	r0, r3
 8001f4a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001f4c:	9b01      	ldr	r3, [sp, #4]
}
 8001f4e:	b002      	add	sp, #8
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <LL_GPIO_SetPinMode>:
{
 8001f58:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f5a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	fa91 f4a1 	rbit	r4, r1
 8001f60:	fab4 f484 	clz	r4, r4
 8001f64:	fa91 f1a1 	rbit	r1, r1
 8001f68:	2503      	movs	r5, #3
 8001f6a:	fab1 f181 	clz	r1, r1
 8001f6e:	0064      	lsls	r4, r4, #1
 8001f70:	fa05 f404 	lsl.w	r4, r5, r4
 8001f74:	0049      	lsls	r1, r1, #1
 8001f76:	ea23 0304 	bic.w	r3, r3, r4
 8001f7a:	fa02 f101 	lsl.w	r1, r2, r1
 8001f7e:	4319      	orrs	r1, r3
 8001f80:	6001      	str	r1, [r0, #0]
 8001f82:	bd30      	pop	{r4, r5, pc}

08001f84 <LL_ADC_REG_SetSequencerRanks>:
{
 8001f84:	b530      	push	{r4, r5, lr}
 8001f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f8a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8001f96:	40dc      	lsrs	r4, r3
 8001f98:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 8001f9a:	f001 011f 	and.w	r1, r1, #31
 8001f9e:	231f      	movs	r3, #31
 8001fa0:	fa03 f501 	lsl.w	r5, r3, r1
 8001fa4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8001fa8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001fac:	f1c1 011a 	rsb	r1, r1, #26
 8001fb0:	ea23 0305 	bic.w	r3, r3, r5
 8001fb4:	fa22 f101 	lsr.w	r1, r2, r1
 8001fb8:	4319      	orrs	r1, r3
 8001fba:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8001fbe:	bd30      	pop	{r4, r5, pc}

08001fc0 <LL_ADC_SetChannelSamplingTime>:
{
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001fc6:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001fca:	fab6 f386 	clz	r3, r6
 8001fce:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8001fd2:	40de      	lsrs	r6, r3
 8001fd4:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8001fd6:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001fda:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001fde:	fa93 f5a3 	rbit	r5, r3
 8001fe2:	fab5 f585 	clz	r5, r5
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	2407      	movs	r4, #7
 8001fec:	fa21 f505 	lsr.w	r5, r1, r5
 8001ff0:	fa04 f505 	lsl.w	r5, r4, r5
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001ffc:	40d9      	lsrs	r1, r3
 8001ffe:	ea24 0405 	bic.w	r4, r4, r5
 8002002:	fa02 f101 	lsl.w	r1, r2, r1
 8002006:	4321      	orrs	r1, r4
 8002008:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 800200c:	bd70      	pop	{r4, r5, r6, pc}

0800200e <LL_GPIO_SetAFPin_0_7>:
{
 800200e:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002010:	6a03      	ldr	r3, [r0, #32]
 8002012:	fa91 f4a1 	rbit	r4, r1
 8002016:	fab4 f484 	clz	r4, r4
 800201a:	fa91 f1a1 	rbit	r1, r1
 800201e:	250f      	movs	r5, #15
 8002020:	fab1 f181 	clz	r1, r1
 8002024:	00a4      	lsls	r4, r4, #2
 8002026:	fa05 f404 	lsl.w	r4, r5, r4
 800202a:	0089      	lsls	r1, r1, #2
 800202c:	ea23 0304 	bic.w	r3, r3, r4
 8002030:	fa02 f101 	lsl.w	r1, r2, r1
 8002034:	4319      	orrs	r1, r3
 8002036:	6201      	str	r1, [r0, #32]
 8002038:	bd30      	pop	{r4, r5, pc}

0800203a <LL_GPIO_SetPinPull>:
{
 800203a:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800203c:	68c3      	ldr	r3, [r0, #12]
 800203e:	fa91 f4a1 	rbit	r4, r1
 8002042:	fab4 f484 	clz	r4, r4
 8002046:	fa91 f1a1 	rbit	r1, r1
 800204a:	2503      	movs	r5, #3
 800204c:	fab1 f181 	clz	r1, r1
 8002050:	0064      	lsls	r4, r4, #1
 8002052:	fa05 f404 	lsl.w	r4, r5, r4
 8002056:	0049      	lsls	r1, r1, #1
 8002058:	ea23 0304 	bic.w	r3, r3, r4
 800205c:	fa02 f101 	lsl.w	r1, r2, r1
 8002060:	4319      	orrs	r1, r3
 8002062:	60c1      	str	r1, [r0, #12]
 8002064:	bd30      	pop	{r4, r5, pc}

08002066 <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 8002066:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002068:	6882      	ldr	r2, [r0, #8]
 800206a:	fa91 f3a1 	rbit	r3, r1
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	fa91 f1a1 	rbit	r1, r1
 8002076:	2403      	movs	r4, #3
 8002078:	fab1 f181 	clz	r1, r1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa04 f303 	lsl.w	r3, r4, r3
 8002082:	0049      	lsls	r1, r1, #1
 8002084:	ea22 0303 	bic.w	r3, r2, r3
 8002088:	fa04 f101 	lsl.w	r1, r4, r1
 800208c:	4319      	orrs	r1, r3
 800208e:	6081      	str	r1, [r0, #8]
 8002090:	bd10      	pop	{r4, pc}
	...

08002094 <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 8002096:	2030      	movs	r0, #48	; 0x30
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	fa90 f0a0 	rbit	r0, r0
 800209e:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 80020a0:	fab0 f080 	clz	r0, r0
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	f003 0130 	and.w	r1, r3, #48	; 0x30
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	fa21 f000 	lsr.w	r0, r1, r0
 80020b8:	40d3      	lsrs	r3, r2
}
 80020ba:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80020be:	4770      	bx	lr
 80020c0:	40002800 	.word	0x40002800

080020c4 <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 80020c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	fa90 f0a0 	rbit	r0, r0
 80020d0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 80020d4:	fab0 f080 	clz	r0, r0
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020e8:	fa21 f000 	lsr.w	r0, r1, r0
 80020ec:	40d3      	lsrs	r3, r2
}
 80020ee:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80020f2:	4770      	bx	lr
 80020f4:	40002800 	.word	0x40002800

080020f8 <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 80020fa:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	fa90 f0a0 	rbit	r0, r0
 8002104:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8002108:	fab0 f080 	clz	r0, r0
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800211c:	fa21 f000 	lsr.w	r0, r1, r0
 8002120:	40d3      	lsrs	r3, r2
}
 8002122:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8002126:	4770      	bx	lr
 8002128:	40002800 	.word	0x40002800

0800212c <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 800212e:	2070      	movs	r0, #112	; 0x70
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa90 f0a0 	rbit	r0, r0
 8002136:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8002138:	fab0 f080 	clz	r0, r0
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8002144:	fab2 f282 	clz	r2, r2
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	fa21 f000 	lsr.w	r0, r1, r0
 8002150:	40d3      	lsrs	r3, r2
}
 8002152:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8002156:	4770      	bx	lr
 8002158:	40002800 	.word	0x40002800

0800215c <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 800215e:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa90 f0a0 	rbit	r0, r0
 8002168:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 800216c:	fab0 f080 	clz	r0, r0
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002180:	fa21 f000 	lsr.w	r0, r1, r0
 8002184:	40d3      	lsrs	r3, r2
}
 8002186:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800218a:	4770      	bx	lr
 800218c:	40002800 	.word	0x40002800

08002190 <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 8002192:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa90 f0a0 	rbit	r0, r0
 800219c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 80021a0:	fab0 f080 	clz	r0, r0
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021b4:	fa21 f000 	lsr.w	r0, r1, r0
 80021b8:	40d3      	lsrs	r3, r2
}
 80021ba:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80021be:	4770      	bx	lr
 80021c0:	40002800 	.word	0x40002800

080021c4 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <Configure_Interrupt+0x2c>)
 80021c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021d8:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <Configure_Interrupt+0x30>)
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 80021e8:	2210      	movs	r2, #16
 80021ea:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <Shut_Down_USB+0x2c>)
 80021fa:	6853      	ldr	r3, [r2, #4]
		f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
		FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void)
{
 80021fc:	b510      	push	{r4, lr}
 80021fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                               // Disable VDDUSB supply for USB
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8002202:	4c09      	ldr	r4, [pc, #36]	; (8002228 <Shut_Down_USB+0x30>)
 8002204:	6053      	str	r3, [r2, #4]
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <Shut_Down_USB+0x34>)
 8002208:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800220a:	4620      	mov	r0, r4
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 800220c:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800220e:	f006 fa7a 	bl	8008706 <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8002212:	4620      	mov	r0, r4
 8002214:	f006 fa59 	bl	80086ca <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE();      // Disable USB Clock
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <Shut_Down_USB+0x38>)
 800221a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002222:	bd10      	pop	{r4, pc}
 8002224:	40007000 	.word	0x40007000
 8002228:	20008720 	.word	0x20008720
 800222c:	200005cc 	.word	0x200005cc
 8002230:	40021000 	.word	0x40021000

08002234 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <USB_Clock_Ready+0x2c>)
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}


void USB_Clock_Ready(void)
{
 800223c:	b082      	sub	sp, #8
 800223e:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8002240:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
		while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8002242:	0552      	lsls	r2, r2, #21
 8002244:	d5fc      	bpl.n	8002240 <USB_Clock_Ready+0xc>
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();     // Enable USB Clock
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <USB_Clock_Ready+0x30>)
 8002248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800224a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800224e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9b01      	ldr	r3, [sp, #4]
}
 800225a:	b002      	add	sp, #8
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000
 8002264:	40021000 	.word	0x40021000

08002268 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
void DFU_Bypass(void)
{

	uint32_t i=0;

    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <DFU_Bypass+0x48>)
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8002274:	f3c2 2240 	ubfx	r2, r2, #9, #1
{
 8002278:	b570      	push	{r4, r5, r6, lr}
    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 800227a:	6002      	str	r2, [r0, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
   // if(check == 1)
    //	 CYAN_LED_ONLY();
    while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));  // Wait until USB cable disconnect from Charger
 800227e:	0592      	lsls	r2, r2, #22
 8002280:	d4fc      	bmi.n	800227c <DFU_Bypass+0x14>
	  if (*LP_Ram_Key_Address != Reset_Key_Value)
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <DFU_Bypass+0x4c>)
 8002284:	4c0c      	ldr	r4, [pc, #48]	; (80022b8 <DFU_Bypass+0x50>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	42a2      	cmp	r2, r4
 800228a:	d010      	beq.n	80022ae <DFU_Bypass+0x46>
	  {
	      *LP_Ram_Key_Address = Reset_Key_Value;
 800228c:	601c      	str	r4, [r3, #0]
    if(check == 1)
 800228e:	b171      	cbz	r1, 80022ae <DFU_Bypass+0x46>
 8002290:	2505      	movs	r5, #5
 8002292:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    {
	  /* Toggle IO in during 2s (10*200ms) */
	  for(i =0; i<5; i++)
	  {
	 //   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	    LL_mDelay(200);
 8002296:	20c8      	movs	r0, #200	; 0xc8
 8002298:	f005 fd76 	bl	8007d88 <LL_mDelay>
 800229c:	6933      	ldr	r3, [r6, #16]
	    if (LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY))
 800229e:	059b      	lsls	r3, r3, #22
 80022a0:	d503      	bpl.n	80022aa <DFU_Bypass+0x42>
	    {
	    	 *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <DFU_Bypass+0x54>)
 80022a4:	601c      	str	r4, [r3, #0]
	    	  NVIC_SystemReset();        // System reset
 80022a6:	f7ff fe1f 	bl	8001ee8 <NVIC_SystemReset>
	  for(i =0; i<5; i++)
 80022aa:	3d01      	subs	r5, #1
 80022ac:	d1f3      	bne.n	8002296 <DFU_Bypass+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	20008aac 	.word	0x20008aac
 80022b4:	20017cf0 	.word	0x20017cf0
 80022b8:	deadbeef 	.word	0xdeadbeef
 80022bc:	20017ff0 	.word	0x20017ff0

080022c0 <Prepare_Goto_Dormant_Mode>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <Prepare_Goto_Dormant_Mode+0x10>)
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	f023 0302 	bic.w	r3, r3, #2
 80022c8:	6093      	str	r3, [r2, #8]


void Prepare_Goto_Dormant_Mode(void)
{
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 80022ca:	f7ff baf8 	b.w	80018be <SD_POWER_OFF>
 80022ce:	bf00      	nop
 80022d0:	40009400 	.word	0x40009400

080022d4 <GetNextIndex>:

}


int GetNextIndex(char *path)  // Read SD card content to save next value in auto increment format
{
 80022d4:	b530      	push	{r4, r5, lr}
 80022d6:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
DIR dir;
FILINFO fno;
int i, index = -1;

if (f_opendir(&dir, path) == FR_OK)
 80022da:	4601      	mov	r1, r0
 80022dc:	a808      	add	r0, sp, #32
 80022de:	f008 f87c 	bl	800a3da <f_opendir>
 80022e2:	f04f 34ff 	mov.w	r4, #4294967295
 80022e6:	b9e0      	cbnz	r0, 8002322 <GetNextIndex+0x4e>
while(1)
{
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
    break;

  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 80022e8:	4d10      	ldr	r5, [pc, #64]	; (800232c <GetNextIndex+0x58>)
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
 80022ea:	a902      	add	r1, sp, #8
 80022ec:	a808      	add	r0, sp, #32
 80022ee:	f008 f8c2 	bl	800a476 <f_readdir>
 80022f2:	b9b0      	cbnz	r0, 8002322 <GetNextIndex+0x4e>
 80022f4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80022f8:	b19b      	cbz	r3, 8002322 <GetNextIndex+0x4e>
  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 80022fa:	4629      	mov	r1, r5
 80022fc:	f10d 0011 	add.w	r0, sp, #17
 8002300:	f008 fafc 	bl	800a8fc <strstr>
 8002304:	2800      	cmp	r0, #0
 8002306:	d0f0      	beq.n	80022ea <GetNextIndex+0x16>
 8002308:	aa01      	add	r2, sp, #4
 800230a:	4909      	ldr	r1, [pc, #36]	; (8002330 <GetNextIndex+0x5c>)
 800230c:	f10d 0011 	add.w	r0, sp, #17
 8002310:	f008 fac0 	bl	800a894 <siscanf>
 8002314:	2801      	cmp	r0, #1
 8002316:	d1e8      	bne.n	80022ea <GetNextIndex+0x16>
 8002318:	9b01      	ldr	r3, [sp, #4]
 800231a:	429c      	cmp	r4, r3
 800231c:	bfb8      	it	lt
 800231e:	461c      	movlt	r4, r3
 8002320:	e7e3      	b.n	80022ea <GetNextIndex+0x16>
    if (i > index) index = i;
}
}
return(index+1);
}
 8002322:	1c60      	adds	r0, r4, #1
 8002324:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8002328:	bd30      	pop	{r4, r5, pc}
 800232a:	bf00      	nop
 800232c:	0800b9a4 	.word	0x0800b9a4
 8002330:	0800b99d 	.word	0x0800b99d

08002334 <Try_FATFS_Mount>:
	return 0;
}

void Try_FATFS_Mount(void)
{
	  if (Fat_mnt_fail == 1)
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <Try_FATFS_Mount+0x44>)
{
 8002336:	b510      	push	{r4, lr}
	  if (Fat_mnt_fail == 1)
 8002338:	681c      	ldr	r4, [r3, #0]
 800233a:	2c01      	cmp	r4, #1
 800233c:	d11a      	bne.n	8002374 <Try_FATFS_Mount+0x40>
	  {
		  Fat_mnt_fail=0;
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
		  SD_POWER_OFF();
 8002342:	f7ff fabc 	bl	80018be <SD_POWER_OFF>
		  delay_us(10000); // wait 10 msec
 8002346:	f242 7010 	movw	r0, #10000	; 0x2710
 800234a:	f001 f9b3 	bl	80036b4 <delay_us>
		  SD_POWER_ON();
 800234e:	f7ff fab5 	bl	80018bc <SD_POWER_ON>
		  delay_us(1000000); // wait 1 sec
 8002352:	480a      	ldr	r0, [pc, #40]	; (800237c <Try_FATFS_Mount+0x48>)
 8002354:	f001 f9ae 	bl	80036b4 <delay_us>
		  //Retry FATFS link

		  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002358:	4909      	ldr	r1, [pc, #36]	; (8002380 <Try_FATFS_Mount+0x4c>)
 800235a:	480a      	ldr	r0, [pc, #40]	; (8002384 <Try_FATFS_Mount+0x50>)
 800235c:	f008 f952 	bl	800a604 <FATFS_LinkDriver>
 8002360:	b928      	cbnz	r0, 800236e <Try_FATFS_Mount+0x3a>
		 		{
		 			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8002362:	4622      	mov	r2, r4
 8002364:	4906      	ldr	r1, [pc, #24]	; (8002380 <Try_FATFS_Mount+0x4c>)
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <Try_FATFS_Mount+0x54>)
 8002368:	f007 fc7a 	bl	8009c60 <f_mount>
 800236c:	b110      	cbz	r0, 8002374 <Try_FATFS_Mount+0x40>
		 			 {
		 				Skip_FATFS=1;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <Try_FATFS_Mount+0x58>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	bd10      	pop	{r4, pc}
 8002376:	bf00      	nop
 8002378:	200089c4 	.word	0x200089c4
 800237c:	000f4240 	.word	0x000f4240
 8002380:	20008ab9 	.word	0x20008ab9
 8002384:	0800bc0c 	.word	0x0800bc0c
 8002388:	20008ac8 	.word	0x20008ac8
 800238c:	20008d1d 	.word	0x20008d1d

08002390 <file_reopen_sync>:
	  }

}

void file_reopen_sync(void)
{
 8002390:	b508      	push	{r3, lr}
	f_close(&MyFile);
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <file_reopen_sync+0x20>)
 8002394:	f007 fec1 	bl	800a11a <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002398:	2212      	movs	r2, #18
 800239a:	4906      	ldr	r1, [pc, #24]	; (80023b4 <file_reopen_sync+0x24>)
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <file_reopen_sync+0x20>)
 800239e:	f007 fc95 	bl	8009ccc <f_open>
	if(res != FR_OK)
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <file_reopen_sync+0x28>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b113      	cbz	r3, 80023ae <file_reopen_sync+0x1e>
						{
							Fat_sync_read_fail=1;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <file_reopen_sync+0x2c>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	bd08      	pop	{r3, pc}
 80023b0:	20008d28 	.word	0x20008d28
 80023b4:	20008a0c 	.word	0x20008a0c
 80023b8:	20008faa 	.word	0x20008faa
 80023bc:	200089cc 	.word	0x200089cc

080023c0 <file_reopen>:
						}
}

void file_reopen(void)
{
 80023c0:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80023c2:	4807      	ldr	r0, [pc, #28]	; (80023e0 <file_reopen+0x20>)
 80023c4:	f007 fea9 	bl	800a11a <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80023c8:	2212      	movs	r2, #18
 80023ca:	4906      	ldr	r1, [pc, #24]	; (80023e4 <file_reopen+0x24>)
 80023cc:	4804      	ldr	r0, [pc, #16]	; (80023e0 <file_reopen+0x20>)
 80023ce:	f007 fc7d 	bl	8009ccc <f_open>
	if(res != FR_OK)
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <file_reopen+0x28>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b113      	cbz	r3, 80023de <file_reopen+0x1e>
						{
							Fat_write_read_fail=1;
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <file_reopen+0x2c>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	bd08      	pop	{r3, pc}
 80023e0:	20008d28 	.word	0x20008d28
 80023e4:	20008a0c 	.word	0x20008a0c
 80023e8:	20008faa 	.word	0x20008faa
 80023ec:	200089c8 	.word	0x200089c8

080023f0 <file_mnt_reopen>:
						}
}

void file_mnt_reopen(void)
{
 80023f0:	b508      	push	{r3, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80023f2:	490c      	ldr	r1, [pc, #48]	; (8002424 <file_mnt_reopen+0x34>)
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <file_mnt_reopen+0x38>)
 80023f6:	f008 f905 	bl	800a604 <FATFS_LinkDriver>
 80023fa:	b928      	cbnz	r0, 8002408 <file_mnt_reopen+0x18>
		{
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80023fc:	2201      	movs	r2, #1
 80023fe:	4909      	ldr	r1, [pc, #36]	; (8002424 <file_mnt_reopen+0x34>)
 8002400:	480a      	ldr	r0, [pc, #40]	; (800242c <file_mnt_reopen+0x3c>)
 8002402:	f007 fc2d 	bl	8009c60 <f_mount>
 8002406:	b118      	cbz	r0, 8002410 <file_mnt_reopen+0x20>
			 {
				 Fat_read_mnt_fail=1;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <file_mnt_reopen+0x40>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	bd08      	pop	{r3, pc}
			 }
			 else  // Good to Go
			 {
				 res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002410:	2212      	movs	r2, #18
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <file_mnt_reopen+0x44>)
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <file_mnt_reopen+0x48>)
 8002416:	f007 fc59 	bl	8009ccc <f_open>
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <file_mnt_reopen+0x4c>)
 800241c:	7018      	strb	r0, [r3, #0]
					if(res != FR_OK)
 800241e:	2800      	cmp	r0, #0
 8002420:	d1f2      	bne.n	8002408 <file_mnt_reopen+0x18>
 8002422:	bd08      	pop	{r3, pc}
 8002424:	20008ab9 	.word	0x20008ab9
 8002428:	0800bc0c 	.word	0x0800bc0c
 800242c:	20008ac8 	.word	0x20008ac8
 8002430:	20008a70 	.word	0x20008a70
 8002434:	20008a0c 	.word	0x20008a0c
 8002438:	20008d28 	.word	0x20008d28
 800243c:	20008faa 	.word	0x20008faa

08002440 <FATFS_Logstart_Ready>:
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
}

void FATFS_Logstart_Ready(void)
{
 8002440:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002442:	4910      	ldr	r1, [pc, #64]	; (8002484 <FATFS_Logstart_Ready+0x44>)
 8002444:	4810      	ldr	r0, [pc, #64]	; (8002488 <FATFS_Logstart_Ready+0x48>)
 8002446:	f008 f8dd 	bl	800a604 <FATFS_LinkDriver>
 800244a:	b988      	cbnz	r0, 8002470 <FATFS_Logstart_Ready+0x30>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800244c:	2201      	movs	r2, #1
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <FATFS_Logstart_Ready+0x44>)
 8002450:	480e      	ldr	r0, [pc, #56]	; (800248c <FATFS_Logstart_Ready+0x4c>)
 8002452:	f007 fc05 	bl	8009c60 <f_mount>
 8002456:	b940      	cbnz	r0, 800246a <FATFS_Logstart_Ready+0x2a>

		 }

    	 else
			 {
			 if(f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) // Create and Open a new text file object with write access
 8002458:	2212      	movs	r2, #18
 800245a:	490d      	ldr	r1, [pc, #52]	; (8002490 <FATFS_Logstart_Ready+0x50>)
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <FATFS_Logstart_Ready+0x54>)
 800245e:	f007 fc35 	bl	8009ccc <f_open>
 8002462:	b910      	cbnz	r0, 800246a <FATFS_Logstart_Ready+0x2a>

				 }
				 else
				 {

					f_close(&MyFile);
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <FATFS_Logstart_Ready+0x54>)
 8002466:	f007 fe58 	bl	800a11a <f_close>
				 }
			 }
		 delay_us(100);
 800246a:	2064      	movs	r0, #100	; 0x64
 800246c:	f001 f922 	bl	80036b4 <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8002470:	2200      	movs	r2, #0
 8002472:	4909      	ldr	r1, [pc, #36]	; (8002498 <FATFS_Logstart_Ready+0x58>)
 8002474:	4610      	mov	r0, r2
 8002476:	f007 fbf3 	bl	8009c60 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800247a:	4802      	ldr	r0, [pc, #8]	; (8002484 <FATFS_Logstart_Ready+0x44>)
}
 800247c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8002480:	f008 b8dc 	b.w	800a63c <FATFS_UnLinkDriver>
 8002484:	20008ab9 	.word	0x20008ab9
 8002488:	0800bc0c 	.word	0x0800bc0c
 800248c:	20008ac8 	.word	0x20008ac8
 8002490:	0800b990 	.word	0x0800b990
 8002494:	20008d28 	.word	0x20008d28
 8002498:	0800bb37 	.word	0x0800bb37

0800249c <SD_Sensor_write>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 800249c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
}


void SD_Sensor_write(void)                                  // Storing Sensor Buffer values on FATFS file
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	6953      	ldr	r3, [r2, #20]
#ifdef Bottle_Device
  //ALL_LED_OFF();
#else
#endif
	  LL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 80024a4:	4911      	ldr	r1, [pc, #68]	; (80024ec <SD_Sensor_write+0x50>)
 80024a6:	4e12      	ldr	r6, [pc, #72]	; (80024f0 <SD_Sensor_write+0x54>)
 80024a8:	f083 0320 	eor.w	r3, r3, #32
 80024ac:	6153      	str	r3, [r2, #20]
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <SD_Sensor_write+0x58>)
 80024b0:	7818      	ldrb	r0, [r3, #0]
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <SD_Sensor_write+0x5c>)
 80024b4:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 80024b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024bc:	480f      	ldr	r0, [pc, #60]	; (80024fc <SD_Sensor_write+0x60>)
 80024be:	f007 fcdd 	bl	8009e7c <f_write>
	 }
#ifdef Bottle_Device
	 f_sync(&MyFile);
#else

	 if (File_Sensor_write_issue==0)
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <SD_Sensor_write+0x64>)
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 80024c4:	7030      	strb	r0, [r6, #0]
	 if (File_Sensor_write_issue==0)
 80024c6:	781d      	ldrb	r5, [r3, #0]
 80024c8:	b97d      	cbnz	r5, 80024ea <SD_Sensor_write+0x4e>
	 {

	 if(SD_Write_Count ==SD_cnt_limit)                                          // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 80024ca:	4c0e      	ldr	r4, [pc, #56]	; (8002504 <SD_Sensor_write+0x68>)
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <SD_Sensor_write+0x6c>)
 80024ce:	7822      	ldrb	r2, [r4, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d105      	bne.n	80024e2 <SD_Sensor_write+0x46>
			{
		 res= f_sync(&MyFile);
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <SD_Sensor_write+0x60>)
 80024d8:	f007 fdbf 	bl	800a05a <f_sync>
		 if(res != FR_OK)
		 {
	//		 AIM_Error_Handler(f_sync_E);
		 }
				                                        // Sync file without closing
				SD_Write_Count = 0;                                        // Reset SD write counters
 80024dc:	7025      	strb	r5, [r4, #0]
		 res= f_sync(&MyFile);
 80024de:	7030      	strb	r0, [r6, #0]
 80024e0:	bd70      	pop	{r4, r5, r6, pc}
		    }
			else
			{
				SD_Write_Count++;                                          // Increment SD write counter
 80024e2:	7823      	ldrb	r3, [r4, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	7023      	strb	r3, [r4, #0]
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	2000062c 	.word	0x2000062c
 80024f0:	20008faa 	.word	0x20008faa
 80024f4:	20000030 	.word	0x20000030
 80024f8:	20008a24 	.word	0x20008a24
 80024fc:	20008d28 	.word	0x20008d28
 8002500:	200089e8 	.word	0x200089e8
 8002504:	200005c4 	.word	0x200005c4
 8002508:	20008982 	.word	0x20008982

0800250c <USB_MSC_Init_Start>:
	 }
#endif
}

void USB_MSC_Init_Start(void)                                 // Initialize USB MSC mode
{
 800250c:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);                   // USB MSC initialization
 800250e:	4c0b      	ldr	r4, [pc, #44]	; (800253c <USB_MSC_Init_Start+0x30>)
 8002510:	490b      	ldr	r1, [pc, #44]	; (8002540 <USB_MSC_Init_Start+0x34>)
 8002512:	2200      	movs	r2, #0
 8002514:	4620      	mov	r0, r4
 8002516:	f006 f8bc 	bl	8008692 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);        // USB class registration
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <USB_MSC_Init_Start+0x38>)
 800251c:	4620      	mov	r0, r4
 800251e:	f006 f8e6 	bl	80086ee <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 8002522:	4909      	ldr	r1, [pc, #36]	; (8002548 <USB_MSC_Init_Start+0x3c>)
 8002524:	4620      	mov	r0, r4
 8002526:	f005 fd0c 	bl	8007f42 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 800252a:	4620      	mov	r0, r4
 800252c:	f006 f8e6 	bl	80086fc <USBD_Start>

	delay_us(1000000);
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <USB_MSC_Init_Start+0x40>)


}
 8002532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8002536:	f001 b8bd 	b.w	80036b4 <delay_us>
 800253a:	bf00      	nop
 800253c:	20008720 	.word	0x20008720
 8002540:	20000038 	.word	0x20000038
 8002544:	20000224 	.word	0x20000224
 8002548:	20000204 	.word	0x20000204
 800254c:	000f4240 	.word	0x000f4240

08002550 <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void)
{
 8002550:	b510      	push	{r4, lr}
	   USBD_Init(&USBD_Device, &VCP_Desc, 0);                   // USB VCP initialization
 8002552:	4c0b      	ldr	r4, [pc, #44]	; (8002580 <USB_VCP_Init_Start+0x30>)
 8002554:	490b      	ldr	r1, [pc, #44]	; (8002584 <USB_VCP_Init_Start+0x34>)
 8002556:	2200      	movs	r2, #0
 8002558:	4620      	mov	r0, r4
 800255a:	f006 f89a 	bl	8008692 <USBD_Init>
	   USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);        // USB class registration
 800255e:	490a      	ldr	r1, [pc, #40]	; (8002588 <USB_VCP_Init_Start+0x38>)
 8002560:	4620      	mov	r0, r4
 8002562:	f006 f8c4 	bl	80086ee <USBD_RegisterClass>
	   USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 8002566:	4909      	ldr	r1, [pc, #36]	; (800258c <USB_VCP_Init_Start+0x3c>)
 8002568:	4620      	mov	r0, r4
 800256a:	f001 fde7 	bl	800413c <USBD_CDC_RegisterInterface>
	   USBD_Start(&USBD_Device);                                 // Start USB VCP
 800256e:	4620      	mov	r0, r4
 8002570:	f006 f8c4 	bl	80086fc <USBD_Start>
	   delay_us(1000000);
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <USB_VCP_Init_Start+0x40>)
}
 8002576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   delay_us(1000000);
 800257a:	f001 b89b 	b.w	80036b4 <delay_us>
 800257e:	bf00      	nop
 8002580:	20008720 	.word	0x20008720
 8002584:	2000009c 	.word	0x2000009c
 8002588:	200000e4 	.word	0x200000e4
 800258c:	200001f4 	.word	0x200001f4
 8002590:	000f4240 	.word	0x000f4240

08002594 <Read_RTC_Timestamp>:
          2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}


void Read_RTC_Timestamp(void)               // Read RTC timestamp and store in variables
{
 8002594:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8002596:	f7ff fdfb 	bl	8002190 <LL_RTC_TIME_GetHour.constprop.13>
 800259a:	4604      	mov	r4, r0
 800259c:	f7ff fdf8 	bl	8002190 <LL_RTC_TIME_GetHour.constprop.13>
 80025a0:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <Read_RTC_Timestamp+0xc0>)
 80025a6:	f000 000f 	and.w	r0, r0, #15
 80025aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025b2:	7013      	strb	r3, [r2, #0]
Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 80025b4:	f7ff fdd2 	bl	800215c <LL_RTC_TIME_GetMinute.constprop.12>
 80025b8:	4604      	mov	r4, r0
 80025ba:	f7ff fdcf 	bl	800215c <LL_RTC_TIME_GetMinute.constprop.12>
 80025be:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <Read_RTC_Timestamp+0xc4>)
 80025c4:	f000 000f 	and.w	r0, r0, #15
 80025c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025d0:	7013      	strb	r3, [r2, #0]
Sec =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80025d2:	f7ff fdab 	bl	800212c <LL_RTC_TIME_GetSecond.constprop.11>
 80025d6:	4604      	mov	r4, r0
 80025d8:	f7ff fda8 	bl	800212c <LL_RTC_TIME_GetSecond.constprop.11>
 80025dc:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <Read_RTC_Timestamp+0xc8>)
 80025e2:	f000 000f 	and.w	r0, r0, #15
 80025e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025ee:	7013      	strb	r3, [r2, #0]

Mon =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80025f0:	f7ff fd68 	bl	80020c4 <LL_RTC_DATE_GetMonth.constprop.9>
 80025f4:	4604      	mov	r4, r0
 80025f6:	f7ff fd65 	bl	80020c4 <LL_RTC_DATE_GetMonth.constprop.9>
 80025fa:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <Read_RTC_Timestamp+0xcc>)
 8002600:	f000 000f 	and.w	r0, r0, #15
 8002604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002608:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800260c:	7013      	strb	r3, [r2, #0]
Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800260e:	f7ff fd41 	bl	8002094 <LL_RTC_DATE_GetDay.constprop.8>
 8002612:	4604      	mov	r4, r0
 8002614:	f7ff fd3e 	bl	8002094 <LL_RTC_DATE_GetDay.constprop.8>
 8002618:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <Read_RTC_Timestamp+0xd0>)
 800261e:	f000 000f 	and.w	r0, r0, #15
 8002622:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002626:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800262a:	7013      	strb	r3, [r2, #0]
Year =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800262c:	f7ff fd64 	bl	80020f8 <LL_RTC_DATE_GetYear.constprop.10>
 8002630:	4604      	mov	r4, r0
 8002632:	f7ff fd61 	bl	80020f8 <LL_RTC_DATE_GetYear.constprop.10>
 8002636:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <Read_RTC_Timestamp+0xd4>)
 800263c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002640:	f000 000f 	and.w	r0, r0, #15
 8002644:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002648:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
(void)RTC->DR;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <Read_RTC_Timestamp+0xd8>)
 800264c:	685a      	ldr	r2, [r3, #4]
(void)RTC->TR;
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	bd10      	pop	{r4, pc}
 8002652:	bf00      	nop
 8002654:	20008a1e 	.word	0x20008a1e
 8002658:	200089dc 	.word	0x200089dc
 800265c:	20008a28 	.word	0x20008a28
 8002660:	20008d0c 	.word	0x20008d0c
 8002664:	20008cfa 	.word	0x20008cfa
 8002668:	20008d25 	.word	0x20008d25
 800266c:	40002800 	.word	0x40002800

08002670 <update_FATFS_time>:
{
 8002670:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();                                   // Read RTC time-stamps and store in variables
 8002672:	f7ff ff8f 	bl	8002594 <Read_RTC_Timestamp>
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <update_FATFS_time+0x44>)
 8002678:	490f      	ldr	r1, [pc, #60]	; (80026b8 <update_FATFS_time+0x48>)
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 800267e:	4810      	ldr	r0, [pc, #64]	; (80026c0 <update_FATFS_time+0x50>)
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002686:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <update_FATFS_time+0x54>)
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	3214      	adds	r2, #20
 800268c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8002690:	808b      	strh	r3, [r1, #4]
    fno.ftime = (WORD)(Hour <<11 |  Min<<5 | Sec/2 );       // Extracting values from RTC registers
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <update_FATFS_time+0x58>)
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <update_FATFS_time+0x5c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	015b      	lsls	r3, r3, #5
 800269c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80026a0:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <update_FATFS_time+0x60>)
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80026a8:	80cb      	strh	r3, [r1, #6]
}
 80026aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 80026ae:	f007 bf5e 	b.w	800a56e <f_utime>
 80026b2:	bf00      	nop
 80026b4:	20008d0c 	.word	0x20008d0c
 80026b8:	200089f0 	.word	0x200089f0
 80026bc:	20008cfa 	.word	0x20008cfa
 80026c0:	20008a0c 	.word	0x20008a0c
 80026c4:	20008d25 	.word	0x20008d25
 80026c8:	20008a1e 	.word	0x20008a1e
 80026cc:	200089dc 	.word	0x200089dc
 80026d0:	20008a28 	.word	0x20008a28

080026d4 <File_Close_Update_Unlink>:
{
 80026d4:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80026d6:	4807      	ldr	r0, [pc, #28]	; (80026f4 <File_Close_Update_Unlink+0x20>)
 80026d8:	f007 fd1f 	bl	800a11a <f_close>
	update_FATFS_time();                    // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80026dc:	f7ff ffc8 	bl	8002670 <update_FATFS_time>
	f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
 80026e0:	2200      	movs	r2, #0
 80026e2:	4905      	ldr	r1, [pc, #20]	; (80026f8 <File_Close_Update_Unlink+0x24>)
 80026e4:	4610      	mov	r0, r2
 80026e6:	f007 fabb 	bl	8009c60 <f_mount>
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80026ea:	4804      	ldr	r0, [pc, #16]	; (80026fc <File_Close_Update_Unlink+0x28>)
}
 80026ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80026f0:	f007 bfa4 	b.w	800a63c <FATFS_UnLinkDriver>
 80026f4:	20008d28 	.word	0x20008d28
 80026f8:	0800bb37 	.word	0x0800bb37
 80026fc:	20008ab9 	.word	0x20008ab9

08002700 <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void)      // Function needed before writing on RTC registers
{
  RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <Enter_RTC_InitMode+0x10>)
 8002702:	f04f 32ff 	mov.w	r2, #4294967295
 8002706:	60da      	str	r2, [r3, #12]
  while(((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF)); // Wait to enter Init mode
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	0652      	lsls	r2, r2, #25
 800270c:	d5fc      	bpl.n	8002708 <Enter_RTC_InitMode+0x8>
}
 800270e:	4770      	bx	lr
 8002710:	40002800 	.word	0x40002800

08002714 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)      // Function needed after writing on RTC registers
{
  RTC->ISR = (uint32_t)~RTC_ISR_INIT; // Disable RTC init mode
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <Exit_RTC_InitMode+0x1c>)
 8002716:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800271a:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002722:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8002726:	60da      	str	r2, [r3, #12]
	while(((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF));  // Wait the registers to be synchronised
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	0692      	lsls	r2, r2, #26
 800272c:	d5fc      	bpl.n	8002728 <Exit_RTC_InitMode+0x14>
}
 800272e:	4770      	bx	lr
 8002730:	40002800 	.word	0x40002800

08002734 <MX_RTC_Init>:

void MX_RTC_Init(void)                           // RTC initialization after Power on reset
{
 8002734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <MX_RTC_Init+0xa8>)
 8002738:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800273c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002744:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002748:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800274c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002750:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800275c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RTC_InitTypeDef RTC_InitStruct;

  LL_RCC_ForceBackupDomainReset();               // Reset Backup domain registers
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();                          // Configure LSE as RTC source clock
  while (LL_RCC_LSE_IsReady() != 1);
 8002760:	0792      	lsls	r2, r2, #30
 8002762:	d5fb      	bpl.n	800275c <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002764:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
  LL_RCC_EnableRTC();                           // RTC clock

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 8002768:	4c1d      	ldr	r4, [pc, #116]	; (80027e0 <MX_RTC_Init+0xac>)
 800276a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800276e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002776:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800277a:	a904      	add	r1, sp, #16
 800277c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002784:	2300      	movs	r3, #0
 8002786:	f841 3d0c 	str.w	r3, [r1, #-12]!
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 800278a:	4620      	mov	r0, r4
 800278c:	f004 fdf2 	bl	8007374 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002790:	23ca      	movs	r3, #202	; 0xca
 8002792:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002794:	2353      	movs	r3, #83	; 0x53
 8002796:	6263      	str	r3, [r4, #36]	; 0x24


    LL_RTC_DisableWriteProtection(RTC);
    Enter_RTC_InitMode();                         // Enter RTC initialization mode to set parameters
 8002798:	f7ff ffb2 	bl	8002700 <Enter_RTC_InitMode>

    // Calender set up
    MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, 0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
 800279c:	6923      	ldr	r3, [r4, #16]
 800279e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	217f      	movs	r1, #127	; 0x7f
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027b4:	4313      	orrs	r3, r2
 80027b6:	6123      	str	r3, [r4, #16]
  	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);                                // SYNC prediv= 0xFF
 80027b8:	6923      	ldr	r3, [r4, #16]
 80027ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027c2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80027c6:	6123      	str	r3, [r4, #16]

  	Exit_RTC_InitMode();
 80027c8:	f7ff ffa4 	bl	8002714 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80027cc:	23ff      	movs	r3, #255	; 0xff
 80027ce:	6263      	str	r3, [r4, #36]	; 0x24

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <MX_RTC_Init+0xb0>)
 80027d2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80027d6:	605a      	str	r2, [r3, #4]
}
 80027d8:	b004      	add	sp, #16
 80027da:	bd10      	pop	{r4, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40002800 	.word	0x40002800
 80027e4:	40002850 	.word	0x40002850

080027e8 <Set_RTC_Calendar>:
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80027ea:	4c19      	ldr	r4, [pc, #100]	; (8002850 <Set_RTC_Calendar+0x68>)
 80027ec:	460f      	mov	r7, r1
 80027ee:	4619      	mov	r1, r3
 80027f0:	23ca      	movs	r3, #202	; 0xca
 80027f2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80027f4:	2353      	movs	r3, #83	; 0x53
 80027f6:	b085      	sub	sp, #20
 80027f8:	6263      	str	r3, [r4, #36]	; 0x24
 80027fa:	4606      	mov	r6, r0
 80027fc:	4615      	mov	r5, r2
  Enter_RTC_InitMode();
 80027fe:	f7ff ff7f 	bl	8002700 <Enter_RTC_InitMode>
  RTC_TimeStruct.Minutes = Min;
 8002802:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  RTC_TimeStruct.Hours = Hour;
 8002806:	f88d 100c 	strb.w	r1, [sp, #12]
  RTC_TimeStruct.Minutes = Min;
 800280a:	f88d 300d 	strb.w	r3, [sp, #13]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800280e:	aa02      	add	r2, sp, #8
  RTC_TimeStruct.Seconds = Sec;
 8002810:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002814:	f88d 300e 	strb.w	r3, [sp, #14]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8002818:	2100      	movs	r1, #0
 800281a:	4620      	mov	r0, r4
 800281c:	f004 fe1a 	bl	8007454 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002820:	2301      	movs	r3, #1
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002822:	aa01      	add	r2, sp, #4
 8002824:	2100      	movs	r1, #0
 8002826:	4620      	mov	r0, r4
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002828:	f88d 3004 	strb.w	r3, [sp, #4]
  RTC_DateStruct.Month = Month;
 800282c:	f88d 7005 	strb.w	r7, [sp, #5]
  RTC_DateStruct.Year = Year;
 8002830:	f88d 6007 	strb.w	r6, [sp, #7]
  RTC_DateStruct.Day = Day;
 8002834:	f88d 5006 	strb.w	r5, [sp, #6]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002838:	f004 fe50 	bl	80074dc <LL_RTC_DATE_Init>
  Exit_RTC_InitMode();
 800283c:	f7ff ff6a 	bl	8002714 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002840:	23ff      	movs	r3, #255	; 0xff
 8002842:	6263      	str	r3, [r4, #36]	; 0x24
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <Set_RTC_Calendar+0x6c>)
 8002846:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800284a:	605a      	str	r2, [r3, #4]
}
 800284c:	b005      	add	sp, #20
 800284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002850:	40002800 	.word	0x40002800
 8002854:	40002850 	.word	0x40002850

08002858 <RTC_BAK_GetRegister>:
// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  register uint32_t tmp = 0U;

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002858:	3050      	adds	r0, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800285a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 800285e:	4770      	bx	lr

08002860 <USB_PA9_EXTI_conf>:
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10);                        // Interrupt configured for falling edge
}


void USB_PA9_EXTI_conf(void)                                              // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8002860:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <USB_PA9_EXTI_conf+0x34>)
 8002864:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002868:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI9_5_IRQn);                                           // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);                   // Enable Sysconfig clock to enable EXTI pin interrupts
 800286a:	2001      	movs	r0, #1
 800286c:	f7ff fb66 	bl	8001f3c <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <USB_PA9_EXTI_conf+0x38>)
 8002872:	6913      	ldr	r3, [r2, #16]
 8002874:	21f0      	movs	r1, #240	; 0xf0
 8002876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287a:	fa91 f1a1 	rbit	r1, r1
 800287e:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <USB_PA9_EXTI_conf+0x3c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	bd08      	pop	{r3, pc}
 8002894:	e000e100 	.word	0xe000e100
 8002898:	40010000 	.word	0x40010000
 800289c:	40010400 	.word	0x40010400

080028a0 <Wait_for_ADC_timeout_While_Datalog>:
	         }
}

void Wait_for_ADC_timeout_While_Datalog(void)   // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	3201      	adds	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
	if( ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 80028ac:	4291      	cmp	r1, r2
 80028ae:	d904      	bls.n	80028ba <Wait_for_ADC_timeout_While_Datalog+0x1a>
	         {
		ADC_TimeOut_Count_Buf=0;
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf=1;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	4770      	bx	lr
 80028bc:	200089ec 	.word	0x200089ec
 80028c0:	00493e00 	.word	0x00493e00
 80028c4:	20008fab 	.word	0x20008fab

080028c8 <Wait_for_ADC_TimeOut_>:
	         }
}

void Wait_for_ADC_TimeOut_ (void)
{
	ADC_TimeOut_Count++;
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <Wait_for_ADC_TimeOut_+0x1c>)
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80028ca:	4907      	ldr	r1, [pc, #28]	; (80028e8 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	3301      	adds	r3, #1
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80028d0:	428b      	cmp	r3, r1
	         {
		ADC_TimeOut_Count=0;
 80028d2:	bf83      	ittte	hi
 80028d4:	2300      	movhi	r3, #0
 80028d6:	6013      	strhi	r3, [r2, #0]
		ADC_Error=1;
 80028d8:	4b04      	ldrhi	r3, [pc, #16]	; (80028ec <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 80028da:	6013      	strls	r3, [r2, #0]
		ADC_Error=1;
 80028dc:	bf84      	itt	hi
 80028de:	2201      	movhi	r2, #1
 80028e0:	701a      	strbhi	r2, [r3, #0]
 80028e2:	4770      	bx	lr
 80028e4:	20008fac 	.word	0x20008fac
 80028e8:	00493e00 	.word	0x00493e00
 80028ec:	20008fa2 	.word	0x20008fa2

080028f0 <P_Activate_ADC1>:
{
 80028f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <P_Activate_ADC1+0xbc>)
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80028f8:	492d      	ldr	r1, [pc, #180]	; (80029b0 <P_Activate_ADC1+0xc0>)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002900:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002904:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800290c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002910:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <P_Activate_ADC1+0xc4>)
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fbb2 f2f1 	udiv	r2, r2, r1
 800291e:	210a      	movs	r1, #10
 8002920:	434a      	muls	r2, r1
 8002922:	fbb2 f2f1 	udiv	r2, r2, r1
      wait_loop_index--;
 8002926:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8002928:	9901      	ldr	r1, [sp, #4]
 800292a:	2900      	cmp	r1, #0
 800292c:	d132      	bne.n	8002994 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 800292e:	689a      	ldr	r2, [r3, #8]
    ADC_TimeOut_Count=0;
 8002930:	4c21      	ldr	r4, [pc, #132]	; (80029b8 <P_Activate_ADC1+0xc8>)
    ADC_Error=0;
 8002932:	4822      	ldr	r0, [pc, #136]	; (80029bc <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002934:	4d1d      	ldr	r5, [pc, #116]	; (80029ac <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 8002936:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800293a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800293e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002942:	609a      	str	r2, [r3, #8]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002944:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002948:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 800294a:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800294c:	68ab      	ldr	r3, [r5, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding&& (ADC_Error==0))
 800294e:	2b00      	cmp	r3, #0
 8002950:	db04      	blt.n	800295c <P_Activate_ADC1+0x6c>
 8002952:	6933      	ldr	r3, [r6, #16]
 8002954:	0599      	lsls	r1, r3, #22
 8002956:	d401      	bmi.n	800295c <P_Activate_ADC1+0x6c>
 8002958:	7803      	ldrb	r3, [r0, #0]
 800295a:	b1f3      	cbz	r3, 800299a <P_Activate_ADC1+0xaa>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 800295c:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 800295e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002960:	9901      	ldr	r1, [sp, #4]
 8002962:	b9e9      	cbnz	r1, 80029a0 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <P_Activate_ADC1+0xbc>)
 8002966:	6893      	ldr	r3, [r2, #8]
 8002968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 800297a:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 800297c:	7001      	strb	r1, [r0, #0]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800297e:	4614      	mov	r4, r2
 8002980:	6823      	ldr	r3, [r4, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)&& !Error_preceding&& (ADC_Error==0))
 8002982:	07da      	lsls	r2, r3, #31
 8002984:	d404      	bmi.n	8002990 <P_Activate_ADC1+0xa0>
 8002986:	692b      	ldr	r3, [r5, #16]
 8002988:	059b      	lsls	r3, r3, #22
 800298a:	d401      	bmi.n	8002990 <P_Activate_ADC1+0xa0>
 800298c:	7803      	ldrb	r3, [r0, #0]
 800298e:	b153      	cbz	r3, 80029a6 <P_Activate_ADC1+0xb6>
}
 8002990:	b002      	add	sp, #8
 8002992:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8002994:	9a01      	ldr	r2, [sp, #4]
 8002996:	3a01      	subs	r2, #1
 8002998:	e7c5      	b.n	8002926 <P_Activate_ADC1+0x36>
  	  Wait_for_ADC_TimeOut_();
 800299a:	f7ff ff95 	bl	80028c8 <Wait_for_ADC_TimeOut_>
 800299e:	e7d5      	b.n	800294c <P_Activate_ADC1+0x5c>
      wait_loop_index--;
 80029a0:	9b01      	ldr	r3, [sp, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	e7db      	b.n	800295e <P_Activate_ADC1+0x6e>
  	  Wait_for_ADC_TimeOut_();
 80029a6:	f7ff ff8f 	bl	80028c8 <Wait_for_ADC_TimeOut_>
 80029aa:	e7e9      	b.n	8002980 <P_Activate_ADC1+0x90>
 80029ac:	50040000 	.word	0x50040000
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	20000034 	.word	0x20000034
 80029b8:	20008fac 	.word	0x20008fac
 80029bc:	20008fa2 	.word	0x20008fa2

080029c0 <P_ADC1_conf_strain>:
{
 80029c0:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(RCC->AHB2RSTR, Periphs);
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <P_ADC1_conf_strain+0xec>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80029c4:	4c3a      	ldr	r4, [pc, #232]	; (8002ab0 <P_ADC1_conf_strain+0xf0>)
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80029c8:	4d3a      	ldr	r5, [pc, #232]	; (8002ab4 <P_ADC1_conf_strain+0xf4>)
 80029ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 80029d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 80029d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029dc:	f7ff faa0 	bl	8001f20 <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029e0:	4a35      	ldr	r2, [pc, #212]	; (8002ab8 <P_ADC1_conf_strain+0xf8>)
 80029e2:	6893      	ldr	r3, [r2, #8]
 80029e4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80029ee:	68e3      	ldr	r3, [r4, #12]
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80029f6:	68e3      	ldr	r3, [r4, #12]
 80029f8:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 80029fc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 80029fe:	68e3      	ldr	r3, [r4, #12]
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a04:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a10:	f023 030f 	bic.w	r3, r3, #15
 8002a14:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002a16:	462a      	mov	r2, r5
 8002a18:	4620      	mov	r0, r4
 8002a1a:	2106      	movs	r1, #6
 8002a1c:	f7ff fab2 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR1=PC3=Ch4
 8002a20:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8002a22:	4d26      	ldr	r5, [pc, #152]	; (8002abc <P_ADC1_conf_strain+0xfc>)
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR1=PC3=Ch4
 8002a24:	4620      	mov	r0, r4
 8002a26:	2206      	movs	r2, #6
 8002a28:	f7ff faca 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8002a2c:	462a      	mov	r2, r5
 8002a2e:	4620      	mov	r0, r4
 8002a30:	210c      	movs	r1, #12
 8002a32:	f7ff faa7 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR2=PC2=Ch3
 8002a36:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002a38:	4d21      	ldr	r5, [pc, #132]	; (8002ac0 <P_ADC1_conf_strain+0x100>)
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR2=PC2=Ch3
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	2206      	movs	r2, #6
 8002a3e:	f7ff fabf 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002a42:	462a      	mov	r2, r5
 8002a44:	4620      	mov	r0, r4
 8002a46:	2112      	movs	r1, #18
 8002a48:	f7ff fa9c 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_247CYCLES_5); // Load1=PC1=Ch2
 8002a4c:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_1);
 8002a4e:	4d1d      	ldr	r5, [pc, #116]	; (8002ac4 <P_ADC1_conf_strain+0x104>)
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_247CYCLES_5); // Load1=PC1=Ch2
 8002a50:	4620      	mov	r0, r4
 8002a52:	2206      	movs	r2, #6
 8002a54:	f7ff fab4 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_1);
 8002a58:	462a      	mov	r2, r5
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	2118      	movs	r1, #24
 8002a5e:	f7ff fa91 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_247CYCLES_5); // Load2=PC0=Ch1
 8002a62:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_10);
 8002a64:	4d18      	ldr	r5, [pc, #96]	; (8002ac8 <P_ADC1_conf_strain+0x108>)
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_247CYCLES_5); // Load2=PC0=Ch1
 8002a66:	4620      	mov	r0, r4
 8002a68:	2206      	movs	r2, #6
 8002a6a:	f7ff faa9 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_10);
 8002a6e:	462a      	mov	r2, r5
 8002a70:	4620      	mov	r0, r4
 8002a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a76:	f7ff fa85 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_247CYCLES_5);   //  Additional_1 ADC1_Ch10_PA5
 8002a7a:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_11);
 8002a7c:	f105 2504 	add.w	r5, r5, #67109888	; 0x4000400
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_247CYCLES_5);   //  Additional_1 ADC1_Ch10_PA5
 8002a80:	4620      	mov	r0, r4
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_11);
 8002a82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_247CYCLES_5);   //  Additional_1 ADC1_Ch10_PA5
 8002a86:	2206      	movs	r2, #6
 8002a88:	f7ff fa9a 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_11);
 8002a8c:	462a      	mov	r2, r5
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002a94:	f7ff fa76 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_247CYCLES_5); //  Additional_2 ADC1_Ch11_PA6
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	2206      	movs	r2, #6
 8002a9e:	f7ff fa8f 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
}
 8002aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    P_Activate_ADC1();
 8002aa6:	f7ff bf23 	b.w	80028f0 <P_Activate_ADC1>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	50040000 	.word	0x50040000
 8002ab4:	10c00010 	.word	0x10c00010
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	0c900008 	.word	0x0c900008
 8002ac0:	08600004 	.word	0x08600004
 8002ac4:	04300002 	.word	0x04300002
 8002ac8:	2a000400 	.word	0x2a000400

08002acc <P_ADC_Sensor_GPIO_Init>:
{
 8002acc:	b510      	push	{r4, lr}
	  P_ADC1_conf_strain();
 8002ace:	f7ff ff77 	bl	80029c0 <P_ADC1_conf_strain>
	  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002ad2:	4c20      	ldr	r4, [pc, #128]	; (8002b54 <P_ADC_Sensor_GPIO_Init+0x88>)
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	f7ff fa23 	bl	8001f20 <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7ff fa20 	bl	8001f20 <LL_AHB2_GRP1_EnableClock>
	  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	f7ff fa37 	bl	8001f58 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8002aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	62e3      	str	r3, [r4, #44]	; 0x2c
	  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8002af2:	4620      	mov	r0, r4
 8002af4:	2203      	movs	r2, #3
 8002af6:	2108      	movs	r1, #8
 8002af8:	f7ff fa2e 	bl	8001f58 <LL_GPIO_SetPinMode>
 8002afc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8002b04:	4620      	mov	r0, r4
 8002b06:	2203      	movs	r2, #3
 8002b08:	2102      	movs	r1, #2
 8002b0a:	f7ff fa25 	bl	8001f58 <LL_GPIO_SetPinMode>
 8002b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8002b16:	4620      	mov	r0, r4
 8002b18:	2203      	movs	r2, #3
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	f7ff fa1c 	bl	8001f58 <LL_GPIO_SetPinMode>
 8002b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b28:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ANALOG);
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	2120      	movs	r1, #32
 8002b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b34:	f7ff fa10 	bl	8001f58 <LL_GPIO_SetPinMode>
 8002b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG);
 8002b40:	2203      	movs	r2, #3
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff fa07 	bl	8001f58 <LL_GPIO_SetPinMode>
 8002b4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b52:	bd10      	pop	{r4, pc}
 8002b54:	48000800 	.word	0x48000800

08002b58 <read_Toe_ADC>:
	  BSbuffer[s_flag].LoadCell2[Sub_cnt]= LL_ADC_REG_ReadConversionData12(ADC2);

}

void read_Toe_ADC(void)
{
 8002b58:	b508      	push	{r3, lr}
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <read_Toe_ADC+0x5c>)
 8002b5c:	4816      	ldr	r0, [pc, #88]	; (8002bb8 <read_Toe_ADC+0x60>)
 8002b5e:	2106      	movs	r1, #6
 8002b60:	f7ff fa10 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR2=PC2=Ch3--Toe
 8002b64:	2206      	movs	r2, #6
 8002b66:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <read_Toe_ADC+0x5c>)
 8002b68:	4813      	ldr	r0, [pc, #76]	; (8002bb8 <read_Toe_ADC+0x60>)
 8002b6a:	f7ff fa29 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
//Toe
	  LL_ADC_REG_StartConversion(ADC1);
 8002b6e:	4812      	ldr	r0, [pc, #72]	; (8002bb8 <read_Toe_ADC+0x60>)
 8002b70:	f7ff f9cc 	bl	8001f0c <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <read_Toe_ADC+0x64>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002b76:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <read_Toe_ADC+0x60>)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6013      	str	r3, [r2, #0]
	  ADC_Error_Buf=0;
 8002b7c:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <read_Toe_ADC+0x68>)
 8002b7e:	7013      	strb	r3, [r2, #0]
 8002b80:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002b82:	075b      	lsls	r3, r3, #29
 8002b84:	d512      	bpl.n	8002bac <read_Toe_ADC+0x54>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002b86:	2304      	movs	r3, #4
 8002b88:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002b8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test1 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <read_Toe_ADC+0x6c>)
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]

	  Test1_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test1, LL_ADC_RESOLUTION_12B);  // Toe
 8002b92:	8813      	ldrh	r3, [r2, #0]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002b9a:	4353      	muls	r3, r2
 8002b9c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <read_Toe_ADC+0x70>)
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	8013      	strh	r3, [r2, #0]
 8002baa:	bd08      	pop	{r3, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002bac:	f7ff fe78 	bl	80028a0 <Wait_for_ADC_timeout_While_Datalog>
 8002bb0:	e7e6      	b.n	8002b80 <read_Toe_ADC+0x28>
 8002bb2:	bf00      	nop
 8002bb4:	0c900008 	.word	0x0c900008
 8002bb8:	50040000 	.word	0x50040000
 8002bbc:	200089ec 	.word	0x200089ec
 8002bc0:	20008fab 	.word	0x20008fab
 8002bc4:	200089de 	.word	0x200089de
 8002bc8:	20008a74 	.word	0x20008a74

08002bcc <read_Heel_ADC>:
}

void read_Heel_ADC(void)
{
 8002bcc:	b508      	push	{r3, lr}
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <read_Heel_ADC+0x5c>)
 8002bd0:	4816      	ldr	r0, [pc, #88]	; (8002c2c <read_Heel_ADC+0x60>)
 8002bd2:	2106      	movs	r1, #6
 8002bd4:	f7ff f9d6 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR1=PC3=Ch4--Heel
 8002bd8:	2206      	movs	r2, #6
 8002bda:	4913      	ldr	r1, [pc, #76]	; (8002c28 <read_Heel_ADC+0x5c>)
 8002bdc:	4813      	ldr	r0, [pc, #76]	; (8002c2c <read_Heel_ADC+0x60>)
 8002bde:	f7ff f9ef 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
	  LL_ADC_REG_StartConversion(ADC1);
 8002be2:	4812      	ldr	r0, [pc, #72]	; (8002c2c <read_Heel_ADC+0x60>)
 8002be4:	f7ff f992 	bl	8001f0c <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002be8:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <read_Heel_ADC+0x64>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002bea:	4810      	ldr	r0, [pc, #64]	; (8002c2c <read_Heel_ADC+0x60>)
 8002bec:	2300      	movs	r3, #0
 8002bee:	6013      	str	r3, [r2, #0]
	  ADC_Error_Buf=0;
 8002bf0:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <read_Heel_ADC+0x68>)
 8002bf2:	7013      	strb	r3, [r2, #0]
 8002bf4:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002bf6:	075b      	lsls	r3, r3, #29
 8002bf8:	d512      	bpl.n	8002c20 <read_Heel_ADC+0x54>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002bfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test2 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <read_Heel_ADC+0x6c>)
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]

	  Test2_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test2, LL_ADC_RESOLUTION_12B);  //Heel
 8002c06:	8813      	ldrh	r3, [r2, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002c0e:	4353      	muls	r3, r2
 8002c10:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c18:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <read_Heel_ADC+0x70>)
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	8013      	strh	r3, [r2, #0]
 8002c1e:	bd08      	pop	{r3, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002c20:	f7ff fe3e 	bl	80028a0 <Wait_for_ADC_timeout_While_Datalog>
 8002c24:	e7e6      	b.n	8002bf4 <read_Heel_ADC+0x28>
 8002c26:	bf00      	nop
 8002c28:	10c00010 	.word	0x10c00010
 8002c2c:	50040000 	.word	0x50040000
 8002c30:	200089ec 	.word	0x200089ec
 8002c34:	20008fab 	.word	0x20008fab
 8002c38:	200089d4 	.word	0x200089d4
 8002c3c:	200089d2 	.word	0x200089d2

08002c40 <read_Load1_ADC>:

}

void read_Load1_ADC(void)
{
 8002c40:	b508      	push	{r3, lr}
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002c42:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <read_Load1_ADC+0x5c>)
 8002c44:	4816      	ldr	r0, [pc, #88]	; (8002ca0 <read_Load1_ADC+0x60>)
 8002c46:	2106      	movs	r1, #6
 8002c48:	f7ff f99c 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	4913      	ldr	r1, [pc, #76]	; (8002c9c <read_Load1_ADC+0x5c>)
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <read_Load1_ADC+0x60>)
 8002c52:	f7ff f9b5 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
	  LL_ADC_REG_StartConversion(ADC1);
 8002c56:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <read_Load1_ADC+0x60>)
 8002c58:	f7ff f958 	bl	8001f0c <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002c5c:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <read_Load1_ADC+0x64>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002c5e:	4810      	ldr	r0, [pc, #64]	; (8002ca0 <read_Load1_ADC+0x60>)
 8002c60:	2300      	movs	r3, #0
 8002c62:	6013      	str	r3, [r2, #0]
	  ADC_Error_Buf=0;
 8002c64:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <read_Load1_ADC+0x68>)
 8002c66:	7013      	strb	r3, [r2, #0]
 8002c68:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002c6a:	075b      	lsls	r3, r3, #29
 8002c6c:	d512      	bpl.n	8002c94 <read_Load1_ADC+0x54>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002c6e:	2304      	movs	r3, #4
 8002c70:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002c72:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test3 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002c74:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <read_Load1_ADC+0x6c>)
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]

	  Test3_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test3, LL_ADC_RESOLUTION_12B);
 8002c7a:	8813      	ldrh	r3, [r2, #0]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002c82:	4353      	muls	r3, r2
 8002c84:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c8c:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <read_Load1_ADC+0x70>)
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
 8002c92:	bd08      	pop	{r3, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002c94:	f7ff fe04 	bl	80028a0 <Wait_for_ADC_timeout_While_Datalog>
 8002c98:	e7e6      	b.n	8002c68 <read_Load1_ADC+0x28>
 8002c9a:	bf00      	nop
 8002c9c:	08600004 	.word	0x08600004
 8002ca0:	50040000 	.word	0x50040000
 8002ca4:	200089ec 	.word	0x200089ec
 8002ca8:	20008fab 	.word	0x20008fab
 8002cac:	20008fa0 	.word	0x20008fa0
 8002cb0:	20008a7c 	.word	0x20008a7c

08002cb4 <read_Load2_ADC>:

}

void read_Load2_ADC(void)
{
 8002cb4:	b508      	push	{r3, lr}
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002cb6:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <read_Load2_ADC+0x5c>)
 8002cb8:	4816      	ldr	r0, [pc, #88]	; (8002d14 <read_Load2_ADC+0x60>)
 8002cba:	2106      	movs	r1, #6
 8002cbc:	f7ff f962 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	4913      	ldr	r1, [pc, #76]	; (8002d10 <read_Load2_ADC+0x5c>)
 8002cc4:	4813      	ldr	r0, [pc, #76]	; (8002d14 <read_Load2_ADC+0x60>)
 8002cc6:	f7ff f97b 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
	  LL_ADC_REG_StartConversion(ADC1);
 8002cca:	4812      	ldr	r0, [pc, #72]	; (8002d14 <read_Load2_ADC+0x60>)
 8002ccc:	f7ff f91e 	bl	8001f0c <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002cd0:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <read_Load2_ADC+0x64>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002cd2:	4810      	ldr	r0, [pc, #64]	; (8002d14 <read_Load2_ADC+0x60>)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	6013      	str	r3, [r2, #0]
	  ADC_Error_Buf=0;
 8002cd8:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <read_Load2_ADC+0x68>)
 8002cda:	7013      	strb	r3, [r2, #0]
 8002cdc:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002cde:	075b      	lsls	r3, r3, #29
 8002ce0:	d512      	bpl.n	8002d08 <read_Load2_ADC+0x54>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002ce6:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test4 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <read_Load2_ADC+0x6c>)
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]

	  Test4_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test4, LL_ADC_RESOLUTION_12B);
 8002cee:	8813      	ldrh	r3, [r2, #0]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002cf6:	4353      	muls	r3, r2
 8002cf8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <read_Load2_ADC+0x70>)
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]
 8002d06:	bd08      	pop	{r3, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002d08:	f7ff fdca 	bl	80028a0 <Wait_for_ADC_timeout_While_Datalog>
 8002d0c:	e7e6      	b.n	8002cdc <read_Load2_ADC+0x28>
 8002d0e:	bf00      	nop
 8002d10:	04300002 	.word	0x04300002
 8002d14:	50040000 	.word	0x50040000
 8002d18:	200089ec 	.word	0x200089ec
 8002d1c:	20008fab 	.word	0x20008fab
 8002d20:	20008a58 	.word	0x20008a58
 8002d24:	20008a6e 	.word	0x20008a6e

08002d28 <read_add1_ADC>:

}

void read_add1_ADC(void)
{
 8002d28:	b508      	push	{r3, lr}
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <read_add1_ADC+0x5c>)
 8002d2c:	4816      	ldr	r0, [pc, #88]	; (8002d88 <read_add1_ADC+0x60>)
 8002d2e:	2106      	movs	r1, #6
 8002d30:	f7ff f928 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8002d34:	2206      	movs	r2, #6
 8002d36:	4913      	ldr	r1, [pc, #76]	; (8002d84 <read_add1_ADC+0x5c>)
 8002d38:	4813      	ldr	r0, [pc, #76]	; (8002d88 <read_add1_ADC+0x60>)
 8002d3a:	f7ff f941 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
	  LL_ADC_REG_StartConversion(ADC1);
 8002d3e:	4812      	ldr	r0, [pc, #72]	; (8002d88 <read_add1_ADC+0x60>)
 8002d40:	f7ff f8e4 	bl	8001f0c <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <read_add1_ADC+0x64>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002d46:	4810      	ldr	r0, [pc, #64]	; (8002d88 <read_add1_ADC+0x60>)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6013      	str	r3, [r2, #0]
	  ADC_Error_Buf=0;
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <read_add1_ADC+0x68>)
 8002d4e:	7013      	strb	r3, [r2, #0]
 8002d50:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002d52:	075b      	lsls	r3, r3, #29
 8002d54:	d512      	bpl.n	8002d7c <read_add1_ADC+0x54>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002d56:	2304      	movs	r3, #4
 8002d58:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002d5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test5 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <read_add1_ADC+0x6c>)
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	8013      	strh	r3, [r2, #0]

	  Test5_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test5, LL_ADC_RESOLUTION_12B);
 8002d62:	8813      	ldrh	r3, [r2, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002d6a:	4353      	muls	r3, r2
 8002d6c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <read_add1_ADC+0x70>)
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8013      	strh	r3, [r2, #0]
 8002d7a:	bd08      	pop	{r3, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002d7c:	f7ff fd90 	bl	80028a0 <Wait_for_ADC_timeout_While_Datalog>
 8002d80:	e7e6      	b.n	8002d50 <read_add1_ADC+0x28>
 8002d82:	bf00      	nop
 8002d84:	2a000400 	.word	0x2a000400
 8002d88:	50040000 	.word	0x50040000
 8002d8c:	200089ec 	.word	0x200089ec
 8002d90:	20008fab 	.word	0x20008fab
 8002d94:	20008a0a 	.word	0x20008a0a
 8002d98:	20008ab0 	.word	0x20008ab0

08002d9c <read_add2_ADC>:

}

void read_add2_ADC(void)
{
 8002d9c:	b508      	push	{r3, lr}
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <read_add2_ADC+0x5c>)
 8002da0:	4816      	ldr	r0, [pc, #88]	; (8002dfc <read_add2_ADC+0x60>)
 8002da2:	2106      	movs	r1, #6
 8002da4:	f7ff f8ee 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8002da8:	2206      	movs	r2, #6
 8002daa:	4913      	ldr	r1, [pc, #76]	; (8002df8 <read_add2_ADC+0x5c>)
 8002dac:	4813      	ldr	r0, [pc, #76]	; (8002dfc <read_add2_ADC+0x60>)
 8002dae:	f7ff f907 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
	  LL_ADC_REG_StartConversion(ADC1);
 8002db2:	4812      	ldr	r0, [pc, #72]	; (8002dfc <read_add2_ADC+0x60>)
 8002db4:	f7ff f8aa 	bl	8001f0c <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002db8:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <read_add2_ADC+0x64>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002dba:	4810      	ldr	r0, [pc, #64]	; (8002dfc <read_add2_ADC+0x60>)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6013      	str	r3, [r2, #0]
	  ADC_Error_Buf=0;
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <read_add2_ADC+0x68>)
 8002dc2:	7013      	strb	r3, [r2, #0]
 8002dc4:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002dc6:	075b      	lsls	r3, r3, #29
 8002dc8:	d512      	bpl.n	8002df0 <read_add2_ADC+0x54>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002dca:	2304      	movs	r3, #4
 8002dcc:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002dce:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test6 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <read_add2_ADC+0x6c>)
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	8013      	strh	r3, [r2, #0]

	  Test6_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test6, LL_ADC_RESOLUTION_12B);
 8002dd6:	8813      	ldrh	r3, [r2, #0]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002dde:	4353      	muls	r3, r2
 8002de0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de8:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <read_add2_ADC+0x70>)
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	8013      	strh	r3, [r2, #0]
 8002dee:	bd08      	pop	{r3, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002df0:	f7ff fd56 	bl	80028a0 <Wait_for_ADC_timeout_While_Datalog>
 8002df4:	e7e6      	b.n	8002dc4 <read_add2_ADC+0x28>
 8002df6:	bf00      	nop
 8002df8:	2e300800 	.word	0x2e300800
 8002dfc:	50040000 	.word	0x50040000
 8002e00:	200089ec 	.word	0x200089ec
 8002e04:	20008fab 	.word	0x20008fab
 8002e08:	20008fe4 	.word	0x20008fe4
 8002e0c:	20008a20 	.word	0x20008a20

08002e10 <all_ADC_read_test>:

}


void all_ADC_read_test(void)
{
 8002e10:	b508      	push	{r3, lr}
	//Toe: ADC1_Ch3_PC2  Heel: ADC1_Ch4_PC3

	read_Toe_ADC();
 8002e12:	f7ff fea1 	bl	8002b58 <read_Toe_ADC>

//	  Heel
	read_Heel_ADC();
 8002e16:	f7ff fed9 	bl	8002bcc <read_Heel_ADC>

	read_Load1_ADC();
 8002e1a:	f7ff ff11 	bl	8002c40 <read_Load1_ADC>
	read_Load2_ADC();
 8002e1e:	f7ff ff49 	bl	8002cb4 <read_Load2_ADC>
	read_add1_ADC();
 8002e22:	f7ff ff81 	bl	8002d28 <read_add1_ADC>
	read_add2_ADC();

}
 8002e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	read_add2_ADC();
 8002e2a:	f7ff bfb7 	b.w	8002d9c <read_add2_ADC>
	...

08002e30 <Configure_USART_1>:
}

*/

void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 8002e30:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8002e32:	4c18      	ldr	r4, [pc, #96]	; (8002e94 <Configure_USART_1+0x64>)
 8002e34:	2202      	movs	r2, #2
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7ff f88d 	bl	8001f58 <LL_GPIO_SetPinMode>
LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 8002e3e:	2207      	movs	r2, #7
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff f8e3 	bl	800200e <LL_GPIO_SetAFPin_0_7>
LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff f90b 	bl	8002066 <LL_GPIO_SetPinSpeed.constprop.6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e50:	6863      	ldr	r3, [r4, #4]
 8002e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e56:	6063      	str	r3, [r4, #4]
LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff f8ec 	bl	800203a <LL_GPIO_SetPinPull>

RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 8002e62:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <Configure_USART_1+0x68>)
 8002e64:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e6a:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE, (USART_CR1_TE |USART_CR1_RE));  // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <Configure_USART_1+0x6c>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	f042 020c 	orr.w	r2, r2, #12
 8002e74:	601a      	str	r2, [r3, #0]

USART1->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200));  // Baud rate 115200
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <Configure_USART_1+0x70>)
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002e7e:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8002e82:	fbb2 f2f1 	udiv	r2, r2, r1
 8002e86:	60da      	str	r2, [r3, #12]

USART1->CR1|= USART_CR1_UE;  // Unable USART1
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	bd10      	pop	{r4, pc}
 8002e92:	bf00      	nop
 8002e94:	48000400 	.word	0x48000400
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	20000034 	.word	0x20000034

08002ea4 <USART1_wr_print>:

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes)
{
for (int i=0;i<nBytes;i++)
{
while(!(USART1->ISR & USART_ISR_TXE));
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <USART1_wr_print+0x28>)
 8002ea6:	4401      	add	r1, r0
for (int i=0;i<nBytes;i++)
 8002ea8:	4288      	cmp	r0, r1
 8002eaa:	d100      	bne.n	8002eae <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;

while(!(USART1->ISR & USART_ISR_TC));
USART1->ISR &= ~USART_ISR_TC;
}
}
 8002eac:	4770      	bx	lr
while(!(USART1->ISR & USART_ISR_TXE));
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	0612      	lsls	r2, r2, #24
 8002eb2:	d5fc      	bpl.n	8002eae <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;
 8002eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
while(!(USART1->ISR & USART_ISR_TC));
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	0652      	lsls	r2, r2, #25
 8002ebe:	d5fc      	bpl.n	8002eba <USART1_wr_print+0x16>
USART1->ISR &= ~USART_ISR_TC;
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec6:	61da      	str	r2, [r3, #28]
 8002ec8:	e7ee      	b.n	8002ea8 <USART1_wr_print+0x4>
 8002eca:	bf00      	nop
 8002ecc:	40013800 	.word	0x40013800

08002ed0 <Clear_ErrorTimestamp_Buffer>:

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void)
{
	ErrorCodeBuf=0;
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <Clear_ErrorTimestamp_Buffer+0xc>)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf=0;
 8002ed6:	4a02      	ldr	r2, [pc, #8]	; (8002ee0 <Clear_ErrorTimestamp_Buffer+0x10>)
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4770      	bx	lr
 8002edc:	20008714 	.word	0x20008714
 8002ee0:	20008718 	.word	0x20008718

08002ee4 <Reset_All>:
{
 8002ee4:	b508      	push	{r3, lr}
	last_file=0;
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <Reset_All+0x38>)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6019      	str	r1, [r3, #0]
	Sub_cnt=0;                // Array Index count in a single buffer to store values
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <Reset_All+0x3c>)
 8002eee:	6019      	str	r1, [r3, #0]
	w_flag=1;                 // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <Reset_All+0x40>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
	s_flag=0;                 // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <Reset_All+0x44>)
 8002ef8:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0;        // Flag to indicates whether a buffer a full and ready to write in SD card
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <Reset_All+0x48>)
 8002efc:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0;       // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <Reset_All+0x4c>)
 8002f00:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 8002f02:	f7ff ffe5 	bl	8002ed0 <Clear_ErrorTimestamp_Buffer>
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <Reset_All+0x50>)
	Error_reg_log.Error[indxE]=0;
 8002f08:	460a      	mov	r2, r1
 8002f0a:	f1a3 0008 	sub.w	r0, r3, #8
 8002f0e:	540a      	strb	r2, [r1, r0]
	for(int indxE=0;indxE<10;indxE++)
 8002f10:	3101      	adds	r1, #1
 8002f12:	290a      	cmp	r1, #10
	Error_reg_log.ErrorTime[indxE]=0;
 8002f14:	f843 2f04 	str.w	r2, [r3, #4]!
	for(int indxE=0;indxE<10;indxE++)
 8002f18:	d1f9      	bne.n	8002f0e <Reset_All+0x2a>
}
 8002f1a:	bd08      	pop	{r3, pc}
 8002f1c:	20008d20 	.word	0x20008d20
 8002f20:	200005c8 	.word	0x200005c8
 8002f24:	20000030 	.word	0x20000030
 8002f28:	200005e8 	.word	0x200005e8
 8002f2c:	20008708 	.word	0x20008708
 8002f30:	200005c4 	.word	0x200005c4
 8002f34:	20008634 	.word	0x20008634

08002f38 <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode)
{
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf=ErrorCode;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <Save_ErrorTimestamp_Buffer+0x88>)
{
 8002f3c:	4606      	mov	r6, r0
	ErrorCodeBuf=ErrorCode;
 8002f3e:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8002f40:	f7ff f926 	bl	8002190 <LL_RTC_TIME_GetHour.constprop.13>
 8002f44:	4604      	mov	r4, r0
 8002f46:	f7ff f923 	bl	8002190 <LL_RTC_TIME_GetHour.constprop.13>
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	f7ff f906 	bl	800215c <LL_RTC_TIME_GetMinute.constprop.12>
 8002f50:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8002f54:	4607      	mov	r7, r0
 8002f56:	f7ff f901 	bl	800215c <LL_RTC_TIME_GetMinute.constprop.12>
 8002f5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f5e:	f005 040f 	and.w	r4, r5, #15
 8002f62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002f66:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8002f6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f6e:	f000 000f 	and.w	r0, r0, #15
 8002f72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002f76:	b2c0      	uxtb	r0, r0
 8002f78:	2364      	movs	r3, #100	; 0x64
 8002f7a:	fb10 f003 	smulbb	r0, r0, r3
 8002f7e:	b2e4      	uxtb	r4, r4
 8002f80:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f84:	fb03 0404 	mla	r4, r3, r4, r0
 8002f88:	f7ff f8d0 	bl	800212c <LL_RTC_TIME_GetSecond.constprop.11>
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	f7ff f8cd 	bl	800212c <LL_RTC_TIME_GetSecond.constprop.11>
 8002f92:	f3c5 1303 	ubfx	r3, r5, #4, #4
 8002f96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f9a:	f000 000f 	and.w	r0, r0, #15
 8002f9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx]=ErrorCode;
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx]=ErrorCode;
 8002fa6:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <Save_ErrorTimestamp_Buffer+0x94>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8002fa8:	fa54 f480 	uxtab	r4, r4, r0
 8002fac:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx]=ErrorCode;
 8002fae:	780b      	ldrb	r3, [r1, #0]
 8002fb0:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 8002fb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 8002fba:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 8002fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20008714 	.word	0x20008714
 8002fc4:	20008a22 	.word	0x20008a22
 8002fc8:	20008718 	.word	0x20008718
 8002fcc:	2000862c 	.word	0x2000862c

08002fd0 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code)
{
    switch(AIM_Error_Code) {
 8002fd0:	3801      	subs	r0, #1
{
 8002fd2:	b510      	push	{r4, lr}
    switch(AIM_Error_Code) {
 8002fd4:	280f      	cmp	r0, #15
 8002fd6:	d862      	bhi.n	800309e <AIM_Error_Handler+0xce>
 8002fd8:	e8df f000 	tbb	[pc, r0]
 8002fdc:	392e611e 	.word	0x392e611e
 8002fe0:	4661610f 	.word	0x4661610f
 8002fe4:	54616161 	.word	0x54616161
 8002fe8:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 8002fec:	2010      	movs	r0, #16
 8002fee:	f7ff ffa3 	bl	8002f38 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 8002ff2:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <AIM_Error_Handler+0xd0>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]

	break;
 8002ff8:	bd10      	pop	{r4, pc}

			case f_write_E:
				file_reopen();
 8002ffa:	f7ff f9e1 	bl	80023c0 <file_reopen>
				if (Fat_write_read_fail==1) // Could not solve write issue by reopening file
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <AIM_Error_Handler+0xd4>)
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	2c01      	cmp	r4, #1
 8003004:	d14b      	bne.n	800309e <AIM_Error_Handler+0xce>
								  {
									   Fat_read_mnt_fail=0;
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <AIM_Error_Handler+0xd8>)
 8003008:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_write_E);
 800300a:	2005      	movs	r0, #5
									   Fat_read_mnt_fail=0;
 800300c:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_write_E);
 800300e:	f7ff ff93 	bl	8002f38 <Save_ErrorTimestamp_Buffer>
										File_Sensor_write_issue=1;
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <AIM_Error_Handler+0xdc>)
				file_reopen_sync();
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
								  {
										Fat_sync_read_fail=0;
										Save_ErrorTimestamp_Buffer(f_sync_E);
										File_Sensor_close_issue=1;
 8003014:	701c      	strb	r4, [r3, #0]
 8003016:	e018      	b.n	800304a <AIM_Error_Handler+0x7a>
				file_mnt_reopen();
 8003018:	f7ff f9ea 	bl	80023f0 <file_mnt_reopen>
				  if (Fat_read_mnt_fail==1) // Could not solve read issue by FATFS mount
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <AIM_Error_Handler+0xd8>)
 800301e:	681c      	ldr	r4, [r3, #0]
 8003020:	2c01      	cmp	r4, #1
 8003022:	d13c      	bne.n	800309e <AIM_Error_Handler+0xce>
					  Fat_read_mnt_fail=0;
 8003024:	2200      	movs	r2, #0
						Save_ErrorTimestamp_Buffer(f_open_E);
 8003026:	4620      	mov	r0, r4
					  Fat_read_mnt_fail=0;
 8003028:	601a      	str	r2, [r3, #0]
						Save_ErrorTimestamp_Buffer(f_open_E);
 800302a:	f7ff ff85 	bl	8002f38 <Save_ErrorTimestamp_Buffer>
						FATAL_Error = 1;
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <AIM_Error_Handler+0xd0>)
 8003030:	701c      	strb	r4, [r3, #0]
						Skip_FATFS =1;
 8003032:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <AIM_Error_Handler+0xe0>)
										FATAL_Error = 1;
 8003034:	701c      	strb	r4, [r3, #0]
 8003036:	bd10      	pop	{r4, pc}
				Try_FATFS_Mount();
 8003038:	f7ff f97c 	bl	8002334 <Try_FATFS_Mount>
				if (Skip_FATFS==1)  // Could not solve FATFS mount
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <AIM_Error_Handler+0xe0>)
 800303e:	781c      	ldrb	r4, [r3, #0]
 8003040:	2c01      	cmp	r4, #1
 8003042:	d12c      	bne.n	800309e <AIM_Error_Handler+0xce>
				Save_ErrorTimestamp_Buffer(f_mount_E);
 8003044:	2003      	movs	r0, #3
 8003046:	f7ff ff77 	bl	8002f38 <Save_ErrorTimestamp_Buffer>
										FATAL_Error = 1;
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <AIM_Error_Handler+0xd0>)
 800304c:	e7f2      	b.n	8003034 <AIM_Error_Handler+0x64>
				file_reopen_sync();
 800304e:	f7ff f99f 	bl	8002390 <file_reopen_sync>
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <AIM_Error_Handler+0xe4>)
 8003054:	681c      	ldr	r4, [r3, #0]
 8003056:	2c01      	cmp	r4, #1
 8003058:	d121      	bne.n	800309e <AIM_Error_Handler+0xce>
										Fat_sync_read_fail=0;
 800305a:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_sync_E);
 800305c:	2004      	movs	r0, #4
										Fat_sync_read_fail=0;
 800305e:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_sync_E);
 8003060:	f7ff ff6a 	bl	8002f38 <Save_ErrorTimestamp_Buffer>
										File_Sensor_close_issue=1;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <AIM_Error_Handler+0xe8>)
 8003066:	e7d5      	b.n	8003014 <AIM_Error_Handler+0x44>

			break;

			case SPI_Acc_Error :

				if (SPI_ErrorCnt>3)
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <AIM_Error_Handler+0xec>)
 800306a:	7813      	ldrb	r3, [r2, #0]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d914      	bls.n	800309a <AIM_Error_Handler+0xca>
				{
				SPI_ErrorCnt=0;
 8003070:	2300      	movs	r3, #0
 8003072:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <AIM_Error_Handler+0xd0>)
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 800307a:	2008      	movs	r0, #8
		    default :

		    break;

    }
}
 800307c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 8003080:	f7ff bf5a 	b.w	8002f38 <Save_ErrorTimestamp_Buffer>
				if (ADC_ErrorCnt>3)
 8003084:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <AIM_Error_Handler+0xf0>)
 8003086:	7813      	ldrb	r3, [r2, #0]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d906      	bls.n	800309a <AIM_Error_Handler+0xca>
				ADC_ErrorCnt=0;
 800308c:	2300      	movs	r3, #0
 800308e:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <AIM_Error_Handler+0xd0>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 8003096:	200c      	movs	r0, #12
 8003098:	e7f0      	b.n	800307c <AIM_Error_Handler+0xac>
				ADC_ErrorCnt++;
 800309a:	3301      	adds	r3, #1
 800309c:	7013      	strb	r3, [r2, #0]
 800309e:	bd10      	pop	{r4, pc}
 80030a0:	20008d1c 	.word	0x20008d1c
 80030a4:	200089c8 	.word	0x200089c8
 80030a8:	20008a70 	.word	0x20008a70
 80030ac:	200089e8 	.word	0x200089e8
 80030b0:	20008d1d 	.word	0x20008d1d
 80030b4:	200089cc 	.word	0x200089cc
 80030b8:	20008ab2 	.word	0x20008ab2
 80030bc:	20008fb0 	.word	0x20008fb0
 80030c0:	20008d24 	.word	0x20008d24

080030c4 <FATFS_Init>:
{
 80030c4:	b510      	push	{r4, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80030c6:	490b      	ldr	r1, [pc, #44]	; (80030f4 <FATFS_Init+0x30>)
 80030c8:	480b      	ldr	r0, [pc, #44]	; (80030f8 <FATFS_Init+0x34>)
 80030ca:	4c0c      	ldr	r4, [pc, #48]	; (80030fc <FATFS_Init+0x38>)
 80030cc:	f007 fa9a 	bl	800a604 <FATFS_LinkDriver>
 80030d0:	b928      	cbnz	r0, 80030de <FATFS_Init+0x1a>
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80030d2:	2201      	movs	r2, #1
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <FATFS_Init+0x30>)
 80030d6:	480a      	ldr	r0, [pc, #40]	; (8003100 <FATFS_Init+0x3c>)
 80030d8:	f006 fdc2 	bl	8009c60 <f_mount>
 80030dc:	b108      	cbz	r0, 80030e2 <FATFS_Init+0x1e>
				 Fat_mnt_fail=1;
 80030de:	2301      	movs	r3, #1
 80030e0:	6023      	str	r3, [r4, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d104      	bne.n	80030f2 <FATFS_Init+0x2e>
		  AIM_Error_Handler(f_mount_E);
 80030e8:	2003      	movs	r0, #3
}
 80030ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  AIM_Error_Handler(f_mount_E);
 80030ee:	f7ff bf6f 	b.w	8002fd0 <AIM_Error_Handler>
 80030f2:	bd10      	pop	{r4, pc}
 80030f4:	20008ab9 	.word	0x20008ab9
 80030f8:	0800bc0c 	.word	0x0800bc0c
 80030fc:	200089c4 	.word	0x200089c4
 8003100:	20008ac8 	.word	0x20008ac8

08003104 <Check_SD_Command_File>:
{
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  Data_log_Start_Resume = 0;
 8003106:	4c31      	ldr	r4, [pc, #196]	; (80031cc <Check_SD_Command_File+0xc8>)
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003108:	4931      	ldr	r1, [pc, #196]	; (80031d0 <Check_SD_Command_File+0xcc>)
 800310a:	4832      	ldr	r0, [pc, #200]	; (80031d4 <Check_SD_Command_File+0xd0>)
 800310c:	4e32      	ldr	r6, [pc, #200]	; (80031d8 <Check_SD_Command_File+0xd4>)
	  Data_log_Start_Resume = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	7023      	strb	r3, [r4, #0]
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003112:	f007 fa77 	bl	800a604 <FATFS_LinkDriver>
 8003116:	b930      	cbnz	r0, 8003126 <Check_SD_Command_File+0x22>
	 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8003118:	2201      	movs	r2, #1
 800311a:	492d      	ldr	r1, [pc, #180]	; (80031d0 <Check_SD_Command_File+0xcc>)
 800311c:	482f      	ldr	r0, [pc, #188]	; (80031dc <Check_SD_Command_File+0xd8>)
 800311e:	f006 fd9f 	bl	8009c60 <f_mount>
 8003122:	4605      	mov	r5, r0
 8003124:	b148      	cbz	r0, 800313a <Check_SD_Command_File+0x36>
		 Fat_mnt_fail=1;
 8003126:	2301      	movs	r3, #1
 8003128:	6033      	str	r3, [r6, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800312a:	6833      	ldr	r3, [r6, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d14c      	bne.n	80031ca <Check_SD_Command_File+0xc6>
		  AIM_Error_Handler(f_mount_E);
 8003130:	2003      	movs	r0, #3
}
 8003132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		  AIM_Error_Handler(f_mount_E);
 8003136:	f7ff bf4b 	b.w	8002fd0 <AIM_Error_Handler>
		 if(f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 800313a:	2201      	movs	r2, #1
 800313c:	4928      	ldr	r1, [pc, #160]	; (80031e0 <Check_SD_Command_File+0xdc>)
 800313e:	4829      	ldr	r0, [pc, #164]	; (80031e4 <Check_SD_Command_File+0xe0>)
 8003140:	f006 fdc4 	bl	8009ccc <f_open>
 8003144:	4607      	mov	r7, r0
 8003146:	b368      	cbz	r0, 80031a4 <Check_SD_Command_File+0xa0>
			   if(f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 8003148:	2201      	movs	r2, #1
 800314a:	4927      	ldr	r1, [pc, #156]	; (80031e8 <Check_SD_Command_File+0xe4>)
 800314c:	4825      	ldr	r0, [pc, #148]	; (80031e4 <Check_SD_Command_File+0xe0>)
 800314e:	f006 fdbd 	bl	8009ccc <f_open>
 8003152:	b1f0      	cbz	r0, 8003192 <Check_SD_Command_File+0x8e>
					 if (Logstart_Delete ==1)
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <Check_SD_Command_File+0xe8>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2a01      	cmp	r2, #1
 800315a:	d104      	bne.n	8003166 <Check_SD_Command_File+0x62>
								  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 800315c:	4824      	ldr	r0, [pc, #144]	; (80031f0 <Check_SD_Command_File+0xec>)
						 Logstart_Delete=0;
 800315e:	601d      	str	r5, [r3, #0]
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 8003160:	f007 f9b4 	bl	800a4cc <f_unlink>
 8003164:	e006      	b.n	8003174 <Check_SD_Command_File+0x70>
				   if(f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 8003166:	2201      	movs	r2, #1
 8003168:	4921      	ldr	r1, [pc, #132]	; (80031f0 <Check_SD_Command_File+0xec>)
 800316a:	481e      	ldr	r0, [pc, #120]	; (80031e4 <Check_SD_Command_File+0xe0>)
 800316c:	f006 fdae 	bl	8009ccc <f_open>
 8003170:	b148      	cbz	r0, 8003186 <Check_SD_Command_File+0x82>
					   Data_log_Start_Resume = 0;          // Data Log Stops
 8003172:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003174:	2200      	movs	r2, #0
 8003176:	491f      	ldr	r1, [pc, #124]	; (80031f4 <Check_SD_Command_File+0xf0>)
 8003178:	4610      	mov	r0, r2
 800317a:	f006 fd71 	bl	8009c60 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800317e:	4814      	ldr	r0, [pc, #80]	; (80031d0 <Check_SD_Command_File+0xcc>)
 8003180:	f007 fa5c 	bl	800a63c <FATFS_UnLinkDriver>
 8003184:	e7d1      	b.n	800312a <Check_SD_Command_File+0x26>
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 8003186:	2301      	movs	r3, #1
					   f_close(&MyFile);
 8003188:	4816      	ldr	r0, [pc, #88]	; (80031e4 <Check_SD_Command_File+0xe0>)
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 800318a:	7023      	strb	r3, [r4, #0]
					   f_close(&MyFile);
 800318c:	f006 ffc5 	bl	800a11a <f_close>
 8003190:	e7f0      	b.n	8003174 <Check_SD_Command_File+0x70>
				     USB_Mode = 1;                       // USB VCP mode in Next USB Connectivity
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <Check_SD_Command_File+0xf4>)
				     Data_log_Start_Resume = 0;          // Data Log Stops
 8003194:	7020      	strb	r0, [r4, #0]
				     USB_Mode = 1;                       // USB VCP mode in Next USB Connectivity
 8003196:	2201      	movs	r2, #1
					 f_close(&MyFile);
 8003198:	4812      	ldr	r0, [pc, #72]	; (80031e4 <Check_SD_Command_File+0xe0>)
				     USB_Mode = 1;                       // USB VCP mode in Next USB Connectivity
 800319a:	701a      	strb	r2, [r3, #0]
					 f_close(&MyFile);
 800319c:	f006 ffbd 	bl	800a11a <f_close>
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 80031a0:	4811      	ldr	r0, [pc, #68]	; (80031e8 <Check_SD_Command_File+0xe4>)
 80031a2:	e7dd      	b.n	8003160 <Check_SD_Command_File+0x5c>
			 f_close(&MyFile);
 80031a4:	480f      	ldr	r0, [pc, #60]	; (80031e4 <Check_SD_Command_File+0xe0>)
 80031a6:	f006 ffb8 	bl	800a11a <f_close>
			  if (f_unlink ("EnterDFU.txt") == FR_OK) {    // If EnterDFU.txt file present, delete the file
 80031aa:	480d      	ldr	r0, [pc, #52]	; (80031e0 <Check_SD_Command_File+0xdc>)
 80031ac:	f007 f98e 	bl	800a4cc <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80031b0:	463a      	mov	r2, r7
 80031b2:	4910      	ldr	r1, [pc, #64]	; (80031f4 <Check_SD_Command_File+0xf0>)
 80031b4:	4638      	mov	r0, r7
 80031b6:	f006 fd53 	bl	8009c60 <f_mount>
				FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80031ba:	4805      	ldr	r0, [pc, #20]	; (80031d0 <Check_SD_Command_File+0xcc>)
 80031bc:	f007 fa3e 	bl	800a63c <FATFS_UnLinkDriver>
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <Check_SD_Command_File+0xf8>)
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <Check_SD_Command_File+0xfc>)
 80031c4:	601a      	str	r2, [r3, #0]
			 NVIC_SystemReset();        // System reset
 80031c6:	f7fe fe8f 	bl	8001ee8 <NVIC_SystemReset>
 80031ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031cc:	20008703 	.word	0x20008703
 80031d0:	20008ab9 	.word	0x20008ab9
 80031d4:	0800bc0c 	.word	0x0800bc0c
 80031d8:	200089c4 	.word	0x200089c4
 80031dc:	20008ac8 	.word	0x20008ac8
 80031e0:	0800b976 	.word	0x0800b976
 80031e4:	20008d28 	.word	0x20008d28
 80031e8:	0800b983 	.word	0x0800b983
 80031ec:	200094bc 	.word	0x200094bc
 80031f0:	0800b990 	.word	0x0800b990
 80031f4:	0800bb37 	.word	0x0800bb37
 80031f8:	20008fe8 	.word	0x20008fe8
 80031fc:	20017ff0 	.word	0x20017ff0
 8003200:	deadbeef 	.word	0xdeadbeef

08003204 <Execute_VCP_Command>:
	 if (EnterReset_Create ==1)
 8003204:	4a10      	ldr	r2, [pc, #64]	; (8003248 <Execute_VCP_Command+0x44>)
 8003206:	6811      	ldr	r1, [r2, #0]
{
 8003208:	b538      	push	{r3, r4, r5, lr}
	  Data_log_Start_Resume = 0;
 800320a:	4c10      	ldr	r4, [pc, #64]	; (800324c <Execute_VCP_Command+0x48>)
 800320c:	2300      	movs	r3, #0
	 if (EnterReset_Create ==1)
 800320e:	2901      	cmp	r1, #1
	  Data_log_Start_Resume = 0;
 8003210:	7023      	strb	r3, [r4, #0]
	 if (EnterReset_Create ==1)
 8003212:	d102      	bne.n	800321a <Execute_VCP_Command+0x16>
		 EnterReset_Create =0;
 8003214:	6013      	str	r3, [r2, #0]
			NVIC_SystemReset();    // System reset
 8003216:	f7fe fe67 	bl	8001ee8 <NVIC_SystemReset>
	 if (EnterDFU_Create ==1)
 800321a:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <Execute_VCP_Command+0x4c>)
 800321c:	6811      	ldr	r1, [r2, #0]
 800321e:	2901      	cmp	r1, #1
 8003220:	d104      	bne.n	800322c <Execute_VCP_Command+0x28>
		    EnterDFU_Create =0;
 8003222:	6013      	str	r3, [r2, #0]
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <Execute_VCP_Command+0x50>)
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <Execute_VCP_Command+0x54>)
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e7f4      	b.n	8003216 <Execute_VCP_Command+0x12>
	 if (Logstart_Create ==1)
 800322c:	4a0b      	ldr	r2, [pc, #44]	; (800325c <Execute_VCP_Command+0x58>)
 800322e:	6815      	ldr	r5, [r2, #0]
 8003230:	2d01      	cmp	r5, #1
 8003232:	d107      	bne.n	8003244 <Execute_VCP_Command+0x40>
		 Logstart_Create=0;
 8003234:	6013      	str	r3, [r2, #0]
		 FATFS_Logstart_Ready();
 8003236:	f7ff f903 	bl	8002440 <FATFS_Logstart_Ready>
		 Data_log_Start_Resume = 1;
 800323a:	7025      	strb	r5, [r4, #0]
}
 800323c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 Check_SD_Command_File();
 8003240:	f7ff bf60 	b.w	8003104 <Check_SD_Command_File>
 8003244:	bd38      	pop	{r3, r4, r5, pc}
 8003246:	bf00      	nop
 8003248:	20009da8 	.word	0x20009da8
 800324c:	20008703 	.word	0x20008703
 8003250:	2000a998 	.word	0x2000a998
 8003254:	20017ff0 	.word	0x20017ff0
 8003258:	deadbeef 	.word	0xdeadbeef
 800325c:	20009538 	.word	0x20009538

08003260 <Open_File_For_Sensor_Write>:
{
 8003260:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS==0)
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <Open_File_For_Sensor_Write+0x58>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	bb2b      	cbnz	r3, 80032b4 <Open_File_For_Sensor_Write+0x54>
	last_file=GetNextIndex("");
 8003268:	4814      	ldr	r0, [pc, #80]	; (80032bc <Open_File_For_Sensor_Write+0x5c>)
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800326a:	4c15      	ldr	r4, [pc, #84]	; (80032c0 <Open_File_For_Sensor_Write+0x60>)
 800326c:	4d15      	ldr	r5, [pc, #84]	; (80032c4 <Open_File_For_Sensor_Write+0x64>)
	last_file=GetNextIndex("");
 800326e:	f7ff f831 	bl	80022d4 <GetNextIndex>
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <Open_File_For_Sensor_Write+0x68>)
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 8003274:	4915      	ldr	r1, [pc, #84]	; (80032cc <Open_File_For_Sensor_Write+0x6c>)
	last_file=GetNextIndex("");
 8003276:	6018      	str	r0, [r3, #0]
 8003278:	4602      	mov	r2, r0
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 800327a:	4815      	ldr	r0, [pc, #84]	; (80032d0 <Open_File_For_Sensor_Write+0x70>)
 800327c:	f007 fae6 	bl	800a84c <siprintf>
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8003280:	2212      	movs	r2, #18
 8003282:	4913      	ldr	r1, [pc, #76]	; (80032d0 <Open_File_For_Sensor_Write+0x70>)
 8003284:	4620      	mov	r0, r4
 8003286:	f006 fd21 	bl	8009ccc <f_open>
 800328a:	7028      	strb	r0, [r5, #0]
		if(res != FR_OK) // Create and Open a new text file object with write access
 800328c:	b140      	cbz	r0, 80032a0 <Open_File_For_Sensor_Write+0x40>
			        AIM_Error_Handler(f_open_E);
 800328e:	2001      	movs	r0, #1
 8003290:	f7ff fe9e 	bl	8002fd0 <AIM_Error_Handler>
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 8003294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8003298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800329c:	f000 ba0a 	b.w	80036b4 <delay_us>
							f_lseek(&MyFile, MyFile.fsize);   // Increase File Size when big file to write
 80032a0:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80032a4:	4620      	mov	r0, r4
 80032a6:	f006 ff49 	bl	800a13c <f_lseek>
							 res= f_sync(&MyFile);
 80032aa:	4620      	mov	r0, r4
 80032ac:	f006 fed5 	bl	800a05a <f_sync>
 80032b0:	7028      	strb	r0, [r5, #0]
 80032b2:	e7ef      	b.n	8003294 <Open_File_For_Sensor_Write+0x34>
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	bf00      	nop
 80032b8:	20008d1d 	.word	0x20008d1d
 80032bc:	0800bb37 	.word	0x0800bb37
 80032c0:	20008d28 	.word	0x20008d28
 80032c4:	20008faa 	.word	0x20008faa
 80032c8:	20008d20 	.word	0x20008d20
 80032cc:	0800b9a0 	.word	0x0800b9a0
 80032d0:	20008a0c 	.word	0x20008a0c

080032d4 <Datalog_Sensor_Initialization>:
{
 80032d4:	b508      	push	{r3, lr}
		 FATFS_Init();
 80032d6:	f7ff fef5 	bl	80030c4 <FATFS_Init>
		Open_File_For_Sensor_Write();
 80032da:	f7ff ffc1 	bl	8003260 <Open_File_For_Sensor_Write>
		if (Skip_FATFS==0)
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <Datalog_Sensor_Initialization+0x1c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b91b      	cbnz	r3, 80032ec <Datalog_Sensor_Initialization+0x18>
}
 80032e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();                       // Reset All Buffer parameters for FATFS SDIO write
 80032e8:	f7ff bdfc 	b.w	8002ee4 <Reset_All>
 80032ec:	bd08      	pop	{r3, pc}
 80032ee:	bf00      	nop
 80032f0:	20008d1d 	.word	0x20008d1d

080032f4 <Prepare_Data_Log_State>:
{
 80032f4:	b510      	push	{r4, lr}
	   if (Skip_FATFS==0)   // If there's no FATFS SD error
 80032f6:	4c12      	ldr	r4, [pc, #72]	; (8003340 <Prepare_Data_Log_State+0x4c>)
 80032f8:	7821      	ldrb	r1, [r4, #0]
 80032fa:	b9d9      	cbnz	r1, 8003334 <Prepare_Data_Log_State+0x40>
		   Battery_ADC_Value=2500;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <Prepare_Data_Log_State+0x50>)
 80032fe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003302:	801a      	strh	r2, [r3, #0]
 if (Data_log_Start_Resume == 1)       // Continue Data Log after USB disconnect
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <Prepare_Data_Log_State+0x54>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <Prepare_Data_Log_State+0x32>
	 Datalog_Sensor_Initialization();
 800330c:	f7ff ffe2 	bl	80032d4 <Datalog_Sensor_Initialization>
   if (Skip_FATFS==0)   // If there's no FATFS SD error
 8003310:	7823      	ldrb	r3, [r4, #0]
 8003312:	b97b      	cbnz	r3, 8003334 <Prepare_Data_Log_State+0x40>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <Prepare_Data_Log_State+0x58>)
 8003316:	6893      	ldr	r3, [r2, #8]
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6093      	str	r3, [r2, #8]
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <Prepare_Data_Log_State+0x5c>)
 8003320:	2204      	movs	r2, #4
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	bd10      	pop	{r4, pc}
	else if (VCP_Bypass==1)
 8003326:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <Prepare_Data_Log_State+0x60>)
 8003328:	4c0b      	ldr	r4, [pc, #44]	; (8003358 <Prepare_Data_Log_State+0x64>)
 800332a:	7813      	ldrb	r3, [r2, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <Prepare_Data_Log_State+0x42>
		VCP_Bypass= 0;
 8003330:	7011      	strb	r1, [r2, #0]
		Pros_state = Dormant_Idle_Stop;
 8003332:	7023      	strb	r3, [r4, #0]
 8003334:	bd10      	pop	{r4, pc}
		Prepare_Goto_Dormant_Mode();
 8003336:	f7fe ffc3 	bl	80022c0 <Prepare_Goto_Dormant_Mode>
		Pros_state = Dormant_Idle_Stop;
 800333a:	2306      	movs	r3, #6
 800333c:	e7f9      	b.n	8003332 <Prepare_Data_Log_State+0x3e>
 800333e:	bf00      	nop
 8003340:	20008d1d 	.word	0x20008d1d
 8003344:	20008cf8 	.word	0x20008cf8
 8003348:	20008703 	.word	0x20008703
 800334c:	40009400 	.word	0x40009400
 8003350:	e000e100 	.word	0xe000e100
 8003354:	20008ac5 	.word	0x20008ac5
 8003358:	200086c0 	.word	0x200086c0

0800335c <USB_Init_Start>:
{
 800335c:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 800335e:	f7fe faad 	bl	80018bc <SD_POWER_ON>
	 Pros_state = LP_STOP;                  // Next state
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <USB_Init_Start+0xb4>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003364:	492b      	ldr	r1, [pc, #172]	; (8003414 <USB_Init_Start+0xb8>)
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 8003366:	4d2c      	ldr	r5, [pc, #176]	; (8003418 <USB_Init_Start+0xbc>)
	 Pros_state = LP_STOP;                  // Next state
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	2304      	movs	r3, #4
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	 USB_Clock_Ready();
 8003372:	f7fe ff5f 	bl	8002234 <USB_Clock_Ready>
 8003376:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800337a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 800337e:	782a      	ldrb	r2, [r5, #0]
 8003380:	2a01      	cmp	r2, #1
 8003382:	d101      	bne.n	8003388 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 8003384:	f7ff f9a6 	bl	80026d4 <File_Close_Update_Unlink>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8003388:	4e24      	ldr	r6, [pc, #144]	; (800341c <USB_Init_Start+0xc0>)
	Data_log_Start_Resume = 0;
 800338a:	2400      	movs	r4, #0
 800338c:	702c      	strb	r4, [r5, #0]
    HAL_ResumeTick();                                       // Before entering USB mode, SYS_tick needs to enable
 800338e:	f001 f9a3 	bl	80046d8 <HAL_ResumeTick>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8003392:	7833      	ldrb	r3, [r6, #0]
 8003394:	4d22      	ldr	r5, [pc, #136]	; (8003420 <USB_Init_Start+0xc4>)
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <USB_Init_Start+0x6a>
VIOLET_LED_ONLY();
 800339a:	f7fe fa83 	bl	80018a4 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 800339e:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 80033a0:	f7ff f8b4 	bl	800250c <USB_MSC_Init_Start>
		 FATAL_Error = 0;
 80033a4:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80033a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80033aa:	6913      	ldr	r3, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 80033ac:	0599      	lsls	r1, r3, #22
 80033ae:	d4fc      	bmi.n	80033aa <USB_Init_Start+0x4e>
		Shut_Down_USB();
 80033b0:	f7fe ff22 	bl	80021f8 <Shut_Down_USB>
ALL_LED_OFF();
 80033b4:	f7fe fa3a 	bl	800182c <ALL_LED_OFF>
		 Prepare_Data_Log_State();           // Prepare for Data collection
 80033b8:	f7ff ff9c 	bl	80032f4 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80033bc:	4b15      	ldr	r3, [pc, #84]	; (8003414 <USB_Init_Start+0xb8>)
 80033be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
  USB_VCP_Init_Start();
 80033c6:	f7ff f8c3 	bl	8002550 <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK)   // USB Battery charging mode
 80033ca:	4816      	ldr	r0, [pc, #88]	; (8003424 <USB_Init_Start+0xc8>)
 80033cc:	f005 f976 	bl	80086bc <Battey_Charge_Mode>
 80033d0:	b960      	cbnz	r0, 80033ec <USB_Init_Start+0x90>
			    FATAL_Error = 0;
 80033d2:	7028      	strb	r0, [r5, #0]
 80033d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80033d8:	6913      	ldr	r3, [r2, #16]
				while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));
 80033da:	059b      	lsls	r3, r3, #22
 80033dc:	d4fc      	bmi.n	80033d8 <USB_Init_Start+0x7c>
				Shut_Down_USB();
 80033de:	f7fe ff0b 	bl	80021f8 <Shut_Down_USB>
				ALL_LED_OFF();
 80033e2:	f7fe fa23 	bl	800182c <ALL_LED_OFF>
				Check_SD_Command_File();
 80033e6:	f7ff fe8d 	bl	8003104 <Check_SD_Command_File>
 80033ea:	e7e5      	b.n	80033b8 <USB_Init_Start+0x5c>
			 ALL_LED_ON();
 80033ec:	f7fe fa2a 	bl	8001844 <ALL_LED_ON>
			 FATAL_Error = 0;
 80033f0:	702c      	strb	r4, [r5, #0]
 80033f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80033f6:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 80033f8:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 80033fc:	d1fb      	bne.n	80033f6 <USB_Init_Start+0x9a>
		Shut_Down_USB();
 80033fe:	f7fe fefb 	bl	80021f8 <Shut_Down_USB>
		ALL_LED_OFF();
 8003402:	f7fe fa13 	bl	800182c <ALL_LED_OFF>
		VCP_continue = 0;                     // Variable reset, aviod looping
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <USB_Init_Start+0xcc>)
 8003408:	701c      	strb	r4, [r3, #0]
		Execute_VCP_Command();
 800340a:	f7ff fefb 	bl	8003204 <Execute_VCP_Command>
 800340e:	e7d3      	b.n	80033b8 <USB_Init_Start+0x5c>
 8003410:	200086c0 	.word	0x200086c0
 8003414:	e000e100 	.word	0xe000e100
 8003418:	20008703 	.word	0x20008703
 800341c:	20008fe8 	.word	0x20008fe8
 8003420:	20008d1c 	.word	0x20008d1c
 8003424:	20008720 	.word	0x20008720
 8003428:	20008a52 	.word	0x20008a52

0800342c <AIM_DataStart_at_Reset>:



void AIM_DataStart_at_Reset(void)
{
 800342c:	b510      	push	{r4, lr}
	SD_POWER_ON();
 800342e:	f7fe fa45 	bl	80018bc <SD_POWER_ON>
	SD_cnt_limit=3;
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <AIM_DataStart_at_Reset+0x48>)
 8003434:	2203      	movs	r2, #3
 8003436:	601a      	str	r2, [r3, #0]
	 Data_log_Start_Resume = 1;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <AIM_DataStart_at_Reset+0x4c>)
 800343a:	2401      	movs	r4, #1
 800343c:	701c      	strb	r4, [r3, #0]
		FATFS_Init();
 800343e:	f7ff fe41 	bl	80030c4 <FATFS_Init>
		Open_File_For_Sensor_Write();
 8003442:	f7ff ff0d 	bl	8003260 <Open_File_For_Sensor_Write>
	Reset_All();
 8003446:	f7ff fd4d 	bl	8002ee4 <Reset_All>
	BLUE_LED_ONLY();
 800344a:	f7fe fa1f 	bl	800188c <BLUE_LED_ONLY>
	  Start_LPTIMCounter2(0xFF);
 800344e:	20ff      	movs	r0, #255	; 0xff
 8003450:	f000 f93a 	bl	80036c8 <Start_LPTIMCounter2>
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <AIM_DataStart_at_Reset+0x50>)
 8003456:	6893      	ldr	r3, [r2, #8]
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	6093      	str	r3, [r2, #8]
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <AIM_DataStart_at_Reset+0x54>)
 8003460:	2204      	movs	r2, #4
 8003462:	609a      	str	r2, [r3, #8]
		LL_LPTIM_EnableIT_ARRM(LPTIM2);
		NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <AIM_DataStart_at_Reset+0x58>)
 8003466:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <AIM_DataStart_at_Reset+0x5c>)
 800346a:	7014      	strb	r4, [r2, #0]
 800346c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	bd10      	pop	{r4, pc}
 8003474:	20008982 	.word	0x20008982
 8003478:	20008703 	.word	0x20008703
 800347c:	40009400 	.word	0x40009400
 8003480:	e000e100 	.word	0xe000e100
 8003484:	200086c0 	.word	0x200086c0
 8003488:	20008fe8 	.word	0x20008fe8

0800348c <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <Enc2_GetPosition+0x6c>)
 800348e:	2240      	movs	r2, #64	; 0x40




int Enc2_GetPosition(void)
{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(5);
 8003494:	2005      	movs	r0, #5
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
 8003498:	f000 f90c 	bl	80036b4 <delay_us>
 800349c:	2780      	movs	r7, #128	; 0x80
 800349e:	4e17      	ldr	r6, [pc, #92]	; (80034fc <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for(i = DataPrecision-1; i >= 0; i--)
 80034a0:	240b      	movs	r4, #11
	int tempPosition = 0;
 80034a2:	2500      	movs	r5, #0
 80034a4:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 80034a6:	2005      	movs	r0, #5
 80034a8:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 80034ac:	f000 f902 	bl	80036b4 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80034b0:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 80034b2:	2005      	movs	r0, #5
 80034b4:	f000 f8fe 	bl	80036b4 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <Enc2_GetPosition+0x6c>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 80034c0:	40a3      	lsls	r3, r4
	for(i = DataPrecision-1; i >= 0; i--)
 80034c2:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 80034c6:	ea45 0503 	orr.w	r5, r5, r3
	for(i = DataPrecision-1; i >= 0; i--)
 80034ca:	d2ec      	bcs.n	80034a6 <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 80034cc:	2780      	movs	r7, #128	; 0x80
 80034ce:	4e0b      	ldr	r6, [pc, #44]	; (80034fc <Enc2_GetPosition+0x70>)
 80034d0:	2406      	movs	r4, #6
 80034d2:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 80034d4:	2005      	movs	r0, #5
 80034d6:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 80034da:	f000 f8eb 	bl	80036b4 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80034de:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 80034e0:	2005      	movs	r0, #5
 80034e2:	f000 f8e7 	bl	80036b4 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <Enc2_GetPosition+0x6c>)
	for(i = 0; i < 6; i++)
 80034e8:	3c01      	subs	r4, #1
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	d1f2      	bne.n	80034d4 <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 80034f2:	4628      	mov	r0, r5
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	48000800 	.word	0x48000800
 80034fc:	48000400 	.word	0x48000400

08003500 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_MspInit+0x88>)
{
 8003502:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	661a      	str	r2, [r3, #96]	; 0x60
 800350c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800350e:	f002 0201 	and.w	r2, r2, #1
 8003512:	9200      	str	r2, [sp, #0]
 8003514:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003518:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800351c:	659a      	str	r2, [r3, #88]	; 0x58
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003526:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352a:	f001 f8dd 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	4611      	mov	r1, r2
 8003532:	f06f 000b 	mvn.w	r0, #11
 8003536:	f001 f8e9 	bl	800470c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800353a:	2200      	movs	r2, #0
 800353c:	4611      	mov	r1, r2
 800353e:	f06f 000a 	mvn.w	r0, #10
 8003542:	f001 f8e3 	bl	800470c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	4611      	mov	r1, r2
 800354a:	f06f 0009 	mvn.w	r0, #9
 800354e:	f001 f8dd 	bl	800470c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	4611      	mov	r1, r2
 8003556:	f06f 0004 	mvn.w	r0, #4
 800355a:	f001 f8d7 	bl	800470c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	4611      	mov	r1, r2
 8003562:	f06f 0003 	mvn.w	r0, #3
 8003566:	f001 f8d1 	bl	800470c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	4611      	mov	r1, r2
 800356e:	f06f 0001 	mvn.w	r0, #1
 8003572:	f001 f8cb 	bl	800470c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	4611      	mov	r1, r2
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	f001 f8c5 	bl	800470c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003582:	b003      	add	sp, #12
 8003584:	f85d fb04 	ldr.w	pc, [sp], #4
 8003588:	40021000 	.word	0x40021000

0800358c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800358e:	6802      	ldr	r2, [r0, #0]
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_SD_MspInit+0x5c>)
 8003592:	429a      	cmp	r2, r3
{
 8003594:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8003596:	d124      	bne.n	80035e2 <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003598:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800359e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a0:	4812      	ldr	r0, [pc, #72]	; (80035ec <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80035a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a6:	661a      	str	r2, [r3, #96]	; 0x60
 80035a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80035b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035bc:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035be:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80035c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035c6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c8:	f001 fa58 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035cc:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ce:	eb0d 0103 	add.w	r1, sp, r3
 80035d2:	4807      	ldr	r0, [pc, #28]	; (80035f0 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035dc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035de:	f001 fa4d 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80035e2:	b007      	add	sp, #28
 80035e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40012800 	.word	0x40012800
 80035ec:	48000800 	.word	0x48000800
 80035f0:	48000c00 	.word	0x48000c00

080035f4 <NMI_Handler>:
 80035f4:	4770      	bx	lr

080035f6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80035f6:	e7fe      	b.n	80035f6 <HardFault_Handler>

080035f8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80035f8:	e7fe      	b.n	80035f8 <MemManage_Handler>

080035fa <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80035fa:	e7fe      	b.n	80035fa <BusFault_Handler>

080035fc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80035fc:	e7fe      	b.n	80035fc <UsageFault_Handler>

080035fe <SVC_Handler>:
 80035fe:	4770      	bx	lr

08003600 <DebugMon_Handler>:
 8003600:	4770      	bx	lr

08003602 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003602:	4770      	bx	lr

08003604 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003604:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003606:	f001 f84d 	bl	80046a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800360e:	f001 b8d4 	b.w	80047ba <HAL_SYSTICK_IRQHandler>
	...

08003614 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <OTG_FS_IRQHandler+0x8>)
 8003616:	f001 bbd7 	b.w	8004dc8 <HAL_PCD_IRQHandler>
 800361a:	bf00      	nop
 800361c:	20008fec 	.word	0x20008fec

08003620 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <DMA2_Channel4_IRQHandler+0x14>)
 8003622:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003624:	2a01      	cmp	r2, #1
 8003626:	d001      	beq.n	800362c <DMA2_Channel4_IRQHandler+0xc>
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	b90b      	cbnz	r3, 8003630 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 800362c:	f7fd bd3a 	b.w	80010a4 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8003630:	f7fd bd32 	b.w	8001098 <BSP_SD_DMA_Tx_IRQHandler>
 8003634:	20008660 	.word	0x20008660

08003638 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 8003638:	f7fd bd28 	b.w	800108c <BSP_SD_IRQHandler>

0800363c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800363c:	490f      	ldr	r1, [pc, #60]	; (800367c <SystemInit+0x40>)
 800363e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003642:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <SystemInit+0x44>)
 800364c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800364e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003656:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800365e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003662:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003668:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003670:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003672:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003678:	608b      	str	r3, [r1, #8]
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00
 8003680:	40021000 	.word	0x40021000

08003684 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <LL_APB1_GRP1_EnableClock+0x18>)
 8003686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003688:	4302      	orrs	r2, r0
 800368a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800368e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003690:	4018      	ands	r0, r3
 8003692:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8003694:	9b01      	ldr	r3, [sp, #4]
}
 8003696:	b002      	add	sp, #8
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000

080036a0 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 80036a0:	4a03      	ldr	r2, [pc, #12]	; (80036b0 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 80036a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036a6:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80036aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80036ae:	4770      	bx	lr
 80036b0:	40021000 	.word	0x40021000

080036b4 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 80036b4:	2300      	movs	r3, #0
 80036b6:	4283      	cmp	r3, r0
 80036b8:	d100      	bne.n	80036bc <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 80036ba:	4770      	bx	lr
 80036bc:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 80036be:	bf00      	nop
    	for(i=0;i<11;i++)
 80036c0:	3a01      	subs	r2, #1
 80036c2:	d1fc      	bne.n	80036be <delay_us+0xa>
    for(k=0;k<us;k++)
 80036c4:	3301      	adds	r3, #1
 80036c6:	e7f6      	b.n	80036b6 <delay_us+0x2>

080036c8 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <Start_LPTIMCounter2+0x24>)
 80036ca:	6913      	ldr	r3, [r2, #16]
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80036d2:	6993      	ldr	r3, [r2, #24]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	4318      	orrs	r0, r3
 80036da:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80036dc:	6913      	ldr	r3, [r2, #16]
 80036de:	f023 0306 	bic.w	r3, r3, #6
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6113      	str	r3, [r2, #16]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40009400 	.word	0x40009400

080036f0 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <LSE_ON+0x18>)
 80036f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 80036fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003702:	0792      	lsls	r2, r2, #30
 8003704:	d5fb      	bpl.n	80036fe <LSE_ON+0xe>

}
 8003706:	4770      	bx	lr
 8003708:	40021000 	.word	0x40021000

0800370c <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 800370c:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800370e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 8003712:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8003714:	f7ff ffb6 	bl	8003684 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <SystemClock_Config_MSI_80MHz+0xd4>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003728:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 800372a:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 800372c:	0552      	lsls	r2, r2, #21
 800372e:	d5fc      	bpl.n	800372a <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8003730:	2310      	movs	r3, #16
 8003732:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8003734:	2301      	movs	r3, #1
 8003736:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8003738:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800373a:	2306      	movs	r3, #6
 800373c:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 800373e:	2328      	movs	r3, #40	; 0x28
 8003740:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8003742:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003744:	4c27      	ldr	r4, [pc, #156]	; (80037e4 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8003746:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8003748:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800374a:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800374c:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800374e:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003752:	2202      	movs	r2, #2
 8003754:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8003756:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8003758:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800375a:	f002 f889 	bl	8005870 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800375e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800376a:	69a3      	ldr	r3, [r4, #24]
 800376c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003770:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 8003772:	f7ff ffbd 	bl	80036f0 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 8003776:	f002 faef 	bl	8005d58 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800377a:	f7ff ff91 	bl	80036a0 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 800377e:	f7ff ff8f 	bl	80036a0 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003782:	68a3      	ldr	r3, [r4, #8]
 8003784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003788:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003794:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003796:	68a3      	ldr	r3, [r4, #8]
 8003798:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800379c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037a0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80037a2:	68a3      	ldr	r3, [r4, #8]
 80037a4:	f023 0303 	bic.w	r3, r3, #3
 80037a8:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <SystemClock_Config_MSI_80MHz+0xdc>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f022 0207 	bic.w	r2, r2, #7
 80037b2:	f042 0204 	orr.w	r2, r2, #4
 80037b6:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 80037be:	2a04      	cmp	r2, #4
 80037c0:	d1fa      	bne.n	80037b8 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80037c2:	68a3      	ldr	r3, [r4, #8]
 80037c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037c8:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80037ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80037cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80037d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80037d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	9b00      	ldr	r3, [sp, #0]

		}
 80037dc:	b012      	add	sp, #72	; 0x48
 80037de:	bd10      	pop	{r4, pc}
 80037e0:	40007000 	.word	0x40007000
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40022000 	.word	0x40022000

080037ec <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <Configure_LPTIM2_Int+0x40>)
 80037ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037f2:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 80037f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 80037fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037fc:	f042 0220 	orr.w	r2, r2, #32
 8003800:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 8003804:	b082      	sub	sp, #8
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800380c:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <Configure_LPTIM2_Int+0x44>)
 8003810:	2204      	movs	r2, #4
 8003812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <Configure_LPTIM2_Int+0x48>)
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	f022 0202 	bic.w	r2, r2, #2
 800381e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 8003828:	b002      	add	sp, #8
 800382a:	4770      	bx	lr
 800382c:	40021000 	.word	0x40021000
 8003830:	e000e100 	.word	0xe000e100
 8003834:	40009400 	.word	0x40009400

08003838 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8003838:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	4c1d      	ldr	r4, [pc, #116]	; (80038b0 <HAL_PCD_MspInit+0x78>)
 800383c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003844:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8003846:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8003850:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003854:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003856:	2302      	movs	r3, #2
 8003858:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800385e:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8003860:	a903      	add	r1, sp, #12
 8003862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003866:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800386a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800386c:	f001 f906 	bl	8004a7c <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003874:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003876:	2312      	movs	r3, #18
 8003878:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003882:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003884:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003886:	f001 f8f9 	bl	8004a7c <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800388a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800388c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003890:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003892:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003898:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800389a:	462a      	mov	r2, r5
 800389c:	2107      	movs	r1, #7
 800389e:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80038a0:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 80038a2:	f000 ff33 	bl	800470c <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80038a6:	2043      	movs	r0, #67	; 0x43
 80038a8:	f000 ff64 	bl	8004774 <HAL_NVIC_EnableIRQ>
    
}
 80038ac:	b008      	add	sp, #32
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_PCD_MspDeInit+0x14>)
 80038b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038bc:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 80038be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	661a      	str	r2, [r3, #96]	; 0x60
 80038c6:	4770      	bx	lr
 80038c8:	40021000 	.word	0x40021000

080038cc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80038cc:	f500 7162 	add.w	r1, r0, #904	; 0x388
 80038d0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80038d4:	f004 bf35 	b.w	8008742 <USBD_LL_SetupStage>

080038d8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80038d8:	231c      	movs	r3, #28
 80038da:	fb03 0301 	mla	r3, r3, r1, r0
 80038de:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80038e2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80038e6:	f004 bf59 	b.w	800879c <USBD_LL_DataOutStage>

080038ea <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80038ea:	231c      	movs	r3, #28
 80038ec:	fb03 0301 	mla	r3, r3, r1, r0
 80038f0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80038f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038f6:	f004 bf83 	b.w	8008800 <USBD_LL_DataInStage>

080038fa <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80038fa:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80038fe:	f004 bfff 	b.w	8008900 <USBD_LL_SOF>

08003902 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8003902:	b510      	push	{r4, lr}
 8003904:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8003906:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800390a:	f004 ffc8 	bl	800889e <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800390e:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003912:	2101      	movs	r1, #1
}
 8003914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8003918:	f004 bfe0 	b.w	80088dc <USBD_LL_SetSpeed>

0800391c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 800391c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003920:	f004 bfdf 	b.w	80088e2 <USBD_LL_Suspend>

08003924 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8003924:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003928:	f004 bfe4 	b.w	80088f4 <USBD_LL_Resume>

0800392c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800392c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003930:	f004 bff4 	b.w	800891c <USBD_LL_IsoOUTIncomplete>

08003934 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8003934:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003938:	f004 bfee 	b.w	8008918 <USBD_LL_IsoINIncomplete>

0800393c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 800393c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003940:	f004 bfee 	b.w	8008920 <USBD_LL_DevConnected>

08003944 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8003944:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003948:	f004 bfec 	b.w	8008924 <USBD_LL_DevDisconnected>

0800394c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800394e:	4c15      	ldr	r4, [pc, #84]	; (80039a4 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8003950:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 8003952:	2305      	movs	r3, #5
 8003954:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003958:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800395a:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 800395e:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 8003960:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8003964:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 8003966:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 800396a:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800396c:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800396e:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8003970:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8003972:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8003974:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003976:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 8003978:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800397a:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800397c:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800397e:	f001 f95f 	bl	8004c40 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	4620      	mov	r0, r4
 8003986:	f001 fe70 	bl	800566a <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 800398a:	463a      	mov	r2, r7
 800398c:	4629      	mov	r1, r5
 800398e:	4620      	mov	r0, r4
 8003990:	f001 fe4a 	bl	8005628 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	4631      	mov	r1, r6
 8003998:	4620      	mov	r0, r4
 800399a:	f001 fe45 	bl	8005628 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800399e:	4628      	mov	r0, r5
 80039a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20008fec 	.word	0x20008fec

080039a8 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 80039a8:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 80039aa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039ae:	f001 f9f9 	bl	8004da4 <HAL_PCD_DeInit>
  return USBD_OK;
}
 80039b2:	2000      	movs	r0, #0
 80039b4:	bd08      	pop	{r3, pc}

080039b6 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80039b6:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80039b8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039bc:	f001 f9c5 	bl	8004d4a <HAL_PCD_Start>
  return USBD_OK;
}
 80039c0:	2000      	movs	r0, #0
 80039c2:	bd08      	pop	{r3, pc}

080039c4 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80039c4:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 80039c6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039ca:	f001 f9d3 	bl	8004d74 <HAL_PCD_Stop>
  return USBD_OK;
}
 80039ce:	2000      	movs	r0, #0
 80039d0:	bd08      	pop	{r3, pc}

080039d2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80039d2:	b510      	push	{r4, lr}
 80039d4:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 80039d6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039da:	4613      	mov	r3, r2
 80039dc:	4622      	mov	r2, r4
 80039de:	f001 fd17 	bl	8005410 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80039e6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80039e8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039ec:	f001 fd35 	bl	800545a <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80039f0:	2000      	movs	r0, #0
 80039f2:	bd08      	pop	{r3, pc}

080039f4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80039f4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80039f6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039fa:	f001 fdfb 	bl	80055f4 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 80039fe:	2000      	movs	r0, #0
 8003a00:	bd08      	pop	{r3, pc}

08003a02 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a02:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003a04:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a08:	f001 fda3 	bl	8005552 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	bd08      	pop	{r3, pc}

08003a10 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a10:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003a12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a16:	f001 fdc8 	bl	80055aa <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	bd08      	pop	{r3, pc}

08003a1e <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003a1e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003a22:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003a26:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003a2a:	bf1b      	ittet	ne
 8003a2c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003a30:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003a34:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003a38:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003a3c:	bf08      	it	eq
 8003a3e:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 8003a42:	4770      	bx	lr

08003a44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003a44:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003a46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a4a:	f001 fccd 	bl	80053e8 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003a4e:	2000      	movs	r0, #0
 8003a50:	bd08      	pop	{r3, pc}

08003a52 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8003a52:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003a54:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a58:	f001 fd54 	bl	8005504 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	bd08      	pop	{r3, pc}

08003a60 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8003a60:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003a62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a66:	f001 fd1b 	bl	80054a0 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	bd08      	pop	{r3, pc}

08003a6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a6e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8003a70:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a74:	f001 fd3e 	bl	80054f4 <HAL_PCD_EP_GetRxCount>
}
 8003a78:	bd08      	pop	{r3, pc}
	...

08003a7c <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 8003a7c:	2312      	movs	r3, #18
 8003a7e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 8003a80:	4800      	ldr	r0, [pc, #0]	; (8003a84 <USBD_VCP_DeviceDescriptor+0x8>)
 8003a82:	4770      	bx	lr
 8003a84:	20000068 	.word	0x20000068

08003a88 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8003a88:	2312      	movs	r3, #18
 8003a8a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8003a8c:	4800      	ldr	r0, [pc, #0]	; (8003a90 <USBD_MSC_DeviceDescriptor+0x8>)
 8003a8e:	4770      	bx	lr
 8003a90:	20000054 	.word	0x20000054

08003a94 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8003a94:	2304      	movs	r3, #4
 8003a96:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8003a98:	4800      	ldr	r0, [pc, #0]	; (8003a9c <USBD_MSC_LangIDStrDescriptor+0x8>)
 8003a9a:	4770      	bx	lr
 8003a9c:	2000007c 	.word	0x2000007c

08003aa0 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003aa0:	2300      	movs	r3, #0
{
 8003aa2:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003aa4:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 8003aa6:	b2dc      	uxtb	r4, r3
 8003aa8:	42a2      	cmp	r2, r4
 8003aaa:	d800      	bhi.n	8003aae <IntToUnicode+0xe>
  }
}
 8003aac:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 8003aae:	0f04      	lsrs	r4, r0, #28
 8003ab0:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003ab2:	bf94      	ite	ls
 8003ab4:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003ab6:	3437      	addhi	r4, #55	; 0x37
 8003ab8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8003abc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8003ac0:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 8003ac2:	7065      	strb	r5, [r4, #1]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e7ee      	b.n	8003aa6 <IntToUnicode+0x6>

08003ac8 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003ac8:	231a      	movs	r3, #26
{
 8003aca:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003acc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <USBD_VCP_SerialStrDescriptor+0x2c>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 8003ad2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003ad4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003ad6:	18c0      	adds	r0, r0, r3
 8003ad8:	d00a      	beq.n	8003af0 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003adc:	4907      	ldr	r1, [pc, #28]	; (8003afc <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003ade:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	f7ff ffdd 	bl	8003aa0 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	4905      	ldr	r1, [pc, #20]	; (8003b00 <USBD_VCP_SerialStrDescriptor+0x38>)
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7ff ffd8 	bl	8003aa0 <IntToUnicode>
}
 8003af0:	4804      	ldr	r0, [pc, #16]	; (8003b04 <USBD_VCP_SerialStrDescriptor+0x3c>)
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	1fff7a30 	.word	0x1fff7a30
 8003af8:	1fff7a34 	.word	0x1fff7a34
 8003afc:	20000082 	.word	0x20000082
 8003b00:	20000092 	.word	0x20000092
 8003b04:	20000080 	.word	0x20000080

08003b08 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003b08:	231a      	movs	r3, #26
{
 8003b0a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003b0c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <USBD_MSC_SerialStrDescriptor+0x2c>)
 8003b10:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8003b12:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003b14:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003b16:	18c0      	adds	r0, r0, r3
 8003b18:	d00a      	beq.n	8003b30 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003b1e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003b20:	2208      	movs	r2, #8
 8003b22:	f7ff ffbd 	bl	8003aa0 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8003b26:	2204      	movs	r2, #4
 8003b28:	4905      	ldr	r1, [pc, #20]	; (8003b40 <USBD_MSC_SerialStrDescriptor+0x38>)
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ffb8 	bl	8003aa0 <IntToUnicode>
}
 8003b30:	4804      	ldr	r0, [pc, #16]	; (8003b44 <USBD_MSC_SerialStrDescriptor+0x3c>)
 8003b32:	bd10      	pop	{r4, pc}
 8003b34:	1fff7a10 	.word	0x1fff7a10
 8003b38:	1fff7a14 	.word	0x1fff7a14
 8003b3c:	20000082 	.word	0x20000082
 8003b40:	20000092 	.word	0x20000092
 8003b44:	20000080 	.word	0x20000080

08003b48 <USBD_VCP_ProductStrDescriptor>:
{
 8003b48:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 8003b4a:	4c04      	ldr	r4, [pc, #16]	; (8003b5c <USBD_VCP_ProductStrDescriptor+0x14>)
 8003b4c:	4804      	ldr	r0, [pc, #16]	; (8003b60 <USBD_VCP_ProductStrDescriptor+0x18>)
 8003b4e:	460a      	mov	r2, r1
 8003b50:	4621      	mov	r1, r4
 8003b52:	f005 f891 	bl	8008c78 <USBD_GetString>
}
 8003b56:	4620      	mov	r0, r4
 8003b58:	bd10      	pop	{r4, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200093b8 	.word	0x200093b8
 8003b60:	0800ba51 	.word	0x0800ba51

08003b64 <USBD_MSC_ProductStrDescriptor>:
{
 8003b64:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8003b66:	4c04      	ldr	r4, [pc, #16]	; (8003b78 <USBD_MSC_ProductStrDescriptor+0x14>)
 8003b68:	4804      	ldr	r0, [pc, #16]	; (8003b7c <USBD_MSC_ProductStrDescriptor+0x18>)
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f005 f883 	bl	8008c78 <USBD_GetString>
}
 8003b72:	4620      	mov	r0, r4
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	bf00      	nop
 8003b78:	200093b8 	.word	0x200093b8
 8003b7c:	0800ba20 	.word	0x0800ba20

08003b80 <USBD_MSC_ManufacturerStrDescriptor>:
{
 8003b80:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003b82:	4c04      	ldr	r4, [pc, #16]	; (8003b94 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 8003b84:	4804      	ldr	r0, [pc, #16]	; (8003b98 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 8003b86:	460a      	mov	r2, r1
 8003b88:	4621      	mov	r1, r4
 8003b8a:	f005 f875 	bl	8008c78 <USBD_GetString>
}
 8003b8e:	4620      	mov	r0, r4
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	bf00      	nop
 8003b94:	200093b8 	.word	0x200093b8
 8003b98:	0800ba0d 	.word	0x0800ba0d

08003b9c <USBD_VCP_ConfigStrDescriptor>:
{
 8003b9c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 8003b9e:	4c04      	ldr	r4, [pc, #16]	; (8003bb0 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8003ba0:	4804      	ldr	r0, [pc, #16]	; (8003bb4 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	f005 f867 	bl	8008c78 <USBD_GetString>
}
 8003baa:	4620      	mov	r0, r4
 8003bac:	bd10      	pop	{r4, pc}
 8003bae:	bf00      	nop
 8003bb0:	200093b8 	.word	0x200093b8
 8003bb4:	0800ba38 	.word	0x0800ba38

08003bb8 <USBD_MSC_ConfigStrDescriptor>:
{
 8003bb8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8003bba:	4c04      	ldr	r4, [pc, #16]	; (8003bcc <USBD_MSC_ConfigStrDescriptor+0x14>)
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <USBD_MSC_ConfigStrDescriptor+0x18>)
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	f005 f859 	bl	8008c78 <USBD_GetString>
}
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	bf00      	nop
 8003bcc:	200093b8 	.word	0x200093b8
 8003bd0:	0800b9f4 	.word	0x0800b9f4

08003bd4 <USBD_VCP_InterfaceStrDescriptor>:
{
 8003bd4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 8003bd6:	4c04      	ldr	r4, [pc, #16]	; (8003be8 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8003bda:	460a      	mov	r2, r1
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f005 f84b 	bl	8008c78 <USBD_GetString>
}
 8003be2:	4620      	mov	r0, r4
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	bf00      	nop
 8003be8:	200093b8 	.word	0x200093b8
 8003bec:	0800ba43 	.word	0x0800ba43

08003bf0 <USBD_MSC_InterfaceStrDescriptor>:
{
 8003bf0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8003bf2:	4c04      	ldr	r4, [pc, #16]	; (8003c04 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f005 f83d 	bl	8008c78 <USBD_GetString>
}
 8003bfe:	4620      	mov	r0, r4
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	200093b8 	.word	0x200093b8
 8003c08:	0800b9ff 	.word	0x0800b9ff

08003c0c <USBD_VCP_LangIDStrDescriptor>:
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	800b      	strh	r3, [r1, #0]
 8003c10:	4800      	ldr	r0, [pc, #0]	; (8003c14 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8003c12:	4770      	bx	lr
 8003c14:	2000007c 	.word	0x2000007c

08003c18 <USBD_VCP_ManufacturerStrDescriptor>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4c04      	ldr	r4, [pc, #16]	; (8003c2c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8003c1c:	4804      	ldr	r0, [pc, #16]	; (8003c30 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8003c1e:	460a      	mov	r2, r1
 8003c20:	4621      	mov	r1, r4
 8003c22:	f005 f829 	bl	8008c78 <USBD_GetString>
 8003c26:	4620      	mov	r0, r4
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200093b8 	.word	0x200093b8
 8003c30:	0800ba0d 	.word	0x0800ba0d

08003c34 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 8003c34:	2000      	movs	r0, #0
 8003c36:	4770      	bx	lr

08003c38 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 8003c38:	2000      	movs	r0, #0
 8003c3a:	4770      	bx	lr

08003c3c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c3c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 8003c40:	b11b      	cbz	r3, 8003c4a <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 8003c42:	2000      	movs	r0, #0
 8003c44:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003c48:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003c4a:	2002      	movs	r0, #2
  }
}
 8003c4c:	4770      	bx	lr

08003c4e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003c4e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 8003c52:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c54:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003c58:	b15b      	cbz	r3, 8003c72 <USBD_CDC_EP0_RxReady+0x24>
 8003c5a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003c5e:	28ff      	cmp	r0, #255	; 0xff
 8003c60:	d007      	beq.n	8003c72 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 8003c6c:	23ff      	movs	r3, #255	; 0xff
 8003c6e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003c72:	2000      	movs	r0, #0
 8003c74:	bd10      	pop	{r4, pc}
	...

08003c78 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003c78:	2343      	movs	r3, #67	; 0x43
 8003c7a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003c7c:	4800      	ldr	r0, [pc, #0]	; (8003c80 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003c7e:	4770      	bx	lr
 8003c80:	2000011c 	.word	0x2000011c

08003c84 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003c84:	2343      	movs	r3, #67	; 0x43
 8003c86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003c88:	4800      	ldr	r0, [pc, #0]	; (8003c8c <USBD_CDC_GetHSCfgDesc+0x8>)
 8003c8a:	4770      	bx	lr
 8003c8c:	20000160 	.word	0x20000160

08003c90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003c90:	2343      	movs	r3, #67	; 0x43
 8003c92:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003c94:	4800      	ldr	r0, [pc, #0]	; (8003c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003c96:	4770      	bx	lr
 8003c98:	200001b0 	.word	0x200001b0

08003c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003ca0:	4800      	ldr	r0, [pc, #0]	; (8003ca4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003ca2:	4770      	bx	lr
 8003ca4:	200001a4 	.word	0x200001a4

08003ca8 <STORAGE_Init>:
{
 8003ca8:	b508      	push	{r3, lr}
  BSP_SD_Init();
 8003caa:	f7fd fa97 	bl	80011dc <BSP_SD_Init>
}
 8003cae:	2000      	movs	r0, #0
 8003cb0:	bd08      	pop	{r3, pc}

08003cb2 <STORAGE_GetCapacity>:
{
 8003cb2:	b530      	push	{r4, r5, lr}
 8003cb4:	b097      	sub	sp, #92	; 0x5c
 8003cb6:	460d      	mov	r5, r1
 8003cb8:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003cba:	f7fd f9d3 	bl	8001064 <BSP_SD_IsDetected>
 8003cbe:	b178      	cbz	r0, 8003ce0 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 8003cc0:	4668      	mov	r0, sp
 8003cc2:	f7fd f9fb 	bl	80010bc <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 8003cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003cca:	0a5b      	lsrs	r3, r3, #9
 8003ccc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 8003cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cd8:	8023      	strh	r3, [r4, #0]
    ret = 0;
 8003cda:	2000      	movs	r0, #0
}
 8003cdc:	b017      	add	sp, #92	; 0x5c
 8003cde:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	e7fa      	b.n	8003cdc <STORAGE_GetCapacity+0x2a>

08003ce6 <STORAGE_Read>:
{
 8003ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ce8:	460c      	mov	r4, r1
 8003cea:	4615      	mov	r5, r2
 8003cec:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003cee:	f7fd f9b9 	bl	8001064 <BSP_SD_IsDetected>
 8003cf2:	b158      	cbz	r0, 8003d0c <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	9601      	str	r6, [sp, #4]
 8003cfc:	026a      	lsls	r2, r5, #9
 8003cfe:	2300      	movs	r3, #0
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7fd fa13 	bl	800112c <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 8003d06:	2000      	movs	r0, #0
}
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e7fa      	b.n	8003d08 <STORAGE_Read+0x22>

08003d12 <STORAGE_Write>:
{
 8003d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d14:	460c      	mov	r4, r1
 8003d16:	4615      	mov	r5, r2
 8003d18:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003d1a:	f7fd f9a3 	bl	8001064 <BSP_SD_IsDetected>
 8003d1e:	b158      	cbz	r0, 8003d38 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	9601      	str	r6, [sp, #4]
 8003d28:	026a      	lsls	r2, r5, #9
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7fd fad5 	bl	80012dc <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 8003d32:	2000      	movs	r0, #0
}
 8003d34:	b002      	add	sp, #8
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	e7fa      	b.n	8003d34 <STORAGE_Write+0x22>

08003d3e <USBD_CDC_DataOut>:
{
 8003d3e:	b538      	push	{r3, r4, r5, lr}
 8003d40:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d42:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003d46:	f7ff fe92 	bl	8003a6e <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003d4a:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003d4e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8003d52:	b14b      	cbz	r3, 8003d68 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003d54:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003d58:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003d62:	4798      	blx	r3
    return USBD_OK;
 8003d64:	2000      	movs	r0, #0
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003d68:	2002      	movs	r0, #2
}
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}

08003d6c <USBD_CDC_Setup>:
{
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d6e:	780f      	ldrb	r7, [r1, #0]
 8003d70:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8003d74:	4606      	mov	r6, r0
 8003d76:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d78:	d023      	beq.n	8003dc2 <USBD_CDC_Setup+0x56>
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d119      	bne.n	8003db2 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8003d7e:	88ca      	ldrh	r2, [r1, #6]
 8003d80:	784b      	ldrb	r3, [r1, #1]
 8003d82:	b1c2      	cbz	r2, 8003db6 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8003d84:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d86:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8003d8a:	d50b      	bpl.n	8003da4 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d8c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003d90:	4618      	mov	r0, r3
 8003d92:	688f      	ldr	r7, [r1, #8]
 8003d94:	4629      	mov	r1, r5
 8003d96:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 8003d98:	88e2      	ldrh	r2, [r4, #6]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8003d9e:	f004 ff87 	bl	8008cb0 <USBD_CtlSendData>
      break;
 8003da2:	e006      	b.n	8003db2 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8003da4:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003da8:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 8003dac:	4629      	mov	r1, r5
 8003dae:	f004 ff94 	bl	8008cda <USBD_CtlPrepareRx>
}
 8003db2:	2000      	movs	r0, #0
 8003db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003db6:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003dba:	6884      	ldr	r4, [r0, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	47a0      	blx	r4
 8003dc0:	e7f7      	b.n	8003db2 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8003dc2:	784b      	ldrb	r3, [r1, #1]
 8003dc4:	2b0a      	cmp	r3, #10
 8003dc6:	d1f4      	bne.n	8003db2 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4901      	ldr	r1, [pc, #4]	; (8003dd0 <USBD_CDC_Setup+0x64>)
 8003dcc:	e7e7      	b.n	8003d9e <USBD_CDC_Setup+0x32>
 8003dce:	bf00      	nop
 8003dd0:	200005f0 	.word	0x200005f0

08003dd4 <USBD_CDC_DeInit>:
{
 8003dd4:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8003dd6:	2183      	movs	r1, #131	; 0x83
{
 8003dd8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003dda:	f7ff fe04 	bl	80039e6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003dde:	2103      	movs	r1, #3
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff fe00 	bl	80039e6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003de6:	2182      	movs	r1, #130	; 0x82
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7ff fdfc 	bl	80039e6 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003dee:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003df2:	b153      	cbz	r3, 8003e0a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003df4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003dfc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003e00:	f006 fc4c 	bl	800a69c <free>
    pdev->pClassData = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <USBD_CDC_Init>:
{
 8003e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003e10:	7c03      	ldrb	r3, [r0, #16]
{
 8003e12:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003e14:	bb7b      	cbnz	r3, 8003e76 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8003e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	2183      	movs	r1, #131	; 0x83
 8003e1e:	f7ff fdd8 	bl	80039d2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003e22:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8003e26:	2202      	movs	r2, #2
 8003e28:	2103      	movs	r1, #3
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff fdd1 	bl	80039d2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003e30:	2308      	movs	r3, #8
 8003e32:	2203      	movs	r2, #3
 8003e34:	2182      	movs	r1, #130	; 0x82
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff fdcb 	bl	80039d2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003e3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003e40:	f006 fc24 	bl	800a68c <malloc>
 8003e44:	4606      	mov	r6, r0
 8003e46:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003e4a:	b320      	cbz	r0, 8003e96 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003e4c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003e54:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8003e56:	2500      	movs	r5, #0
 8003e58:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003e5c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003e60:	b987      	cbnz	r7, 8003e84 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8003e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e66:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff fdf7 	bl	8003a60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003e72:	4638      	mov	r0, r7
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	2202      	movs	r2, #2
 8003e7a:	2183      	movs	r1, #131	; 0x83
 8003e7c:	f7ff fda9 	bl	80039d2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003e80:	2340      	movs	r3, #64	; 0x40
 8003e82:	e7d0      	b.n	8003e26 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fde7 	bl	8003a60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003e92:	4628      	mov	r0, r5
 8003e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 8003e96:	2001      	movs	r0, #1
}
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e9c <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 8003e9c:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8003e9e:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <CDC_Itf_DeInit+0xc>)
 8003ea0:	f002 fe0d 	bl	8006abe <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	bd08      	pop	{r3, pc}
 8003ea8:	200094c8 	.word	0x200094c8

08003eac <CDC_Itf_Init>:
{
 8003eac:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <CDC_Itf_Init+0x44>)
  UartHandle.Instance          = USARTx;
 8003eb0:	4c10      	ldr	r4, [pc, #64]	; (8003ef4 <CDC_Itf_Init+0x48>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8003eb2:	4e11      	ldr	r6, [pc, #68]	; (8003ef8 <CDC_Itf_Init+0x4c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003eba:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003ebe:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8003ec4:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8003ec6:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003ec8:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003eca:	f003 f8a7 	bl	800701c <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f002 fe0d 	bl	8006af2 <HAL_UART_Receive_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <CDC_Itf_Init+0x50>)
  hcdc->RxBuffer = pbuff;
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <CDC_Itf_Init+0x54>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003edc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8003ee0:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 8003ee2:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003ee6:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 8003eea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	200094c8 	.word	0x200094c8
 8003ef8:	200095a1 	.word	0x200095a1
 8003efc:	20008720 	.word	0x20008720
 8003f00:	2000a194 	.word	0x2000a194

08003f04 <STORAGE_IsReady>:
{
 8003f04:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003f06:	f7fd f8ad 	bl	8001064 <BSP_SD_IsDetected>
 8003f0a:	4c0b      	ldr	r4, [pc, #44]	; (8003f38 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 8003f0c:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003f10:	b160      	cbz	r0, 8003f2c <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da03      	bge.n	8003f1e <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8003f16:	f7fd f961 	bl	80011dc <BSP_SD_Init>
      prev_status = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 8003f1e:	f7fd f8c7 	bl	80010b0 <BSP_SD_GetStatus>
 8003f22:	3000      	adds	r0, #0
 8003f24:	bf18      	it	ne
 8003f26:	2001      	movne	r0, #1
 8003f28:	4240      	negs	r0, r0
 8003f2a:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 8003f2c:	b90b      	cbnz	r3, 8003f32 <STORAGE_IsReady+0x2e>
    prev_status = -1;
 8003f2e:	23ff      	movs	r3, #255	; 0xff
 8003f30:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f36:	bd10      	pop	{r4, pc}
 8003f38:	200005f1 	.word	0x200005f1

08003f3c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  switch (cmd)
 8003f3c:	2820      	cmp	r0, #32
{
 8003f3e:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 8003f40:	d003      	beq.n	8003f4a <CDC_Itf_Control+0xe>
 8003f42:	2821      	cmp	r0, #33	; 0x21
 8003f44:	d048      	beq.n	8003fd8 <CDC_Itf_Control+0x9c>
  default:
    break;
  }

  return (USBD_OK);
}
 8003f46:	2000      	movs	r0, #0
 8003f48:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8003f4a:	4c2c      	ldr	r4, [pc, #176]	; (8003ffc <CDC_Itf_Control+0xc0>)
 8003f4c:	680b      	ldr	r3, [r1, #0]
 8003f4e:	6023      	str	r3, [r4, #0]
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8003f50:	4d2b      	ldr	r5, [pc, #172]	; (8004000 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 8003f52:	790b      	ldrb	r3, [r1, #4]
 8003f54:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 8003f56:	794b      	ldrb	r3, [r1, #5]
 8003f58:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8003f5a:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 8003f5c:	798b      	ldrb	r3, [r1, #6]
 8003f5e:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8003f60:	f002 fdad 	bl	8006abe <HAL_UART_DeInit>
  {

  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8003f64:	7923      	ldrb	r3, [r4, #4]
 8003f66:	4628      	mov	r0, r5
 8003f68:	b12b      	cbz	r3, 8003f76 <CDC_Itf_Control+0x3a>
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d001      	beq.n	8003f72 <CDC_Itf_Control+0x36>
    break;
  case 2:
    UartHandle.Init.StopBits = UART_STOPBITS_2;
    break;
  default :
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e001      	b.n	8003f76 <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8003f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    break;
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8003f76:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8003f78:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 8003f7a:	2a01      	cmp	r2, #1
 8003f7c:	d020      	beq.n	8003fc0 <CDC_Itf_Control+0x84>
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	d301      	bcc.n	8003f88 <CDC_Itf_Control+0x4c>
 8003f84:	2a02      	cmp	r2, #2
 8003f86:	d01e      	beq.n	8003fc6 <CDC_Itf_Control+0x8a>
    UartHandle.Init.Parity = UART_PARITY_NONE;
    break;
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8003f88:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8003f8a:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 8003f8c:	2a07      	cmp	r2, #7
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	d001      	beq.n	8003f98 <CDC_Itf_Control+0x5c>
 8003f94:	2a08      	cmp	r2, #8
 8003f96:	d019      	beq.n	8003fcc <CDC_Itf_Control+0x90>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
  default :
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003f98:	6083      	str	r3, [r0, #8]
    break;
  }

  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	6043      	str	r3, [r0, #4]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003f9e:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003fa4:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa6:	61c3      	str	r3, [r0, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003fa8:	4815      	ldr	r0, [pc, #84]	; (8004000 <CDC_Itf_Control+0xc4>)
 8003faa:	f003 f837 	bl	800701c <HAL_UART_Init>
  {

 }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <CDC_Itf_Control+0xc8>)
 8003fb0:	4915      	ldr	r1, [pc, #84]	; (8004008 <CDC_Itf_Control+0xcc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4812      	ldr	r0, [pc, #72]	; (8004000 <CDC_Itf_Control+0xc4>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4419      	add	r1, r3
 8003fba:	f002 fd9a 	bl	8006af2 <HAL_UART_Receive_IT>
 8003fbe:	e7c2      	b.n	8003f46 <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8003fc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fc4:	e7e0      	b.n	8003f88 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fca:	e7dd      	b.n	8003f88 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8003fcc:	6903      	ldr	r3, [r0, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0e2      	beq.n	8003f98 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8003fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fd6:	e7df      	b.n	8003f98 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <CDC_Itf_Control+0xc0>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	0a12      	lsrs	r2, r2, #8
 8003fe2:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8003fe4:	885a      	ldrh	r2, [r3, #2]
 8003fe6:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8003fe8:	78da      	ldrb	r2, [r3, #3]
 8003fea:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8003fec:	791a      	ldrb	r2, [r3, #4]
 8003fee:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8003ff0:	795a      	ldrb	r2, [r3, #5]
 8003ff2:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8003ff4:	799b      	ldrb	r3, [r3, #6]
 8003ff6:	718b      	strb	r3, [r1, #6]
    break;
 8003ff8:	e7a5      	b.n	8003f46 <CDC_Itf_Control+0xa>
 8003ffa:	bf00      	nop
 8003ffc:	200000b8 	.word	0x200000b8
 8004000:	200094c8 	.word	0x200094c8
 8004004:	200005ec 	.word	0x200005ec
 8004008:	200095a1 	.word	0x200095a1

0800400c <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	2030      	movs	r0, #48	; 0x30
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	fa90 f0a0 	rbit	r0, r0
 8004016:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8004018:	fab0 f080 	clz	r0, r0
 800401c:	fa92 f2a2 	rbit	r2, r2
 8004020:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8004024:	fab2 f282 	clz	r2, r2
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	fa21 f000 	lsr.w	r0, r1, r0
 8004030:	40d3      	lsrs	r3, r2
}
 8004032:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004036:	4770      	bx	lr
 8004038:	40002800 	.word	0x40002800

0800403c <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 800403e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	fa90 f0a0 	rbit	r0, r0
 8004048:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 800404c:	fab0 f080 	clz	r0, r0
 8004050:	fa92 f2a2 	rbit	r2, r2
 8004054:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8004058:	fab2 f282 	clz	r2, r2
 800405c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004060:	fa21 f000 	lsr.w	r0, r1, r0
 8004064:	40d3      	lsrs	r3, r2
}
 8004066:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800406a:	4770      	bx	lr
 800406c:	40002800 	.word	0x40002800

08004070 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8004072:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	fa90 f0a0 	rbit	r0, r0
 800407c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8004080:	fab0 f080 	clz	r0, r0
 8004084:	fa92 f2a2 	rbit	r2, r2
 8004088:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004094:	fa21 f000 	lsr.w	r0, r1, r0
 8004098:	40d3      	lsrs	r3, r2
}
 800409a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800409e:	4770      	bx	lr
 80040a0:	40002800 	.word	0x40002800

080040a4 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 80040a6:	2070      	movs	r0, #112	; 0x70
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa90 f0a0 	rbit	r0, r0
 80040ae:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 80040b0:	fab0 f080 	clz	r0, r0
 80040b4:	fa92 f2a2 	rbit	r2, r2
 80040b8:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80040bc:	fab2 f282 	clz	r2, r2
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	fa21 f000 	lsr.w	r0, r1, r0
 80040c8:	40d3      	lsrs	r3, r2
}
 80040ca:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80040ce:	4770      	bx	lr
 80040d0:	40002800 	.word	0x40002800

080040d4 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 80040d6:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa90 f0a0 	rbit	r0, r0
 80040e0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 80040e4:	fab0 f080 	clz	r0, r0
 80040e8:	fa92 f2a2 	rbit	r2, r2
 80040ec:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 80040f0:	fab2 f282 	clz	r2, r2
 80040f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040f8:	fa21 f000 	lsr.w	r0, r1, r0
 80040fc:	40d3      	lsrs	r3, r2
}
 80040fe:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004102:	4770      	bx	lr
 8004104:	40002800 	.word	0x40002800

08004108 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 800410a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fa90 f0a0 	rbit	r0, r0
 8004114:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8004118:	fab0 f080 	clz	r0, r0
 800411c:	fa92 f2a2 	rbit	r2, r2
 8004120:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800412c:	fa21 f000 	lsr.w	r0, r1, r0
 8004130:	40d3      	lsrs	r3, r2
}
 8004132:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004136:	4770      	bx	lr
 8004138:	40002800 	.word	0x40002800

0800413c <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 800413c:	b119      	cbz	r1, 8004146 <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 800413e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8004142:	2000      	movs	r0, #0
 8004144:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004146:	2002      	movs	r0, #2
}
 8004148:	4770      	bx	lr

0800414a <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800414a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800414e:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004150:	b172      	cbz	r2, 8004170 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8004152:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004156:	2301      	movs	r3, #1
 8004158:	b964      	cbnz	r4, 8004174 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 800415a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 800415e:	2183      	movs	r1, #131	; 0x83
 8004160:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004164:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004168:	f7ff fc73 	bl	8003a52 <USBD_LL_Transmit>
      return USBD_OK;
 800416c:	4620      	mov	r0, r4
 800416e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004170:	2002      	movs	r0, #2
 8004172:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8004174:	4618      	mov	r0, r3
}
 8004176:	bd10      	pop	{r4, pc}

08004178 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004178:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800417c:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 800417e:	b162      	cbz	r2, 800419a <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004180:	7c04      	ldrb	r4, [r0, #16]
 8004182:	b944      	cbnz	r4, 8004196 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004184:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8004188:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800418c:	2103      	movs	r1, #3
 800418e:	f7ff fc67 	bl	8003a60 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004192:	2000      	movs	r0, #0
 8004194:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	e7f6      	b.n	8004188 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 800419a:	2002      	movs	r0, #2
}
 800419c:	bd10      	pop	{r4, pc}
	...

080041a0 <CDC_Itf_Receive>:
{
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 80041a4:	4dc1      	ldr	r5, [pc, #772]	; (80044ac <CDC_Itf_Receive+0x30c>)
 80041a6:	4cc2      	ldr	r4, [pc, #776]	; (80044b0 <CDC_Itf_Receive+0x310>)
 80041a8:	2300      	movs	r3, #0
{
 80041aa:	b087      	sub	sp, #28
BuffLength=0;
 80041ac:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 80041ae:	4602      	mov	r2, r0
 80041b0:	680e      	ldr	r6, [r1, #0]
 80041b2:	1a13      	subs	r3, r2, r0
 80041b4:	429e      	cmp	r6, r3
 80041b6:	f200 8089 	bhi.w	80042cc <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 80041ba:	7823      	ldrb	r3, [r4, #0]
 80041bc:	2b67      	cmp	r3, #103	; 0x67
 80041be:	f040 808c 	bne.w	80042da <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 80041c2:	f894 c002 	ldrb.w	ip, [r4, #2]
 80041c6:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 80041c8:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 80041cc:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 80041ce:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 80041d0:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 80041d2:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 80041d6:	f8df b324 	ldr.w	fp, [pc, #804]	; 80044fc <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 80041da:	4fb6      	ldr	r7, [pc, #728]	; (80044b4 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 80041dc:	4eb6      	ldr	r6, [pc, #728]	; (80044b8 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 80041de:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8004500 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 80041e2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8004504 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 80041e6:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80041ea:	3b30      	subs	r3, #48	; 0x30
 80041ec:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80041f0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 80041f4:	79e3      	ldrb	r3, [r4, #7]
 80041f6:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80041fa:	3b30      	subs	r3, #48	; 0x30
 80041fc:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8004200:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004204:	7aa3      	ldrb	r3, [r4, #10]
 8004206:	3b30      	subs	r3, #48	; 0x30
 8004208:	3a30      	subs	r2, #48	; 0x30
 800420a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800420e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004212:	7ba2      	ldrb	r2, [r4, #14]
 8004214:	3a30      	subs	r2, #48	; 0x30
 8004216:	3930      	subs	r1, #48	; 0x30
 8004218:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800421c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004220:	7ca1      	ldrb	r1, [r4, #18]
 8004222:	3930      	subs	r1, #48	; 0x30
 8004224:	3830      	subs	r0, #48	; 0x30
 8004226:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800422a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800422e:	7de0      	ldrb	r0, [r4, #23]
 8004230:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8004234:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8004238:	3830      	subs	r0, #48	; 0x30
 800423a:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800423e:	f8df a294 	ldr.w	sl, [pc, #660]	; 80044d4 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004242:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004246:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800424a:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800424c:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800424e:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004250:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004252:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004256:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800425a:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800425e:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004262:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004266:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 800426a:	f8cd c004 	str.w	ip, [sp, #4]
 800426e:	f8cd e000 	str.w	lr, [sp]
 8004272:	f7fe fab9 	bl	80027e8 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8004276:	f89a 2000 	ldrb.w	r2, [sl]
 800427a:	f89b 3000 	ldrb.w	r3, [fp]
 800427e:	9204      	str	r2, [sp, #16]
 8004280:	f899 2000 	ldrb.w	r2, [r9]
 8004284:	9203      	str	r2, [sp, #12]
 8004286:	f898 2000 	ldrb.w	r2, [r8]
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	783a      	ldrb	r2, [r7, #0]
 800428e:	f8df b250 	ldr.w	fp, [pc, #592]	; 80044e0 <CDC_Itf_Receive+0x340>
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	7832      	ldrb	r2, [r6, #0]
 8004296:	9200      	str	r2, [sp, #0]
 8004298:	4988      	ldr	r1, [pc, #544]	; (80044bc <CDC_Itf_Receive+0x31c>)
 800429a:	4a89      	ldr	r2, [pc, #548]	; (80044c0 <CDC_Itf_Receive+0x320>)
 800429c:	4658      	mov	r0, fp
 800429e:	f006 fad5 	bl	800a84c <siprintf>
 80042a2:	4a88      	ldr	r2, [pc, #544]	; (80044c4 <CDC_Itf_Receive+0x324>)
 80042a4:	4603      	mov	r3, r0
 80042a6:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80042a8:	4887      	ldr	r0, [pc, #540]	; (80044c8 <CDC_Itf_Receive+0x328>)
 80042aa:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 80042b4:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 80042b8:	f7ff ff47 	bl	800414a <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 80042bc:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 80042be:	4a83      	ldr	r2, [pc, #524]	; (80044cc <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 80042c0:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 80042c2:	2301      	movs	r3, #1
 80042c4:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 80042c6:	4a82      	ldr	r2, [pc, #520]	; (80044d0 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e011      	b.n	80042f0 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	f812 6b01 	ldrb.w	r6, [r2], #1
 80042d2:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 80042d4:	3301      	adds	r3, #1
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	e76a      	b.n	80041b0 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 80042da:	2b6f      	cmp	r3, #111	; 0x6f
 80042dc:	f04f 0600 	mov.w	r6, #0
 80042e0:	d114      	bne.n	800430c <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 80042e2:	f7fd fa89 	bl	80017f8 <RED_LED_OFF>
GREEN_LED_OFF();
 80042e6:	f7fd fa96 	bl	8001816 <GREEN_LED_OFF>
BLUE_LED_OFF();
 80042ea:	f7fd fa99 	bl	8001820 <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 80042ee:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80042f0:	2300      	movs	r3, #0
 80042f2:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 80042f4:	496e      	ldr	r1, [pc, #440]	; (80044b0 <CDC_Itf_Receive+0x310>)
 80042f6:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f040 8154 	bne.w	80045a6 <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 80042fe:	4872      	ldr	r0, [pc, #456]	; (80044c8 <CDC_Itf_Receive+0x328>)
 8004300:	f7ff ff3a 	bl	8004178 <USBD_CDC_ReceivePacket>
}
 8004304:	2000      	movs	r0, #0
 8004306:	b007      	add	sp, #28
 8004308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 800430c:	2b42      	cmp	r3, #66	; 0x42
 800430e:	d102      	bne.n	8004316 <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 8004310:	f7fd fabc 	bl	800188c <BLUE_LED_ONLY>
 8004314:	e7eb      	b.n	80042ee <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 8004316:	2b62      	cmp	r3, #98	; 0x62
 8004318:	d104      	bne.n	8004324 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 800431a:	f7fd fa87 	bl	800182c <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 800431e:	2300      	movs	r3, #0
 8004320:	7023      	strb	r3, [r4, #0]
 8004322:	e7e5      	b.n	80042f0 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8004324:	2b45      	cmp	r3, #69	; 0x45
 8004326:	d102      	bne.n	800432e <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 8004328:	f7fd fa98 	bl	800185c <GREEN_LED_ONLY>
 800432c:	e7df      	b.n	80042ee <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 800432e:	2b65      	cmp	r3, #101	; 0x65
 8004330:	d0f3      	beq.n	800431a <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8004332:	2b46      	cmp	r3, #70	; 0x46
 8004334:	d102      	bne.n	800433c <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 8004336:	f7fd fa9d 	bl	8001874 <RED_LED_ONLY>
 800433a:	e7d8      	b.n	80042ee <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 800433c:	2b66      	cmp	r3, #102	; 0x66
 800433e:	d0ec      	beq.n	800431a <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8004340:	2b6c      	cmp	r3, #108	; 0x6c
 8004342:	d102      	bne.n	800434a <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8004344:	f7fd fa7e 	bl	8001844 <ALL_LED_ON>
 8004348:	e7e9      	b.n	800431e <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 800434a:	2b72      	cmp	r3, #114	; 0x72
 800434c:	f040 8086 	bne.w	800445c <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004350:	f7ff feda 	bl	8004108 <LL_RTC_TIME_GetHour.constprop.7>
 8004354:	4606      	mov	r6, r0
 8004356:	f7ff fed7 	bl	8004108 <LL_RTC_TIME_GetHour.constprop.7>
 800435a:	f3c6 1303 	ubfx	r3, r6, #4, #4
 800435e:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80044fc <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004362:	4e55      	ldr	r6, [pc, #340]	; (80044b8 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004364:	f000 000f 	and.w	r0, r0, #15
 8004368:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800436c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004370:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004374:	f7ff feae 	bl	80040d4 <LL_RTC_TIME_GetMinute.constprop.6>
 8004378:	4607      	mov	r7, r0
 800437a:	f7ff feab 	bl	80040d4 <LL_RTC_TIME_GetMinute.constprop.6>
 800437e:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8004382:	f000 000f 	and.w	r0, r0, #15
 8004386:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800438a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800438e:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004390:	f7ff fe88 	bl	80040a4 <LL_RTC_TIME_GetSecond.constprop.5>
 8004394:	4680      	mov	r8, r0
 8004396:	f7ff fe85 	bl	80040a4 <LL_RTC_TIME_GetSecond.constprop.5>
 800439a:	f3c8 1303 	ubfx	r3, r8, #4, #4
 800439e:	4f45      	ldr	r7, [pc, #276]	; (80044b4 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80043a0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8004504 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80043a4:	f000 000f 	and.w	r0, r0, #15
 80043a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80043b0:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80043b2:	f7ff fe43 	bl	800403c <LL_RTC_DATE_GetMonth.constprop.3>
 80043b6:	4681      	mov	r9, r0
 80043b8:	f7ff fe40 	bl	800403c <LL_RTC_DATE_GetMonth.constprop.3>
 80043bc:	f3c9 1303 	ubfx	r3, r9, #4, #4
 80043c0:	f000 000f 	and.w	r0, r0, #15
 80043c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80043cc:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80043d0:	f7ff fe1c 	bl	800400c <LL_RTC_DATE_GetDay.constprop.2>
 80043d4:	4683      	mov	fp, r0
 80043d6:	f7ff fe19 	bl	800400c <LL_RTC_DATE_GetDay.constprop.2>
 80043da:	f3cb 1303 	ubfx	r3, fp, #4, #4
 80043de:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8004500 <CDC_Itf_Receive+0x360>
 80043e2:	f000 000f 	and.w	r0, r0, #15
 80043e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80043ee:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 80043f2:	f7ff fe3d 	bl	8004070 <LL_RTC_DATE_GetYear.constprop.4>
 80043f6:	4683      	mov	fp, r0
 80043f8:	f7ff fe3a 	bl	8004070 <LL_RTC_DATE_GetYear.constprop.4>
 80043fc:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8004400:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004404:	f000 000f 	and.w	r0, r0, #15
 8004408:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800440c:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800440e:	4932      	ldr	r1, [pc, #200]	; (80044d8 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8004410:	b2c0      	uxtb	r0, r0
 8004412:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 8004414:	4b31      	ldr	r3, [pc, #196]	; (80044dc <CDC_Itf_Receive+0x33c>)
 8004416:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 8004418:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800441a:	f89a 3000 	ldrb.w	r3, [sl]
 800441e:	9004      	str	r0, [sp, #16]
 8004420:	f899 2000 	ldrb.w	r2, [r9]
 8004424:	9203      	str	r2, [sp, #12]
 8004426:	f898 2000 	ldrb.w	r2, [r8]
 800442a:	9202      	str	r2, [sp, #8]
 800442c:	783a      	ldrb	r2, [r7, #0]
 800442e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80044e0 <CDC_Itf_Receive+0x340>
 8004432:	9201      	str	r2, [sp, #4]
 8004434:	7832      	ldrb	r2, [r6, #0]
 8004436:	9200      	str	r2, [sp, #0]
 8004438:	4650      	mov	r0, sl
 800443a:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <CDC_Itf_Receive+0x320>)
 800443c:	f006 fa06 	bl	800a84c <siprintf>
 8004440:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <CDC_Itf_Receive+0x324>)
 8004442:	4603      	mov	r3, r0
 8004444:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004446:	4820      	ldr	r0, [pc, #128]	; (80044c8 <CDC_Itf_Receive+0x328>)
 8004448:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800444c:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 800444e:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 8004452:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8004456:	f7ff fe78 	bl	800414a <USBD_CDC_TransmitPacket>
 800445a:	e760      	b.n	800431e <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 800445c:	2b55      	cmp	r3, #85	; 0x55
 800445e:	d153      	bne.n	8004508 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8004460:	4e1f      	ldr	r6, [pc, #124]	; (80044e0 <CDC_Itf_Receive+0x340>)
 8004462:	4920      	ldr	r1, [pc, #128]	; (80044e4 <CDC_Itf_Receive+0x344>)
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <CDC_Itf_Receive+0x320>)
 8004466:	4630      	mov	r0, r6
 8004468:	f006 f9f0 	bl	800a84c <siprintf>
 800446c:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <CDC_Itf_Receive+0x324>)
 800446e:	4603      	mov	r3, r0
 8004470:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004472:	4815      	ldr	r0, [pc, #84]	; (80044c8 <CDC_Itf_Receive+0x328>)
 8004474:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800447e:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8004482:	f7ff fe62 	bl	800414a <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 8004486:	4911      	ldr	r1, [pc, #68]	; (80044cc <CDC_Itf_Receive+0x32c>)
 8004488:	2201      	movs	r2, #1
 800448a:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 800448c:	4916      	ldr	r1, [pc, #88]	; (80044e8 <CDC_Itf_Receive+0x348>)
 800448e:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 8004490:	4916      	ldr	r1, [pc, #88]	; (80044ec <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8004492:	2300      	movs	r3, #0
	EnterReset_Create=0;
 8004494:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 8004496:	4916      	ldr	r1, [pc, #88]	; (80044f0 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8004498:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 800449a:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 800449c:	490c      	ldr	r1, [pc, #48]	; (80044d0 <CDC_Itf_Receive+0x330>)
 800449e:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 80044a0:	4914      	ldr	r1, [pc, #80]	; (80044f4 <CDC_Itf_Receive+0x354>)
 80044a2:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <CDC_Itf_Receive+0x358>)
 80044a6:	7013      	strb	r3, [r2, #0]
 80044a8:	e722      	b.n	80042f0 <CDC_Itf_Receive+0x150>
 80044aa:	bf00      	nop
 80044ac:	200094c4 	.word	0x200094c4
 80044b0:	2000a9e0 	.word	0x2000a9e0
 80044b4:	2000a994 	.word	0x2000a994
 80044b8:	2000a995 	.word	0x2000a995
 80044bc:	0800ba72 	.word	0x0800ba72
 80044c0:	00030f4e 	.word	0x00030f4e
 80044c4:	2000a996 	.word	0x2000a996
 80044c8:	20008720 	.word	0x20008720
 80044cc:	20008fe8 	.word	0x20008fe8
 80044d0:	20009538 	.word	0x20009538
 80044d4:	200095a0 	.word	0x200095a0
 80044d8:	0800baae 	.word	0x0800baae
 80044dc:	40002800 	.word	0x40002800
 80044e0:	20009dac 	.word	0x20009dac
 80044e4:	0800baf3 	.word	0x0800baf3
 80044e8:	200094bc 	.word	0x200094bc
 80044ec:	20009da8 	.word	0x20009da8
 80044f0:	2000a998 	.word	0x2000a998
 80044f4:	20008ac5 	.word	0x20008ac5
 80044f8:	20008703 	.word	0x20008703
 80044fc:	200094c0 	.word	0x200094c0
 8004500:	2000a99c 	.word	0x2000a99c
 8004504:	200094b8 	.word	0x200094b8
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 8004508:	2b5a      	cmp	r3, #90	; 0x5a
 800450a:	d118      	bne.n	800453e <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 800450c:	4e27      	ldr	r6, [pc, #156]	; (80045ac <CDC_Itf_Receive+0x40c>)
 800450e:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <CDC_Itf_Receive+0x410>)
 8004510:	4928      	ldr	r1, [pc, #160]	; (80045b4 <CDC_Itf_Receive+0x414>)
 8004512:	4630      	mov	r0, r6
 8004514:	f006 f99a 	bl	800a84c <siprintf>
 8004518:	4a27      	ldr	r2, [pc, #156]	; (80045b8 <CDC_Itf_Receive+0x418>)
 800451a:	4603      	mov	r3, r0
 800451c:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800451e:	4827      	ldr	r0, [pc, #156]	; (80045bc <CDC_Itf_Receive+0x41c>)
 8004520:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800452a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800452e:	f7ff fe0c 	bl	800414a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8004532:	2300      	movs	r3, #0
 8004534:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <CDC_Itf_Receive+0x420>)
 8004538:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e6d8      	b.n	80042f0 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 800453e:	2b58      	cmp	r3, #88	; 0x58
 8004540:	d117      	bne.n	8004572 <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8004542:	4e1a      	ldr	r6, [pc, #104]	; (80045ac <CDC_Itf_Receive+0x40c>)
 8004544:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <CDC_Itf_Receive+0x410>)
 8004546:	491f      	ldr	r1, [pc, #124]	; (80045c4 <CDC_Itf_Receive+0x424>)
 8004548:	4630      	mov	r0, r6
 800454a:	f006 f97f 	bl	800a84c <siprintf>
 800454e:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <CDC_Itf_Receive+0x418>)
 8004550:	4603      	mov	r3, r0
 8004552:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004554:	4819      	ldr	r0, [pc, #100]	; (80045bc <CDC_Itf_Receive+0x41c>)
 8004556:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004560:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8004564:	f7ff fdf1 	bl	800414a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8004568:	2300      	movs	r3, #0
 800456a:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 800456c:	2201      	movs	r2, #1
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <CDC_Itf_Receive+0x428>)
 8004570:	e7e3      	b.n	800453a <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 8004572:	2b59      	cmp	r3, #89	; 0x59
 8004574:	f47f aebc 	bne.w	80042f0 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 8004578:	4e0c      	ldr	r6, [pc, #48]	; (80045ac <CDC_Itf_Receive+0x40c>)
 800457a:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <CDC_Itf_Receive+0x410>)
 800457c:	4913      	ldr	r1, [pc, #76]	; (80045cc <CDC_Itf_Receive+0x42c>)
 800457e:	4630      	mov	r0, r6
 8004580:	f006 f964 	bl	800a84c <siprintf>
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <CDC_Itf_Receive+0x418>)
 8004586:	4603      	mov	r3, r0
 8004588:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800458a:	480c      	ldr	r0, [pc, #48]	; (80045bc <CDC_Itf_Receive+0x41c>)
 800458c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004596:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800459a:	f7ff fdd6 	bl	800414a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800459e:	2300      	movs	r3, #0
 80045a0:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 80045a2:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <CDC_Itf_Receive+0x430>)
 80045a4:	e690      	b.n	80042c8 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 80045a6:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80045a8:	3301      	adds	r3, #1
 80045aa:	e6a5      	b.n	80042f8 <CDC_Itf_Receive+0x158>
 80045ac:	20009dac 	.word	0x20009dac
 80045b0:	00030f4e 	.word	0x00030f4e
 80045b4:	0800bb38 	.word	0x0800bb38
 80045b8:	2000a996 	.word	0x2000a996
 80045bc:	20008720 	.word	0x20008720
 80045c0:	20009da8 	.word	0x20009da8
 80045c4:	0800bb76 	.word	0x0800bb76
 80045c8:	2000a998 	.word	0x2000a998
 80045cc:	0800bbbe 	.word	0x0800bbbe
 80045d0:	20017cf0 	.word	0x20017cf0

080045d4 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80045d4:	4805      	ldr	r0, [pc, #20]	; (80045ec <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 80045d6:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80045d8:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80045da:	4805      	ldr	r0, [pc, #20]	; (80045f0 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 80045dc:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80045de:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 80045e2:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 80045e6:	6840      	ldr	r0, [r0, #4]
                BX      R0
 80045e8:	4700      	bx	r0
 80045ea:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80045ec:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80045f0:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80045f4:	1fff0000 	.word	0x1fff0000

080045f8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 80045f8:	4811      	ldr	r0, [pc, #68]	; (8004640 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 80045fa:	4912      	ldr	r1, [pc, #72]	; (8004644 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 80045fc:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 80045fe:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 8004600:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 8004602:	f43f afe7 	beq.w	80045d4 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004606:	f8df d040 	ldr.w	sp, [pc, #64]	; 8004648 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800460a:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800460c:	e003      	b.n	8004616 <LoopCopyDataInit>

0800460e <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800460e:	4b0f      	ldr	r3, [pc, #60]	; (800464c <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 8004610:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004612:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004614:	3104      	adds	r1, #4

08004616 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004616:	480e      	ldr	r0, [pc, #56]	; (8004650 <LoopForever+0x14>)
	ldr	r3, =_edata
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <LoopForever+0x18>)
	adds	r2, r0, r1
 800461a:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800461c:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800461e:	d3f6      	bcc.n	800460e <CopyDataInit>
	ldr	r2, =_sbss
 8004620:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <LoopForever+0x1c>)
	b	LoopFillZerobss
 8004622:	e002      	b.n	800462a <LoopFillZerobss>

08004624 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004624:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004626:	f842 3b04 	str.w	r3, [r2], #4

0800462a <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <LoopForever+0x20>)
	cmp	r2, r3
 800462c:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800462e:	d3f9      	bcc.n	8004624 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004630:	f7ff f804 	bl	800363c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004634:	f006 f806 	bl	800a644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004638:	f7fd fbda 	bl	8001df0 <main>

0800463c <LoopForever>:

LoopForever:
    b LoopForever
 800463c:	e7fe      	b.n	800463c <LoopForever>
 800463e:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8004640:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8004644:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004648:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800464c:	0800be7c 	.word	0x0800be7c
	ldr	r0, =_sdata
 8004650:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004654:	2000049c 	.word	0x2000049c
	ldr	r2, =_sbss
 8004658:	200004a0 	.word	0x200004a0
	ldr	r3, = _ebss
 800465c:	2000add0 	.word	0x2000add0

08004660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004660:	e7fe      	b.n	8004660 <ADC1_2_IRQHandler>
	...

08004664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004664:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <HAL_InitTick+0x24>)
{
 8004668:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004670:	fbb0 f0f3 	udiv	r0, r0, r3
 8004674:	f000 f88a 	bl	800478c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8004678:	2200      	movs	r2, #0
 800467a:	4621      	mov	r1, r4
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
 8004680:	f000 f844 	bl	800470c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004684:	2000      	movs	r0, #0
 8004686:	bd10      	pop	{r4, pc}
 8004688:	20000034 	.word	0x20000034

0800468c <HAL_Init>:
{
 800468c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468e:	2003      	movs	r0, #3
 8004690:	f000 f82a 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004694:	2000      	movs	r0, #0
 8004696:	f7ff ffe5 	bl	8004664 <HAL_InitTick>
  HAL_MspInit();
 800469a:	f7fe ff31 	bl	8003500 <HAL_MspInit>
}
 800469e:	2000      	movs	r0, #0
 80046a0:	bd08      	pop	{r3, pc}
	...

080046a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80046a4:	4a02      	ldr	r2, [pc, #8]	; (80046b0 <HAL_IncTick+0xc>)
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000adc8 	.word	0x2000adc8

080046b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046b4:	4b01      	ldr	r3, [pc, #4]	; (80046bc <HAL_GetTick+0x8>)
 80046b6:	6818      	ldr	r0, [r3, #0]
}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	2000adc8 	.word	0x2000adc8

080046c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80046c4:	f7ff fff6 	bl	80046b4 <HAL_GetTick>
 80046c8:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80046ca:	f7ff fff3 	bl	80046b4 <HAL_GetTick>
 80046ce:	1b40      	subs	r0, r0, r5
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d3fa      	bcc.n	80046ca <HAL_Delay+0xa>
  {
  }
}
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080046d8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80046d8:	4a02      	ldr	r2, [pc, #8]	; (80046e4 <HAL_ResumeTick+0xc>)
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4770      	bx	lr
 80046e4:	e000e010 	.word	0xe000e010

080046e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80046f8:	0200      	lsls	r0, r0, #8
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004702:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004704:	60d3      	str	r3, [r2, #12]
 8004706:	4770      	bx	lr
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470e:	b530      	push	{r4, r5, lr}
 8004710:	68dc      	ldr	r4, [r3, #12]
 8004712:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004716:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	2b04      	cmp	r3, #4
 800471e:	bf28      	it	cs
 8004720:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004722:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004724:	f04f 0501 	mov.w	r5, #1
 8004728:	fa05 f303 	lsl.w	r3, r5, r3
 800472c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004730:	bf8c      	ite	hi
 8004732:	3c03      	subhi	r4, #3
 8004734:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004736:	4019      	ands	r1, r3
 8004738:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473a:	fa05 f404 	lsl.w	r4, r5, r4
 800473e:	3c01      	subs	r4, #1
 8004740:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8004742:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	ea42 0201 	orr.w	r2, r2, r1
 8004748:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474c:	bfaf      	iteee	ge
 800474e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004752:	f000 000f 	andlt.w	r0, r0, #15
 8004756:	4b06      	ldrlt	r3, [pc, #24]	; (8004770 <HAL_NVIC_SetPriority+0x64>)
 8004758:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475a:	bfa5      	ittet	ge
 800475c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8004760:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004762:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004764:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004768:	bd30      	pop	{r4, r5, pc}
 800476a:	bf00      	nop
 800476c:	e000ed00 	.word	0xe000ed00
 8004770:	e000ed14 	.word	0xe000ed14

08004774 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004774:	0942      	lsrs	r2, r0, #5
 8004776:	2301      	movs	r3, #1
 8004778:	f000 001f 	and.w	r0, r0, #31
 800477c:	fa03 f000 	lsl.w	r0, r3, r0
 8004780:	4b01      	ldr	r3, [pc, #4]	; (8004788 <HAL_NVIC_EnableIRQ+0x14>)
 8004782:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004786:	4770      	bx	lr
 8004788:	e000e100 	.word	0xe000e100

0800478c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800478c:	3801      	subs	r0, #1
 800478e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004792:	d20a      	bcs.n	80047aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004796:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004798:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479a:	21f0      	movs	r1, #240	; 0xf0
 800479c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80047aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80047b8:	4770      	bx	lr

080047ba <HAL_SYSTICK_IRQHandler>:
{
 80047ba:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80047bc:	f7ff fffc 	bl	80047b8 <HAL_SYSTICK_Callback>
 80047c0:	bd08      	pop	{r3, pc}
	...

080047c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c4:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d05b      	beq.n	8004882 <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047ca:	6801      	ldr	r1, [r0, #0]
 80047cc:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_DMA_Init+0xc4>)
 80047ce:	4299      	cmp	r1, r3
 80047d0:	f04f 0414 	mov.w	r4, #20
 80047d4:	d841      	bhi.n	800485a <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047d6:	4a2d      	ldr	r2, [pc, #180]	; (800488c <HAL_DMA_Init+0xc8>)
 80047d8:	440a      	add	r2, r1
 80047da:	fbb2 f2f4 	udiv	r2, r2, r4
 80047de:	0092      	lsls	r2, r2, #2
 80047e0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047e2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80047e6:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e8:	2302      	movs	r3, #2
 80047ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047ee:	6884      	ldr	r4, [r0, #8]
 80047f0:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f2:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80047f4:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80047f6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f8:	432b      	orrs	r3, r5
 80047fa:	6945      	ldr	r5, [r0, #20]
 80047fc:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fe:	6985      	ldr	r5, [r0, #24]
 8004800:	432b      	orrs	r3, r5
 8004802:	69c5      	ldr	r5, [r0, #28]
 8004804:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004806:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004808:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800480c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8004810:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8004812:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004814:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8004818:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800481a:	d011      	beq.n	8004840 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800481c:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <HAL_DMA_Init+0xcc>)
 800481e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004820:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004822:	429a      	cmp	r2, r3
 8004824:	f04f 030f 	mov.w	r3, #15
 8004828:	d11f      	bne.n	800486a <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800482a:	491a      	ldr	r1, [pc, #104]	; (8004894 <HAL_DMA_Init+0xd0>)
 800482c:	680a      	ldr	r2, [r1, #0]
 800482e:	40a3      	lsls	r3, r4
 8004830:	ea22 0303 	bic.w	r3, r2, r3
 8004834:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004836:	6842      	ldr	r2, [r0, #4]
 8004838:	680b      	ldr	r3, [r1, #0]
 800483a:	40a2      	lsls	r2, r4
 800483c:	431a      	orrs	r2, r3
 800483e:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004840:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004842:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004844:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8004846:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004848:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800484a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800484c:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 800484e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004852:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 8004856:	4618      	mov	r0, r3
 8004858:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800485a:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_DMA_Init+0xd4>)
 800485c:	440b      	add	r3, r1
 800485e:	fbb3 f3f4 	udiv	r3, r3, r4
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_DMA_Init+0xd8>)
 8004868:	e7bd      	b.n	80047e6 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800486a:	490d      	ldr	r1, [pc, #52]	; (80048a0 <HAL_DMA_Init+0xdc>)
 800486c:	680a      	ldr	r2, [r1, #0]
 800486e:	40a3      	lsls	r3, r4
 8004870:	ea22 0303 	bic.w	r3, r2, r3
 8004874:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004876:	6843      	ldr	r3, [r0, #4]
 8004878:	680a      	ldr	r2, [r1, #0]
 800487a:	40a3      	lsls	r3, r4
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e7de      	b.n	8004840 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004882:	2001      	movs	r0, #1
}
 8004884:	bd30      	pop	{r4, r5, pc}
 8004886:	bf00      	nop
 8004888:	40020407 	.word	0x40020407
 800488c:	bffdfff8 	.word	0xbffdfff8
 8004890:	40020000 	.word	0x40020000
 8004894:	400200a8 	.word	0x400200a8
 8004898:	bffdfbf8 	.word	0xbffdfbf8
 800489c:	40020400 	.word	0x40020400
 80048a0:	400204a8 	.word	0x400204a8

080048a4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80048a4:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d034      	beq.n	8004914 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80048aa:	6801      	ldr	r1, [r0, #0]
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_DMA_DeInit+0x74>)
 80048ba:	4299      	cmp	r1, r3
 80048bc:	f04f 0414 	mov.w	r4, #20
 80048c0:	d820      	bhi.n	8004904 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048c2:	4a16      	ldr	r2, [pc, #88]	; (800491c <HAL_DMA_DeInit+0x78>)
 80048c4:	440a      	add	r2, r1
 80048c6:	fbb2 f2f4 	udiv	r2, r2, r4
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ce:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80048d2:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80048d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80048d8:	2301      	movs	r3, #1
 80048da:	408b      	lsls	r3, r1
 80048dc:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_DMA_DeInit+0x7c>)
 80048e0:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80048e2:	bf0c      	ite	eq
 80048e4:	4c0f      	ldreq	r4, [pc, #60]	; (8004924 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80048e6:	4c10      	ldrne	r4, [pc, #64]	; (8004928 <HAL_DMA_DeInit+0x84>)
 80048e8:	230f      	movs	r3, #15
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	408b      	lsls	r3, r1
 80048ee:	ea22 0303 	bic.w	r3, r2, r3
 80048f2:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 80048fc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 8004900:	4618      	mov	r0, r3
 8004902:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_DMA_DeInit+0x88>)
 8004906:	440b      	add	r3, r1
 8004908:	fbb3 f3f4 	udiv	r3, r3, r4
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_DMA_DeInit+0x8c>)
 8004912:	e7de      	b.n	80048d2 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8004914:	2001      	movs	r0, #1
}
 8004916:	bd10      	pop	{r4, pc}
 8004918:	40020407 	.word	0x40020407
 800491c:	bffdfff8 	.word	0xbffdfff8
 8004920:	40020000 	.word	0x40020000
 8004924:	400200a8 	.word	0x400200a8
 8004928:	400204a8 	.word	0x400204a8
 800492c:	bffdfbf8 	.word	0xbffdfbf8
 8004930:	40020400 	.word	0x40020400

08004934 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004936:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800493a:	2c01      	cmp	r4, #1
 800493c:	d036      	beq.n	80049ac <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800493e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8004942:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004944:	b2ed      	uxtb	r5, r5
 8004946:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8004948:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800494c:	f04f 0600 	mov.w	r6, #0
 8004950:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8004954:	d128      	bne.n	80049a8 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004956:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800495a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800495c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800495e:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004960:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004962:	f026 0601 	bic.w	r6, r6, #1
 8004966:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004968:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800496a:	40bd      	lsls	r5, r7
 800496c:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800496e:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004970:	6883      	ldr	r3, [r0, #8]
 8004972:	6805      	ldr	r5, [r0, #0]
 8004974:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004976:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004978:	bf0b      	itete	eq
 800497a:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800497c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800497e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004980:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004982:	b14b      	cbz	r3, 8004998 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800498a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2000      	movs	r0, #0
 8004996:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f023 0304 	bic.w	r3, r3, #4
 800499e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	f043 030a 	orr.w	r3, r3, #10
 80049a6:	e7f0      	b.n	800498a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80049a8:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80049ac:	2002      	movs	r0, #2
}
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b0 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80049b0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d003      	beq.n	80049c0 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b8:	2304      	movs	r3, #4
 80049ba:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80049bc:	2001      	movs	r0, #1
 80049be:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c0:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f022 020e 	bic.w	r2, r2, #14
 80049ca:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049d6:	2201      	movs	r2, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 80049de:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80049e0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 80049e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80049e8:	4618      	mov	r0, r3
}
 80049ea:	4770      	bx	lr

080049ec <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80049ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80049f0:	6803      	ldr	r3, [r0, #0]
{
 80049f2:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049f4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80049f6:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80049f8:	2404      	movs	r4, #4
 80049fa:	4094      	lsls	r4, r2
 80049fc:	4226      	tst	r6, r4
 80049fe:	d00e      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x32>
 8004a00:	f015 0f04 	tst.w	r5, #4
 8004a04:	d00b      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a0a:	bf5e      	ittt	pl
 8004a0c:	681a      	ldrpl	r2, [r3, #0]
 8004a0e:	f022 0204 	bicpl.w	r2, r2, #4
 8004a12:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004a14:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8004a16:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8004a18:	b373      	cbz	r3, 8004a78 <HAL_DMA_IRQHandler+0x8c>
}
 8004a1a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004a1c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004a1e:	2402      	movs	r4, #2
 8004a20:	4094      	lsls	r4, r2
 8004a22:	4226      	tst	r6, r4
 8004a24:	d012      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x60>
 8004a26:	f015 0f02 	tst.w	r5, #2
 8004a2a:	d00f      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	0695      	lsls	r5, r2, #26
 8004a30:	d406      	bmi.n	8004a40 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	f022 020a 	bic.w	r2, r2, #10
 8004a38:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004a40:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8004a42:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004a44:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8004a48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004a4a:	e7e5      	b.n	8004a18 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a4c:	2408      	movs	r4, #8
 8004a4e:	4094      	lsls	r4, r2
 8004a50:	4234      	tst	r4, r6
 8004a52:	d011      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x8c>
 8004a54:	072c      	lsls	r4, r5, #28
 8004a56:	d50f      	bpl.n	8004a78 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a58:	681c      	ldr	r4, [r3, #0]
 8004a5a:	f024 040e 	bic.w	r4, r4, #14
 8004a5e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a60:	2301      	movs	r3, #1
 8004a62:	fa03 f202 	lsl.w	r2, r3, r2
 8004a66:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a68:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004a74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a76:	e7cf      	b.n	8004a18 <HAL_DMA_IRQHandler+0x2c>
}
 8004a78:	bc70      	pop	{r4, r5, r6}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004a82:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a84:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c30 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a88:	4c67      	ldr	r4, [pc, #412]	; (8004c28 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004a8a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8004a8c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004a8e:	9a01      	ldr	r2, [sp, #4]
 8004a90:	40da      	lsrs	r2, r3
 8004a92:	d102      	bne.n	8004a9a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8004a94:	b005      	add	sp, #20
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004a9a:	2601      	movs	r6, #1
    if(iocurrent)
 8004a9c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004a9e:	409e      	lsls	r6, r3
    if(iocurrent)
 8004aa0:	ea12 0e06 	ands.w	lr, r2, r6
 8004aa4:	f000 80b1 	beq.w	8004c0a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa8:	684a      	ldr	r2, [r1, #4]
 8004aaa:	f022 0710 	bic.w	r7, r2, #16
 8004aae:	2f02      	cmp	r7, #2
 8004ab0:	d116      	bne.n	8004ae0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8004ab2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004ab6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004aba:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8004abe:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ac2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004ac6:	f04f 0c0f 	mov.w	ip, #15
 8004aca:	fa0c fc0a 	lsl.w	ip, ip, sl
 8004ace:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ad2:	690d      	ldr	r5, [r1, #16]
 8004ad4:	fa05 f50a 	lsl.w	r5, r5, sl
 8004ad8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8004adc:	f8c9 5020 	str.w	r5, [r9, #32]
 8004ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004ae4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8004ae6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004aea:	fa05 f50c 	lsl.w	r5, r5, ip
 8004aee:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004af0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004af4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004af8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004afc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004afe:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b02:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8004b04:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b08:	d811      	bhi.n	8004b2e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8004b0a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8004b0c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b10:	68cf      	ldr	r7, [r1, #12]
 8004b12:	fa07 f70c 	lsl.w	r7, r7, ip
 8004b16:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8004b1a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004b1c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b1e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004b22:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8004b26:	409f      	lsls	r7, r3
 8004b28:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8004b2c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004b2e:	f1ba 0f03 	cmp.w	sl, #3
 8004b32:	d107      	bne.n	8004b44 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8004b34:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004b36:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004b3a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8004b3e:	409f      	lsls	r7, r3
 8004b40:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8004b42:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8004b44:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8004b46:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b48:	688e      	ldr	r6, [r1, #8]
 8004b4a:	fa06 f60c 	lsl.w	r6, r6, ip
 8004b4e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8004b50:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b52:	00d5      	lsls	r5, r2, #3
 8004b54:	d559      	bpl.n	8004c0a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b56:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004b5a:	f045 0501 	orr.w	r5, r5, #1
 8004b5e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8004b62:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004b66:	f023 0603 	bic.w	r6, r3, #3
 8004b6a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004b6e:	f005 0501 	and.w	r5, r5, #1
 8004b72:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004b76:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b78:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8004b7e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004b84:	270f      	movs	r7, #15
 8004b86:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004b8a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b8e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004b92:	d03c      	beq.n	8004c0e <HAL_GPIO_Init+0x192>
 8004b94:	4d25      	ldr	r5, [pc, #148]	; (8004c2c <HAL_GPIO_Init+0x1b0>)
 8004b96:	42a8      	cmp	r0, r5
 8004b98:	d03b      	beq.n	8004c12 <HAL_GPIO_Init+0x196>
 8004b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b9e:	42a8      	cmp	r0, r5
 8004ba0:	d039      	beq.n	8004c16 <HAL_GPIO_Init+0x19a>
 8004ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ba6:	42a8      	cmp	r0, r5
 8004ba8:	d037      	beq.n	8004c1a <HAL_GPIO_Init+0x19e>
 8004baa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004bae:	42a8      	cmp	r0, r5
 8004bb0:	d035      	beq.n	8004c1e <HAL_GPIO_Init+0x1a2>
 8004bb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004bb6:	42a8      	cmp	r0, r5
 8004bb8:	d033      	beq.n	8004c22 <HAL_GPIO_Init+0x1a6>
 8004bba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004bbe:	42a8      	cmp	r0, r5
 8004bc0:	bf14      	ite	ne
 8004bc2:	2507      	movne	r5, #7
 8004bc4:	2506      	moveq	r5, #6
 8004bc6:	fa05 f50c 	lsl.w	r5, r5, ip
 8004bca:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8004bcc:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8004bce:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8004bd0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bd4:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	bf54      	ite	pl
 8004bd8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004bda:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8004bde:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8004be0:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004be2:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8004be4:	bf54      	ite	pl
 8004be6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004be8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8004bec:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8004bee:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bf0:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8004bf2:	bf54      	ite	pl
 8004bf4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004bf6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8004bfa:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8004bfc:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bfe:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8004c00:	bf54      	ite	pl
 8004c02:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004c04:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8004c08:	60e5      	str	r5, [r4, #12]
    position++;
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	e73f      	b.n	8004a8e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004c0e:	2500      	movs	r5, #0
 8004c10:	e7d9      	b.n	8004bc6 <HAL_GPIO_Init+0x14a>
 8004c12:	2501      	movs	r5, #1
 8004c14:	e7d7      	b.n	8004bc6 <HAL_GPIO_Init+0x14a>
 8004c16:	2502      	movs	r5, #2
 8004c18:	e7d5      	b.n	8004bc6 <HAL_GPIO_Init+0x14a>
 8004c1a:	2503      	movs	r5, #3
 8004c1c:	e7d3      	b.n	8004bc6 <HAL_GPIO_Init+0x14a>
 8004c1e:	2504      	movs	r5, #4
 8004c20:	e7d1      	b.n	8004bc6 <HAL_GPIO_Init+0x14a>
 8004c22:	2505      	movs	r5, #5
 8004c24:	e7cf      	b.n	8004bc6 <HAL_GPIO_Init+0x14a>
 8004c26:	bf00      	nop
 8004c28:	40010400 	.word	0x40010400
 8004c2c:	48000400 	.word	0x48000400
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c34:	6903      	ldr	r3, [r0, #16]
 8004c36:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004c38:	bf14      	ite	ne
 8004c3a:	2001      	movne	r0, #1
 8004c3c:	2000      	moveq	r0, #0
 8004c3e:	4770      	bx	lr

08004c40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8004c44:	4604      	mov	r4, r0
{
 8004c46:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d07c      	beq.n	8004d46 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8004c4c:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8004c50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c54:	b91b      	cbnz	r3, 8004c5e <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c56:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c5a:	f7fe fded 	bl	8003838 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c5e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c60:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8004c62:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c66:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8004c6a:	f002 fcf1 	bl	8007650 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c70:	466e      	mov	r6, sp
 8004c72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004c7c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004c80:	f104 0804 	add.w	r8, r4, #4
 8004c84:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	f002 fcc7 	bl	800761c <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	f002 fce3 	bl	800765c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004c96:	2200      	movs	r2, #0
 8004c98:	6860      	ldr	r0, [r4, #4]
 8004c9a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004c9e:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8004ca2:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8004ca4:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004ca6:	4282      	cmp	r2, r0
 8004ca8:	f103 031c 	add.w	r3, r3, #28
 8004cac:	d13b      	bne.n	8004d26 <HAL_PCD_Init+0xe6>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8004cb2:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8004cb4:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004cb8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8004cbc:	3201      	adds	r2, #1
 8004cbe:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8004cc0:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8004cc4:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8004cc8:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8004ccc:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8004cd0:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8004cd4:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8004cd8:	d1ec      	bne.n	8004cb4 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8004cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cdc:	466e      	mov	r6, sp
 8004cde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ce2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ce4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ce8:	e886 0003 	stmia.w	r6, {r0, r1}
 8004cec:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	f002 fccb 	bl	800768c <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8004cf6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8004cf8:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8004cfc:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8004d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 fcb3 	bl	8005672 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8004d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d102      	bne.n	8004d18 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 fcc0 	bl	8005698 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	f002 ff97 	bl	8007c4c <USB_DevDisconnect>
  return HAL_OK;
 8004d1e:	2000      	movs	r0, #0
}
 8004d20:	b00a      	add	sp, #40	; 0x28
 8004d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8004d26:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004d2a:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8004d2e:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8004d32:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8004d36:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8004d3a:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8004d3e:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d42:	3201      	adds	r2, #1
 8004d44:	e7af      	b.n	8004ca6 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8004d46:	2001      	movs	r0, #1
 8004d48:	e7ea      	b.n	8004d20 <HAL_PCD_Init+0xe0>

08004d4a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8004d4a:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004d4e:	2b01      	cmp	r3, #1
{ 
 8004d50:	b510      	push	{r4, lr}
 8004d52:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004d54:	d00c      	beq.n	8004d70 <HAL_PCD_Start+0x26>
 8004d56:	2301      	movs	r3, #1
 8004d58:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f002 ff69 	bl	8007c34 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	f002 fc6e 	bl	8007644 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004d6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004d70:	2002      	movs	r0, #2
}
 8004d72:	bd10      	pop	{r4, pc}

08004d74 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8004d74:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004d78:	2b01      	cmp	r3, #1
{ 
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004d7e:	d00f      	beq.n	8004da0 <HAL_PCD_Stop+0x2c>
 8004d80:	2301      	movs	r3, #1
 8004d82:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 8004d86:	6800      	ldr	r0, [r0, #0]
 8004d88:	f002 fc62 	bl	8007650 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8004d8c:	6820      	ldr	r0, [r4, #0]
 8004d8e:	f002 ff20 	bl	8007bd2 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8004d92:	6820      	ldr	r0, [r4, #0]
 8004d94:	f002 ff5a 	bl	8007c4c <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 8004d9e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004da0:	2002      	movs	r0, #2
  return HAL_OK;
}
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <HAL_PCD_DeInit>:
{
 8004da4:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 8004da6:	4604      	mov	r4, r0
 8004da8:	b158      	cbz	r0, 8004dc2 <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004daa:	2303      	movs	r3, #3
 8004dac:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 8004db0:	f7ff ffe0 	bl	8004d74 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7fe fd7d 	bl	80038b4 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 8004dc0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004dc2:	2001      	movs	r0, #1
}
 8004dc4:	bd10      	pop	{r4, pc}
	...

08004dc8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dcc:	6807      	ldr	r7, [r0, #0]
{
 8004dce:	b087      	sub	sp, #28
 8004dd0:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	f002 ff74 	bl	8007cc0 <USB_GetMode>
 8004dd8:	9002      	str	r0, [sp, #8]
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	f040 8155 	bne.w	800508a <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	f002 ff3f 	bl	8007c64 <USB_ReadInterrupts>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f000 814f 	beq.w	800508a <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	f002 ff39 	bl	8007c64 <USB_ReadInterrupts>
 8004df2:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004df4:	bf48      	it	mi
 8004df6:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004df8:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004dfa:	bf42      	ittt	mi
 8004dfc:	6953      	ldrmi	r3, [r2, #20]
 8004dfe:	f003 0302 	andmi.w	r3, r3, #2
 8004e02:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e04:	f002 ff2e 	bl	8007c64 <USB_ReadInterrupts>
 8004e08:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8004e0c:	d00c      	beq.n	8004e28 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	f002 ff2c 	bl	8007c6c <USB_ReadDevAllOutEpInterrupt>
 8004e14:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8004e18:	4680      	mov	r8, r0
 8004e1a:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8004e1c:	464e      	mov	r6, r9
      epnum = 0;
 8004e1e:	2500      	movs	r5, #0
      while ( ep_intr )
 8004e20:	f1b8 0f00 	cmp.w	r8, #0
 8004e24:	f040 8134 	bne.w	8005090 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	f002 ff1b 	bl	8007c64 <USB_ReadInterrupts>
 8004e2e:	0342      	lsls	r2, r0, #13
 8004e30:	d50b      	bpl.n	8004e4a <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	f002 ff22 	bl	8007c7c <USB_ReadDevAllInEpInterrupt>
 8004e38:	4626      	mov	r6, r4
 8004e3a:	4683      	mov	fp, r0
 8004e3c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8004e40:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8004e42:	f1bb 0f00 	cmp.w	fp, #0
 8004e46:	f040 81a1 	bne.w	800518c <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	f002 ff0a 	bl	8007c64 <USB_ReadInterrupts>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	da15      	bge.n	8004e80 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e54:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8004e60:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 822c 	bne.w	80052c2 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fc1b 	bl	80056ac <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	6953      	ldr	r3, [r2, #20]
 8004e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	f002 feef 	bl	8007c64 <USB_ReadInterrupts>
 8004e86:	0503      	lsls	r3, r0, #20
 8004e88:	d50b      	bpl.n	8004ea2 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e8a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004e8e:	07de      	lsls	r6, r3, #31
 8004e90:	d502      	bpl.n	8004e98 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8004e92:	4620      	mov	r0, r4
 8004e94:	f7fe fd42 	bl	800391c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	6953      	ldr	r3, [r2, #20]
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	f002 fede 	bl	8007c64 <USB_ReadInterrupts>
 8004ea8:	0100      	lsls	r0, r0, #4
 8004eaa:	d514      	bpl.n	8004ed6 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004eb4:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004eb6:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	f040 8205 	bne.w	80052ca <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8004ec2:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004ec4:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8004ec8:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004ecc:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fbeb 	bl	80056ac <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	f002 fec4 	bl	8007c64 <USB_ReadInterrupts>
 8004edc:	04c1      	lsls	r1, r0, #19
 8004ede:	d537      	bpl.n	8004f50 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004ee0:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8004ee4:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004ee6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004eee:	2100      	movs	r1, #0
 8004ef0:	f002 fc64 	bl	80077bc <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004ef4:	6861      	ldr	r1, [r4, #4]
 8004ef6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8004efa:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004efc:	9802      	ldr	r0, [sp, #8]
 8004efe:	4288      	cmp	r0, r1
 8004f00:	f040 81e7 	bne.w	80052d2 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004f0a:	69f3      	ldr	r3, [r6, #28]
 8004f0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f10:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8004f12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 81e4 	beq.w	80052e2 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8004f1a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8004f1e:	f043 030b 	orr.w	r3, r3, #11
 8004f22:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8004f26:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004f28:	f043 030b 	orr.w	r3, r3, #11
 8004f2c:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f2e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f32:	7c21      	ldrb	r1, [r4, #16]
 8004f34:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f3a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f3e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004f42:	f002 fedc 	bl	8007cfe <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	6953      	ldr	r3, [r2, #20]
 8004f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	f002 fe87 	bl	8007c64 <USB_ReadInterrupts>
 8004f56:	0482      	lsls	r2, r0, #18
 8004f58:	d520      	bpl.n	8004f9c <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	f002 feb4 	bl	8007cc8 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	68d3      	ldr	r3, [r2, #12]
 8004f64:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8004f68:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 8004f72:	f000 febb 	bl	8005cec <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 8004f76:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_PCD_IRQHandler+0x3b8>)
 8004f78:	4a82      	ldr	r2, [pc, #520]	; (8005184 <HAL_PCD_IRQHandler+0x3bc>)
 8004f7a:	4403      	add	r3, r0
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f200 81b8 	bhi.w	80052f4 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f8a:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7fe fcb8 	bl	8003902 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	6953      	ldr	r3, [r2, #20]
 8004f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f9a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	f002 fe61 	bl	8007c64 <USB_ReadInterrupts>
 8004fa2:	06c3      	lsls	r3, r0, #27
 8004fa4:	d52b      	bpl.n	8004ffe <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	6993      	ldr	r3, [r2, #24]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8004fb0:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fb2:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8004fb6:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004fb8:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fbc:	f040 81ea 	bne.w	8005394 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004fc0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004fc4:	421e      	tst	r6, r3
 8004fc6:	d015      	beq.n	8004ff4 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004fc8:	f04f 081c 	mov.w	r8, #28
 8004fcc:	fb08 4809 	mla	r8, r8, r9, r4
 8004fd0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f002 fdb1 	bl	8007b42 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fe0:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8004fe4:	4433      	add	r3, r6
 8004fe6:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fea:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8004fee:	441e      	add	r6, r3
 8004ff0:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	6993      	ldr	r3, [r2, #24]
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	f002 fe30 	bl	8007c64 <USB_ReadInterrupts>
 8005004:	0707      	lsls	r7, r0, #28
 8005006:	d507      	bpl.n	8005018 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8005008:	4620      	mov	r0, r4
 800500a:	f7fe fc76 	bl	80038fa <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	6953      	ldr	r3, [r2, #20]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	f002 fe23 	bl	8007c64 <USB_ReadInterrupts>
 800501e:	02c6      	lsls	r6, r0, #11
 8005020:	d508      	bpl.n	8005034 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8005022:	b2e9      	uxtb	r1, r5
 8005024:	4620      	mov	r0, r4
 8005026:	f7fe fc85 	bl	8003934 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	6953      	ldr	r3, [r2, #20]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	f002 fe15 	bl	8007c64 <USB_ReadInterrupts>
 800503a:	0280      	lsls	r0, r0, #10
 800503c:	d508      	bpl.n	8005050 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800503e:	b2e9      	uxtb	r1, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f7fe fc73 	bl	800392c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005046:	6822      	ldr	r2, [r4, #0]
 8005048:	6953      	ldr	r3, [r2, #20]
 800504a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	f002 fe07 	bl	8007c64 <USB_ReadInterrupts>
 8005056:	0041      	lsls	r1, r0, #1
 8005058:	d507      	bpl.n	800506a <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800505a:	4620      	mov	r0, r4
 800505c:	f7fe fc6e 	bl	800393c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	6953      	ldr	r3, [r2, #20]
 8005064:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005068:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	f002 fdfa 	bl	8007c64 <USB_ReadInterrupts>
 8005070:	0742      	lsls	r2, r0, #29
 8005072:	d50a      	bpl.n	800508a <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005078:	076b      	lsls	r3, r5, #29
 800507a:	d502      	bpl.n	8005082 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 800507c:	4620      	mov	r0, r4
 800507e:	f7fe fc61 	bl	8003944 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4315      	orrs	r5, r2
 8005088:	605d      	str	r5, [r3, #4]
    }
  }
}
 800508a:	b007      	add	sp, #28
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8005090:	f018 0f01 	tst.w	r8, #1
 8005094:	d049      	beq.n	800512a <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005096:	b2ea      	uxtb	r2, r5
 8005098:	4611      	mov	r1, r2
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	9203      	str	r2, [sp, #12]
 800509e:	f002 fdf5 	bl	8007c8c <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050a2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80050a6:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050a8:	d032      	beq.n	8005110 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050aa:	2101      	movs	r1, #1
 80050ac:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 80050ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <HAL_PCD_IRQHandler+0x3c0>)
 80050b2:	9a03      	ldr	r2, [sp, #12]
 80050b4:	4299      	cmp	r1, r3
 80050b6:	d13f      	bne.n	8005138 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 80050b8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80050bc:	0409      	lsls	r1, r1, #16
 80050be:	d41f      	bmi.n	8005100 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 80050c0:	6921      	ldr	r1, [r4, #16]
 80050c2:	2901      	cmp	r1, #1
 80050c4:	d10c      	bne.n	80050e0 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050c6:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80050c8:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050cc:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80050d0:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 80050d2:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 80050d6:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 80050da:	4408      	add	r0, r1
 80050dc:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80050e0:	4611      	mov	r1, r2
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7fe fbf8 	bl	80038d8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 80050e8:	6921      	ldr	r1, [r4, #16]
 80050ea:	2901      	cmp	r1, #1
 80050ec:	d108      	bne.n	8005100 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 80050ee:	b93d      	cbnz	r5, 8005100 <HAL_PCD_IRQHandler+0x338>
 80050f0:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 80050f4:	b922      	cbnz	r2, 8005100 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80050f6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	f002 fdff 	bl	8007cfe <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8005100:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005108:	f042 0220 	orr.w	r2, r2, #32
 800510c:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005110:	f01a 0f08 	tst.w	sl, #8
 8005114:	d004      	beq.n	8005120 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8005116:	4620      	mov	r0, r4
 8005118:	f7fe fbd8 	bl	80038cc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800511c:	2308      	movs	r3, #8
 800511e:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005120:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005124:	bf1c      	itt	ne
 8005126:	2310      	movne	r3, #16
 8005128:	60b3      	strne	r3, [r6, #8]
        epnum++;
 800512a:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800512c:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8005130:	3620      	adds	r6, #32
 8005132:	f10b 0b1c 	add.w	fp, fp, #28
 8005136:	e673      	b.n	8004e20 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8005138:	6921      	ldr	r1, [r4, #16]
 800513a:	2901      	cmp	r1, #1
 800513c:	d10c      	bne.n	8005158 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800513e:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005140:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005144:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005148:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 800514a:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 800514e:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005152:	4408      	add	r0, r1
 8005154:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005158:	4611      	mov	r1, r2
 800515a:	4620      	mov	r0, r4
 800515c:	f7fe fbbc 	bl	80038d8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005160:	6921      	ldr	r1, [r4, #16]
 8005162:	2901      	cmp	r1, #1
 8005164:	d1d4      	bne.n	8005110 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005166:	2d00      	cmp	r5, #0
 8005168:	d1d2      	bne.n	8005110 <HAL_PCD_IRQHandler+0x348>
 800516a:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 800516e:	2a00      	cmp	r2, #0
 8005170:	d1ce      	bne.n	8005110 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005172:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	f002 fdc1 	bl	8007cfe <USB_EP0_OutStart>
 800517c:	e7c8      	b.n	8005110 <HAL_PCD_IRQHandler+0x348>
 800517e:	bf00      	nop
 8005180:	ff275340 	.word	0xff275340
 8005184:	000c34ff 	.word	0x000c34ff
 8005188:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 800518c:	f01b 0f01 	tst.w	fp, #1
 8005190:	d074      	beq.n	800527c <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005192:	fa5f fa85 	uxtb.w	sl, r5
 8005196:	4651      	mov	r1, sl
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	f002 fd81 	bl	8007ca0 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800519e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80051a2:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80051a4:	d020      	beq.n	80051e8 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051a6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 80051aa:	2101      	movs	r1, #1
 80051ac:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051ae:	ea23 0301 	bic.w	r3, r3, r1
 80051b2:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051b6:	2301      	movs	r3, #1
 80051b8:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 80051c0:	bf01      	itttt	eq
 80051c2:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 80051c4:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 80051c6:	189b      	addeq	r3, r3, r2
 80051c8:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80051ca:	4651      	mov	r1, sl
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7fe fb8c 	bl	80038ea <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 80051d2:	6921      	ldr	r1, [r4, #16]
 80051d4:	2901      	cmp	r1, #1
 80051d6:	d107      	bne.n	80051e8 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80051d8:	b935      	cbnz	r5, 80051e8 <HAL_PCD_IRQHandler+0x420>
 80051da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80051dc:	b923      	cbnz	r3, 80051e8 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80051de:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	f002 fd8b 	bl	8007cfe <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051e8:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051ec:	bf1c      	itt	ne
 80051ee:	2308      	movne	r3, #8
 80051f0:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051f4:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051f8:	bf1c      	itt	ne
 80051fa:	2310      	movne	r3, #16
 80051fc:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005200:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005204:	bf1c      	itt	ne
 8005206:	2340      	movne	r3, #64	; 0x40
 8005208:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800520c:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005210:	bf1c      	itt	ne
 8005212:	2302      	movne	r3, #2
 8005214:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005218:	f018 0f80 	tst.w	r8, #128	; 0x80
 800521c:	d02e      	beq.n	800527c <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8005222:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005224:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8005226:	eba3 0802 	sub.w	r8, r3, r2
 800522a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800522c:	4598      	cmp	r8, r3
 800522e:	bf28      	it	cs
 8005230:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8005232:	f108 0303 	add.w	r3, r8, #3
 8005236:	2204      	movs	r2, #4
 8005238:	fb93 f3f2 	sdiv	r3, r3, r2
 800523c:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8005248:	9305      	str	r3, [sp, #20]
 800524a:	9b05      	ldr	r3, [sp, #20]
 800524c:	9a04      	ldr	r2, [sp, #16]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	b29b      	uxth	r3, r3
 8005252:	4293      	cmp	r3, r2
 8005254:	d904      	bls.n	8005260 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005256:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005258:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800525a:	4293      	cmp	r3, r2
 800525c:	d900      	bls.n	8005260 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 800525e:	b9a3      	cbnz	r3, 800528a <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8005260:	f1b8 0f00 	cmp.w	r8, #0
 8005264:	dc0a      	bgt.n	800527c <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005266:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8005268:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800526a:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 800526e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8005272:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005274:	ea23 0302 	bic.w	r3, r3, r2
 8005278:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 800527c:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800527e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8005282:	361c      	adds	r6, #28
 8005284:	f109 0920 	add.w	r9, r9, #32
 8005288:	e5db      	b.n	8004e42 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 800528a:	eba3 0802 	sub.w	r8, r3, r2
 800528e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005290:	9803      	ldr	r0, [sp, #12]
 8005292:	4598      	cmp	r8, r3
 8005294:	bf28      	it	cs
 8005296:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8005298:	2204      	movs	r2, #4
 800529a:	f108 0303 	add.w	r3, r8, #3
 800529e:	fb93 f3f2 	sdiv	r3, r3, r2
 80052a2:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80052a4:	7c23      	ldrb	r3, [r4, #16]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	4652      	mov	r2, sl
 80052aa:	fa1f f388 	uxth.w	r3, r8
 80052ae:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80052b0:	f002 fc36 	bl	8007b20 <USB_WritePacket>
    ep->xfer_buff  += len;
 80052b4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80052b6:	4443      	add	r3, r8
 80052b8:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80052ba:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80052bc:	4443      	add	r3, r8
 80052be:	6573      	str	r3, [r6, #84]	; 0x54
 80052c0:	e7c3      	b.n	800524a <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7fe fb2e 	bl	8003924 <HAL_PCD_ResumeCallback>
 80052c8:	e5d5      	b.n	8004e76 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7fe fb26 	bl	800391c <HAL_PCD_SuspendCallback>
 80052d0:	e601      	b.n	8004ed6 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80052d2:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 80052d4:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80052d6:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 80052d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80052dc:	9002      	str	r0, [sp, #8]
 80052de:	3320      	adds	r3, #32
 80052e0:	e60c      	b.n	8004efc <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80052e2:	6973      	ldr	r3, [r6, #20]
 80052e4:	f043 030b 	orr.w	r3, r3, #11
 80052e8:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80052ea:	6933      	ldr	r3, [r6, #16]
 80052ec:	f043 030b 	orr.w	r3, r3, #11
 80052f0:	6133      	str	r3, [r6, #16]
 80052f2:	e61c      	b.n	8004f2e <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 80052f4:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <HAL_PCD_IRQHandler+0x5ec>)
 80052f6:	4930      	ldr	r1, [pc, #192]	; (80053b8 <HAL_PCD_IRQHandler+0x5f0>)
 80052f8:	4402      	add	r2, r0
 80052fa:	428a      	cmp	r2, r1
 80052fc:	d803      	bhi.n	8005306 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8005304:	e641      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8005306:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800530a:	492c      	ldr	r1, [pc, #176]	; (80053bc <HAL_PCD_IRQHandler+0x5f4>)
 800530c:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8005310:	428a      	cmp	r2, r1
 8005312:	d803      	bhi.n	800531c <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800531a:	e636      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 800531c:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8005320:	4927      	ldr	r1, [pc, #156]	; (80053c0 <HAL_PCD_IRQHandler+0x5f8>)
 8005322:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8005326:	428a      	cmp	r2, r1
 8005328:	d803      	bhi.n	8005332 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005330:	e62b      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8005332:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <HAL_PCD_IRQHandler+0x5fc>)
 8005334:	4924      	ldr	r1, [pc, #144]	; (80053c8 <HAL_PCD_IRQHandler+0x600>)
 8005336:	4402      	add	r2, r0
 8005338:	428a      	cmp	r2, r1
 800533a:	d803      	bhi.n	8005344 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8005342:	e622      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <HAL_PCD_IRQHandler+0x604>)
 8005346:	4922      	ldr	r1, [pc, #136]	; (80053d0 <HAL_PCD_IRQHandler+0x608>)
 8005348:	4402      	add	r2, r0
 800534a:	428a      	cmp	r2, r1
 800534c:	d803      	bhi.n	8005356 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8005354:	e619      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8005356:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <HAL_PCD_IRQHandler+0x60c>)
 8005358:	491f      	ldr	r1, [pc, #124]	; (80053d8 <HAL_PCD_IRQHandler+0x610>)
 800535a:	4402      	add	r2, r0
 800535c:	428a      	cmp	r2, r1
 800535e:	d803      	bhi.n	8005368 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8005366:	e610      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8005368:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800536c:	491b      	ldr	r1, [pc, #108]	; (80053dc <HAL_PCD_IRQHandler+0x614>)
 800536e:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8005372:	428a      	cmp	r2, r1
 8005374:	d803      	bhi.n	800537e <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800537c:	e605      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_PCD_IRQHandler+0x618>)
 8005380:	4918      	ldr	r1, [pc, #96]	; (80053e4 <HAL_PCD_IRQHandler+0x61c>)
 8005382:	4402      	add	r2, r0
 8005384:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	bf94      	ite	ls
 800538a:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 800538e:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8005392:	e5fa      	b.n	8004f8a <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005394:	2b06      	cmp	r3, #6
 8005396:	f47f ae2d 	bne.w	8004ff4 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 800539a:	2208      	movs	r2, #8
 800539c:	f504 7162 	add.w	r1, r4, #904	; 0x388
 80053a0:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053a2:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80053a6:	f002 fbcc 	bl	8007b42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053aa:	fb08 4809 	mla	r8, r8, r9, r4
 80053ae:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80053b2:	e61a      	b.n	8004fea <HAL_PCD_IRQHandler+0x222>
 80053b4:	ff1b1e40 	.word	0xff1b1e40
 80053b8:	000f423f 	.word	0x000f423f
 80053bc:	00124f7f 	.word	0x00124f7f
 80053c0:	0013d61f 	.word	0x0013d61f
 80053c4:	fee5b660 	.word	0xfee5b660
 80053c8:	0016e35f 	.word	0x0016e35f
 80053cc:	feced300 	.word	0xfeced300
 80053d0:	001b773f 	.word	0x001b773f
 80053d4:	feb35bc0 	.word	0xfeb35bc0
 80053d8:	002191bf 	.word	0x002191bf
 80053dc:	0038751f 	.word	0x0038751f
 80053e0:	fe5954e0 	.word	0xfe5954e0
 80053e4:	00419cdf 	.word	0x00419cdf

080053e8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 80053e8:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 80053ec:	2a01      	cmp	r2, #1
{
 80053ee:	b510      	push	{r4, lr}
 80053f0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80053f2:	d00b      	beq.n	800540c <HAL_PCD_SetAddress+0x24>
 80053f4:	2201      	movs	r2, #1
 80053f6:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 80053fa:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 80053fe:	6800      	ldr	r0, [r0, #0]
 8005400:	f002 fc08 	bl	8007c14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8005404:	2000      	movs	r0, #0
 8005406:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800540a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800540c:	2002      	movs	r0, #2
}
 800540e:	bd10      	pop	{r4, pc}

08005410 <HAL_PCD_EP_Open>:
{
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8005414:	b248      	sxtb	r0, r1
 8005416:	2800      	cmp	r0, #0
 8005418:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 800541c:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005420:	bfb5      	itete	lt
 8005422:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005426:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800542a:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800542c:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8005430:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8005432:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8005434:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8005436:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8005438:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 800543c:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 800543e:	2b01      	cmp	r3, #1
 8005440:	d009      	beq.n	8005456 <HAL_PCD_EP_Open+0x46>
 8005442:	2301      	movs	r3, #1
 8005444:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	f002 f9e0 	bl	800780e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800544e:	2000      	movs	r0, #0
 8005450:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8005454:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8005456:	2002      	movs	r0, #2
}
 8005458:	bd70      	pop	{r4, r5, r6, pc}

0800545a <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 800545a:	b24b      	sxtb	r3, r1
 800545c:	2b00      	cmp	r3, #0
{  
 800545e:	b510      	push	{r4, lr}
 8005460:	f04f 021c 	mov.w	r2, #28
 8005464:	4604      	mov	r4, r0
 8005466:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800546a:	bfb5      	itete	lt
 800546c:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005470:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005474:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005476:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 800547a:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800547c:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800547e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8005480:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8005484:	2b01      	cmp	r3, #1
 8005486:	d009      	beq.n	800549c <HAL_PCD_EP_Close+0x42>
 8005488:	2301      	movs	r3, #1
 800548a:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	f002 f9fc 	bl	800788c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8005494:	2000      	movs	r0, #0
 8005496:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800549a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800549c:	2002      	movs	r0, #2
}
 800549e:	bd10      	pop	{r4, pc}

080054a0 <HAL_PCD_EP_Receive>:
{
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4604      	mov	r4, r0
 80054a4:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80054a8:	201c      	movs	r0, #28
 80054aa:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 80054ae:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 80054b8:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 80054bc:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 80054c0:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 80054c4:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 80054c6:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 80054ca:	d011      	beq.n	80054f0 <HAL_PCD_EP_Receive+0x50>
 80054cc:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80054ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80054d0:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80054d2:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 80054d6:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80054da:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 80054dc:	b92e      	cbnz	r6, 80054ea <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80054de:	f002 fabb 	bl	8007a58 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80054ea:	f002 f9fd 	bl	80078e8 <USB_EPStartXfer>
 80054ee:	e7f8      	b.n	80054e2 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 80054f0:	2002      	movs	r0, #2
}
 80054f2:	bd70      	pop	{r4, r5, r6, pc}

080054f4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80054f4:	231c      	movs	r3, #28
 80054f6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80054fa:	fb03 0101 	mla	r1, r3, r1, r0
}
 80054fe:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 8005502:	4770      	bx	lr

08005504 <HAL_PCD_EP_Transmit>:
{
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4604      	mov	r4, r0
 8005508:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 800550c:	201c      	movs	r0, #28
 800550e:	fb00 4506 	mla	r5, r0, r6, r4
 8005512:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8005514:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 8005516:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 800551a:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 8005522:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8005524:	429a      	cmp	r2, r3
  ep->is_in = 1;
 8005526:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 800552a:	d010      	beq.n	800554e <HAL_PCD_EP_Transmit+0x4a>
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005532:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 800553a:	b92e      	cbnz	r6, 8005548 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800553c:	f002 fa8c 	bl	8007a58 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8005540:	2000      	movs	r0, #0
 8005542:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005546:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8005548:	f002 f9ce 	bl	80078e8 <USB_EPStartXfer>
 800554c:	e7f8      	b.n	8005540 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 800554e:	2002      	movs	r0, #2
}
 8005550:	bd70      	pop	{r4, r5, r6, pc}

08005552 <HAL_PCD_EP_SetStall>:
{
 8005552:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8005554:	b24b      	sxtb	r3, r1
 8005556:	2b00      	cmp	r3, #0
 8005558:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800555c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005560:	bfb5      	itete	lt
 8005562:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005566:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800556a:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 800556c:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8005570:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005572:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8005574:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8005576:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8005578:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800557a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 800557c:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005580:	4293      	cmp	r3, r2
{
 8005582:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005584:	d00f      	beq.n	80055a6 <HAL_PCD_EP_SetStall+0x54>
 8005586:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	f002 fae9 	bl	8007b62 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8005590:	b92d      	cbnz	r5, 800559e <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005592:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005596:	7c21      	ldrb	r1, [r4, #16]
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	f002 fbb0 	bl	8007cfe <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800559e:	2000      	movs	r0, #0
 80055a0:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80055a6:	2002      	movs	r0, #2
}
 80055a8:	bd38      	pop	{r3, r4, r5, pc}

080055aa <HAL_PCD_EP_ClrStall>:
{
 80055aa:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80055ac:	b24b      	sxtb	r3, r1
 80055ae:	2b00      	cmp	r3, #0
{
 80055b0:	4605      	mov	r5, r0
 80055b2:	f04f 021c 	mov.w	r2, #28
 80055b6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80055ba:	bfb5      	itete	lt
 80055bc:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80055c0:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80055c4:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80055c6:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80055ca:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80055cc:	2400      	movs	r4, #0
 80055ce:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80055d0:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80055d2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80055d4:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d009      	beq.n	80055f0 <HAL_PCD_EP_ClrStall+0x46>
 80055dc:	2301      	movs	r3, #1
 80055de:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 80055e2:	6828      	ldr	r0, [r5, #0]
 80055e4:	f002 fadc 	bl	8007ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80055e8:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 80055ec:	4620      	mov	r0, r4
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80055f0:	2002      	movs	r0, #2
}
 80055f2:	bd38      	pop	{r3, r4, r5, pc}

080055f4 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 80055f4:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80055f8:	2b01      	cmp	r3, #1
{
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80055fe:	d011      	beq.n	8005624 <HAL_PCD_EP_Flush+0x30>
 8005600:	2301      	movs	r3, #1
 8005602:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 8005606:	060b      	lsls	r3, r1, #24
 8005608:	d508      	bpl.n	800561c <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 800560a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	f002 f8d4 	bl	80077bc <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8005614:	2000      	movs	r0, #0
 8005616:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800561a:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 800561c:	6800      	ldr	r0, [r0, #0]
 800561e:	f002 f8df 	bl	80077e0 <USB_FlushRxFifo>
 8005622:	e7f7      	b.n	8005614 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8005624:	2002      	movs	r0, #2
}
 8005626:	bd10      	pop	{r4, pc}

08005628 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005628:	6800      	ldr	r0, [r0, #0]
{
 800562a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800562c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800562e:	b921      	cbnz	r1, 800563a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8005630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005634:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 8005636:	2000      	movs	r0, #0
 8005638:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800563a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 800563c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800563e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 8005642:	1e4e      	subs	r6, r1, #1
 8005644:	b2ec      	uxtb	r4, r5
 8005646:	42b4      	cmp	r4, r6
 8005648:	f105 0501 	add.w	r5, r5, #1
 800564c:	db06      	blt.n	800565c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 800564e:	313f      	adds	r1, #63	; 0x3f
 8005650:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005658:	6043      	str	r3, [r0, #4]
 800565a:	e7ec      	b.n	8005636 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 800565c:	3440      	adds	r4, #64	; 0x40
 800565e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005662:	6864      	ldr	r4, [r4, #4]
 8005664:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005668:	e7ec      	b.n	8005644 <HAL_PCDEx_SetTxFiFo+0x1c>

0800566a <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800566a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800566c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800566e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8005670:	4770      	bx	lr

08005672 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005672:	6802      	ldr	r2, [r0, #0]
{
 8005674:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 8005676:	2101      	movs	r1, #1
 8005678:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 800567c:	2000      	movs	r0, #0
 800567e:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005682:	6993      	ldr	r3, [r2, #24]
 8005684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005688:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800568a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800568c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005690:	f043 0303 	orr.w	r3, r3, #3
 8005694:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 8005696:	4770      	bx	lr

08005698 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005698:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 800569a:	2301      	movs	r3, #1
 800569c:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80056a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a6:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	4770      	bx	lr

080056ac <HAL_PCDEx_LPM_Callback>:
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056b0:	4b02      	ldr	r3, [pc, #8]	; (80056bc <HAL_PWREx_GetVoltageRange+0xc>)
 80056b2:	6818      	ldr	r0, [r3, #0]
}
 80056b4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40007000 	.word	0x40007000

080056c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056c2:	4d1e      	ldr	r5, [pc, #120]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80056c4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80056c6:	00da      	lsls	r2, r3, #3
{
 80056c8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056ca:	d518      	bpl.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056cc:	f7ff fff0 	bl	80056b0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80056d4:	d123      	bne.n	800571e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056d6:	2c80      	cmp	r4, #128	; 0x80
 80056d8:	d929      	bls.n	800572e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056da:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056dc:	bf8c      	ite	hi
 80056de:	2002      	movhi	r0, #2
 80056e0:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80056e2:	4a17      	ldr	r2, [pc, #92]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80056e4:	6813      	ldr	r3, [r2, #0]
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	4303      	orrs	r3, r0
 80056ec:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80056f4:	1a18      	subs	r0, r3, r0
 80056f6:	bf18      	it	ne
 80056f8:	2001      	movne	r0, #1
 80056fa:	b003      	add	sp, #12
 80056fc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005704:	65ab      	str	r3, [r5, #88]	; 0x58
 8005706:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005710:	f7ff ffce 	bl	80056b0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005714:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571a:	65ab      	str	r3, [r5, #88]	; 0x58
 800571c:	e7d8      	b.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800571e:	2c80      	cmp	r4, #128	; 0x80
 8005720:	d807      	bhi.n	8005732 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8005722:	d008      	beq.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8005724:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8005728:	4258      	negs	r0, r3
 800572a:	4158      	adcs	r0, r3
 800572c:	e7d9      	b.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800572e:	2000      	movs	r0, #0
 8005730:	e7d7      	b.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005732:	2003      	movs	r0, #3
 8005734:	e7d5      	b.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005736:	2002      	movs	r0, #2
 8005738:	e7d3      	b.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000
 8005740:	40022000 	.word	0x40022000

08005744 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005744:	4b46      	ldr	r3, [pc, #280]	; (8005860 <HAL_RCC_GetSysClockFreq+0x11c>)
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	f012 0f0c 	tst.w	r2, #12
{
 800574c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800574e:	d009      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005756:	2a0c      	cmp	r2, #12
 8005758:	d148      	bne.n	80057ec <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	f002 0203 	and.w	r2, r2, #3
 8005760:	2a01      	cmp	r2, #1
 8005762:	d143      	bne.n	80057ec <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	0712      	lsls	r2, r2, #28
 8005768:	d437      	bmi.n	80057da <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800576a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800576e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005772:	fa91 f1a1 	rbit	r1, r1
 8005776:	fab1 f181 	clz	r1, r1
 800577a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800577e:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 8005780:	4938      	ldr	r1, [pc, #224]	; (8005864 <HAL_RCC_GetSysClockFreq+0x120>)
 8005782:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005786:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 8005788:	f012 0f0c 	tst.w	r2, #12
 800578c:	bf0c      	ite	eq
 800578e:	4620      	moveq	r0, r4
 8005790:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	f002 020c 	and.w	r2, r2, #12
 8005798:	2a0c      	cmp	r2, #12
 800579a:	d154      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800579c:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800579e:	68d8      	ldr	r0, [r3, #12]
 80057a0:	2170      	movs	r1, #112	; 0x70
 80057a2:	fa91 f1a1 	rbit	r1, r1
 80057a6:	fab1 f181 	clz	r1, r1
 80057aa:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80057ae:	40c8      	lsrs	r0, r1
 80057b0:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80057b2:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 80057b6:	2802      	cmp	r0, #2
 80057b8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80057bc:	d028      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0xcc>
 80057be:	2803      	cmp	r0, #3
 80057c0:	d042      	beq.n	8005848 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80057c2:	68d8      	ldr	r0, [r3, #12]
 80057c4:	fa92 f2a2 	rbit	r2, r2
 80057c8:	fab2 f282 	clz	r2, r2
 80057cc:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80057d0:	40d0      	lsrs	r0, r2
 80057d2:	fbb4 f1f1 	udiv	r1, r4, r1
 80057d6:	4348      	muls	r0, r1
      break;
 80057d8:	e027      	b.n	800582a <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	21f0      	movs	r1, #240	; 0xf0
 80057de:	fa91 f1a1 	rbit	r1, r1
 80057e2:	fab1 f181 	clz	r1, r1
 80057e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80057ea:	e7c8      	b.n	800577e <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	f002 020c 	and.w	r2, r2, #12
 80057f2:	2a04      	cmp	r2, #4
 80057f4:	d007      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	f002 020c 	and.w	r2, r2, #12
 80057fc:	2a08      	cmp	r2, #8
 80057fe:	d104      	bne.n	800580a <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8005800:	4819      	ldr	r0, [pc, #100]	; (8005868 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005802:	2400      	movs	r4, #0
 8005804:	e7c5      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8005806:	4819      	ldr	r0, [pc, #100]	; (800586c <HAL_RCC_GetSysClockFreq+0x128>)
 8005808:	e7fb      	b.n	8005802 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 800580a:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800580c:	4604      	mov	r4, r0
 800580e:	e7c0      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005810:	68d8      	ldr	r0, [r3, #12]
 8005812:	fa92 f2a2 	rbit	r2, r2
 8005816:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800581a:	fab2 f282 	clz	r2, r2
 800581e:	fa20 f202 	lsr.w	r2, r0, r2
 8005822:	4812      	ldr	r0, [pc, #72]	; (800586c <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005824:	fbb0 f0f1 	udiv	r0, r0, r1
 8005828:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005830:	fa92 f2a2 	rbit	r2, r2
 8005834:	fab2 f282 	clz	r2, r2
 8005838:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800583c:	40d3      	lsrs	r3, r2
 800583e:	3301      	adds	r3, #1
 8005840:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005842:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005846:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005848:	68d8      	ldr	r0, [r3, #12]
 800584a:	fa92 f2a2 	rbit	r2, r2
 800584e:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005852:	fab2 f282 	clz	r2, r2
 8005856:	fa20 f202 	lsr.w	r2, r0, r2
 800585a:	4803      	ldr	r0, [pc, #12]	; (8005868 <HAL_RCC_GetSysClockFreq+0x124>)
 800585c:	e7e2      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0xe0>
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000
 8005864:	0800b9c4 	.word	0x0800b9c4
 8005868:	007a1200 	.word	0x007a1200
 800586c:	00f42400 	.word	0x00f42400

08005870 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005870:	6803      	ldr	r3, [r0, #0]
{
 8005872:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005876:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005878:	06d8      	lsls	r0, r3, #27
 800587a:	d541      	bpl.n	8005900 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800587c:	4ca5      	ldr	r4, [pc, #660]	; (8005b14 <HAL_RCC_OscConfig+0x2a4>)
 800587e:	68a3      	ldr	r3, [r4, #8]
 8005880:	f013 0f0c 	tst.w	r3, #12
 8005884:	d166      	bne.n	8005954 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	0799      	lsls	r1, r3, #30
 800588a:	d505      	bpl.n	8005898 <HAL_RCC_OscConfig+0x28>
 800588c:	69ab      	ldr	r3, [r5, #24]
 800588e:	b91b      	cbnz	r3, 8005898 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8005890:	2001      	movs	r0, #1
}
 8005892:	b002      	add	sp, #8
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	6a28      	ldr	r0, [r5, #32]
 800589c:	071a      	lsls	r2, r3, #28
 800589e:	bf56      	itet	pl
 80058a0:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80058a4:	6823      	ldrmi	r3, [r4, #0]
 80058a6:	091b      	lsrpl	r3, r3, #4
 80058a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ac:	4283      	cmp	r3, r0
 80058ae:	d23c      	bcs.n	800592a <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058b0:	f7ff ff06 	bl	80056c0 <RCC_SetFlashLatencyFromMSIRange>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d1eb      	bne.n	8005890 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f043 0308 	orr.w	r3, r3, #8
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	6a2a      	ldr	r2, [r5, #32]
 80058c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c8:	4313      	orrs	r3, r2
 80058ca:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	69ea      	ldr	r2, [r5, #28]
 80058d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80058d8:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80058da:	f7ff ff33 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	22f0      	movs	r2, #240	; 0xf0
 80058e2:	fa92 f2a2 	rbit	r2, r2
 80058e6:	fab2 f282 	clz	r2, r2
 80058ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ee:	40d3      	lsrs	r3, r2
 80058f0:	4a89      	ldr	r2, [pc, #548]	; (8005b18 <HAL_RCC_OscConfig+0x2a8>)
 80058f2:	5cd3      	ldrb	r3, [r2, r3]
 80058f4:	40d8      	lsrs	r0, r3
 80058f6:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80058fa:	2000      	movs	r0, #0
 80058fc:	f7fe feb2 	bl	8004664 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	07de      	lsls	r6, r3, #31
 8005904:	d45b      	bmi.n	80059be <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	079c      	lsls	r4, r3, #30
 800590a:	f100 80a3 	bmi.w	8005a54 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	0719      	lsls	r1, r3, #28
 8005912:	f100 80e7 	bmi.w	8005ae4 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	075a      	lsls	r2, r3, #29
 800591a:	f100 8115 	bmi.w	8005b48 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800591e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005920:	2a00      	cmp	r2, #0
 8005922:	f040 817c 	bne.w	8005c1e <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8005926:	2000      	movs	r0, #0
 8005928:	e7b3      	b.n	8005892 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005938:	4303      	orrs	r3, r0
 800593a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800593c:	6863      	ldr	r3, [r4, #4]
 800593e:	69ea      	ldr	r2, [r5, #28]
 8005940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005948:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800594a:	f7ff feb9 	bl	80056c0 <RCC_SetFlashLatencyFromMSIRange>
 800594e:	2800      	cmp	r0, #0
 8005950:	d0c3      	beq.n	80058da <HAL_RCC_OscConfig+0x6a>
 8005952:	e79d      	b.n	8005890 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005954:	69ab      	ldr	r3, [r5, #24]
 8005956:	b313      	cbz	r3, 800599e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005960:	f7fe fea8 	bl	80046b4 <HAL_GetTick>
 8005964:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	079b      	lsls	r3, r3, #30
 800596a:	d511      	bpl.n	8005990 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	f043 0308 	orr.w	r3, r3, #8
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	6a2a      	ldr	r2, [r5, #32]
 8005978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597c:	4313      	orrs	r3, r2
 800597e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	69ea      	ldr	r2, [r5, #28]
 8005984:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	e7b7      	b.n	8005900 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005990:	f7fe fe90 	bl	80046b4 <HAL_GetTick>
 8005994:	1b80      	subs	r0, r0, r6
 8005996:	2802      	cmp	r0, #2
 8005998:	d9e5      	bls.n	8005966 <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 800599a:	2003      	movs	r0, #3
 800599c:	e779      	b.n	8005892 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80059a6:	f7fe fe85 	bl	80046b4 <HAL_GetTick>
 80059aa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	079f      	lsls	r7, r3, #30
 80059b0:	d5a6      	bpl.n	8005900 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059b2:	f7fe fe7f 	bl	80046b4 <HAL_GetTick>
 80059b6:	1b80      	subs	r0, r0, r6
 80059b8:	2802      	cmp	r0, #2
 80059ba:	d9f7      	bls.n	80059ac <HAL_RCC_OscConfig+0x13c>
 80059bc:	e7ed      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80059be:	4c55      	ldr	r4, [pc, #340]	; (8005b14 <HAL_RCC_OscConfig+0x2a4>)
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d009      	beq.n	80059de <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d10b      	bne.n	80059ec <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059d4:	68e3      	ldr	r3, [r4, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	0398      	lsls	r0, r3, #14
 80059e2:	d590      	bpl.n	8005906 <HAL_RCC_OscConfig+0x96>
 80059e4:	686b      	ldr	r3, [r5, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d18d      	bne.n	8005906 <HAL_RCC_OscConfig+0x96>
 80059ea:	e751      	b.n	8005890 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ec:	686b      	ldr	r3, [r5, #4]
 80059ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f2:	d110      	bne.n	8005a16 <HAL_RCC_OscConfig+0x1a6>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80059fc:	f7fe fe5a 	bl	80046b4 <HAL_GetTick>
 8005a00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	0399      	lsls	r1, r3, #14
 8005a06:	f53f af7e 	bmi.w	8005906 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a0a:	f7fe fe53 	bl	80046b4 <HAL_GetTick>
 8005a0e:	1b80      	subs	r0, r0, r6
 8005a10:	2864      	cmp	r0, #100	; 0x64
 8005a12:	d9f6      	bls.n	8005a02 <HAL_RCC_OscConfig+0x192>
 8005a14:	e7c1      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a1a:	d104      	bne.n	8005a26 <HAL_RCC_OscConfig+0x1b6>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	e7e6      	b.n	80059f4 <HAL_RCC_OscConfig+0x184>
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a2c:	6022      	str	r2, [r4, #0]
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a34:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e0      	bne.n	80059fc <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8005a3a:	f7fe fe3b 	bl	80046b4 <HAL_GetTick>
 8005a3e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	039a      	lsls	r2, r3, #14
 8005a44:	f57f af5f 	bpl.w	8005906 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fe fe34 	bl	80046b4 <HAL_GetTick>
 8005a4c:	1b80      	subs	r0, r0, r6
 8005a4e:	2864      	cmp	r0, #100	; 0x64
 8005a50:	d9f6      	bls.n	8005a40 <HAL_RCC_OscConfig+0x1d0>
 8005a52:	e7a2      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8005a54:	4c2f      	ldr	r4, [pc, #188]	; (8005b14 <HAL_RCC_OscConfig+0x2a4>)
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a60:	68a3      	ldr	r3, [r4, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d119      	bne.n	8005a9e <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a6a:	68e3      	ldr	r3, [r4, #12]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d114      	bne.n	8005a9e <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	055b      	lsls	r3, r3, #21
 8005a78:	d503      	bpl.n	8005a82 <HAL_RCC_OscConfig+0x212>
 8005a7a:	68eb      	ldr	r3, [r5, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f43f af07 	beq.w	8005890 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a82:	6861      	ldr	r1, [r4, #4]
 8005a84:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8005a88:	fa93 f3a3 	rbit	r3, r3
 8005a8c:	fab3 f283 	clz	r2, r3
 8005a90:	692b      	ldr	r3, [r5, #16]
 8005a92:	4093      	lsls	r3, r2
 8005a94:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	e737      	b.n	800590e <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a9e:	68eb      	ldr	r3, [r5, #12]
 8005aa0:	b17b      	cbz	r3, 8005ac2 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005aaa:	f7fe fe03 	bl	80046b4 <HAL_GetTick>
 8005aae:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	055f      	lsls	r7, r3, #21
 8005ab4:	d4e5      	bmi.n	8005a82 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab6:	f7fe fdfd 	bl	80046b4 <HAL_GetTick>
 8005aba:	1b80      	subs	r0, r0, r6
 8005abc:	2802      	cmp	r0, #2
 8005abe:	d9f7      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x240>
 8005ac0:	e76b      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005aca:	f7fe fdf3 	bl	80046b4 <HAL_GetTick>
 8005ace:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	0558      	lsls	r0, r3, #21
 8005ad4:	f57f af1b 	bpl.w	800590e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7fe fdec 	bl	80046b4 <HAL_GetTick>
 8005adc:	1b80      	subs	r0, r0, r6
 8005ade:	2802      	cmp	r0, #2
 8005ae0:	d9f6      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x260>
 8005ae2:	e75a      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ae4:	696b      	ldr	r3, [r5, #20]
 8005ae6:	4c0b      	ldr	r4, [pc, #44]	; (8005b14 <HAL_RCC_OscConfig+0x2a4>)
 8005ae8:	b1d3      	cbz	r3, 8005b20 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8005aea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005af6:	f7fe fddd 	bl	80046b4 <HAL_GetTick>
 8005afa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8005afc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005b00:	079b      	lsls	r3, r3, #30
 8005b02:	f53f af08 	bmi.w	8005916 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b06:	f7fe fdd5 	bl	80046b4 <HAL_GetTick>
 8005b0a:	1b80      	subs	r0, r0, r6
 8005b0c:	2802      	cmp	r0, #2
 8005b0e:	d9f5      	bls.n	8005afc <HAL_RCC_OscConfig+0x28c>
 8005b10:	e743      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	0800b9a9 	.word	0x0800b9a9
 8005b1c:	20000034 	.word	0x20000034
      __HAL_RCC_LSI_DISABLE();
 8005b20:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005b2c:	f7fe fdc2 	bl	80046b4 <HAL_GetTick>
 8005b30:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8005b32:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005b36:	079f      	lsls	r7, r3, #30
 8005b38:	f57f aeed 	bpl.w	8005916 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b3c:	f7fe fdba 	bl	80046b4 <HAL_GetTick>
 8005b40:	1b80      	subs	r0, r0, r6
 8005b42:	2802      	cmp	r0, #2
 8005b44:	d9f5      	bls.n	8005b32 <HAL_RCC_OscConfig+0x2c2>
 8005b46:	e728      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b48:	4c66      	ldr	r4, [pc, #408]	; (8005ce4 <HAL_RCC_OscConfig+0x474>)
 8005b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b4c:	00de      	lsls	r6, r3, #3
 8005b4e:	d427      	bmi.n	8005ba0 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005b62:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b64:	4e60      	ldr	r6, [pc, #384]	; (8005ce8 <HAL_RCC_OscConfig+0x478>)
 8005b66:	6833      	ldr	r3, [r6, #0]
 8005b68:	05d8      	lsls	r0, r3, #23
 8005b6a:	d51b      	bpl.n	8005ba4 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b6c:	68ab      	ldr	r3, [r5, #8]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d129      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x356>
 8005b72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005b7e:	f7fe fd99 	bl	80046b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005b86:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8005b88:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b8c:	079a      	lsls	r2, r3, #30
 8005b8e:	d540      	bpl.n	8005c12 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8005b90:	2f00      	cmp	r7, #0
 8005b92:	f43f aec4 	beq.w	800591e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b9e:	e6be      	b.n	800591e <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8005ba0:	2700      	movs	r7, #0
 8005ba2:	e7df      	b.n	8005b64 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005baa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005bac:	f7fe fd82 	bl	80046b4 <HAL_GetTick>
 8005bb0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bb2:	6833      	ldr	r3, [r6, #0]
 8005bb4:	05d9      	lsls	r1, r3, #23
 8005bb6:	d4d9      	bmi.n	8005b6c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb8:	f7fe fd7c 	bl	80046b4 <HAL_GetTick>
 8005bbc:	eba0 0008 	sub.w	r0, r0, r8
 8005bc0:	2802      	cmp	r0, #2
 8005bc2:	d9f6      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x342>
 8005bc4:	e6e9      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d106      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x368>
 8005bca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005bd6:	e7cc      	b.n	8005b72 <HAL_RCC_OscConfig+0x302>
 8005bd8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8005be4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005be8:	f022 0204 	bic.w	r2, r2, #4
 8005bec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1c4      	bne.n	8005b7e <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8005bf4:	f7fe fd5e 	bl	80046b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005bfc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8005bfe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c02:	079b      	lsls	r3, r3, #30
 8005c04:	d5c4      	bpl.n	8005b90 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c06:	f7fe fd55 	bl	80046b4 <HAL_GetTick>
 8005c0a:	1b80      	subs	r0, r0, r6
 8005c0c:	4540      	cmp	r0, r8
 8005c0e:	d9f6      	bls.n	8005bfe <HAL_RCC_OscConfig+0x38e>
 8005c10:	e6c3      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fe fd4f 	bl	80046b4 <HAL_GetTick>
 8005c16:	1b80      	subs	r0, r0, r6
 8005c18:	4540      	cmp	r0, r8
 8005c1a:	d9b5      	bls.n	8005b88 <HAL_RCC_OscConfig+0x318>
 8005c1c:	e6bd      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c1e:	4c31      	ldr	r4, [pc, #196]	; (8005ce4 <HAL_RCC_OscConfig+0x474>)
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	f43f ae32 	beq.w	8005890 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8005c2c:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c2e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c34:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c36:	d137      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8005c38:	f7fe fd3c 	bl	80046b4 <HAL_GetTick>
 8005c3c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	019f      	lsls	r7, r3, #6
 8005c42:	d42b      	bmi.n	8005c9c <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c44:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005c46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005c48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c4c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005c54:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005c56:	0912      	lsrs	r2, r2, #4
 8005c58:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005c5c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005c5e:	0852      	lsrs	r2, r2, #1
 8005c60:	3a01      	subs	r2, #1
 8005c62:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8005c66:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005c68:	0852      	lsrs	r2, r2, #1
 8005c6a:	3a01      	subs	r2, #1
 8005c6c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005c70:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c78:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c80:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005c82:	f7fe fd17 	bl	80046b4 <HAL_GetTick>
 8005c86:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	0198      	lsls	r0, r3, #6
 8005c8c:	f53f ae4b 	bmi.w	8005926 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fe fd10 	bl	80046b4 <HAL_GetTick>
 8005c94:	1b40      	subs	r0, r0, r5
 8005c96:	2802      	cmp	r0, #2
 8005c98:	d9f6      	bls.n	8005c88 <HAL_RCC_OscConfig+0x418>
 8005c9a:	e67e      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fe fd0a 	bl	80046b4 <HAL_GetTick>
 8005ca0:	1b80      	subs	r0, r0, r6
 8005ca2:	2802      	cmp	r0, #2
 8005ca4:	d9cb      	bls.n	8005c3e <HAL_RCC_OscConfig+0x3ce>
 8005ca6:	e678      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	0119      	lsls	r1, r3, #4
 8005cac:	d406      	bmi.n	8005cbc <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8005cae:	6823      	ldr	r3, [r4, #0]
           && 
 8005cb0:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cb2:	bf5e      	ittt	pl
 8005cb4:	68e3      	ldrpl	r3, [r4, #12]
 8005cb6:	f023 0303 	bicpl.w	r3, r3, #3
 8005cba:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005cbc:	68e3      	ldr	r3, [r4, #12]
 8005cbe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005cc8:	f7fe fcf4 	bl	80046b4 <HAL_GetTick>
 8005ccc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	019b      	lsls	r3, r3, #6
 8005cd2:	f57f ae28 	bpl.w	8005926 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd6:	f7fe fced 	bl	80046b4 <HAL_GetTick>
 8005cda:	1b40      	subs	r0, r0, r5
 8005cdc:	2802      	cmp	r0, #2
 8005cde:	d9f6      	bls.n	8005cce <HAL_RCC_OscConfig+0x45e>
 8005ce0:	e65b      	b.n	800599a <HAL_RCC_OscConfig+0x12a>
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40007000 	.word	0x40007000

08005cec <HAL_RCC_GetHCLKFreq>:
}
 8005cec:	4b01      	ldr	r3, [pc, #4]	; (8005cf4 <HAL_RCC_GetHCLKFreq+0x8>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000034 	.word	0x20000034

08005cf8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005cf8:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	fa92 f2a2 	rbit	r2, r2
 8005d04:	fab2 f282 	clz	r2, r2
 8005d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d0c:	40d3      	lsrs	r3, r2
 8005d0e:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d10:	5cd3      	ldrb	r3, [r2, r3]
 8005d12:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005d14:	6810      	ldr	r0, [r2, #0]
}
 8005d16:	40d8      	lsrs	r0, r3
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	0800b9b9 	.word	0x0800b9b9
 8005d24:	20000034 	.word	0x20000034

08005d28 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	fa92 f2a2 	rbit	r2, r2
 8005d34:	fab2 f282 	clz	r2, r2
 8005d38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d3c:	40d3      	lsrs	r3, r2
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d40:	5cd3      	ldrb	r3, [r2, r3]
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005d44:	6810      	ldr	r0, [r2, #0]
}
 8005d46:	40d8      	lsrs	r0, r3
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	0800b9b9 	.word	0x0800b9b9
 8005d54:	20000034 	.word	0x20000034

08005d58 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005d58:	4a02      	ldr	r2, [pc, #8]	; (8005d64 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	f043 0304 	orr.w	r3, r3, #4
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	4770      	bx	lr
 8005d64:	40021000 	.word	0x40021000

08005d68 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005d68:	6803      	ldr	r3, [r0, #0]
 8005d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005d70:	d0fb      	beq.n	8005d6a <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d74:	0752      	lsls	r2, r2, #29
 8005d76:	d503      	bpl.n	8005d80 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005d78:	2204      	movs	r2, #4
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8005d7c:	2003      	movs	r0, #3
 8005d7e:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8005d80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005d82:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005d86:	bf15      	itete	ne
 8005d88:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d8a:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005d8e:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d90:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 8005d92:	4770      	bx	lr

08005d94 <SD_CmdResp1Error>:
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005d98:	6800      	ldr	r0, [r0, #0]
{
 8005d9a:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005d9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005d9e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005da2:	d0fb      	beq.n	8005d9c <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005da4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005da6:	075b      	lsls	r3, r3, #29
 8005da8:	d503      	bpl.n	8005db2 <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005daa:	2304      	movs	r3, #4
 8005dac:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8005dae:	2003      	movs	r0, #3
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8005db2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005db4:	f014 0401 	ands.w	r4, r4, #1
 8005db8:	d003      	beq.n	8005dc2 <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005dba:	2301      	movs	r3, #1
 8005dbc:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8005dc2:	f001 fc0c 	bl	80075de <SDMMC_GetCommandResponse>
 8005dc6:	42b0      	cmp	r0, r6
 8005dc8:	d001      	beq.n	8005dce <SD_CmdResp1Error+0x3a>
    return errorstate;
 8005dca:	2010      	movs	r0, #16
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dce:	6828      	ldr	r0, [r5, #0]
 8005dd0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005dd4:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f001 fc04 	bl	80075e4 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <SD_CmdResp1Error+0xe8>)
 8005dde:	4003      	ands	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0ec      	beq.n	8005dbe <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8005de4:	2800      	cmp	r0, #0
 8005de6:	db27      	blt.n	8005e38 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8005de8:	0045      	lsls	r5, r0, #1
 8005dea:	d427      	bmi.n	8005e3c <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8005dec:	0084      	lsls	r4, r0, #2
 8005dee:	d427      	bmi.n	8005e40 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8005df0:	00c1      	lsls	r1, r0, #3
 8005df2:	d427      	bmi.n	8005e44 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8005df4:	0102      	lsls	r2, r0, #4
 8005df6:	d427      	bmi.n	8005e48 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8005df8:	0143      	lsls	r3, r0, #5
 8005dfa:	d427      	bmi.n	8005e4c <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8005dfc:	01c6      	lsls	r6, r0, #7
 8005dfe:	d427      	bmi.n	8005e50 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8005e00:	0205      	lsls	r5, r0, #8
 8005e02:	d427      	bmi.n	8005e54 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8005e04:	0244      	lsls	r4, r0, #9
 8005e06:	d4e0      	bmi.n	8005dca <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8005e08:	0281      	lsls	r1, r0, #10
 8005e0a:	d425      	bmi.n	8005e58 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8005e0c:	02c2      	lsls	r2, r0, #11
 8005e0e:	d425      	bmi.n	8005e5c <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8005e10:	0303      	lsls	r3, r0, #12
 8005e12:	d425      	bmi.n	8005e60 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8005e14:	0346      	lsls	r6, r0, #13
 8005e16:	d425      	bmi.n	8005e64 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8005e18:	0385      	lsls	r5, r0, #14
 8005e1a:	d425      	bmi.n	8005e68 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8005e1c:	03c4      	lsls	r4, r0, #15
 8005e1e:	d425      	bmi.n	8005e6c <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8005e20:	0401      	lsls	r1, r0, #16
 8005e22:	d425      	bmi.n	8005e70 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8005e24:	0442      	lsls	r2, r0, #17
 8005e26:	d425      	bmi.n	8005e74 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8005e28:	0483      	lsls	r3, r0, #18
 8005e2a:	d425      	bmi.n	8005e78 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8005e2c:	f010 0f08 	tst.w	r0, #8
 8005e30:	bf0c      	ite	eq
 8005e32:	2000      	moveq	r0, #0
 8005e34:	201a      	movne	r0, #26
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8005e38:	201c      	movs	r0, #28
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8005e3c:	2009      	movs	r0, #9
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8005e40:	200a      	movs	r0, #10
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8005e44:	200b      	movs	r0, #11
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8005e48:	200c      	movs	r0, #12
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8005e4c:	200d      	movs	r0, #13
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8005e50:	200e      	movs	r0, #14
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8005e54:	200f      	movs	r0, #15
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8005e58:	2011      	movs	r0, #17
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 8005e5c:	2012      	movs	r0, #18
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8005e60:	2013      	movs	r0, #19
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8005e64:	2014      	movs	r0, #20
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8005e68:	2015      	movs	r0, #21
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 8005e6c:	2016      	movs	r0, #22
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 8005e70:	2017      	movs	r0, #23
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 8005e74:	2018      	movs	r0, #24
 8005e76:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 8005e78:	2019      	movs	r0, #25
}
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	fdffe008 	.word	0xfdffe008

08005e80 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e84:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8005e86:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005e88:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005e8a:	2240      	movs	r2, #64	; 0x40
{
 8005e8c:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e92:	9306      	str	r3, [sp, #24]
{
 8005e94:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005e9a:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005e9c:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005e9e:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005ea0:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005ea2:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005ea4:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005ea6:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ea8:	f001 fb87 	bl	80075ba <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005eac:	4621      	mov	r1, r4
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7ff ff70 	bl	8005d94 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d138      	bne.n	8005f2c <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005eba:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ebc:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005ebe:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005ec0:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ec2:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005ec4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005ec6:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ec8:	f001 fb77 	bl	80075ba <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7ff ff60 	bl	8005d94 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	bb48      	cbnz	r0, 8005f2c <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005ede:	2330      	movs	r3, #48	; 0x30
 8005ee0:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ee6:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005ee8:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005eea:	a908      	add	r1, sp, #32
 8005eec:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005eee:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8005ef0:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005ef2:	f001 fb81 	bl	80075f8 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8005ef6:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ef8:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005efa:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005efc:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005efe:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f00:	f001 fb5b 	bl	80075ba <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8005f04:	4621      	mov	r1, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff ff44 	bl	8005d94 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	b968      	cbnz	r0, 8005f2c <SD_FindSCR+0xac>
 8005f10:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005f12:	f240 482a 	movw	r8, #1066	; 0x42a
 8005f16:	6830      	ldr	r0, [r6, #0]
 8005f18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f1a:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005f1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005f20:	d008      	beq.n	8005f34 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f22:	0719      	lsls	r1, r3, #28
 8005f24:	d50d      	bpl.n	8005f42 <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005f26:	2308      	movs	r3, #8
 8005f28:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8005f2a:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	b00e      	add	sp, #56	; 0x38
 8005f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005f34:	029b      	lsls	r3, r3, #10
 8005f36:	d5ef      	bpl.n	8005f18 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005f38:	f001 fb34 	bl	80075a4 <SDMMC_ReadFIFO>
 8005f3c:	f847 0f04 	str.w	r0, [r7, #4]!
 8005f40:	e7e9      	b.n	8005f16 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f44:	079a      	lsls	r2, r3, #30
 8005f46:	d502      	bpl.n	8005f4e <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005f48:	2402      	movs	r4, #2
 8005f4a:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 8005f4c:	e7ee      	b.n	8005f2c <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f50:	069b      	lsls	r3, r3, #26
 8005f52:	d503      	bpl.n	8005f5c <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005f54:	2320      	movs	r3, #32
 8005f56:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8005f58:	2406      	movs	r4, #6
 8005f5a:	e7e7      	b.n	8005f2c <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f5c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005f60:	6383      	str	r3, [r0, #56]	; 0x38
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8005f66:	606b      	str	r3, [r5, #4]
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 8005f6c:	602b      	str	r3, [r5, #0]
  return errorstate;
 8005f6e:	e7dd      	b.n	8005f2c <SD_FindSCR+0xac>

08005f70 <HAL_SD_ReadBlocks_DMA>:
{
 8005f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f74:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 8005f76:	6806      	ldr	r6, [r0, #0]
{
 8005f78:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8005f7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 8005f7c:	2f01      	cmp	r7, #1
{
 8005f7e:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8005f86:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8005f88:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 8005f8a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 8005f8c:	bf88      	it	hi
 8005f8e:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8005f90:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005f92:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005f94:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8005f98:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005f9a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 8005f9c:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005f9e:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8005fa2:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005fa4:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8005fa6:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_SD_ReadBlocks_DMA+0xec>)
 8005fa8:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8005faa:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005fac:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005fae:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005fb0:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005fb6:	6813      	ldr	r3, [r2, #0]
 8005fb8:	f023 0310 	bic.w	r3, r3, #16
 8005fbc:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005fbe:	fb05 f307 	mul.w	r3, r5, r7
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8005fca:	f7fe fcb3 	bl	8004934 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005fce:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fd0:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005fd2:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005fd8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fda:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8005fde:	bf04      	itt	eq
 8005fe0:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8005fe4:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005fe8:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fec:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fee:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8005ff4:	bf08      	it	eq
 8005ff6:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8005ffa:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005ffc:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005ffe:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006000:	f001 fadb 	bl	80075ba <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006004:	4631      	mov	r1, r6
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff fec4 	bl	8005d94 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 800600c:	bb10      	cbnz	r0, 8006054 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006014:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006016:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006018:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800601a:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800601c:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800601e:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006020:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006022:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006024:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006026:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006028:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800602a:	f001 fae5 	bl	80075f8 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 800602e:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006030:	bf8c      	ite	hi
 8006032:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006034:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006036:	a901      	add	r1, sp, #4
 8006038:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 800603a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 800603c:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006040:	f001 fabb 	bl	80075ba <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006044:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006046:	bf8c      	ite	hi
 8006048:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 800604a:	2111      	movls	r1, #17
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff fea1 	bl	8005d94 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8006052:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8006054:	b00d      	add	sp, #52	; 0x34
 8006056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800605a:	bf00      	nop
 800605c:	080061d3 	.word	0x080061d3
 8006060:	080061ef 	.word	0x080061ef

08006064 <HAL_SD_WriteBlocks_DMA>:
{
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	b08c      	sub	sp, #48	; 0x30
 800606a:	4617      	mov	r7, r2
 800606c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 800606e:	6802      	ldr	r2, [r0, #0]
{
 8006070:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8006074:	2e01      	cmp	r6, #1
{
 8006076:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 800607e:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006080:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8006082:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8006084:	bf8c      	ite	hi
 8006086:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8006088:	2302      	movls	r3, #2
 800608a:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 800608c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 800608e:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006090:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006094:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006096:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006098:	4b2f      	ldr	r3, [pc, #188]	; (8006158 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 800609a:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 800609e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 80060a0:	4b2e      	ldr	r3, [pc, #184]	; (800615c <HAL_SD_WriteBlocks_DMA+0xf8>)
 80060a2:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060a4:	2310      	movs	r3, #16
 80060a6:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 80060a8:	f8de 3000 	ldr.w	r3, [lr]
 80060ac:	f043 0310 	orr.w	r3, r3, #16
 80060b0:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 80060b4:	fb08 f306 	mul.w	r3, r8, r6
 80060b8:	3280      	adds	r2, #128	; 0x80
 80060ba:	089b      	lsrs	r3, r3, #2
 80060bc:	f7fe fc3a 	bl	8004934 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80060c4:	f043 0308 	orr.w	r3, r3, #8
 80060c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80060ca:	6a23      	ldr	r3, [r4, #32]
 80060cc:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80060ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 80060d2:	bf08      	it	eq
 80060d4:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80060d6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80060d8:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 80060dc:	bf04      	itt	eq
 80060de:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 80060e2:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80060e6:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80060e8:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80060ea:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80060ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80060f0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80060f2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 80060f4:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80060f8:	f001 fa5f 	bl	80075ba <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80060fc:	4629      	mov	r1, r5
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fe48 	bl	8005d94 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006104:	4605      	mov	r5, r0
 8006106:	bb18      	cbnz	r0, 8006150 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8006108:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 800610a:	bf94      	ite	ls
 800610c:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 800610e:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006110:	a901      	add	r1, sp, #4
 8006112:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006114:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006116:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006118:	f001 fa4f 	bl	80075ba <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 800611c:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 800611e:	bf8c      	ite	hi
 8006120:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006122:	2118      	movls	r1, #24
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fe35 	bl	8005d94 <SD_CmdResp1Error>
 800612a:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 800612c:	b980      	cbnz	r0, 8006150 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006134:	2390      	movs	r3, #144	; 0x90
 8006136:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006138:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800613a:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800613c:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 800613e:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006142:	a906      	add	r1, sp, #24
 8006144:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006146:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006148:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800614a:	f001 fa55 	bl	80075f8 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 800614e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8006150:	4628      	mov	r0, r5
 8006152:	b00c      	add	sp, #48	; 0x30
 8006154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006158:	080061fd 	.word	0x080061fd
 800615c:	08006219 	.word	0x08006219

08006160 <HAL_SD_XferCpltCallback>:
 8006160:	4770      	bx	lr

08006162 <HAL_SD_XferErrorCallback>:
 8006162:	4770      	bx	lr

08006164 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006164:	6803      	ldr	r3, [r0, #0]
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	05d2      	lsls	r2, r2, #23
{  
 800616a:	b510      	push	{r4, lr}
 800616c:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 800616e:	d510      	bpl.n	8006192 <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8006170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 800617e:	f7ff ffef 	bl	8006160 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006186:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800618a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800618e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006190:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8006192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006194:	0791      	lsls	r1, r2, #30
 8006196:	d505      	bpl.n	80061a4 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006198:	2202      	movs	r2, #2
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 800619c:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800619e:	f7ff ffe0 	bl	8006162 <HAL_SD_XferErrorCallback>
 80061a2:	e7ee      	b.n	8006182 <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 80061a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a6:	0712      	lsls	r2, r2, #28
 80061a8:	d504      	bpl.n	80061b4 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80061aa:	2208      	movs	r2, #8
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 80061ae:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 80061b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80061b2:	e7f4      	b.n	800619e <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 80061b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b6:	0691      	lsls	r1, r2, #26
 80061b8:	d503      	bpl.n	80061c2 <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80061ba:	2220      	movs	r2, #32
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 80061be:	2306      	movs	r3, #6
 80061c0:	e7f6      	b.n	80061b0 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 80061c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c4:	06d2      	lsls	r2, r2, #27
 80061c6:	d5dc      	bpl.n	8006182 <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 80061c8:	2210      	movs	r2, #16
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 80061cc:	2305      	movs	r3, #5
 80061ce:	e7ef      	b.n	80061b0 <HAL_SD_IRQHandler+0x4c>

080061d0 <HAL_SD_DMA_RxCpltCallback>:
 80061d0:	4770      	bx	lr

080061d2 <SD_DMA_RxCplt>:
{
 80061d2:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80061d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 80061da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0fc      	beq.n	80061da <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 80061e0:	f7fe fbe6 	bl	80049b0 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 80061e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e6:	f7ff fff3 	bl	80061d0 <HAL_SD_DMA_RxCpltCallback>
 80061ea:	bd10      	pop	{r4, pc}

080061ec <HAL_SD_DMA_RxErrorCallback>:
 80061ec:	4770      	bx	lr

080061ee <SD_DMA_RxError>:
{
 80061ee:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 80061f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061f2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80061f4:	f7ff fffa 	bl	80061ec <HAL_SD_DMA_RxErrorCallback>
 80061f8:	bd08      	pop	{r3, pc}

080061fa <HAL_SD_DMA_TxCpltCallback>:
 80061fa:	4770      	bx	lr

080061fc <SD_DMA_TxCplt>:
{
 80061fc:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80061fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006200:	2301      	movs	r3, #1
 8006202:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006204:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0fc      	beq.n	8006204 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 800620a:	f7fe fbd1 	bl	80049b0 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 800620e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006210:	f7ff fff3 	bl	80061fa <HAL_SD_DMA_TxCpltCallback>
 8006214:	bd10      	pop	{r4, pc}

08006216 <HAL_SD_DMA_TxErrorCallback>:
{
 8006216:	4770      	bx	lr

08006218 <SD_DMA_TxError>:
{
 8006218:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 800621a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800621c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800621e:	f7ff fffa 	bl	8006216 <HAL_SD_DMA_TxErrorCallback>
 8006222:	bd08      	pop	{r3, pc}

08006224 <HAL_SD_Get_CardInfo>:
{
 8006224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006228:	6a05      	ldr	r5, [r0, #32]
 800622a:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800622e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006230:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006234:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006236:	0f9a      	lsrs	r2, r3, #30
 8006238:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800623a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800623e:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006240:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006244:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8006246:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800624a:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800624c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006250:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006252:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006254:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8006256:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006258:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800625e:	88cb      	ldrh	r3, [r1, #6]
{
 8006260:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006262:	b29b      	uxth	r3, r3
 8006264:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8006268:	4303      	orrs	r3, r0
 800626a:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800626c:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8006270:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8006272:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006276:	09d8      	lsrs	r0, r3, #7
 8006278:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800627a:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800627e:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006280:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8006284:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006286:	f3c3 1000 	ubfx	r0, r3, #4, #1
 800628a:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800628c:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 800628e:	f04f 0000 	mov.w	r0, #0
 8006292:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006294:	f200 80dc 	bhi.w	8006450 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8006298:	029b      	lsls	r3, r3, #10
 800629a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800629e:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 80062a0:	690b      	ldr	r3, [r1, #16]
 80062a2:	0092      	lsls	r2, r2, #2
 80062a4:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 80062a8:	431a      	orrs	r2, r3
 80062aa:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80062ac:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80062ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80062b0:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80062b4:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80062b6:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80062ba:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80062bc:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80062c0:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80062c2:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80062c6:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80062c8:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80062cc:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80062ce:	0bd3      	lsrs	r3, r2, #15
 80062d0:	f003 0306 	and.w	r3, r3, #6
 80062d4:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80062d6:	7e0d      	ldrb	r5, [r1, #24]
 80062d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80062dc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80062e0:	432a      	orrs	r2, r5
 80062e2:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80062e4:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80062e6:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80062e8:	7a0a      	ldrb	r2, [r1, #8]
 80062ea:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80062ec:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80062ee:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80062f2:	40be      	lsls	r6, r7
 80062f4:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80062f8:	fba6 6702 	umull	r6, r7, r6, r2
 80062fc:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006300:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006302:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006304:	fba6 8902 	umull	r8, r9, r6, r2
 8006308:	fb02 9907 	mla	r9, r2, r7, r9
 800630c:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006310:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800631a:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 800631c:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800631e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006320:	7e8a      	ldrb	r2, [r1, #26]
 8006322:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8006326:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800632c:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800632e:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8006330:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006332:	0fda      	lsrs	r2, r3, #31
 8006334:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8006336:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800633a:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800633c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006340:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006342:	0d9a      	lsrs	r2, r3, #22
 8006344:	f002 020c 	and.w	r2, r2, #12
 8006348:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800634a:	7fca      	ldrb	r2, [r1, #31]
 800634c:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8006350:	432a      	orrs	r2, r5
 8006352:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006354:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006358:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800635c:	2200      	movs	r2, #0
 800635e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8006362:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8006366:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 800636a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800636e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8006372:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006376:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 800637a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800637e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8006382:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006386:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 800638a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800638e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8006392:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006394:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006398:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 800639c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80063a0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 80063a4:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 80063a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063aa:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80063ac:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 80063b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80063b4:	0212      	lsls	r2, r2, #8
 80063b6:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80063b8:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80063ba:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80063be:	b292      	uxth	r2, r2
 80063c0:	4332      	orrs	r2, r6
 80063c2:	061b      	lsls	r3, r3, #24
 80063c4:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 80063c6:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80063c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80063ca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80063cc:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80063ce:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80063d2:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 80063d4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80063d6:	0a1a      	lsrs	r2, r3, #8
 80063d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80063dc:	4332      	orrs	r2, r6
 80063de:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80063e0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80063e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80063e6:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 80063e8:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80063ea:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 80063ec:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 80063f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063f2:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 80063f4:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 80063f8:	0c1a      	lsrs	r2, r3, #16
 80063fa:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 80063fc:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 80063fe:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8006406:	4332      	orrs	r2, r6
 8006408:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800640a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8006414:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8006416:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8006418:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800641c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800641e:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8006422:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8006426:	4322      	orrs	r2, r4
 8006428:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800642c:	0a1a      	lsrs	r2, r3, #8
 800642e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006432:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006434:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8006436:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800643a:	b292      	uxth	r2, r2
 800643c:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800643e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006442:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8006444:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8006448:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 800644c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006450:	2d02      	cmp	r5, #2
 8006452:	d11f      	bne.n	8006494 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8006454:	0412      	lsls	r2, r2, #16
 8006456:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800645a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 800645c:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800645e:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8006460:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8006462:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006466:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8006468:	690d      	ldr	r5, [r1, #16]
 800646a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800646e:	432a      	orrs	r2, r5
 8006470:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8006472:	690e      	ldr	r6, [r1, #16]
 8006474:	2700      	movs	r7, #0
 8006476:	3601      	adds	r6, #1
 8006478:	f147 0700 	adc.w	r7, r7, #0
 800647c:	04fa      	lsls	r2, r7, #19
 800647e:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 8006482:	64ca      	str	r2, [r1, #76]	; 0x4c
 8006484:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 8006486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 800648e:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8006490:	650a      	str	r2, [r1, #80]	; 0x50
 8006492:	e73d      	b.n	8006310 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 8006494:	2029      	movs	r0, #41	; 0x29
 8006496:	e73b      	b.n	8006310 <HAL_SD_Get_CardInfo+0xec>

08006498 <HAL_SD_Init>:
{ 
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800649e:	2500      	movs	r5, #0
{ 
 80064a0:	4604      	mov	r4, r0
 80064a2:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80064a4:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 80064a8:	f7fd f870 	bl	800358c <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80064ac:	2376      	movs	r3, #118	; 0x76
 80064ae:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 80064b0:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064b2:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 80064b4:	ab10      	add	r3, sp, #64	; 0x40
 80064b6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80064ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064be:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80064c0:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064c2:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 80064c4:	ab0a      	add	r3, sp, #40	; 0x28
 80064c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c8:	6820      	ldr	r0, [r4, #0]
 80064ca:	f001 f84f 	bl	800756c <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80064ce:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80064d0:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80064d4:	6843      	ldr	r3, [r0, #4]
 80064d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064da:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80064dc:	f001 f865 	bl	80075aa <SDMMC_PowerState_ON>
  HAL_Delay(1);
 80064e0:	2001      	movs	r0, #1
 80064e2:	f7fe f8ed 	bl	80046c0 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	6843      	ldr	r3, [r0, #4]
 80064ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ee:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80064f0:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80064f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f6:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 80064f8:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 80064fa:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 80064fc:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80064fe:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006500:	f001 f85b 	bl	80075ba <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006508:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800650c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8006510:	b123      	cbz	r3, 800651c <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006512:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006516:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8006518:	2300      	movs	r3, #0
 800651a:	e005      	b.n	8006528 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800651c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 800651e:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006520:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8006524:	d1f4      	bne.n	8006510 <HAL_SD_Init+0x78>
    return errorstate;
 8006526:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 8006528:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 800652c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006530:	b18b      	cbz	r3, 8006556 <HAL_SD_Init+0xbe>
  return errorstate;
 8006532:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006536:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8006538:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 800653c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006540:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80b1 	beq.w	80066ac <HAL_SD_Init+0x214>
  return errorstate;
 800654a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800654e:	b2c0      	uxtb	r0, r0
}
 8006550:	b011      	add	sp, #68	; 0x44
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8006556:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800655a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 800655c:	2308      	movs	r3, #8
 800655e:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006560:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006566:	f001 f828 	bl	80075ba <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800656e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8006578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 800657c:	b90b      	cbnz	r3, 8006582 <HAL_SD_Init+0xea>
 800657e:	2a00      	cmp	r2, #0
 8006580:	d17c      	bne.n	800667c <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8006582:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8006584:	b112      	cbz	r2, 800658c <HAL_SD_Init+0xf4>
 8006586:	f013 0304 	ands.w	r3, r3, #4
 800658a:	d07f      	beq.n	800668c <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800658c:	2304      	movs	r3, #4
 800658e:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006590:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8006592:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 8006596:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800659a:	2300      	movs	r3, #0
 800659c:	2a00      	cmp	r2, #0
 800659e:	d17c      	bne.n	800669a <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 80065a0:	2201      	movs	r2, #1
 80065a2:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 80065a4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80065a8:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065aa:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 80065ac:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80065ae:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065b0:	f001 f803 	bl	80075ba <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80065b4:	4629      	mov	r1, r5
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fbec 	bl	8005d94 <SD_CmdResp1Error>
 80065bc:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 80065c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80065c4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1b2      	bne.n	8006532 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80065cc:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 80065d0:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80065d2:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80065d6:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065da:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80065dc:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80065e0:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065e4:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 80065e6:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80065ea:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80065ee:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80065f2:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80065f6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065fa:	f000 ffde 	bl	80075ba <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80065fe:	4659      	mov	r1, fp
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff fbc7 	bl	8005d94 <SD_CmdResp1Error>
 8006606:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 800660a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800660e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006612:	2b00      	cmp	r3, #0
 8006614:	d18d      	bne.n	8006532 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8006616:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006618:	a905      	add	r1, sp, #20
 800661a:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800661c:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800661e:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006620:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006624:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006626:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800662a:	f000 ffc6 	bl	80075ba <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800662e:	6820      	ldr	r0, [r4, #0]
 8006630:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006632:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006636:	d0fb      	beq.n	8006630 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006638:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800663a:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800663e:	bf1b      	ittet	ne
 8006640:	2304      	movne	r3, #4
 8006642:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006644:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 8006648:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800664a:	bf08      	it	eq
 800664c:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 800664e:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 8006652:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006656:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800665a:	2b00      	cmp	r3, #0
 800665c:	f47f af69 	bne.w	8006532 <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006660:	f000 ffc0 	bl	80075e4 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006664:	2800      	cmp	r0, #0
      count++;
 8006666:	f105 0501 	add.w	r5, r5, #1
 800666a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800666e:	db16      	blt.n	800669e <HAL_SD_Init+0x206>
 8006670:	429d      	cmp	r5, r3
 8006672:	d1b0      	bne.n	80065d6 <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 8006674:	231b      	movs	r3, #27
 8006676:	f88d 3013 	strb.w	r3, [sp, #19]
 800667a:	e75a      	b.n	8006532 <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 800667c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800667e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
    timeout--;
 8006688:	3a01      	subs	r2, #1
 800668a:	e777      	b.n	800657c <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 800668c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800668e:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8006690:	bf46      	itte	mi
 8006692:	2240      	movmi	r2, #64	; 0x40
 8006694:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 8006696:	2329      	movpl	r3, #41	; 0x29
 8006698:	e77b      	b.n	8006592 <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 800669a:	461f      	mov	r7, r3
 800669c:	e784      	b.n	80065a8 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 800669e:	429d      	cmp	r5, r3
 80066a0:	d0e8      	beq.n	8006674 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80066a2:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 80066a4:	bf44      	itt	mi
 80066a6:	2302      	movmi	r3, #2
 80066a8:	6223      	strmi	r3, [r4, #32]
 80066aa:	e742      	b.n	8006532 <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	f000 ff80 	bl	80075b2 <SDMMC_GetPowerState>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f000 80c2 	beq.w	800683c <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80066b8:	6a23      	ldr	r3, [r4, #32]
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d026      	beq.n	800670c <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 80066be:	2302      	movs	r3, #2
 80066c0:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80066c2:	23c0      	movs	r3, #192	; 0xc0
 80066c4:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066c6:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80066c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066cc:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 80066ce:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80066d0:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066d4:	f000 ff71 	bl	80075ba <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80066d8:	4620      	mov	r0, r4
 80066da:	f7ff fb45 	bl	8005d68 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 80066de:	4605      	mov	r5, r0
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d155      	bne.n	8006790 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066e4:	4601      	mov	r1, r0
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	f000 ff7c 	bl	80075e4 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066ec:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066ee:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	f000 ff77 	bl	80075e4 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066f6:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	f000 ff72 	bl	80075e4 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006700:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006702:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	f000 ff6d 	bl	80075e4 <SDMMC_GetResponse>
 800670a:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d92b      	bls.n	800676a <HAL_SD_Init+0x2d2>
 8006712:	2b06      	cmp	r3, #6
 8006714:	d029      	beq.n	800676a <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 8006716:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006718:	6a23      	ldr	r3, [r4, #32]
 800671a:	2b04      	cmp	r3, #4
 800671c:	f000 8092 	beq.w	8006844 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 8006720:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006722:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006724:	0400      	lsls	r0, r0, #16
 8006726:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006728:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800672a:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800672c:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800672e:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006730:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006732:	f000 ff42 	bl	80075ba <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006736:	4620      	mov	r0, r4
 8006738:	f7ff fb16 	bl	8005d68 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 800673c:	4605      	mov	r5, r0
 800673e:	bb38      	cbnz	r0, 8006790 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006740:	4601      	mov	r1, r0
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	f000 ff4e 	bl	80075e4 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006748:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800674a:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	f000 ff49 	bl	80075e4 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006752:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006754:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	f000 ff44 	bl	80075e4 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800675c:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800675e:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006760:	6820      	ldr	r0, [r4, #0]
 8006762:	f000 ff3f 	bl	80075e4 <SDMMC_GetResponse>
 8006766:	6360      	str	r0, [r4, #52]	; 0x34
 8006768:	e012      	b.n	8006790 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 800676a:	2303      	movs	r3, #3
 800676c:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800676e:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006770:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006772:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006774:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006776:	f000 ff20 	bl	80075ba <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800677a:	6820      	ldr	r0, [r4, #0]
 800677c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800677e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006782:	d0fb      	beq.n	800677c <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006784:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006786:	075d      	lsls	r5, r3, #29
 8006788:	d536      	bpl.n	80067f8 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800678a:	2304      	movs	r3, #4
 800678c:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800678e:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 8006790:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8006794:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f47f aed6 	bne.w	800654a <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800679e:	4631      	mov	r1, r6
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7ff fd3f 	bl	8006224 <HAL_SD_Get_CardInfo>
 80067a6:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 80067aa:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80067ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067b2:	b9ab      	cbnz	r3, 80067e0 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80067b4:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80067b8:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80067ba:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80067bc:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 80067be:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80067c0:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80067c2:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80067c4:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80067c6:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80067c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067cc:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80067ce:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80067d0:	f000 fef3 	bl	80075ba <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7ff fadc 	bl	8005d94 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80067dc:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 80067e0:	f104 0310 	add.w	r3, r4, #16
 80067e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80067ec:	1d23      	adds	r3, r4, #4
 80067ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	f000 febb 	bl	800756c <SDMMC_Init>
 80067f6:	e6a8      	b.n	800654a <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80067f8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80067fa:	f015 0501 	ands.w	r5, r5, #1
 80067fe:	d002      	beq.n	8006806 <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006800:	2501      	movs	r5, #1
 8006802:	6385      	str	r5, [r0, #56]	; 0x38
 8006804:	e7c4      	b.n	8006790 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006806:	f000 feea 	bl	80075de <SDMMC_GetCommandResponse>
 800680a:	2803      	cmp	r0, #3
 800680c:	d001      	beq.n	8006812 <HAL_SD_Init+0x37a>
    return errorstate;
 800680e:	2510      	movs	r5, #16
 8006810:	e7be      	b.n	8006790 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006818:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800681a:	4629      	mov	r1, r5
 800681c:	f000 fee2 	bl	80075e4 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8006820:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8006824:	d101      	bne.n	800682a <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006826:	0c00      	lsrs	r0, r0, #16
 8006828:	e776      	b.n	8006718 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 800682a:	0481      	lsls	r1, r0, #18
 800682c:	d408      	bmi.n	8006840 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800682e:	0442      	lsls	r2, r0, #17
 8006830:	d4ed      	bmi.n	800680e <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8006832:	0403      	lsls	r3, r0, #16
 8006834:	f57f af6f 	bpl.w	8006716 <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 8006838:	250f      	movs	r5, #15
 800683a:	e7a9      	b.n	8006790 <HAL_SD_Init+0x2f8>
    return errorstate;
 800683c:	2525      	movs	r5, #37	; 0x25
 800683e:	e7a7      	b.n	8006790 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006840:	2513      	movs	r5, #19
 8006842:	e7a5      	b.n	8006790 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006844:	2500      	movs	r5, #0
 8006846:	e7a3      	b.n	8006790 <HAL_SD_Init+0x2f8>

08006848 <HAL_SD_WideBusOperation_Config>:
{
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 800684a:	6a03      	ldr	r3, [r0, #32]
 800684c:	2b03      	cmp	r3, #3
{
 800684e:	b08d      	sub	sp, #52	; 0x34
 8006850:	4605      	mov	r5, r0
 8006852:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006854:	f000 8088 	beq.w	8006968 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006858:	2b02      	cmp	r3, #2
 800685a:	f200 8083 	bhi.w	8006964 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800685e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006862:	f000 8081 	beq.w	8006968 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006866:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800686a:	d14c      	bne.n	8006906 <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 800686c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800686e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006870:	9104      	str	r1, [sp, #16]
 8006872:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006874:	f000 feb6 	bl	80075e4 <SDMMC_GetResponse>
 8006878:	0180      	lsls	r0, r0, #6
 800687a:	d46d      	bmi.n	8006958 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 800687c:	a904      	add	r1, sp, #16
 800687e:	4628      	mov	r0, r5
 8006880:	f7ff fafe 	bl	8005e80 <SD_FindSCR>
  if(errorstate != SD_OK)
 8006884:	4604      	mov	r4, r0
 8006886:	2800      	cmp	r0, #0
 8006888:	d167      	bne.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	0359      	lsls	r1, r3, #13
 800688e:	d567      	bpl.n	8006960 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006890:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006892:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006898:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800689a:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800689c:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800689e:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80068a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068a4:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80068a6:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80068a8:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068aa:	f000 fe86 	bl	80075ba <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80068ae:	4639      	mov	r1, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7ff fa6f 	bl	8005d94 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 80068b6:	4604      	mov	r4, r0
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d14e      	bne.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 80068bc:	2302      	movs	r3, #2
 80068be:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80068c0:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068c2:	a906      	add	r1, sp, #24
 80068c4:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80068c6:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068c8:	f000 fe77 	bl	80075ba <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f7ff fa60 	bl	8005d94 <SD_CmdResp1Error>
 80068d4:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d13f      	bne.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 80068da:	686b      	ldr	r3, [r5, #4]
 80068dc:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 80068de:	68ab      	ldr	r3, [r5, #8]
 80068e0:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80068e2:	68eb      	ldr	r3, [r5, #12]
 80068e4:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80068e6:	696b      	ldr	r3, [r5, #20]
 80068e8:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 80068ea:	69ab      	ldr	r3, [r5, #24]
 80068ec:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 80068ee:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 80068f0:	ab0c      	add	r3, sp, #48	; 0x30
 80068f2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80068f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80068fa:	ab06      	add	r3, sp, #24
 80068fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068fe:	6828      	ldr	r0, [r5, #0]
 8006900:	f000 fe34 	bl	800756c <SDMMC_Init>
 8006904:	e029      	b.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006906:	2900      	cmp	r1, #0
 8006908:	d130      	bne.n	800696c <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800690a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006910:	f000 fe68 	bl	80075e4 <SDMMC_GetResponse>
 8006914:	0182      	lsls	r2, r0, #6
 8006916:	d41f      	bmi.n	8006958 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8006918:	a904      	add	r1, sp, #16
 800691a:	4628      	mov	r0, r5
 800691c:	f7ff fab0 	bl	8005e80 <SD_FindSCR>
  if(errorstate != SD_OK)
 8006920:	4604      	mov	r4, r0
 8006922:	b9d0      	cbnz	r0, 800695a <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8006924:	9b05      	ldr	r3, [sp, #20]
 8006926:	03db      	lsls	r3, r3, #15
 8006928:	d51a      	bpl.n	8006960 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800692a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800692c:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800692e:	041b      	lsls	r3, r3, #16
 8006930:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006932:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006934:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006936:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006938:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800693a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800693e:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006940:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006942:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006944:	f000 fe39 	bl	80075ba <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006948:	4639      	mov	r1, r7
 800694a:	4628      	mov	r0, r5
 800694c:	f7ff fa22 	bl	8005d94 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006950:	4604      	mov	r4, r0
 8006952:	b910      	cbnz	r0, 800695a <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 8006954:	9006      	str	r0, [sp, #24]
 8006956:	e7b3      	b.n	80068c0 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 8006958:	240e      	movs	r4, #14
}
 800695a:	4620      	mov	r0, r4
 800695c:	b00d      	add	sp, #52	; 0x34
 800695e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 8006960:	2425      	movs	r4, #37	; 0x25
 8006962:	e7fa      	b.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006964:	2400      	movs	r4, #0
 8006966:	e7f8      	b.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 8006968:	2427      	movs	r4, #39	; 0x27
 800696a:	e7f6      	b.n	800695a <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 800696c:	2426      	movs	r4, #38	; 0x26
 800696e:	e7f4      	b.n	800695a <HAL_SD_WideBusOperation_Config+0x112>

08006970 <HAL_SD_StopTransfer>:
{
 8006970:	b530      	push	{r4, r5, lr}
 8006972:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 8006974:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006976:	2240      	movs	r2, #64	; 0x40
{
 8006978:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 800697a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 800697c:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800697e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006980:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006982:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006986:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006988:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800698a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 800698c:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800698e:	f000 fe14 	bl	80075ba <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8006992:	4629      	mov	r1, r5
 8006994:	4620      	mov	r0, r4
 8006996:	f7ff f9fd 	bl	8005d94 <SD_CmdResp1Error>
}
 800699a:	b007      	add	sp, #28
 800699c:	bd30      	pop	{r4, r5, pc}

0800699e <HAL_SD_CheckReadOperation>:
{
 800699e:	b538      	push	{r3, r4, r5, lr}
 80069a0:	4604      	mov	r4, r0
 80069a2:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 80069a4:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 80069a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80069a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 80069aa:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80069ac:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80069ae:	4208      	tst	r0, r1
 80069b0:	d100      	bne.n	80069b4 <HAL_SD_CheckReadOperation+0x16>
 80069b2:	b1b3      	cbz	r3, 80069e2 <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b8:	0492      	lsls	r2, r2, #18
 80069ba:	d500      	bpl.n	80069be <HAL_SD_CheckReadOperation+0x20>
 80069bc:	b9cd      	cbnz	r5, 80069f2 <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 80069be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d118      	bne.n	80069f6 <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 80069c4:	4620      	mov	r0, r4
 80069c6:	f7ff ffd3 	bl	8006970 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 80069ca:	b90d      	cbnz	r5, 80069d0 <HAL_SD_CheckReadOperation+0x32>
 80069cc:	b900      	cbnz	r0, 80069d0 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 80069ce:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80069d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80069da:	b183      	cbz	r3, 80069fe <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80069dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80069de:	b2c0      	uxtb	r0, r0
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d0e6      	beq.n	80069b4 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 80069e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80069e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80069ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80069ec:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	e7dd      	b.n	80069ae <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 80069f2:	3d01      	subs	r5, #1
 80069f4:	e7df      	b.n	80069b6 <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	d0e9      	beq.n	80069ce <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80069fa:	2000      	movs	r0, #0
 80069fc:	e7e8      	b.n	80069d0 <HAL_SD_CheckReadOperation+0x32>
}
 80069fe:	bd38      	pop	{r3, r4, r5, pc}

08006a00 <HAL_SD_GetStatus>:
{
 8006a00:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006a02:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006a04:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a0a:	2340      	movs	r3, #64	; 0x40
 8006a0c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a0e:	2300      	movs	r3, #0
{
 8006a10:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006a12:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a14:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a16:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a1c:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a1e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006a20:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a22:	f000 fdca 	bl	80075ba <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8006a26:	4629      	mov	r1, r5
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff f9b3 	bl	8005d94 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006a2e:	4601      	mov	r1, r0
 8006a30:	b948      	cbnz	r0, 8006a46 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	f000 fdd6 	bl	80075e4 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8006a38:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8006a3c:	3804      	subs	r0, #4
 8006a3e:	bf18      	it	ne
 8006a40:	2001      	movne	r0, #1
}
 8006a42:	b007      	add	sp, #28
 8006a44:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8006a46:	2002      	movs	r0, #2
 8006a48:	e7fb      	b.n	8006a42 <HAL_SD_GetStatus+0x42>

08006a4a <HAL_SD_CheckWriteOperation>:
{
 8006a4a:	b570      	push	{r4, r5, r6, lr}
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006a50:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006a52:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006a54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8006a56:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006a58:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006a5a:	4208      	tst	r0, r1
 8006a5c:	d100      	bne.n	8006a60 <HAL_SD_CheckWriteOperation+0x16>
 8006a5e:	b1c3      	cbz	r3, 8006a92 <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a64:	04d2      	lsls	r2, r2, #19
 8006a66:	d500      	bpl.n	8006a6a <HAL_SD_CheckWriteOperation+0x20>
 8006a68:	b9de      	cbnz	r6, 8006aa2 <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8006a6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d120      	bne.n	8006ab2 <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff ff7d 	bl	8006970 <HAL_SD_StopTransfer>
 8006a76:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 8006a78:	b90e      	cbnz	r6, 8006a7e <HAL_SD_CheckWriteOperation+0x34>
 8006a7a:	b900      	cbnz	r0, 8006a7e <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 8006a7c:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006a86:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a88:	b16b      	cbz	r3, 8006aa6 <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8006a8a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006a8c:	b2ed      	uxtb	r5, r5
}
 8006a8e:	4628      	mov	r0, r5
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d0e4      	beq.n	8006a60 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006a96:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006a98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006a9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8006a9c:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	e7db      	b.n	8006a5a <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 8006aa2:	3e01      	subs	r6, #1
 8006aa4:	e7dd      	b.n	8006a62 <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7ff ffaa 	bl	8006a00 <HAL_SD_GetStatus>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d1fa      	bne.n	8006aa6 <HAL_SD_CheckWriteOperation+0x5c>
 8006ab0:	e7ed      	b.n	8006a8e <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d0e2      	beq.n	8006a7c <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	e7e1      	b.n	8006a7e <HAL_SD_CheckWriteOperation+0x34>

08006aba <HAL_UART_MspInit>:
 8006aba:	4770      	bx	lr

08006abc <HAL_UART_MspDeInit>:
 8006abc:	4770      	bx	lr

08006abe <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006abe:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	b1a0      	cbz	r0, 8006aee <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006aca:	6803      	ldr	r3, [r0, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8006ace:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 8006ad0:	f022 0201 	bic.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8006ad6:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8006ad8:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8006ada:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006adc:	f7ff ffee 	bl	8006abc <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006ae2:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8006ae6:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 8006aea:	4620      	mov	r0, r4
 8006aec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006aee:	2001      	movs	r0, #1
}
 8006af0:	bd38      	pop	{r3, r4, r5, pc}

08006af2 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8006af2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_Receive_IT+0x10>
 8006afa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006afe:	2b12      	cmp	r3, #18
 8006b00:	d147      	bne.n	8006b92 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8006b02:	2900      	cmp	r1, #0
 8006b04:	d043      	beq.n	8006b8e <HAL_UART_Receive_IT+0x9c>
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	d041      	beq.n	8006b8e <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b0a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d03f      	beq.n	8006b92 <HAL_UART_Receive_IT+0xa0>
 8006b12:	2301      	movs	r3, #1
 8006b14:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b18:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8006b1a:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8006b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8006b20:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b24:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8006b28:	d123      	bne.n	8006b72 <HAL_UART_Receive_IT+0x80>
 8006b2a:	6903      	ldr	r3, [r0, #16]
 8006b2c:	b9fb      	cbnz	r3, 8006b6e <HAL_UART_Receive_IT+0x7c>
 8006b2e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8006b3a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b3e:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8006b40:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8006b42:	bf0c      	ite	eq
 8006b44:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8006b46:	2322      	movne	r3, #34	; 0x22
 8006b48:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b4c:	6813      	ldr	r3, [r2, #0]
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b54:	6893      	ldr	r3, [r2, #8]
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b5c:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8006b5e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b60:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 8006b64:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b68:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8006b6e:	23ff      	movs	r3, #255	; 0xff
 8006b70:	e7df      	b.n	8006b32 <HAL_UART_Receive_IT+0x40>
 8006b72:	b923      	cbnz	r3, 8006b7e <HAL_UART_Receive_IT+0x8c>
 8006b74:	6903      	ldr	r3, [r0, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f9      	beq.n	8006b6e <HAL_UART_Receive_IT+0x7c>
 8006b7a:	237f      	movs	r3, #127	; 0x7f
 8006b7c:	e7d9      	b.n	8006b32 <HAL_UART_Receive_IT+0x40>
 8006b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b82:	d1d8      	bne.n	8006b36 <HAL_UART_Receive_IT+0x44>
 8006b84:	6903      	ldr	r3, [r0, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f7      	beq.n	8006b7a <HAL_UART_Receive_IT+0x88>
 8006b8a:	233f      	movs	r3, #63	; 0x3f
 8006b8c:	e7d1      	b.n	8006b32 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 8006b8e:	2001      	movs	r0, #1
 8006b90:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2002      	movs	r0, #2
  }
}
 8006b94:	4770      	bx	lr
	...

08006b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8006b9c:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006ba4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	6961      	ldr	r1, [r4, #20]
 8006baa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006bac:	49b0      	ldr	r1, [pc, #704]	; (8006e70 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bae:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006bb0:	4001      	ands	r1, r0
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb6:	686b      	ldr	r3, [r5, #4]
 8006bb8:	68e1      	ldr	r1, [r4, #12]
 8006bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bc2:	4bac      	ldr	r3, [pc, #688]	; (8006e74 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bc6:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bc8:	bf1c      	itt	ne
 8006bca:	6a23      	ldrne	r3, [r4, #32]
 8006bcc:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006bce:	68ab      	ldr	r3, [r5, #8]
 8006bd0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bd8:	4ba7      	ldr	r3, [pc, #668]	; (8006e78 <UART_SetConfig+0x2e0>)
 8006bda:	429d      	cmp	r5, r3
 8006bdc:	d118      	bne.n	8006c10 <UART_SetConfig+0x78>
 8006bde:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006be2:	49a6      	ldr	r1, [pc, #664]	; (8006e7c <UART_SetConfig+0x2e4>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be8:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006bf0:	5ccb      	ldrb	r3, [r1, r3]
 8006bf2:	f040 80c6 	bne.w	8006d82 <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d828      	bhi.n	8006c4c <UART_SetConfig+0xb4>
 8006bfa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006bfe:	011a      	.short	0x011a
 8006c00:	012f00bf 	.word	0x012f00bf
 8006c04:	01140027 	.word	0x01140027
 8006c08:	00270027 	.word	0x00270027
 8006c0c:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c10:	4b9b      	ldr	r3, [pc, #620]	; (8006e80 <UART_SetConfig+0x2e8>)
 8006c12:	429d      	cmp	r5, r3
 8006c14:	d107      	bne.n	8006c26 <UART_SetConfig+0x8e>
 8006c16:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006c1a:	499a      	ldr	r1, [pc, #616]	; (8006e84 <UART_SetConfig+0x2ec>)
 8006c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	e7e2      	b.n	8006bec <UART_SetConfig+0x54>
 8006c26:	4b98      	ldr	r3, [pc, #608]	; (8006e88 <UART_SetConfig+0x2f0>)
 8006c28:	429d      	cmp	r5, r3
 8006c2a:	d120      	bne.n	8006c6e <UART_SetConfig+0xd6>
 8006c2c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	f000 80f1 	beq.w	8006e20 <UART_SetConfig+0x288>
 8006c3e:	d808      	bhi.n	8006c52 <UART_SetConfig+0xba>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80f3 	beq.w	8006e2c <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006c4a:	d134      	bne.n	8006cb6 <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006c4c:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e0f9      	b.n	8006e46 <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	f000 80ff 	beq.w	8006e56 <UART_SetConfig+0x2be>
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d1f4      	bne.n	8006c46 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006c60:	f040 80c1 	bne.w	8006de6 <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c64:	6860      	ldr	r0, [r4, #4]
 8006c66:	0843      	lsrs	r3, r0, #1
 8006c68:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006c6c:	e0fc      	b.n	8006e68 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c6e:	4b87      	ldr	r3, [pc, #540]	; (8006e8c <UART_SetConfig+0x2f4>)
 8006c70:	429d      	cmp	r5, r3
 8006c72:	d122      	bne.n	8006cba <UART_SetConfig+0x122>
 8006c74:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	f000 80c0 	beq.w	8006e06 <UART_SetConfig+0x26e>
 8006c86:	d806      	bhi.n	8006c96 <UART_SetConfig+0xfe>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80b1 	beq.w	8006df0 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006c8e:	4b79      	ldr	r3, [pc, #484]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006c90:	429d      	cmp	r5, r3
 8006c92:	d1d8      	bne.n	8006c46 <UART_SetConfig+0xae>
 8006c94:	e00f      	b.n	8006cb6 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	f000 80bc 	beq.w	8006e14 <UART_SetConfig+0x27c>
 8006c9c:	2bc0      	cmp	r3, #192	; 0xc0
 8006c9e:	d1f6      	bne.n	8006c8e <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ca0:	4b74      	ldr	r3, [pc, #464]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006ca2:	429d      	cmp	r5, r3
 8006ca4:	d1da      	bne.n	8006c5c <UART_SetConfig+0xc4>
 8006ca6:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8006ca8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006cac:	6862      	ldr	r2, [r4, #4]
 8006cae:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006cb2:	4281      	cmp	r1, r0
 8006cb4:	d92b      	bls.n	8006d0e <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006cb6:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8006cb8:	e04b      	b.n	8006d52 <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cba:	4b75      	ldr	r3, [pc, #468]	; (8006e90 <UART_SetConfig+0x2f8>)
 8006cbc:	429d      	cmp	r5, r3
 8006cbe:	d111      	bne.n	8006ce4 <UART_SetConfig+0x14c>
 8006cc0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd0:	f000 8099 	beq.w	8006e06 <UART_SetConfig+0x26e>
 8006cd4:	d9d8      	bls.n	8006c88 <UART_SetConfig+0xf0>
 8006cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cda:	f000 809b 	beq.w	8006e14 <UART_SetConfig+0x27c>
 8006cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce2:	e7dc      	b.n	8006c9e <UART_SetConfig+0x106>
 8006ce4:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006ce6:	429d      	cmp	r5, r3
 8006ce8:	d1ad      	bne.n	8006c46 <UART_SetConfig+0xae>
 8006cea:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfa:	f000 8084 	beq.w	8006e06 <UART_SetConfig+0x26e>
 8006cfe:	d9c3      	bls.n	8006c88 <UART_SetConfig+0xf0>
 8006d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d04:	f000 8086 	beq.w	8006e14 <UART_SetConfig+0x27c>
 8006d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d0c:	e7c7      	b.n	8006c9e <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006d0e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006d12:	d8d0      	bhi.n	8006cb6 <UART_SetConfig+0x11e>
        switch (clocksource)
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d82f      	bhi.n	8006d78 <UART_SetConfig+0x1e0>
 8006d18:	e8df f003 	tbb	[pc, r3]
 8006d1c:	2e1d2e05 	.word	0x2e1d2e05
 8006d20:	2e2e2e25 	.word	0x2e2e2e25
 8006d24:	28          	.byte	0x28
 8006d25:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006d26:	f7fe ffe7 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d2a:	6862      	ldr	r2, [r4, #4]
 8006d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d30:	0856      	lsrs	r6, r2, #1
 8006d32:	2700      	movs	r7, #0
 8006d34:	fbe1 6700 	umlal	r6, r7, r1, r0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006d3e:	f7f9 ff89 	bl	8000c54 <__aeabi_uldivmod>
          break;
 8006d42:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006d44:	4b53      	ldr	r3, [pc, #332]	; (8006e94 <UART_SetConfig+0x2fc>)
 8006d46:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	d8b3      	bhi.n	8006cb6 <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	60d8      	str	r0, [r3, #12]

}
 8006d52:	4610      	mov	r0, r2
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006d56:	4850      	ldr	r0, [pc, #320]	; (8006e98 <UART_SetConfig+0x300>)
 8006d58:	0855      	lsrs	r5, r2, #1
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006d60:	f141 0100 	adc.w	r1, r1, #0
 8006d64:	e7eb      	b.n	8006d3e <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d66:	f7fe fced 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 8006d6a:	e7de      	b.n	8006d2a <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006d6c:	0850      	lsrs	r0, r2, #1
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2300      	movs	r3, #0
 8006d72:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8006d76:	e7f3      	b.n	8006d60 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 8006d78:	2201      	movs	r2, #1
 8006d7a:	e7e3      	b.n	8006d44 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006d7c:	f7fe ffd4 	bl	8005d28 <HAL_RCC_GetPCLK2Freq>
 8006d80:	e059      	b.n	8006e36 <UART_SetConfig+0x29e>
    switch (clocksource)
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d897      	bhi.n	8006cb6 <UART_SetConfig+0x11e>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x1f4>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006dcb 	.word	0x08006dcb
 8006d98:	08006cb7 	.word	0x08006cb7
 8006d9c:	08006de1 	.word	0x08006de1
 8006da0:	08006cb7 	.word	0x08006cb7
 8006da4:	08006cb7 	.word	0x08006cb7
 8006da8:	08006cb7 	.word	0x08006cb7
 8006dac:	08006de7 	.word	0x08006de7
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006db0:	f7fe ffa2 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006dba:	fbb0 f0f3 	udiv	r0, r0, r3
 8006dbe:	b280      	uxth	r0, r0
 8006dc0:	60e8      	str	r0, [r5, #12]
 8006dc2:	e01e      	b.n	8006e02 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006dc4:	f7fe ffb0 	bl	8005d28 <HAL_RCC_GetPCLK2Freq>
 8006dc8:	e7f4      	b.n	8006db4 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	0853      	lsrs	r3, r2, #1
 8006dce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006dd2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	60eb      	str	r3, [r5, #12]
 8006dde:	e010      	b.n	8006e02 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006de0:	f7fe fcb0 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 8006de4:	e7e6      	b.n	8006db4 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006de6:	6862      	ldr	r2, [r4, #4]
 8006de8:	0853      	lsrs	r3, r2, #1
 8006dea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006dee:	e7f2      	b.n	8006dd6 <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006df0:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006df2:	429d      	cmp	r5, r3
 8006df4:	d11a      	bne.n	8006e2c <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006df6:	f7fe ff7f 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
      break;
 8006dfa:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f47f af55 	bne.w	8006cac <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e02:	2200      	movs	r2, #0
      break;
 8006e04:	e7a5      	b.n	8006d52 <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006e06:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006e08:	429d      	cmp	r5, r3
 8006e0a:	d109      	bne.n	8006e20 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006e0c:	f7fe fc9a 	bl	8005744 <HAL_RCC_GetSysClockFreq>
      break;
 8006e10:	2304      	movs	r3, #4
 8006e12:	e7f3      	b.n	8006dfc <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006e14:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006e16:	429d      	cmp	r5, r3
 8006e18:	d11d      	bne.n	8006e56 <UART_SetConfig+0x2be>
 8006e1a:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8006e1c:	481f      	ldr	r0, [pc, #124]	; (8006e9c <UART_SetConfig+0x304>)
 8006e1e:	e745      	b.n	8006cac <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e20:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006e24:	d1dc      	bne.n	8006de0 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e26:	f7fe fc8d 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 8006e2a:	e004      	b.n	8006e36 <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006e30:	d1be      	bne.n	8006db0 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006e32:	f7fe ff61 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e36:	6861      	ldr	r1, [r4, #4]
 8006e38:	084a      	lsrs	r2, r1, #1
 8006e3a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8006e3e:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e42:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e44:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8006e46:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 8006e4a:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8006e4c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8006e50:	430b      	orrs	r3, r1
 8006e52:	60c3      	str	r3, [r0, #12]
 8006e54:	e77d      	b.n	8006d52 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e56:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006e5a:	d1b6      	bne.n	8006dca <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e5c:	6860      	ldr	r0, [r4, #4]
 8006e5e:	0843      	lsrs	r3, r0, #1
 8006e60:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006e64:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e68:	fbb3 f3f0 	udiv	r3, r3, r0
 8006e6c:	e7e9      	b.n	8006e42 <UART_SetConfig+0x2aa>
 8006e6e:	bf00      	nop
 8006e70:	efff69f3 	.word	0xefff69f3
 8006e74:	40008000 	.word	0x40008000
 8006e78:	40013800 	.word	0x40013800
 8006e7c:	0800bbe3 	.word	0x0800bbe3
 8006e80:	40004400 	.word	0x40004400
 8006e84:	0800bbe7 	.word	0x0800bbe7
 8006e88:	40004800 	.word	0x40004800
 8006e8c:	40004c00 	.word	0x40004c00
 8006e90:	40005000 	.word	0x40005000
 8006e94:	000ffcff 	.word	0x000ffcff
 8006e98:	f4240000 	.word	0xf4240000
 8006e9c:	00f42400 	.word	0x00f42400

08006ea0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ea2:	07da      	lsls	r2, r3, #31
{
 8006ea4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea6:	d506      	bpl.n	8006eb6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ea8:	6801      	ldr	r1, [r0, #0]
 8006eaa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006eac:	684a      	ldr	r2, [r1, #4]
 8006eae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006eb2:	4322      	orrs	r2, r4
 8006eb4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb6:	079c      	lsls	r4, r3, #30
 8006eb8:	d506      	bpl.n	8006ec8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eba:	6801      	ldr	r1, [r0, #0]
 8006ebc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006ebe:	684a      	ldr	r2, [r1, #4]
 8006ec0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ec4:	4322      	orrs	r2, r4
 8006ec6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ec8:	0759      	lsls	r1, r3, #29
 8006eca:	d506      	bpl.n	8006eda <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ecc:	6801      	ldr	r1, [r0, #0]
 8006ece:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006ed0:	684a      	ldr	r2, [r1, #4]
 8006ed2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ed6:	4322      	orrs	r2, r4
 8006ed8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eda:	071a      	lsls	r2, r3, #28
 8006edc:	d506      	bpl.n	8006eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ede:	6801      	ldr	r1, [r0, #0]
 8006ee0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006ee2:	684a      	ldr	r2, [r1, #4]
 8006ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ee8:	4322      	orrs	r2, r4
 8006eea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eec:	06dc      	lsls	r4, r3, #27
 8006eee:	d506      	bpl.n	8006efe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef0:	6801      	ldr	r1, [r0, #0]
 8006ef2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006ef4:	688a      	ldr	r2, [r1, #8]
 8006ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006efa:	4322      	orrs	r2, r4
 8006efc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006efe:	0699      	lsls	r1, r3, #26
 8006f00:	d506      	bpl.n	8006f10 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f02:	6801      	ldr	r1, [r0, #0]
 8006f04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006f06:	688a      	ldr	r2, [r1, #8]
 8006f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f0c:	4322      	orrs	r2, r4
 8006f0e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f10:	065a      	lsls	r2, r3, #25
 8006f12:	d50f      	bpl.n	8006f34 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f14:	6801      	ldr	r1, [r0, #0]
 8006f16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006f18:	684a      	ldr	r2, [r1, #4]
 8006f1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006f1e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f24:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f26:	d105      	bne.n	8006f34 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f28:	684a      	ldr	r2, [r1, #4]
 8006f2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006f2c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006f30:	4322      	orrs	r2, r4
 8006f32:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f34:	061b      	lsls	r3, r3, #24
 8006f36:	d506      	bpl.n	8006f46 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f38:	6802      	ldr	r2, [r0, #0]
 8006f3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006f3c:	6853      	ldr	r3, [r2, #4]
 8006f3e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006f42:	430b      	orrs	r3, r1
 8006f44:	6053      	str	r3, [r2, #4]
 8006f46:	bd10      	pop	{r4, pc}

08006f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8006f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460e      	mov	r6, r1
 8006f50:	4690      	mov	r8, r2
 8006f52:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8006f54:	f7fd fbae 	bl	80046b4 <HAL_GetTick>
 8006f58:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8006f5a:	f1b8 0f00 	cmp.w	r8, #0
 8006f5e:	d02f      	beq.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	69d3      	ldr	r3, [r2, #28]
 8006f64:	ea36 0303 	bics.w	r3, r6, r3
 8006f68:	d12f      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006f6a:	1c6b      	adds	r3, r5, #1
 8006f6c:	d0f9      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006f6e:	b145      	cbz	r5, 8006f82 <UART_WaitOnFlagUntilTimeout+0x3a>
 8006f70:	f7fd fba0 	bl	80046b4 <HAL_GetTick>
 8006f74:	1bc0      	subs	r0, r0, r7
 8006f76:	4285      	cmp	r5, r0
 8006f78:	d2f2      	bcs.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x18>
 8006f7a:	e002      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8006f7c:	1c69      	adds	r1, r5, #1
 8006f7e:	d020      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006f80:	b9cd      	cbnz	r5, 8006fb6 <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	f022 0220 	bic.w	r2, r2, #32
 8006f92:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f9a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006faa:	2300      	movs	r3, #0
 8006fac:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8006fb0:	2003      	movs	r0, #3
 8006fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006fb6:	f7fd fb7d 	bl	80046b4 <HAL_GetTick>
 8006fba:	1bc0      	subs	r0, r0, r7
 8006fbc:	4285      	cmp	r5, r0
 8006fbe:	d3e0      	bcc.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	69d3      	ldr	r3, [r2, #28]
 8006fc4:	ea36 0303 	bics.w	r3, r6, r3
 8006fc8:	d1d8      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fd0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd0:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fd2:	6803      	ldr	r3, [r0, #0]
{
 8006fd4:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	0719      	lsls	r1, r3, #28
{
 8006fdc:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fde:	d413      	bmi.n	8007008 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	075b      	lsls	r3, r3, #29
 8006fe6:	d508      	bpl.n	8006ffa <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fec:	2200      	movs	r2, #0
 8006fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7ff ffa8 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006ff8:	b970      	cbnz	r0, 8007018 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 8006ffa:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8006ffc:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8006ffe:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8007002:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8007006:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800700c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007010:	f7ff ff9a 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8007014:	2800      	cmp	r0, #0
 8007016:	d0e3      	beq.n	8006fe0 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8007018:	2003      	movs	r0, #3
 800701a:	bd10      	pop	{r4, pc}

0800701c <HAL_UART_Init>:
{
 800701c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800701e:	4604      	mov	r4, r0
 8007020:	b360      	cbz	r0, 800707c <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8007022:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007026:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800702a:	b91b      	cbnz	r3, 8007034 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800702c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8007030:	f7ff fd43 	bl	8006aba <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007034:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8007036:	2302      	movs	r3, #2
 8007038:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800703c:	6813      	ldr	r3, [r2, #0]
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007044:	4620      	mov	r0, r4
 8007046:	f7ff fda7 	bl	8006b98 <UART_SetConfig>
 800704a:	2801      	cmp	r0, #1
 800704c:	d016      	beq.n	800707c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800704e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007050:	b113      	cbz	r3, 8007058 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8007052:	4620      	mov	r0, r4
 8007054:	f7ff ff24 	bl	8006ea0 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007060:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007068:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007070:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007078:	f7ff bfaa 	b.w	8006fd0 <UART_CheckIdleState>
}
 800707c:	2001      	movs	r0, #1
 800707e:	bd10      	pop	{r4, pc}

08007080 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007084:	680a      	ldr	r2, [r1, #0]
 8007086:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800708a:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800708e:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007092:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007094:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007096:	fa32 f304 	lsrs.w	r3, r2, r4
 800709a:	d10d      	bne.n	80070b8 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800709c:	684b      	ldr	r3, [r1, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d806      	bhi.n	80070b2 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80070a4:	6843      	ldr	r3, [r0, #4]
 80070a6:	68c9      	ldr	r1, [r1, #12]
 80070a8:	ea23 0302 	bic.w	r3, r3, r2
 80070ac:	434a      	muls	r2, r1
 80070ae:	431a      	orrs	r2, r3
 80070b0:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80070b2:	2001      	movs	r0, #1
 80070b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80070b8:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 80070bc:	4013      	ands	r3, r2
 80070be:	d069      	beq.n	8007194 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80070c0:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80070c4:	f8d0 9000 	ldr.w	r9, [r0]
 80070c8:	fa93 fca3 	rbit	ip, r3
 80070cc:	fabc fc8c 	clz	ip, ip
 80070d0:	fa93 f6a3 	rbit	r6, r3
 80070d4:	fab6 f686 	clz	r6, r6
 80070d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80070dc:	fa05 fc0c 	lsl.w	ip, r5, ip
 80070e0:	0076      	lsls	r6, r6, #1
 80070e2:	ea29 0c0c 	bic.w	ip, r9, ip
 80070e6:	fa08 f606 	lsl.w	r6, r8, r6
 80070ea:	ea4c 0606 	orr.w	r6, ip, r6
 80070ee:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80070f0:	f108 36ff 	add.w	r6, r8, #4294967295
 80070f4:	2e01      	cmp	r6, #1
 80070f6:	d816      	bhi.n	8007126 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80070f8:	6886      	ldr	r6, [r0, #8]
 80070fa:	fa93 fca3 	rbit	ip, r3
 80070fe:	fabc fc8c 	clz	ip, ip
 8007102:	fa93 f9a3 	rbit	r9, r3
 8007106:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800710a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800710e:	ea26 0c0c 	bic.w	ip, r6, ip
 8007112:	fab9 f989 	clz	r9, r9
 8007116:	688e      	ldr	r6, [r1, #8]
 8007118:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800711c:	fa06 f609 	lsl.w	r6, r6, r9
 8007120:	ea4c 0606 	orr.w	r6, ip, r6
 8007124:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007126:	68c6      	ldr	r6, [r0, #12]
 8007128:	fa93 fca3 	rbit	ip, r3
 800712c:	fabc fc8c 	clz	ip, ip
 8007130:	fa93 f9a3 	rbit	r9, r3
 8007134:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007138:	fa05 fc0c 	lsl.w	ip, r5, ip
 800713c:	ea26 0c0c 	bic.w	ip, r6, ip
 8007140:	fab9 f989 	clz	r9, r9
 8007144:	690e      	ldr	r6, [r1, #16]
 8007146:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800714a:	fa06 f609 	lsl.w	r6, r6, r9
 800714e:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007152:	f1b8 0f02 	cmp.w	r8, #2
 8007156:	60c6      	str	r6, [r0, #12]
 8007158:	d11c      	bne.n	8007194 <LL_GPIO_Init+0x114>
 800715a:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800715e:	fab6 f686 	clz	r6, r6
 8007162:	2e07      	cmp	r6, #7
 8007164:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8007168:	dc16      	bgt.n	8007198 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800716a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800716e:	fa93 f6a3 	rbit	r6, r3
 8007172:	fab6 f686 	clz	r6, r6
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	fab3 f383 	clz	r3, r3
 800717e:	00b6      	lsls	r6, r6, #2
 8007180:	fa07 f606 	lsl.w	r6, r7, r6
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	ea28 0606 	bic.w	r6, r8, r6
 800718a:	fa0c fc03 	lsl.w	ip, ip, r3
 800718e:	ea46 060c 	orr.w	r6, r6, ip
 8007192:	6206      	str	r6, [r0, #32]
    pinpos++;
 8007194:	3401      	adds	r4, #1
 8007196:	e77e      	b.n	8007096 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007198:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	fa93 f6a3 	rbit	r6, r3
 80071a2:	fab6 f686 	clz	r6, r6
 80071a6:	fa93 f3a3 	rbit	r3, r3
 80071aa:	fab3 f383 	clz	r3, r3
 80071ae:	00b6      	lsls	r6, r6, #2
 80071b0:	fa07 f606 	lsl.w	r6, r7, r6
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	ea28 0606 	bic.w	r6, r8, r6
 80071ba:	fa0c f303 	lsl.w	r3, ip, r3
 80071be:	4333      	orrs	r3, r6
 80071c0:	6243      	str	r3, [r0, #36]	; 0x24
 80071c2:	e7e7      	b.n	8007194 <LL_GPIO_Init+0x114>

080071c4 <LL_RTC_TIME_Config>:
{
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80071cc:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 80071d0:	fa97 f7a7 	rbit	r7, r7
 80071d4:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80071d8:	fab7 f787 	clz	r7, r7
 80071dc:	fa94 f4a4 	rbit	r4, r4
 80071e0:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 80071e4:	fab4 fa84 	clz	sl, r4
 80071e8:	fa96 f6a6 	rbit	r6, r6
 80071ec:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80071f0:	fab6 f686 	clz	r6, r6
 80071f4:	fa99 f9a9 	rbit	r9, r9
 80071f8:	2570      	movs	r5, #112	; 0x70
 80071fa:	fab9 f989 	clz	r9, r9
 80071fe:	fa95 f5a5 	rbit	r5, r5
 8007202:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007206:	fab5 f585 	clz	r5, r5
 800720a:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800720e:	f8d0 e000 	ldr.w	lr, [r0]
 8007212:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007216:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800721a:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800721e:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007222:	ea4e 0101 	orr.w	r1, lr, r1
 8007226:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007228:	f003 040f 	and.w	r4, r3, #15
 800722c:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007230:	fab8 f888 	clz	r8, r8
 8007234:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007238:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800723c:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007240:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007244:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007246:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800724a:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 800724c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007250:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007252:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007254:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007256:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 800725a:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800725c:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800725e:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007262:	432b      	orrs	r3, r5
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800726c <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8007274:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8007278:	fa9a faaa 	rbit	sl, sl
 800727c:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8007280:	faba fa8a 	clz	sl, sl
 8007284:	fa97 f7a7 	rbit	r7, r7
 8007288:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 800728c:	fab7 f787 	clz	r7, r7
 8007290:	fa94 f4a4 	rbit	r4, r4
 8007294:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8007298:	fab4 fb84 	clz	fp, r4
 800729c:	fa96 f6a6 	rbit	r6, r6
 80072a0:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80072a4:	fab6 f686 	clz	r6, r6
 80072a8:	fa98 f8a8 	rbit	r8, r8
 80072ac:	2530      	movs	r5, #48	; 0x30
 80072ae:	fab8 f888 	clz	r8, r8
 80072b2:	fa95 f5a5 	rbit	r5, r5
 80072b6:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80072ba:	fab5 f585 	clz	r5, r5
 80072be:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80072c2:	f00e 040f 	and.w	r4, lr, #15
 80072c6:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 80072ca:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80072ce:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80072d2:	4321      	orrs	r1, r4
 80072d4:	4c12      	ldr	r4, [pc, #72]	; (8007320 <LL_RTC_DATE_Config+0xb4>)
 80072d6:	ea09 0404 	and.w	r4, r9, r4
 80072da:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80072dc:	f003 040f 	and.w	r4, r3, #15
 80072e0:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80072e4:	fabc fc8c 	clz	ip, ip
 80072e8:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80072ec:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80072f0:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80072f4:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 80072f8:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80072fa:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80072fe:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8007302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007306:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007308:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800730a:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800730c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007310:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007312:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007314:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007316:	431a      	orrs	r2, r3
 8007318:	6042      	str	r2, [r0, #4]
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	bf00      	nop
 8007320:	ff0000c0 	.word	0xff0000c0

08007324 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8007324:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8007326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800732a:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800732c:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800732e:	065a      	lsls	r2, r3, #25
 8007330:	d41c      	bmi.n	800736c <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8007338:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800733a:	490d      	ldr	r1, [pc, #52]	; (8007370 <LL_RTC_EnterInitMode+0x4c>)
 800733c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8007340:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8007342:	9c01      	ldr	r4, [sp, #4]
 8007344:	b104      	cbz	r4, 8007348 <LL_RTC_EnterInitMode+0x24>
 8007346:	b113      	cbz	r3, 800734e <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8007348:	4610      	mov	r0, r2
 800734a:	b002      	add	sp, #8
 800734c:	bd10      	pop	{r4, pc}
 800734e:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8007350:	03db      	lsls	r3, r3, #15
        timeout --;
 8007352:	bf42      	ittt	mi
 8007354:	9b01      	ldrmi	r3, [sp, #4]
 8007356:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800735a:	9301      	strmi	r3, [sp, #4]
 800735c:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 800735e:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8007360:	2c00      	cmp	r4, #0
 8007362:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007366:	bf08      	it	eq
 8007368:	2200      	moveq	r2, #0
 800736a:	e7ea      	b.n	8007342 <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 800736c:	2201      	movs	r2, #1
 800736e:	e7eb      	b.n	8007348 <LL_RTC_EnterInitMode+0x24>
 8007370:	e000e010 	.word	0xe000e010

08007374 <LL_RTC_Init>:
{
 8007374:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007376:	23ca      	movs	r3, #202	; 0xca
 8007378:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800737a:	2353      	movs	r3, #83	; 0x53
 800737c:	6243      	str	r3, [r0, #36]	; 0x24
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8007382:	f7ff ffcf 	bl	8007324 <LL_RTC_EnterInitMode>
 8007386:	b1f0      	cbz	r0, 80073c6 <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	682a      	ldr	r2, [r5, #0]
 800738c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007390:	4313      	orrs	r3, r2
 8007392:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	68aa      	ldr	r2, [r5, #8]
 8007398:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800739c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073a0:	4313      	orrs	r3, r2
 80073a2:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 80073a4:	6921      	ldr	r1, [r4, #16]
 80073a6:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	fab3 f283 	clz	r2, r3
 80073b2:	686b      	ldr	r3, [r5, #4]
 80073b4:	4093      	lsls	r3, r2
 80073b6:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 80073ba:	4313      	orrs	r3, r2
 80073bc:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80073be:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80073c2:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 80073c4:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80073c6:	23ff      	movs	r3, #255	; 0xff
 80073c8:	6263      	str	r3, [r4, #36]	; 0x24
}
 80073ca:	bd38      	pop	{r3, r4, r5, pc}

080073cc <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80073cc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80073ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073d2:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80073d4:	68c3      	ldr	r3, [r0, #12]
 80073d6:	491e      	ldr	r1, [pc, #120]	; (8007450 <LL_RTC_WaitForSynchro+0x84>)
 80073d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073dc:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80073e0:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80073e2:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 80073ea:	9c01      	ldr	r4, [sp, #4]
 80073ec:	b91c      	cbnz	r4, 80073f6 <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 80073ee:	b99b      	cbnz	r3, 8007418 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	b002      	add	sp, #8
 80073f4:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d0f9      	beq.n	80073ee <LL_RTC_WaitForSynchro+0x22>
 80073fa:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80073fc:	03d4      	lsls	r4, r2, #15
      timeout--;
 80073fe:	bf42      	ittt	mi
 8007400:	9a01      	ldrmi	r2, [sp, #4]
 8007402:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8007406:	9201      	strmi	r2, [sp, #4]
 8007408:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 800740a:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 800740c:	2c00      	cmp	r4, #0
 800740e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007412:	bf08      	it	eq
 8007414:	2300      	moveq	r3, #0
 8007416:	e7e8      	b.n	80073ea <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8007418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	68c2      	ldr	r2, [r0, #12]
 8007420:	490b      	ldr	r1, [pc, #44]	; (8007450 <LL_RTC_WaitForSynchro+0x84>)
 8007422:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 8007426:	9c01      	ldr	r4, [sp, #4]
 8007428:	2c00      	cmp	r4, #0
 800742a:	d0e1      	beq.n	80073f0 <LL_RTC_WaitForSynchro+0x24>
 800742c:	2a00      	cmp	r2, #0
 800742e:	d1df      	bne.n	80073f0 <LL_RTC_WaitForSynchro+0x24>
 8007430:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8007432:	03d2      	lsls	r2, r2, #15
        timeout--;
 8007434:	bf42      	ittt	mi
 8007436:	9a01      	ldrmi	r2, [sp, #4]
 8007438:	f102 32ff 	addmi.w	r2, r2, #4294967295
 800743c:	9201      	strmi	r2, [sp, #4]
 800743e:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8007440:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8007442:	2c00      	cmp	r4, #0
 8007444:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007448:	bf08      	it	eq
 800744a:	2300      	moveq	r3, #0
 800744c:	e7eb      	b.n	8007426 <LL_RTC_WaitForSynchro+0x5a>
 800744e:	bf00      	nop
 8007450:	e000e010 	.word	0xe000e010

08007454 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8007454:	6883      	ldr	r3, [r0, #8]
{
 8007456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007458:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800745a:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 800745c:	bf5c      	itt	pl
 800745e:	2300      	movpl	r3, #0
 8007460:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007462:	23ca      	movs	r3, #202	; 0xca
 8007464:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007466:	2353      	movs	r3, #83	; 0x53
 8007468:	6243      	str	r3, [r0, #36]	; 0x24
{
 800746a:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 800746c:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800746e:	f7ff ff59 	bl	8007324 <LL_RTC_EnterInitMode>
 8007472:	b190      	cbz	r0, 800749a <LL_RTC_TIME_Init+0x46>
 8007474:	796b      	ldrb	r3, [r5, #5]
 8007476:	792a      	ldrb	r2, [r5, #4]
 8007478:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800747a:	b196      	cbz	r6, 80074a2 <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800747c:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800747e:	6829      	ldr	r1, [r5, #0]
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff fe9f 	bl	80071c4 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <LL_RTC_TIME_Init+0x84>)
 8007488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800748c:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800748e:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8007490:	069b      	lsls	r3, r3, #26
 8007492:	d41e      	bmi.n	80074d2 <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007494:	4620      	mov	r0, r4
 8007496:	f7ff ff99 	bl	80073cc <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800749a:	23ff      	movs	r3, #255	; 0xff
 800749c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800749e:	b002      	add	sp, #8
 80074a0:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80074a2:	210a      	movs	r1, #10
 80074a4:	fbb3 f6f1 	udiv	r6, r3, r1
 80074a8:	fb01 3316 	mls	r3, r1, r6, r3
 80074ac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80074b0:	fbb2 f6f1 	udiv	r6, r2, r1
 80074b4:	fb01 2216 	mls	r2, r1, r6, r2
 80074b8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80074bc:	fbb0 f6f1 	udiv	r6, r0, r1
 80074c0:	fb01 0116 	mls	r1, r1, r6, r0
 80074c4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80074c8:	b2c9      	uxtb	r1, r1
 80074ca:	9100      	str	r1, [sp, #0]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	e7d5      	b.n	800747e <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7e1      	b.n	800749a <LL_RTC_TIME_Init+0x46>
 80074d6:	bf00      	nop
 80074d8:	40002800 	.word	0x40002800

080074dc <LL_RTC_DATE_Init>:
{
 80074dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80074e2:	460f      	mov	r7, r1
 80074e4:	b931      	cbnz	r1, 80074f4 <LL_RTC_DATE_Init+0x18>
 80074e6:	7853      	ldrb	r3, [r2, #1]
 80074e8:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 80074ea:	bf42      	ittt	mi
 80074ec:	f023 0310 	bicmi.w	r3, r3, #16
 80074f0:	330a      	addmi	r3, #10
 80074f2:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80074f4:	23ca      	movs	r3, #202	; 0xca
 80074f6:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80074f8:	2353      	movs	r3, #83	; 0x53
 80074fa:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff ff11 	bl	8007324 <LL_RTC_EnterInitMode>
 8007502:	b198      	cbz	r0, 800752c <LL_RTC_DATE_Init+0x50>
 8007504:	7873      	ldrb	r3, [r6, #1]
 8007506:	78b5      	ldrb	r5, [r6, #2]
 8007508:	7831      	ldrb	r1, [r6, #0]
 800750a:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800750c:	b197      	cbz	r7, 8007534 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800750e:	9600      	str	r6, [sp, #0]
 8007510:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007512:	4620      	mov	r0, r4
 8007514:	f7ff feaa 	bl	800726c <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <LL_RTC_DATE_Init+0x8c>)
 800751a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800751e:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8007520:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8007522:	069b      	lsls	r3, r3, #26
 8007524:	d41e      	bmi.n	8007564 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff ff50 	bl	80073cc <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800752c:	23ff      	movs	r3, #255	; 0xff
 800752e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007530:	b003      	add	sp, #12
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8007534:	200a      	movs	r0, #10
 8007536:	fbb3 f2f0 	udiv	r2, r3, r0
 800753a:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800753e:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8007542:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007546:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800754a:	fbb6 f5f0 	udiv	r5, r6, r0
 800754e:	fb00 6015 	mls	r0, r0, r5, r6
 8007552:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007556:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 800755a:	b2c0      	uxtb	r0, r0
 800755c:	9000      	str	r0, [sp, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	e7d6      	b.n	8007512 <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 8007564:	2001      	movs	r0, #1
 8007566:	e7e1      	b.n	800752c <LL_RTC_DATE_Init+0x50>
 8007568:	40002800 	.word	0x40002800

0800756c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800756c:	b084      	sub	sp, #16
 800756e:	b510      	push	{r4, lr}
 8007570:	ac03      	add	r4, sp, #12
 8007572:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007576:	9904      	ldr	r1, [sp, #16]
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	6842      	ldr	r2, [r0, #4]
 800757c:	430b      	orrs	r3, r1
 800757e:	9905      	ldr	r1, [sp, #20]
 8007580:	430b      	orrs	r3, r1
 8007582:	9906      	ldr	r1, [sp, #24]
 8007584:	430b      	orrs	r3, r1
 8007586:	9907      	ldr	r1, [sp, #28]
 8007588:	430b      	orrs	r3, r1
 800758a:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 800758c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007590:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8007594:	430b      	orrs	r3, r1
 8007596:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800759a:	4313      	orrs	r3, r2
 800759c:	6043      	str	r3, [r0, #4]
}
 800759e:	b004      	add	sp, #16
 80075a0:	2000      	movs	r0, #0
 80075a2:	4770      	bx	lr

080075a4 <SDMMC_ReadFIFO>:
 80075a4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80075a8:	4770      	bx	lr

080075aa <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80075aa:	2303      	movs	r3, #3
 80075ac:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 80075ae:	2000      	movs	r0, #0
 80075b0:	4770      	bx	lr

080075b2 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075b2:	6800      	ldr	r0, [r0, #0]
}
 80075b4:	f000 0003 	and.w	r0, r0, #3
 80075b8:	4770      	bx	lr

080075ba <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80075ba:	680b      	ldr	r3, [r1, #0]
 80075bc:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80075be:	68c3      	ldr	r3, [r0, #12]
 80075c0:	684a      	ldr	r2, [r1, #4]
 80075c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075c6:	f023 030f 	bic.w	r3, r3, #15
 80075ca:	4313      	orrs	r3, r2
 80075cc:	688a      	ldr	r2, [r1, #8]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	68ca      	ldr	r2, [r1, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	690a      	ldr	r2, [r1, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 80075da:	2000      	movs	r0, #0
 80075dc:	4770      	bx	lr

080075de <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 80075de:	6900      	ldr	r0, [r0, #16]
}
 80075e0:	b2c0      	uxtb	r0, r0
 80075e2:	4770      	bx	lr

080075e4 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80075e4:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80075e6:	3014      	adds	r0, #20
 80075e8:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80075ee:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	6818      	ldr	r0, [r3, #0]
}  
 80075f4:	b002      	add	sp, #8
 80075f6:	4770      	bx	lr

080075f8 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80075fc:	684b      	ldr	r3, [r1, #4]
 80075fe:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007600:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007602:	688a      	ldr	r2, [r1, #8]
 8007604:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8007608:	4313      	orrs	r3, r2
 800760a:	68ca      	ldr	r2, [r1, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	690a      	ldr	r2, [r1, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	694a      	ldr	r2, [r1, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8007618:	2000      	movs	r0, #0
 800761a:	4770      	bx	lr

0800761c <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800761c:	b084      	sub	sp, #16
 800761e:	b538      	push	{r3, r4, r5, lr}
 8007620:	ad05      	add	r5, sp, #20
 8007622:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007626:	68c3      	ldr	r3, [r0, #12]
 8007628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 800762c:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800762e:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8007630:	f000 fb76 	bl	8007d20 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007638:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 800763a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763e:	2000      	movs	r0, #0
 8007640:	b004      	add	sp, #16
 8007642:	4770      	bx	lr

08007644 <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007644:	6883      	ldr	r3, [r0, #8]
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800764c:	2000      	movs	r0, #0
 800764e:	4770      	bx	lr

08007650 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007650:	6883      	ldr	r3, [r0, #8]
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007658:	2000      	movs	r0, #0
 800765a:	4770      	bx	lr

0800765c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 800765c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800765e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 8007660:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007662:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007666:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8007668:	d108      	bne.n	800767c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800766a:	68c3      	ldr	r3, [r0, #12]
 800766c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007670:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8007672:	2032      	movs	r0, #50	; 0x32
 8007674:	f7fd f824 	bl	80046c0 <HAL_Delay>
  
  return HAL_OK;
}
 8007678:	2000      	movs	r0, #0
 800767a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 800767c:	2900      	cmp	r1, #0
 800767e:	d1f8      	bne.n	8007672 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8007680:	68c3      	ldr	r3, [r0, #12]
 8007682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007686:	60c3      	str	r3, [r0, #12]
 8007688:	e7f3      	b.n	8007672 <USB_SetCurrentMode+0x16>
	...

0800768c <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800768c:	b084      	sub	sp, #16
 800768e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007692:	4604      	mov	r4, r0
 8007694:	a809      	add	r0, sp, #36	; 0x24
 8007696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800769a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800769c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800769e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80076a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076a6:	4689      	mov	r9, r1
 80076a8:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80076aa:	b95f      	cbnz	r7, 80076c4 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80076ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076b2:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ba:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80076c4:	2500      	movs	r5, #0
 80076c6:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076ca:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80076ce:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80076d2:	2103      	movs	r1, #3
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 f893 	bl	8007800 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80076da:	2110      	movs	r1, #16
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 f86d 	bl	80077bc <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076e2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 f87a 	bl	80077e0 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 80076f0:	6135      	str	r5, [r6, #16]
 80076f2:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 80076f4:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80076f6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80076fa:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80076fc:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 80076fe:	61f5      	str	r5, [r6, #28]
 8007700:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007704:	454d      	cmp	r5, r9
 8007706:	d13c      	bne.n	8007782 <USB_DevInit+0xf6>
 8007708:	2200      	movs	r2, #0
 800770a:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800770e:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007714:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007718:	4295      	cmp	r5, r2
 800771a:	d13e      	bne.n	800779a <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800771c:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 800771e:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007726:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8007728:	d108      	bne.n	800773c <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800772a:	4b22      	ldr	r3, [pc, #136]	; (80077b4 <USB_DevInit+0x128>)
 800772c:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800772e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007734:	f043 0303 	orr.w	r3, r3, #3
 8007738:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 800773a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007740:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007744:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8007746:	f1b8 0f00 	cmp.w	r8, #0
 800774a:	d103      	bne.n	8007754 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800774c:	69a3      	ldr	r3, [r4, #24]
 800774e:	f043 0310 	orr.w	r3, r3, #16
 8007752:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8007754:	69a2      	ldr	r2, [r4, #24]
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <USB_DevInit+0x12c>)
 8007758:	4313      	orrs	r3, r2
 800775a:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 800775c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800775e:	b11b      	cbz	r3, 8007768 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007760:	69a3      	ldr	r3, [r4, #24]
 8007762:	f043 0308 	orr.w	r3, r3, #8
 8007766:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8007768:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 800776a:	bf01      	itttt	eq
 800776c:	69a3      	ldreq	r3, [r4, #24]
 800776e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007772:	f043 0304 	orreq.w	r3, r3, #4
 8007776:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8007778:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777c:	2000      	movs	r0, #0
 800777e:	b004      	add	sp, #16
 8007780:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007782:	f8d3 e000 	ldr.w	lr, [r3]
 8007786:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800778a:	bfb4      	ite	lt
 800778c:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 800778e:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007790:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8007792:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007794:	6098      	str	r0, [r3, #8]
 8007796:	3320      	adds	r3, #32
 8007798:	e7b4      	b.n	8007704 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800779a:	f8d3 c000 	ldr.w	ip, [r3]
 800779e:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80077a2:	bfb4      	ite	lt
 80077a4:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 80077a6:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80077a8:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 80077aa:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80077ac:	f8c3 e008 	str.w	lr, [r3, #8]
 80077b0:	3320      	adds	r3, #32
 80077b2:	e7b1      	b.n	8007718 <USB_DevInit+0x8c>
 80077b4:	00800100 	.word	0x00800100
 80077b8:	803c3800 	.word	0x803c3800

080077bc <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80077bc:	0189      	lsls	r1, r1, #6
 80077be:	f041 0120 	orr.w	r1, r1, #32
 80077c2:	4a06      	ldr	r2, [pc, #24]	; (80077dc <USB_FlushTxFifo+0x20>)
 80077c4:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 80077c6:	3a01      	subs	r2, #1
 80077c8:	d005      	beq.n	80077d6 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077ca:	6903      	ldr	r3, [r0, #16]
 80077cc:	f013 0320 	ands.w	r3, r3, #32
 80077d0:	d1f9      	bne.n	80077c6 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80077d2:	4618      	mov	r0, r3
 80077d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077d6:	2003      	movs	r0, #3
}
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	00030d41 	.word	0x00030d41

080077e0 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077e0:	2310      	movs	r3, #16
 80077e2:	4a06      	ldr	r2, [pc, #24]	; (80077fc <USB_FlushRxFifo+0x1c>)
 80077e4:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80077e6:	3a01      	subs	r2, #1
 80077e8:	d005      	beq.n	80077f6 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077ea:	6903      	ldr	r3, [r0, #16]
 80077ec:	f013 0310 	ands.w	r3, r3, #16
 80077f0:	d1f9      	bne.n	80077e6 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80077f2:	4618      	mov	r0, r3
 80077f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077f6:	2003      	movs	r0, #3
}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	00030d41 	.word	0x00030d41

08007800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8007800:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007804:	4319      	orrs	r1, r3
 8007806:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800780a:	2000      	movs	r0, #0
 800780c:	4770      	bx	lr

0800780e <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800780e:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8007810:	784b      	ldrb	r3, [r1, #1]
 8007812:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007814:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8007818:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 800781c:	2b01      	cmp	r3, #1
 800781e:	d11b      	bne.n	8007858 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007820:	40a3      	lsls	r3, r4
 8007822:	b29b      	uxth	r3, r3
 8007824:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007826:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800782a:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800782c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	0412      	lsls	r2, r2, #16
 8007834:	d40e      	bmi.n	8007854 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007836:	688a      	ldr	r2, [r1, #8]
 8007838:	78c8      	ldrb	r0, [r1, #3]
 800783a:	681d      	ldr	r5, [r3, #0]
 800783c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007840:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007848:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800784c:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8007850:	4328      	orrs	r0, r5
 8007852:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8007854:	2000      	movs	r0, #0
 8007856:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800785c:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800785e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007862:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007864:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007868:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800786a:	6803      	ldr	r3, [r0, #0]
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	d4f1      	bmi.n	8007854 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007870:	688b      	ldr	r3, [r1, #8]
 8007872:	78c9      	ldrb	r1, [r1, #3]
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800787a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800787e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007882:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007886:	4313      	orrs	r3, r2
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	e7e3      	b.n	8007854 <USB_ActivateEndpoint+0x46>

0800788c <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800788c:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800788e:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007890:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8007894:	7809      	ldrb	r1, [r1, #0]
 8007896:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 800789a:	2b01      	cmp	r3, #1
 800789c:	d111      	bne.n	80078c2 <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800789e:	408b      	lsls	r3, r1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	43db      	mvns	r3, r3
 80078a4:	401c      	ands	r4, r3
 80078a6:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 80078a8:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 80078aa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 80078ae:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 80078b0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 80078b4:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 80078b6:	6803      	ldr	r3, [r0, #0]
 80078b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078bc:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 80078be:	2000      	movs	r0, #0
 80078c0:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80078c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078c6:	408b      	lsls	r3, r1
 80078c8:	43db      	mvns	r3, r3
 80078ca:	401c      	ands	r4, r3
 80078cc:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 80078ce:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80078d0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 80078d4:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80078d6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 80078da:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80078dc:	6803      	ldr	r3, [r0, #0]
 80078de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078e2:	6003      	str	r3, [r0, #0]
 80078e4:	e7eb      	b.n	80078be <USB_DeactivateEndpoint+0x32>
	...

080078e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80078ea:	784b      	ldrb	r3, [r1, #1]
 80078ec:	780c      	ldrb	r4, [r1, #0]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	694b      	ldr	r3, [r1, #20]
 80078f2:	d163      	bne.n	80079bc <USB_EPStartXfer+0xd4>
 80078f4:	2520      	movs	r5, #32
 80078f6:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80078fa:	fb15 6404 	smlabb	r4, r5, r4, r6
 80078fe:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8007900:	bb73      	cbnz	r3, 8007960 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007902:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8007906:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800790a:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800790c:	6925      	ldr	r5, [r4, #16]
 800790e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8007912:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007914:	6925      	ldr	r5, [r4, #16]
 8007916:	0ced      	lsrs	r5, r5, #19
 8007918:	04ed      	lsls	r5, r5, #19
 800791a:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 800791c:	78cf      	ldrb	r7, [r1, #3]
 800791e:	780d      	ldrb	r5, [r1, #0]
 8007920:	2f01      	cmp	r7, #1
 8007922:	f000 8089 	beq.w	8007a38 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007926:	b14b      	cbz	r3, 800793c <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007928:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 800792c:	2401      	movs	r4, #1
 800792e:	40ac      	lsls	r4, r5
 8007930:	ea44 040c 	orr.w	r4, r4, ip
 8007934:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8007938:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800793c:	780d      	ldrb	r5, [r1, #0]
 800793e:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8007942:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007944:	6834      	ldr	r4, [r6, #0]
 8007946:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800794a:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 800794c:	d105      	bne.n	800795a <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800794e:	9200      	str	r2, [sp, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	462a      	mov	r2, r5
 8007954:	68c9      	ldr	r1, [r1, #12]
 8007956:	f000 f8e3 	bl	8007b20 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 800795a:	2000      	movs	r0, #0
 800795c:	b003      	add	sp, #12
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007960:	0ced      	lsrs	r5, r5, #19
 8007962:	04ed      	lsls	r5, r5, #19
 8007964:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007966:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007968:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800796a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800796e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8007972:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007974:	19dd      	adds	r5, r3, r7
 8007976:	3d01      	subs	r5, #1
 8007978:	fbb5 f7f7 	udiv	r7, r5, r7
 800797c:	4d35      	ldr	r5, [pc, #212]	; (8007a54 <USB_EPStartXfer+0x16c>)
 800797e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8007982:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8007986:	ea45 050e 	orr.w	r5, r5, lr
 800798a:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800798c:	6927      	ldr	r7, [r4, #16]
 800798e:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8007992:	433d      	orrs	r5, r7
 8007994:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8007996:	78cd      	ldrb	r5, [r1, #3]
 8007998:	2d01      	cmp	r5, #1
 800799a:	d1bf      	bne.n	800791c <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800799c:	6925      	ldr	r5, [r4, #16]
 800799e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80079a2:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 80079a4:	6925      	ldr	r5, [r4, #16]
 80079a6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80079aa:	6125      	str	r5, [r4, #16]
 80079ac:	e7b6      	b.n	800791c <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079ae:	fb14 6405 	smlabb	r4, r4, r5, r6
 80079b2:	6825      	ldr	r5, [r4, #0]
 80079b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80079b8:	6025      	str	r5, [r4, #0]
 80079ba:	e7bf      	b.n	800793c <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80079bc:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 80079c0:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 80079c4:	6914      	ldr	r4, [r2, #16]
 80079c6:	0ce4      	lsrs	r4, r4, #19
 80079c8:	04e4      	lsls	r4, r4, #19
 80079ca:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80079cc:	6914      	ldr	r4, [r2, #16]
 80079ce:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80079d2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80079d6:	6114      	str	r4, [r2, #16]
 80079d8:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 80079da:	b9db      	cbnz	r3, 8007a14 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079dc:	6913      	ldr	r3, [r2, #16]
 80079de:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80079e2:	431c      	orrs	r4, r3
 80079e4:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 80079e6:	6913      	ldr	r3, [r2, #16]
 80079e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ec:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 80079ee:	78cb      	ldrb	r3, [r1, #3]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d10a      	bne.n	8007a0a <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80079f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80079f8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	bf0c      	ite	eq
 8007a00:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a04:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007a08:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a0a:	6813      	ldr	r3, [r2, #0]
 8007a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a10:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007a12:	e7a2      	b.n	800795a <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8007a14:	4d0f      	ldr	r5, [pc, #60]	; (8007a54 <USB_EPStartXfer+0x16c>)
 8007a16:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8007a18:	4423      	add	r3, r4
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8007a20:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8007a24:	4335      	orrs	r5, r6
 8007a26:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	6915      	ldr	r5, [r2, #16]
 8007a2c:	435c      	muls	r4, r3
 8007a2e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007a32:	432c      	orrs	r4, r5
 8007a34:	6114      	str	r4, [r2, #16]
 8007a36:	e7da      	b.n	80079ee <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007a38:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8007a3c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007a40:	f04f 0420 	mov.w	r4, #32
 8007a44:	d0b3      	beq.n	80079ae <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a46:	fb14 6405 	smlabb	r4, r4, r5, r6
 8007a4a:	6825      	ldr	r5, [r4, #0]
 8007a4c:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8007a50:	6025      	str	r5, [r4, #0]
 8007a52:	e773      	b.n	800793c <USB_EPStartXfer+0x54>
 8007a54:	1ff80000 	.word	0x1ff80000

08007a58 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8007a58:	784b      	ldrb	r3, [r1, #1]
 8007a5a:	2b01      	cmp	r3, #1
{
 8007a5c:	b530      	push	{r4, r5, lr}
 8007a5e:	780b      	ldrb	r3, [r1, #0]
 8007a60:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8007a62:	d13e      	bne.n	8007ae2 <USB_EP0StartXfer+0x8a>
 8007a64:	2220      	movs	r2, #32
 8007a66:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007a6a:	fb12 4303 	smlabb	r3, r2, r3, r4
 8007a6e:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8007a70:	b9fd      	cbnz	r5, 8007ab2 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007a72:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007a76:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007a7a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007a7c:	691a      	ldr	r2, [r3, #16]
 8007a7e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007a82:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	0cd2      	lsrs	r2, r2, #19
 8007a88:	04d2      	lsls	r2, r2, #19
 8007a8a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8007a8c:	694b      	ldr	r3, [r1, #20]
 8007a8e:	b13b      	cbz	r3, 8007aa0 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8007a90:	780d      	ldrb	r5, [r1, #0]
 8007a92:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8007a96:	2301      	movs	r3, #1
 8007a98:	40ab      	lsls	r3, r5
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8007aa0:	780b      	ldrb	r3, [r1, #0]
 8007aa2:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007aac:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8007aae:	2000      	movs	r0, #0
 8007ab0:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab2:	0cd2      	lsrs	r2, r2, #19
 8007ab4:	04d2      	lsls	r2, r2, #19
 8007ab6:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007abe:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007ac2:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8007ac4:	688a      	ldr	r2, [r1, #8]
 8007ac6:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8007ac8:	bf88      	it	hi
 8007aca:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007acc:	691a      	ldr	r2, [r3, #16]
 8007ace:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007ad2:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007ad4:	694a      	ldr	r2, [r1, #20]
 8007ad6:	691d      	ldr	r5, [r3, #16]
 8007ad8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007adc:	432a      	orrs	r2, r5
 8007ade:	611a      	str	r2, [r3, #16]
 8007ae0:	e7d4      	b.n	8007a8c <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8007ae2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8007ae6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007aea:	6903      	ldr	r3, [r0, #16]
 8007aec:	0cdb      	lsrs	r3, r3, #19
 8007aee:	04db      	lsls	r3, r3, #19
 8007af0:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8007af2:	6903      	ldr	r3, [r0, #16]
 8007af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007afc:	6103      	str	r3, [r0, #16]
 8007afe:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8007b00:	b105      	cbz	r5, 8007b04 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8007b02:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8007b04:	6902      	ldr	r2, [r0, #16]
 8007b06:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007b0a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8007b0c:	6902      	ldr	r2, [r0, #16]
 8007b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b12:	4313      	orrs	r3, r2
 8007b14:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8007b16:	6803      	ldr	r3, [r0, #0]
 8007b18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b1c:	6003      	str	r3, [r0, #0]
 8007b1e:	e7c6      	b.n	8007aae <USB_EP0StartXfer+0x56>

08007b20 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8007b20:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007b22:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 8007b26:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8007b28:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007b2a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8007b2e:	2400      	movs	r4, #0
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d101      	bne.n	8007b38 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 8007b34:	2000      	movs	r0, #0
 8007b36:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007b38:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8007b3c:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8007b3e:	3401      	adds	r4, #1
 8007b40:	e7f6      	b.n	8007b30 <USB_WritePacket+0x10>

08007b42 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b42:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8007b44:	3203      	adds	r2, #3
 8007b46:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007b48:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8007b4a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d102      	bne.n	8007b58 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8007b52:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007b56:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8007b58:	6804      	ldr	r4, [r0, #0]
 8007b5a:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007b5e:	3301      	adds	r3, #1
 8007b60:	e7f5      	b.n	8007b4e <USB_ReadPacket+0xc>

08007b62 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8007b62:	784b      	ldrb	r3, [r1, #1]
 8007b64:	780a      	ldrb	r2, [r1, #0]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	f04f 0320 	mov.w	r3, #32
 8007b6c:	d10b      	bne.n	8007b86 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8007b6e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8007b72:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007b76:	6803      	ldr	r3, [r0, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	db0b      	blt.n	8007b94 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8007b7c:	6803      	ldr	r3, [r0, #0]
 8007b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b82:	6003      	str	r3, [r0, #0]
 8007b84:	e006      	b.n	8007b94 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8007b86:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8007b8a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007b8e:	6803      	ldr	r3, [r0, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	daf3      	bge.n	8007b7c <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b94:	6803      	ldr	r3, [r0, #0]
 8007b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b9a:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4770      	bx	lr

08007ba0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8007ba0:	784b      	ldrb	r3, [r1, #1]
 8007ba2:	780a      	ldrb	r2, [r1, #0]
 8007ba4:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ba6:	bf0c      	ite	eq
 8007ba8:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bac:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007bb6:	6803      	ldr	r3, [r0, #0]
 8007bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bbc:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8007bbe:	78cb      	ldrb	r3, [r1, #3]
 8007bc0:	3b02      	subs	r3, #2
 8007bc2:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bc4:	bf9e      	ittt	ls
 8007bc6:	6803      	ldrls	r3, [r0, #0]
 8007bc8:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8007bce:	2000      	movs	r0, #0
 8007bd0:	4770      	bx	lr

08007bd2 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd2:	b538      	push	{r3, r4, r5, lr}
 8007bd4:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 8007bd8:	4604      	mov	r4, r0
 8007bda:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007bde:	22ff      	movs	r2, #255	; 0xff
 8007be0:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007be2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007be6:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 8007be8:	428b      	cmp	r3, r1
 8007bea:	d1f9      	bne.n	8007be0 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8007bec:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 8007bf6:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 8007bf8:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 8007bfc:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 8007c00:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 8007c04:	f7ff fdec 	bl	80077e0 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 8007c08:	2110      	movs	r1, #16
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7ff fdd6 	bl	80077bc <USB_FlushTxFifo>
  
  return HAL_OK;
}
 8007c10:	4628      	mov	r0, r5
 8007c12:	bd38      	pop	{r3, r4, r5, pc}

08007c14 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8007c14:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c1c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8007c20:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c24:	0109      	lsls	r1, r1, #4
 8007c26:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007c2a:	4319      	orrs	r1, r3
 8007c2c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8007c30:	2000      	movs	r0, #0
 8007c32:	4770      	bx	lr

08007c34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8007c34:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 8007c36:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007c3a:	f023 0302 	bic.w	r3, r3, #2
 8007c3e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8007c42:	2003      	movs	r0, #3
 8007c44:	f7fc fd3c 	bl	80046c0 <HAL_Delay>
  
  return HAL_OK;  
}
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd08      	pop	{r3, pc}

08007c4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8007c4c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8007c4e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8007c5a:	2003      	movs	r0, #3
 8007c5c:	f7fc fd30 	bl	80046c0 <HAL_Delay>
  
  return HAL_OK;  
}
 8007c60:	2000      	movs	r0, #0
 8007c62:	bd08      	pop	{r3, pc}

08007c64 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8007c64:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007c66:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8007c68:	4010      	ands	r0, r2
 8007c6a:	4770      	bx	lr

08007c6c <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8007c6c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007c70:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c74:	69c0      	ldr	r0, [r0, #28]
 8007c76:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8007c78:	0c00      	lsrs	r0, r0, #16
 8007c7a:	4770      	bx	lr

08007c7c <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8007c7c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007c80:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c84:	69c0      	ldr	r0, [r0, #28]
 8007c86:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8007c88:	b280      	uxth	r0, r0
 8007c8a:	4770      	bx	lr

08007c8c <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8007c8c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007c90:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c94:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8007c98:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c9a:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8007c9c:	4010      	ands	r0, r2
 8007c9e:	4770      	bx	lr

08007ca0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8007ca0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8007ca2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ca6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8007caa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007cae:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8007cb0:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007cb4:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8007cb6:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4323      	orrs	r3, r4
  return tmpreg;
}
 8007cbc:	4018      	ands	r0, r3
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8007cc0:	6940      	ldr	r0, [r0, #20]
}
 8007cc2:	f000 0001 	and.w	r0, r0, #1
 8007cc6:	4770      	bx	lr

08007cc8 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cc8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007ccc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007cd8:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	f002 0206 	and.w	r2, r2, #6
 8007ce2:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8007ce4:	bf02      	ittt	eq
 8007ce6:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8007cea:	f042 0203 	orreq.w	r2, r2, #3
 8007cee:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	4770      	bx	lr

08007cfe <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8007cfe:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007d02:	2000      	movs	r0, #0
 8007d04:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007d0c:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	f042 0218 	orr.w	r2, r2, #24
 8007d14:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007d1c:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 8007d1e:	4770      	bx	lr

08007d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <USB_CoreReset+0x64>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d901      	bls.n	8007d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e01b      	b.n	8007d76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	daf2      	bge.n	8007d2c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f043 0201 	orr.w	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <USB_CoreReset+0x64>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e006      	b.n	8007d76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d0f0      	beq.n	8007d56 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	00030d40 	.word	0x00030d40

08007d88 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007d88:	4b08      	ldr	r3, [pc, #32]	; (8007dac <LL_mDelay+0x24>)
{
 8007d8a:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007d90:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8007d92:	4b06      	ldr	r3, [pc, #24]	; (8007dac <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8007d94:	1c41      	adds	r1, r0, #1
    Delay++;
 8007d96:	bf18      	it	ne
 8007d98:	3001      	addne	r0, #1
  while (Delay)
 8007d9a:	b908      	cbnz	r0, 8007da0 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8007d9c:	b002      	add	sp, #8
 8007d9e:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	03d2      	lsls	r2, r2, #15
      Delay--;
 8007da4:	bf48      	it	mi
 8007da6:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8007daa:	e7f6      	b.n	8007d9a <LL_mDelay+0x12>
 8007dac:	e000e010 	.word	0xe000e010

08007db0 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8007db0:	2320      	movs	r3, #32
 8007db2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8007db4:	4800      	ldr	r0, [pc, #0]	; (8007db8 <USBD_MSC_GetHSCfgDesc+0x8>)
 8007db6:	4770      	bx	lr
 8007db8:	2000027c 	.word	0x2000027c

08007dbc <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8007dc0:	4800      	ldr	r0, [pc, #0]	; (8007dc4 <USBD_MSC_GetFSCfgDesc+0x8>)
 8007dc2:	4770      	bx	lr
 8007dc4:	2000025c 	.word	0x2000025c

08007dc8 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8007dc8:	2320      	movs	r3, #32
 8007dca:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8007dcc:	4800      	ldr	r0, [pc, #0]	; (8007dd0 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8007dce:	4770      	bx	lr
 8007dd0:	200002a8 	.word	0x200002a8

08007dd4 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8007dd4:	230a      	movs	r3, #10
 8007dd6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8007dd8:	4800      	ldr	r0, [pc, #0]	; (8007ddc <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8007dda:	4770      	bx	lr
 8007ddc:	2000029c 	.word	0x2000029c

08007de0 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007de0:	7c03      	ldrb	r3, [r0, #16]
{
 8007de2:	b510      	push	{r4, lr}
 8007de4:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007de6:	b9c3      	cbnz	r3, 8007e1a <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8007de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dec:	2202      	movs	r2, #2
 8007dee:	2101      	movs	r1, #1
 8007df0:	f7fb fdef 	bl	80039d2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8007df4:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8007df8:	2202      	movs	r2, #2
 8007dfa:	2181      	movs	r1, #129	; 0x81
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7fb fde8 	bl	80039d2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8007e02:	f242 006c 	movw	r0, #8300	; 0x206c
 8007e06:	f002 fc41 	bl	800a68c <malloc>
 8007e0a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8007e0e:	b158      	cbz	r0, 8007e28 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 f8be 	bl	8007f92 <MSC_BOT_Init>
    ret = 0;
 8007e16:	2000      	movs	r0, #0
 8007e18:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8007e1a:	2340      	movs	r3, #64	; 0x40
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	2101      	movs	r1, #1
 8007e20:	f7fb fdd7 	bl	80039d2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	e7e7      	b.n	8007df8 <USBD_MSC_Init+0x18>
    ret = 1; 
 8007e28:	2001      	movs	r0, #1
}
 8007e2a:	bd10      	pop	{r4, pc}

08007e2c <USBD_MSC_DeInit>:
{
 8007e2c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8007e2e:	2101      	movs	r1, #1
{
 8007e30:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8007e32:	f7fb fdd8 	bl	80039e6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8007e36:	2181      	movs	r1, #129	; 0x81
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7fb fdd4 	bl	80039e6 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f8d6 	bl	8007ff0 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8007e44:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8007e48:	b120      	cbz	r0, 8007e54 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8007e4a:	f002 fc27 	bl	800a69c <free>
    pdev->pClassData  = NULL; 
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8007e54:	2000      	movs	r0, #0
 8007e56:	bd10      	pop	{r4, pc}

08007e58 <USBD_MSC_Setup>:
{
 8007e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5c:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007e5e:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e62:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8007e66:	4606      	mov	r6, r0
 8007e68:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e6a:	d02d      	beq.n	8007ec8 <USBD_MSC_Setup+0x70>
 8007e6c:	2c20      	cmp	r4, #32
 8007e6e:	d14a      	bne.n	8007f06 <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8007e70:	784a      	ldrb	r2, [r1, #1]
 8007e72:	2afe      	cmp	r2, #254	; 0xfe
 8007e74:	d005      	beq.n	8007e82 <USBD_MSC_Setup+0x2a>
 8007e76:	2aff      	cmp	r2, #255	; 0xff
 8007e78:	d019      	beq.n	8007eae <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8007e7a:	f000 fef2 	bl	8008c62 <USBD_CtlError>
       return USBD_FAIL; 
 8007e7e:	2402      	movs	r4, #2
 8007e80:	e01f      	b.n	8007ec2 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8007e82:	884c      	ldrh	r4, [r1, #2]
 8007e84:	b984      	cbnz	r4, 8007ea8 <USBD_MSC_Setup+0x50>
 8007e86:	88cf      	ldrh	r7, [r1, #6]
 8007e88:	2f01      	cmp	r7, #1
 8007e8a:	d10d      	bne.n	8007ea8 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8007e8c:	061a      	lsls	r2, r3, #24
 8007e8e:	d50b      	bpl.n	8007ea8 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007e90:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8007e98:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007e9a:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8007ea2:	f000 ff05 	bl	8008cb0 <USBD_CtlSendData>
      break;
 8007ea6:	e00c      	b.n	8007ec2 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4630      	mov	r0, r6
 8007eac:	e7e5      	b.n	8007e7a <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8007eae:	884a      	ldrh	r2, [r1, #2]
 8007eb0:	2a00      	cmp	r2, #0
 8007eb2:	d1f9      	bne.n	8007ea8 <USBD_MSC_Setup+0x50>
 8007eb4:	88cc      	ldrh	r4, [r1, #6]
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d1f6      	bne.n	8007ea8 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	d4f4      	bmi.n	8007ea8 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8007ebe:	f000 f88b 	bl	8007fd8 <MSC_BOT_Reset>
}
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8007ec8:	784f      	ldrb	r7, [r1, #1]
 8007eca:	2f0a      	cmp	r7, #10
 8007ecc:	d01d      	beq.n	8007f0a <USBD_MSC_Setup+0xb2>
 8007ece:	2f0b      	cmp	r7, #11
 8007ed0:	d01f      	beq.n	8007f12 <USBD_MSC_Setup+0xba>
 8007ed2:	2f01      	cmp	r7, #1
 8007ed4:	d1f5      	bne.n	8007ec2 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007ed6:	7909      	ldrb	r1, [r1, #4]
 8007ed8:	f7fb fd8c 	bl	80039f4 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8007edc:	7929      	ldrb	r1, [r5, #4]
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f7fb fd81 	bl	80039e6 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8007ee4:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	7c33      	ldrb	r3, [r6, #16]
 8007eec:	da17      	bge.n	8007f1e <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007eee:	b9a3      	cbnz	r3, 8007f1a <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8007ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7fb fd6a 	bl	80039d2 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007efe:	7929      	ldrb	r1, [r5, #4]
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f931 	bl	8008168 <MSC_BOT_CplClrFeature>
  return 0;
 8007f06:	2400      	movs	r4, #0
 8007f08:	e7db      	b.n	8007ec2 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f108 0104 	add.w	r1, r8, #4
 8007f10:	e7c7      	b.n	8007ea2 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8007f12:	788b      	ldrb	r3, [r1, #2]
 8007f14:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8007f18:	e7d3      	b.n	8007ec2 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8007f1a:	2340      	movs	r3, #64	; 0x40
 8007f1c:	e7ea      	b.n	8007ef4 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007f1e:	b923      	cbnz	r3, 8007f2a <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8007f20:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8007f24:	2202      	movs	r2, #2
 8007f26:	4639      	mov	r1, r7
 8007f28:	e7e6      	b.n	8007ef8 <USBD_MSC_Setup+0xa0>
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	e7fa      	b.n	8007f24 <USBD_MSC_Setup+0xcc>

08007f2e <USBD_MSC_DataIn>:
{
 8007f2e:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8007f30:	f000 f882 	bl	8008038 <MSC_BOT_DataIn>
}
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd08      	pop	{r3, pc}

08007f38 <USBD_MSC_DataOut>:
{
 8007f38:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8007f3a:	f000 f89b 	bl	8008074 <MSC_BOT_DataOut>
}
 8007f3e:	2000      	movs	r0, #0
 8007f40:	bd08      	pop	{r3, pc}

08007f42 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8007f42:	b109      	cbz	r1, 8007f48 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8007f44:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8007f48:	2000      	movs	r0, #0
 8007f4a:	4770      	bx	lr

08007f4c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8007f4c:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8007f4e:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007f52:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8007f56:	5ce3      	ldrb	r3, [r4, r3]
{
 8007f58:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8007f5a:	b943      	cbnz	r3, 8007f6e <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8007f5c:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8007f60:	58e3      	ldr	r3, [r4, r3]
 8007f62:	b123      	cbz	r3, 8007f6e <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8007f64:	7a63      	ldrb	r3, [r4, #9]
 8007f66:	b913      	cbnz	r3, 8007f6e <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8007f68:	2101      	movs	r1, #1
 8007f6a:	f7fb fd4a 	bl	8003a02 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007f6e:	2181      	movs	r1, #129	; 0x81
 8007f70:	4628      	mov	r0, r5
 8007f72:	f7fb fd46 	bl	8003a02 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007f76:	7a63      	ldrb	r3, [r4, #9]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d109      	bne.n	8007f90 <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8007f7c:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007f80:	4628      	mov	r0, r5
 8007f82:	231f      	movs	r3, #31
 8007f84:	320c      	adds	r2, #12
 8007f86:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8007f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8007f8c:	f7fb bd68 	b.w	8003a60 <USBD_LL_PrepareReceive>
 8007f90:	bd70      	pop	{r4, r5, r6, pc}

08007f92 <MSC_BOT_Init>:
{
 8007f92:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8007f94:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007f98:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8007f9c:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007fa2:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8007fa4:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 8007fa6:	f242 035c 	movw	r3, #8284	; 0x205c
 8007faa:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8007fac:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7fb fd1c 	bl	80039f4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007fbc:	2181      	movs	r1, #129	; 0x81
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7fb fd18 	bl	80039f4 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8007fc4:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8007fc8:	4620      	mov	r0, r4
 8007fca:	231f      	movs	r3, #31
 8007fcc:	320c      	adds	r2, #12
 8007fce:	2101      	movs	r1, #1
}
 8007fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8007fd4:	f7fb bd44 	b.w	8003a60 <USBD_LL_PrepareReceive>

08007fd8 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007fd8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007fdc:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007fde:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007fe0:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007fe2:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8007fe4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007fe8:	231f      	movs	r3, #31
 8007fea:	320c      	adds	r2, #12
 8007fec:	f7fb bd38 	b.w	8003a60 <USBD_LL_PrepareReceive>

08007ff0 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007ff0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	721a      	strb	r2, [r3, #8]
 8007ff8:	4770      	bx	lr
	...

08007ffc <MSC_BOT_SendCSW>:
{
 8007ffc:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007ffe:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008002:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <MSC_BOT_SendCSW+0x38>)
 8008008:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 800800a:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 800800e:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 8008010:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8008012:	2300      	movs	r3, #0
 8008014:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8008016:	2181      	movs	r1, #129	; 0x81
 8008018:	230d      	movs	r3, #13
{
 800801a:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 800801c:	f7fb fd19 	bl	8003a52 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8008020:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008024:	4628      	mov	r0, r5
 8008026:	231f      	movs	r3, #31
 8008028:	320c      	adds	r2, #12
 800802a:	2101      	movs	r1, #1
}
 800802c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008030:	f7fb bd16 	b.w	8003a60 <USBD_LL_PrepareReceive>
 8008034:	53425355 	.word	0x53425355

08008038 <MSC_BOT_DataIn>:
{
 8008038:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800803a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 800803e:	7a1a      	ldrb	r2, [r3, #8]
 8008040:	2a02      	cmp	r2, #2
{
 8008042:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8008044:	d003      	beq.n	800804e <MSC_BOT_DataIn+0x16>
 8008046:	d314      	bcc.n	8008072 <MSC_BOT_DataIn+0x3a>
 8008048:	2a04      	cmp	r2, #4
 800804a:	d910      	bls.n	800806e <MSC_BOT_DataIn+0x36>
 800804c:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 800804e:	f242 0119 	movw	r1, #8217	; 0x2019
 8008052:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8008056:	321b      	adds	r2, #27
 8008058:	5c59      	ldrb	r1, [r3, r1]
 800805a:	f000 f8b3 	bl	80081c4 <SCSI_ProcessCmd>
 800805e:	2800      	cmp	r0, #0
 8008060:	da07      	bge.n	8008072 <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008062:	2101      	movs	r1, #1
 8008064:	4620      	mov	r0, r4
}
 8008066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800806a:	f7ff bfc7 	b.w	8007ffc <MSC_BOT_SendCSW>
 800806e:	2100      	movs	r1, #0
 8008070:	e7f9      	b.n	8008066 <MSC_BOT_DataIn+0x2e>
 8008072:	bd10      	pop	{r4, pc}

08008074 <MSC_BOT_DataOut>:
{
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008078:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 800807c:	7a26      	ldrb	r6, [r4, #8]
{
 800807e:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8008080:	b11e      	cbz	r6, 800808a <MSC_BOT_DataOut+0x16>
 8008082:	2e01      	cmp	r6, #1
 8008084:	d062      	beq.n	800814c <MSC_BOT_DataOut+0xd8>
 8008086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800808a:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800808e:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008092:	58e2      	ldr	r2, [r4, r3]
 8008094:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008098:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800809c:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800809e:	f854 3008 	ldr.w	r3, [r4, r8]
 80080a2:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80080a4:	2101      	movs	r1, #1
 80080a6:	f7fb fce2 	bl	8003a6e <USBD_LL_GetRxDataSize>
 80080aa:	281f      	cmp	r0, #31
 80080ac:	d110      	bne.n	80080d0 <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80080ae:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80080b2:	58e2      	ldr	r2, [r4, r3]
 80080b4:	4b2b      	ldr	r3, [pc, #172]	; (8008164 <MSC_BOT_DataOut+0xf0>)
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d10a      	bne.n	80080d0 <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 80080ba:	f242 0319 	movw	r3, #8217	; 0x2019
 80080be:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80080c0:	2901      	cmp	r1, #1
 80080c2:	d805      	bhi.n	80080d0 <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 80080c4:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 80080c8:	5ce3      	ldrb	r3, [r4, r3]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	2b0f      	cmp	r3, #15
 80080ce:	d90e      	bls.n	80080ee <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 80080d0:	f242 0119 	movw	r1, #8217	; 0x2019
 80080d4:	2320      	movs	r3, #32
 80080d6:	2205      	movs	r2, #5
 80080d8:	5c61      	ldrb	r1, [r4, r1]
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 fac2 	bl	8008664 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 80080e0:	2302      	movs	r3, #2
 80080e2:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 80080e4:	4628      	mov	r0, r5
}
 80080e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 80080ea:	f7ff bf2f 	b.w	8007f4c <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 80080ee:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80080f2:	321b      	adds	r2, #27
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 f865 	bl	80081c4 <SCSI_ProcessCmd>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	7a23      	ldrb	r3, [r4, #8]
 80080fe:	da07      	bge.n	8008110 <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8008100:	2b05      	cmp	r3, #5
 8008102:	d1ef      	bne.n	80080e4 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8008104:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8008106:	4628      	mov	r0, r5
}
 8008108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 800810c:	f7ff bf76 	b.w	8007ffc <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8008110:	3b01      	subs	r3, #1
 8008112:	2b02      	cmp	r3, #2
 8008114:	d924      	bls.n	8008160 <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8008116:	8961      	ldrh	r1, [r4, #10]
 8008118:	2900      	cmp	r1, #0
 800811a:	d0f4      	beq.n	8008106 <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800811c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8008120:	f852 3008 	ldr.w	r3, [r2, r8]
 8008124:	4299      	cmp	r1, r3
 8008126:	bf28      	it	cs
 8008128:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 800812a:	59d3      	ldr	r3, [r2, r7]
 800812c:	1a5b      	subs	r3, r3, r1
 800812e:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008130:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008134:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008136:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008138:	2304      	movs	r3, #4
 800813a:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800813c:	b28b      	uxth	r3, r1
 800813e:	f104 020c 	add.w	r2, r4, #12
 8008142:	2181      	movs	r1, #129	; 0x81
}
 8008144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008148:	f7fb bc83 	b.w	8003a52 <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 800814c:	f242 0319 	movw	r3, #8217	; 0x2019
 8008150:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008154:	321b      	adds	r2, #27
 8008156:	5ce1      	ldrb	r1, [r4, r3]
 8008158:	f000 f834 	bl	80081c4 <SCSI_ProcessCmd>
 800815c:	2800      	cmp	r0, #0
 800815e:	dbd1      	blt.n	8008104 <MSC_BOT_DataOut+0x90>
 8008160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008164:	43425355 	.word	0x43425355

08008168 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008168:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800816a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 800816e:	7a63      	ldrb	r3, [r4, #9]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d105      	bne.n	8008180 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008174:	2181      	movs	r1, #129	; 0x81
 8008176:	f7fb fc44 	bl	8003a02 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 800817a:	2300      	movs	r3, #0
 800817c:	7263      	strb	r3, [r4, #9]
 800817e:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008180:	060a      	lsls	r2, r1, #24
 8008182:	d506      	bpl.n	8008192 <MSC_BOT_CplClrFeature+0x2a>
 8008184:	2b01      	cmp	r3, #1
 8008186:	d004      	beq.n	8008192 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008188:	2101      	movs	r1, #1
  }
  
}
 800818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800818e:	f7ff bf35 	b.w	8007ffc <MSC_BOT_SendCSW>
 8008192:	bd10      	pop	{r4, pc}

08008194 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8008194:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008196:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800819a:	f242 055d 	movw	r5, #8285	; 0x205d
 800819e:	f242 063c 	movw	r6, #8252	; 0x203c
 80081a2:	5d43      	ldrb	r3, [r0, r5]
 80081a4:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80081ac:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80081ae:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80081b0:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 80081b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 80081b8:	bf08      	it	eq
 80081ba:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80081bc:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 80081be:	5543      	strb	r3, [r0, r5]
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080081c4 <SCSI_ProcessCmd>:
{
 80081c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 80081c8:	7813      	ldrb	r3, [r2, #0]
 80081ca:	2b1e      	cmp	r3, #30
{
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	4617      	mov	r7, r2
  switch (params[0])
 80081d2:	d00f      	beq.n	80081f4 <SCSI_ProcessCmd+0x30>
 80081d4:	d813      	bhi.n	80081fe <SCSI_ProcessCmd+0x3a>
 80081d6:	2b12      	cmp	r3, #18
 80081d8:	f000 80b4 	beq.w	8008344 <SCSI_ProcessCmd+0x180>
 80081dc:	d805      	bhi.n	80081ea <SCSI_ProcessCmd+0x26>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d060      	beq.n	80082a4 <SCSI_ProcessCmd+0xe0>
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d07b      	beq.n	80082de <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 80081e6:	2220      	movs	r2, #32
 80081e8:	e14a      	b.n	8008480 <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 80081ea:	2b1a      	cmp	r3, #26
 80081ec:	f000 80c8 	beq.w	8008380 <SCSI_ProcessCmd+0x1bc>
 80081f0:	2b1b      	cmp	r3, #27
 80081f2:	d1f8      	bne.n	80081e6 <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 80081f4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80081f8:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 80081fa:	815c      	strh	r4, [r3, #10]
 80081fc:	e06b      	b.n	80082d6 <SCSI_ProcessCmd+0x112>
  switch (params[0])
 80081fe:	2b28      	cmp	r3, #40	; 0x28
 8008200:	f000 810b 	beq.w	800841a <SCSI_ProcessCmd+0x256>
 8008204:	d828      	bhi.n	8008258 <SCSI_ProcessCmd+0x94>
 8008206:	2b23      	cmp	r3, #35	; 0x23
 8008208:	f000 80d8 	beq.w	80083bc <SCSI_ProcessCmd+0x1f8>
 800820c:	2b25      	cmp	r3, #37	; 0x25
 800820e:	d1ea      	bne.n	80081e6 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008210:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8008214:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008218:	f242 075e 	movw	r7, #8286	; 0x205e
 800821c:	f242 0860 	movw	r8, #8288	; 0x2060
 8008220:	4620      	mov	r0, r4
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	19f2      	adds	r2, r6, r7
 8008226:	eb06 0108 	add.w	r1, r6, r8
 800822a:	4798      	blx	r3
 800822c:	4604      	mov	r4, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	f040 80d9 	bne.w	80083e6 <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8008234:	f856 3008 	ldr.w	r3, [r6, r8]
 8008238:	3b01      	subs	r3, #1
 800823a:	0e1a      	lsrs	r2, r3, #24
 800823c:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 800823e:	0c1a      	lsrs	r2, r3, #16
 8008240:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8008242:	0a1a      	lsrs	r2, r3, #8
 8008244:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8008246:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008248:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800824a:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800824c:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800824e:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008250:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008252:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8008254:	2308      	movs	r3, #8
 8008256:	e0de      	b.n	8008416 <SCSI_ProcessCmd+0x252>
  switch (params[0])
 8008258:	2b2f      	cmp	r3, #47	; 0x2f
 800825a:	f000 81ac 	beq.w	80085b6 <SCSI_ProcessCmd+0x3f2>
 800825e:	2b5a      	cmp	r3, #90	; 0x5a
 8008260:	f000 809d 	beq.w	800839e <SCSI_ProcessCmd+0x1da>
 8008264:	2b2a      	cmp	r3, #42	; 0x2a
 8008266:	d1be      	bne.n	80081e6 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008268:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800826c:	7a33      	ldrb	r3, [r6, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 815e 	bne.w	8008530 <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8008274:	f242 0318 	movw	r3, #8216	; 0x2018
 8008278:	56f3      	ldrsb	r3, [r6, r3]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dbb3      	blt.n	80081e6 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800827e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008282:	4608      	mov	r0, r1
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	4798      	blx	r3
 8008288:	2800      	cmp	r0, #0
 800828a:	f040 80ac 	bne.w	80083e6 <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 800828e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8008292:	4620      	mov	r0, r4
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	4798      	blx	r3
 8008298:	4604      	mov	r4, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	f000 810d 	beq.w	80084ba <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 80082a0:	2227      	movs	r2, #39	; 0x27
 80082a2:	e0a1      	b.n	80083e8 <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80082a4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 80082a8:	f242 0314 	movw	r3, #8212	; 0x2014
 80082ac:	58f3      	ldr	r3, [r6, r3]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d199      	bne.n	80081e6 <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80082b2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80082b6:	4608      	mov	r0, r1
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	4798      	blx	r3
 80082bc:	4604      	mov	r4, r0
 80082be:	b148      	cbz	r0, 80082d4 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 80082c0:	223a      	movs	r2, #58	; 0x3a
 80082c2:	2102      	movs	r1, #2
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7ff ff65 	bl	8008194 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80082ca:	2305      	movs	r3, #5
 80082cc:	7233      	strb	r3, [r6, #8]
    return -1;
 80082ce:	f04f 34ff 	mov.w	r4, #4294967295
 80082d2:	e000      	b.n	80082d6 <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 80082d4:	8170      	strh	r0, [r6, #10]
}
 80082d6:	4620      	mov	r0, r4
 80082d8:	b003      	add	sp, #12
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 80082e2:	2400      	movs	r4, #0
 80082e4:	f103 020c 	add.w	r2, r3, #12
 80082e8:	f103 011e 	add.w	r1, r3, #30
 80082ec:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80082f0:	428a      	cmp	r2, r1
 80082f2:	d1fb      	bne.n	80082ec <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 80082f4:	2270      	movs	r2, #112	; 0x70
 80082f6:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80082f8:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80082fc:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80082fe:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8008302:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8008304:	5c1a      	ldrb	r2, [r3, r0]
 8008306:	5c59      	ldrb	r1, [r3, r1]
 8008308:	4291      	cmp	r1, r2
 800830a:	d013      	beq.n	8008334 <SCSI_ProcessCmd+0x170>
 800830c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8008310:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 8008314:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8008316:	5d4d      	ldrb	r5, [r1, r5]
 8008318:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800831a:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 800831e:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8008320:	5d4d      	ldrb	r5, [r1, r5]
 8008322:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8008324:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8008328:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 800832a:	7809      	ldrb	r1, [r1, #0]
 800832c:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 800832e:	bf14      	ite	ne
 8008330:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 8008332:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8008334:	2212      	movs	r2, #18
 8008336:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8008338:	793a      	ldrb	r2, [r7, #4]
 800833a:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 800833c:	bf98      	it	ls
 800833e:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 8008340:	2400      	movs	r4, #0
 8008342:	e7c8      	b.n	80082d6 <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 8008344:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008346:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 800834a:	07db      	lsls	r3, r3, #31
 800834c:	d415      	bmi.n	800837a <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800834e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8008358:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800835c:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 800835e:	7923      	ldrb	r3, [r4, #4]
 8008360:	3305      	adds	r3, #5
 8008362:	428b      	cmp	r3, r1
 8008364:	bf28      	it	cs
 8008366:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 8008368:	8153      	strh	r3, [r2, #10]
  while (len) 
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0e8      	beq.n	8008340 <SCSI_ProcessCmd+0x17c>
    len--;
 800836e:	3b01      	subs	r3, #1
 8008370:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8008372:	18d1      	adds	r1, r2, r3
 8008374:	5ce0      	ldrb	r0, [r4, r3]
 8008376:	7308      	strb	r0, [r1, #12]
 8008378:	e7f7      	b.n	800836a <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 800837a:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 800837c:	4cb6      	ldr	r4, [pc, #728]	; (8008658 <SCSI_ProcessCmd+0x494>)
 800837e:	e7f3      	b.n	8008368 <SCSI_ProcessCmd+0x1a4>
 8008380:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008384:	49b5      	ldr	r1, [pc, #724]	; (800865c <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 8008386:	2208      	movs	r2, #8
 8008388:	815a      	strh	r2, [r3, #10]
 800838a:	f103 0213 	add.w	r2, r3, #19
 800838e:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8008390:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8008394:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8008398:	4293      	cmp	r3, r2
 800839a:	d1f9      	bne.n	8008390 <SCSI_ProcessCmd+0x1cc>
 800839c:	e7d0      	b.n	8008340 <SCSI_ProcessCmd+0x17c>
 800839e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80083a2:	49af      	ldr	r1, [pc, #700]	; (8008660 <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 80083a4:	2208      	movs	r2, #8
 80083a6:	815a      	strh	r2, [r3, #10]
 80083a8:	f103 0213 	add.w	r2, r3, #19
 80083ac:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80083ae:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80083b2:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d1f9      	bne.n	80083ae <SCSI_ProcessCmd+0x1ea>
 80083ba:	e7c1      	b.n	8008340 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80083bc:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 80083c0:	2100      	movs	r1, #0
 80083c2:	f106 030c 	add.w	r3, r6, #12
 80083c6:	f106 0218 	add.w	r2, r6, #24
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d1fb      	bne.n	80083ca <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80083d2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80083d6:	4620      	mov	r0, r4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f10d 0202 	add.w	r2, sp, #2
 80083de:	a901      	add	r1, sp, #4
 80083e0:	4798      	blx	r3
 80083e2:	4604      	mov	r4, r0
 80083e4:	b118      	cbz	r0, 80083ee <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 80083e6:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 80083e8:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 80083ea:	4628      	mov	r0, r5
 80083ec:	e0eb      	b.n	80085c6 <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 80083ee:	2308      	movs	r3, #8
 80083f0:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80083f2:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80083f4:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80083f6:	3b01      	subs	r3, #1
 80083f8:	0e1a      	lsrs	r2, r3, #24
 80083fa:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 80083fc:	0c1a      	lsrs	r2, r3, #16
 80083fe:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8008400:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8008402:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8008404:	2302      	movs	r3, #2
 8008406:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008408:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800840c:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800840e:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008410:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008412:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 8008414:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 8008416:	8173      	strh	r3, [r6, #10]
 8008418:	e75d      	b.n	80082d6 <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800841a:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800841e:	7a33      	ldrb	r3, [r6, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 80f1 	bne.w	8008608 <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8008426:	f242 0318 	movw	r3, #8216	; 0x2018
 800842a:	56f3      	ldrsb	r3, [r6, r3]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f6bf aeda 	bge.w	80081e6 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8008432:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008436:	4608      	mov	r0, r1
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	4798      	blx	r3
 800843c:	2800      	cmp	r0, #0
 800843e:	d1d2      	bne.n	80083e6 <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 8008440:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008442:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 8008444:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008446:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 800844a:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 800844c:	4313      	orrs	r3, r2
 800844e:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008450:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 8008454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008458:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800845c:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 800845e:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008460:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008464:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008468:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 800846c:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008470:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008474:	185f      	adds	r7, r3, r1
 8008476:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008478:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800847a:	f240 80b5 	bls.w	80085e8 <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 800847e:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 8008480:	2105      	movs	r1, #5
 8008482:	e7b2      	b.n	80083ea <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 8008484:	b2bb      	uxth	r3, r7
 8008486:	4652      	mov	r2, sl
 8008488:	2181      	movs	r1, #129	; 0x81
 800848a:	4628      	mov	r0, r5
 800848c:	f7fb fae1 	bl	8003a52 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8008490:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 8008494:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8008498:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 800849c:	443b      	add	r3, r7
 800849e:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 80084a2:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 80084a4:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 80084a6:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 80084a8:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 80084ac:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	f47f af46 	bne.w	8008340 <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80084b4:	2303      	movs	r3, #3
 80084b6:	7233      	strb	r3, [r6, #8]
 80084b8:	e70d      	b.n	80082d6 <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 80084ba:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80084bc:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 80084be:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80084c0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 80084c4:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 80084c6:	431a      	orrs	r2, r3
 80084c8:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80084ca:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80084ce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80084d2:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 80084d6:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80084d8:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80084da:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80084de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80084e2:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80084e6:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80084ea:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80084ee:	1857      	adds	r7, r2, r1
 80084f0:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80084f2:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80084f4:	d8c3      	bhi.n	800847e <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80084f6:	f242 035e 	movw	r3, #8286	; 0x205e
 80084fa:	5af3      	ldrh	r3, [r6, r3]
 80084fc:	435a      	muls	r2, r3
 80084fe:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008502:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8008506:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008508:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800850a:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800850c:	4293      	cmp	r3, r2
 800850e:	f47f ae6a 	bne.w	80081e6 <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8008512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8008516:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800851a:	bf28      	it	cs
 800851c:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8008520:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 8008522:	b29b      	uxth	r3, r3
 8008524:	f106 020c 	add.w	r2, r6, #12
 8008528:	4628      	mov	r0, r5
 800852a:	f7fb fa99 	bl	8003a60 <USBD_LL_PrepareReceive>
 800852e:	e6d2      	b.n	80082d6 <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008530:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008534:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008538:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800853c:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008540:	f242 035e 	movw	r3, #8286	; 0x205e
 8008544:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008548:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 800854c:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008550:	bf28      	it	cs
 8008552:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008556:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008558:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 800855c:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008560:	4620      	mov	r0, r4
 8008562:	fbb1 f2f2 	udiv	r2, r1, r2
 8008566:	b29b      	uxth	r3, r3
 8008568:	4641      	mov	r1, r8
 800856a:	47d8      	blx	fp
 800856c:	2800      	cmp	r0, #0
 800856e:	da01      	bge.n	8008574 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 8008570:	2203      	movs	r2, #3
 8008572:	e06e      	b.n	8008652 <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 8008574:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8008578:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 800857c:	443b      	add	r3, r7
 800857e:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8008582:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 8008584:	f856 3009 	ldr.w	r3, [r6, r9]
 8008588:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 800858a:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 800858c:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8008590:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 8008592:	b923      	cbnz	r3, 800859e <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008594:	2100      	movs	r1, #0
 8008596:	4628      	mov	r0, r5
 8008598:	f7ff fd30 	bl	8007ffc <MSC_BOT_SendCSW>
 800859c:	e6d0      	b.n	8008340 <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 800859e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a2:	bf28      	it	cs
 80085a4:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4642      	mov	r2, r8
 80085ac:	2101      	movs	r1, #1
 80085ae:	4628      	mov	r0, r5
 80085b0:	f7fb fa56 	bl	8003a60 <USBD_LL_PrepareReceive>
 80085b4:	e6c4      	b.n	8008340 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 80085b6:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80085b8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 80085bc:	f014 0402 	ands.w	r4, r4, #2
 80085c0:	d004      	beq.n	80085cc <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 80085c2:	2224      	movs	r2, #36	; 0x24
 80085c4:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 80085c6:	f7ff fde5 	bl	8008194 <SCSI_SenseCode.constprop.8>
 80085ca:	e680      	b.n	80082ce <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80085cc:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 80085d0:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80085d4:	5a9a      	ldrh	r2, [r3, r2]
 80085d6:	5859      	ldr	r1, [r3, r1]
 80085d8:	440a      	add	r2, r1
 80085da:	f242 0160 	movw	r1, #8288	; 0x2060
 80085de:	5859      	ldr	r1, [r3, r1]
 80085e0:	428a      	cmp	r2, r1
 80085e2:	f67f ae0a 	bls.w	80081fa <SCSI_ProcessCmd+0x36>
 80085e6:	e74a      	b.n	800847e <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80085e8:	2202      	movs	r2, #2
 80085ea:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80085ec:	f242 025e 	movw	r2, #8286	; 0x205e
 80085f0:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80085f2:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80085f4:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80085f6:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80085fa:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80085fe:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8008600:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008602:	4291      	cmp	r1, r2
 8008604:	f47f adef 	bne.w	80081e6 <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8008608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800860c:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800860e:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8008612:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008616:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800861a:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800861e:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008622:	429f      	cmp	r7, r3
 8008624:	bf28      	it	cs
 8008626:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008628:	f242 0964 	movw	r9, #8292	; 0x2064
 800862c:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 8008630:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008634:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008636:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 800863a:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800863e:	4620      	mov	r0, r4
 8008640:	fbb1 f2f2 	udiv	r2, r1, r2
 8008644:	b29b      	uxth	r3, r3
 8008646:	4651      	mov	r1, sl
 8008648:	47d8      	blx	fp
 800864a:	2800      	cmp	r0, #0
 800864c:	f6bf af1a 	bge.w	8008484 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 8008650:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 8008652:	2104      	movs	r1, #4
 8008654:	e6c9      	b.n	80083ea <SCSI_ProcessCmd+0x226>
 8008656:	bf00      	nop
 8008658:	0800bc04 	.word	0x0800bc04
 800865c:	0800bc04 	.word	0x0800bc04
 8008660:	0800bbfc 	.word	0x0800bbfc

08008664 <SCSI_SenseCode>:
{
 8008664:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008666:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800866a:	f242 055d 	movw	r5, #8285	; 0x205d
 800866e:	f242 063c 	movw	r6, #8252	; 0x203c
 8008672:	5d41      	ldrb	r1, [r0, r5]
 8008674:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 8008678:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800867a:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 800867c:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800867e:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8008682:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008684:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008686:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8008688:	bf0a      	itet	eq
 800868a:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 800868c:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 800868e:	5543      	strbeq	r3, [r0, r5]
 8008690:	bd70      	pop	{r4, r5, r6, pc}

08008692 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008692:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008694:	b180      	cbz	r0, 80086b8 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008696:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800869a:	b113      	cbz	r3, 80086a2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800869c:	2300      	movs	r3, #0
 800869e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80086a2:	b109      	cbz	r1, 80086a8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80086a4:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80086ae:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80086b0:	f7fb f94c 	bl	800394c <USBD_LL_Init>

  return USBD_OK;
 80086b4:	2000      	movs	r0, #0
 80086b6:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80086b8:	2002      	movs	r0, #2
}
 80086ba:	bd08      	pop	{r3, pc}

080086bc <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 80086bc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80086c0:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 80086c2:	bf14      	ite	ne
 80086c4:	2002      	movne	r0, #2
 80086c6:	2000      	moveq	r0, #0
 80086c8:	4770      	bx	lr

080086ca <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80086ca:	2301      	movs	r3, #1
{
 80086cc:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80086ce:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80086d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80086d6:	7901      	ldrb	r1, [r0, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
{
 80086da:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80086dc:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80086de:	4620      	mov	r0, r4
 80086e0:	f7fb f970 	bl	80039c4 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7fb f95f 	bl	80039a8 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 80086ea:	2000      	movs	r0, #0
 80086ec:	bd10      	pop	{r4, pc}

080086ee <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80086ee:	b119      	cbz	r1, 80086f8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80086f0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80086f4:	2000      	movs	r0, #0
 80086f6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80086f8:	2002      	movs	r0, #2
  }
  
  return status;
}
 80086fa:	4770      	bx	lr

080086fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80086fc:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80086fe:	f7fb f95a 	bl	80039b6 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8008702:	2000      	movs	r0, #0
 8008704:	bd08      	pop	{r3, pc}

08008706 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8008706:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008708:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800870c:	7901      	ldrb	r1, [r0, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
{
 8008710:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008712:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8008714:	4620      	mov	r0, r4
 8008716:	f7fb f955 	bl	80039c4 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 800871a:	2000      	movs	r0, #0
 800871c:	bd10      	pop	{r4, pc}

0800871e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800871e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8008720:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008724:	b90b      	cbnz	r3, 800872a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008726:	2002      	movs	r0, #2
 8008728:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4798      	blx	r3
 800872e:	2800      	cmp	r0, #0
 8008730:	d1f9      	bne.n	8008726 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8008732:	bd08      	pop	{r3, pc}

08008734 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008734:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008736:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	4798      	blx	r3
  return USBD_OK;
}
 800873e:	2000      	movs	r0, #0
 8008740:	bd08      	pop	{r3, pc}

08008742 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008742:	b538      	push	{r3, r4, r5, lr}
 8008744:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008746:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800874a:	4628      	mov	r0, r5
 800874c:	f000 fa75 	bl	8008c3a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008750:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008752:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8008756:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800875a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800875e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8008762:	f001 031f 	and.w	r3, r1, #31
 8008766:	2b01      	cmp	r3, #1
 8008768:	d00e      	beq.n	8008788 <USBD_LL_SetupStage+0x46>
 800876a:	d307      	bcc.n	800877c <USBD_LL_SetupStage+0x3a>
 800876c:	2b02      	cmp	r3, #2
 800876e:	d010      	beq.n	8008792 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008770:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008774:	4620      	mov	r0, r4
 8008776:	f7fb f944 	bl	8003a02 <USBD_LL_StallEP>
    break;
 800877a:	e003      	b.n	8008784 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800877c:	4629      	mov	r1, r5
 800877e:	4620      	mov	r0, r4
 8008780:	f000 f8e6 	bl	8008950 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8008784:	2000      	movs	r0, #0
 8008786:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8008788:	4629      	mov	r1, r5
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f9da 	bl	8008b44 <USBD_StdItfReq>
    break;
 8008790:	e7f8      	b.n	8008784 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8008792:	4629      	mov	r1, r5
 8008794:	4620      	mov	r0, r4
 8008796:	f000 f9ed 	bl	8008b74 <USBD_StdEPReq>
    break;
 800879a:	e7f3      	b.n	8008784 <USBD_LL_SetupStage+0x42>

0800879c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4604      	mov	r4, r0
 80087a0:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80087a2:	bb11      	cbnz	r1, 80087ea <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087a4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d10f      	bne.n	80087cc <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80087ac:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80087b0:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d90b      	bls.n	80087d0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80087b8:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80087ba:	429a      	cmp	r2, r3
 80087bc:	bf28      	it	cs
 80087be:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80087c0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80087c4:	b292      	uxth	r2, r2
 80087c6:	4629      	mov	r1, r5
 80087c8:	f000 fa96 	bl	8008cf8 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80087cc:	2000      	movs	r0, #0
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80087d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	b123      	cbz	r3, 80087e2 <USBD_LL_DataOutStage+0x46>
 80087d8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80087dc:	2a03      	cmp	r2, #3
 80087de:	d100      	bne.n	80087e2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80087e0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fa90 	bl	8008d08 <USBD_CtlSendStatus>
 80087e8:	e7f0      	b.n	80087cc <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80087ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0eb      	beq.n	80087cc <USBD_LL_DataOutStage+0x30>
 80087f4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80087f8:	2a03      	cmp	r2, #3
 80087fa:	d1e7      	bne.n	80087cc <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80087fc:	4798      	blx	r3
 80087fe:	e7e5      	b.n	80087cc <USBD_LL_DataOutStage+0x30>

08008800 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	4613      	mov	r3, r2
 8008804:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8008806:	460e      	mov	r6, r1
 8008808:	2900      	cmp	r1, #0
 800880a:	d13d      	bne.n	8008888 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800880c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8008810:	2a02      	cmp	r2, #2
 8008812:	d10f      	bne.n	8008834 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8008814:	69c5      	ldr	r5, [r0, #28]
 8008816:	6a02      	ldr	r2, [r0, #32]
 8008818:	4295      	cmp	r5, r2
 800881a:	d914      	bls.n	8008846 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800881c:	1aaa      	subs	r2, r5, r2
 800881e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8008820:	4619      	mov	r1, r3
 8008822:	b292      	uxth	r2, r2
 8008824:	f000 fa51 	bl	8008cca <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008828:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800882a:	461a      	mov	r2, r3
 800882c:	4619      	mov	r1, r3
 800882e:	4620      	mov	r0, r4
 8008830:	f7fb f916 	bl	8003a60 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8008834:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008838:	2b01      	cmp	r3, #1
 800883a:	d102      	bne.n	8008842 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8008842:	2000      	movs	r0, #0
 8008844:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8008846:	6983      	ldr	r3, [r0, #24]
 8008848:	fbb3 f5f2 	udiv	r5, r3, r2
 800884c:	fb02 3515 	mls	r5, r2, r5, r3
 8008850:	b965      	cbnz	r5, 800886c <USBD_LL_DataInStage+0x6c>
 8008852:	429a      	cmp	r2, r3
 8008854:	d80a      	bhi.n	800886c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008856:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800885a:	4293      	cmp	r3, r2
 800885c:	d206      	bcs.n	800886c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800885e:	462a      	mov	r2, r5
 8008860:	f000 fa33 	bl	8008cca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008864:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8008868:	462b      	mov	r3, r5
 800886a:	e7de      	b.n	800882a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800886c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	b12b      	cbz	r3, 8008880 <USBD_LL_DataInStage+0x80>
 8008874:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8008878:	2a03      	cmp	r2, #3
 800887a:	d101      	bne.n	8008880 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800887c:	4620      	mov	r0, r4
 800887e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fa4c 	bl	8008d1e <USBD_CtlReceiveStatus>
 8008886:	e7d5      	b.n	8008834 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8008888:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0d7      	beq.n	8008842 <USBD_LL_DataInStage+0x42>
 8008892:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008896:	2a03      	cmp	r2, #3
 8008898:	d1d3      	bne.n	8008842 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800889a:	4798      	blx	r3
 800889c:	e7d1      	b.n	8008842 <USBD_LL_DataInStage+0x42>

0800889e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800889e:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80088a0:	2200      	movs	r2, #0
{
 80088a2:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80088a4:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088a6:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	f7fb f892 	bl	80039d2 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80088ae:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088b0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80088b4:	2200      	movs	r2, #0
 80088b6:	2180      	movs	r1, #128	; 0x80
 80088b8:	4620      	mov	r0, r4
 80088ba:	f7fb f88a 	bl	80039d2 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088be:	2301      	movs	r3, #1
 80088c0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80088c4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088c8:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80088ca:	b12b      	cbz	r3, 80088d8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80088cc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80088d0:	7921      	ldrb	r1, [r4, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	4620      	mov	r0, r4
 80088d6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80088d8:	2000      	movs	r0, #0
 80088da:	bd38      	pop	{r3, r4, r5, pc}

080088dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80088dc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80088de:	2000      	movs	r0, #0
 80088e0:	4770      	bx	lr

080088e2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80088e2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80088e6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088ea:	2304      	movs	r3, #4
 80088ec:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80088f0:	2000      	movs	r0, #0
 80088f2:	4770      	bx	lr

080088f4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80088f4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80088f8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80088fc:	2000      	movs	r0, #0
 80088fe:	4770      	bx	lr

08008900 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008900:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008902:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008906:	2a03      	cmp	r2, #3
 8008908:	d104      	bne.n	8008914 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800890a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	b103      	cbz	r3, 8008914 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008912:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008914:	2000      	movs	r0, #0
 8008916:	bd08      	pop	{r3, pc}

08008918 <USBD_LL_IsoINIncomplete>:
 8008918:	2000      	movs	r0, #0
 800891a:	4770      	bx	lr

0800891c <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800891c:	2000      	movs	r0, #0
 800891e:	4770      	bx	lr

08008920 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8008920:	2000      	movs	r0, #0
 8008922:	4770      	bx	lr

08008924 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008924:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008926:	2201      	movs	r2, #1
 8008928:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800892c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8008930:	7901      	ldrb	r1, [r0, #4]
 8008932:	6852      	ldr	r2, [r2, #4]
 8008934:	4790      	blx	r2
   
  return USBD_OK;
}
 8008936:	2000      	movs	r0, #0
 8008938:	bd08      	pop	{r3, pc}

0800893a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800893a:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800893c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800893e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8008940:	f7fb f85f 	bl	8003a02 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008944:	4620      	mov	r0, r4
 8008946:	2100      	movs	r1, #0
}
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800894c:	f7fb b859 	b.w	8003a02 <USBD_LL_StallEP>

08008950 <USBD_StdDevReq>:
{
 8008950:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8008952:	784b      	ldrb	r3, [r1, #1]
{
 8008954:	4604      	mov	r4, r0
 8008956:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8008958:	2b09      	cmp	r3, #9
 800895a:	d879      	bhi.n	8008a50 <USBD_StdDevReq+0x100>
 800895c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008960:	00e500c9 	.word	0x00e500c9
 8008964:	00d90078 	.word	0x00d90078
 8008968:	006d0078 	.word	0x006d0078
 800896c:	0078000a 	.word	0x0078000a
 8008970:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8008974:	884b      	ldrh	r3, [r1, #2]
 8008976:	0a1a      	lsrs	r2, r3, #8
 8008978:	3a01      	subs	r2, #1
 800897a:	2a06      	cmp	r2, #6
 800897c:	d868      	bhi.n	8008a50 <USBD_StdDevReq+0x100>
 800897e:	e8df f002 	tbb	[pc, r2]
 8008982:	1c04      	.short	0x1c04
 8008984:	49676729 	.word	0x49676729
 8008988:	52          	.byte	0x52
 8008989:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800898a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800898e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008990:	7c20      	ldrb	r0, [r4, #16]
 8008992:	f10d 0106 	add.w	r1, sp, #6
 8008996:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8008998:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800899c:	2a00      	cmp	r2, #0
 800899e:	d067      	beq.n	8008a70 <USBD_StdDevReq+0x120>
 80089a0:	88eb      	ldrh	r3, [r5, #6]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d064      	beq.n	8008a70 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80089a6:	429a      	cmp	r2, r3
 80089a8:	bf28      	it	cs
 80089aa:	461a      	movcs	r2, r3
 80089ac:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80089b0:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f97c 	bl	8008cb0 <USBD_CtlSendData>
 80089b8:	e05a      	b.n	8008a70 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80089ba:	7c02      	ldrb	r2, [r0, #16]
 80089bc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80089c0:	b932      	cbnz	r2, 80089d0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80089c4:	f10d 0006 	add.w	r0, sp, #6
 80089c8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ca:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089cc:	7043      	strb	r3, [r0, #1]
 80089ce:	e7e3      	b.n	8008998 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	e7f7      	b.n	80089c4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	d83a      	bhi.n	8008a50 <USBD_StdDevReq+0x100>
 80089da:	e8df f003 	tbb	[pc, r3]
 80089de:	0703      	.short	0x0703
 80089e0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80089e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	e7d1      	b.n	8008990 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	e7cd      	b.n	8008990 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	e7c9      	b.n	8008990 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	e7c5      	b.n	8008990 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a04:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	e7c1      	b.n	8008990 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a0c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	e7bd      	b.n	8008990 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8008a14:	7c03      	ldrb	r3, [r0, #16]
 8008a16:	b9db      	cbnz	r3, 8008a50 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a18:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008a1c:	f10d 0006 	add.w	r0, sp, #6
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	4798      	blx	r3
 8008a24:	e7b8      	b.n	8008998 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8008a26:	7c03      	ldrb	r3, [r0, #16]
 8008a28:	b993      	cbnz	r3, 8008a50 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a2a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008a2e:	f10d 0006 	add.w	r0, sp, #6
 8008a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a34:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a36:	2307      	movs	r3, #7
 8008a38:	e7c8      	b.n	80089cc <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8008a3a:	888b      	ldrh	r3, [r1, #4]
 8008a3c:	b943      	cbnz	r3, 8008a50 <USBD_StdDevReq+0x100>
 8008a3e:	88cb      	ldrh	r3, [r1, #6]
 8008a40:	b933      	cbnz	r3, 8008a50 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008a42:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008a46:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008a48:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008a4a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008a4e:	d103      	bne.n	8008a58 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8008a50:	4620      	mov	r0, r4
 8008a52:	f7ff ff72 	bl	800893a <USBD_CtlError.constprop.0>
    break;
 8008a56:	e00b      	b.n	8008a70 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8008a58:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7fa fff1 	bl	8003a44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f950 	bl	8008d08 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8008a68:	b12d      	cbz	r5, 8008a76 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8008a6a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008a6c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8008a70:	2000      	movs	r0, #0
 8008a72:	b003      	add	sp, #12
 8008a74:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7f8      	b.n	8008a6c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8008a7a:	7889      	ldrb	r1, [r1, #2]
 8008a7c:	4d30      	ldr	r5, [pc, #192]	; (8008b40 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008a7e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8008a80:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008a82:	d8e5      	bhi.n	8008a50 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8008a84:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d00c      	beq.n	8008aa6 <USBD_StdDevReq+0x156>
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d1df      	bne.n	8008a50 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8008a90:	b9b1      	cbnz	r1, 8008ac0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a92:	2302      	movs	r3, #2
 8008a94:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8008a98:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8008a9a:	f7ff fe4b 	bl	8008734 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f932 	bl	8008d08 <USBD_CtlSendStatus>
 8008aa4:	e7e4      	b.n	8008a70 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d0f9      	beq.n	8008a9e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8008aaa:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008aac:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008aae:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ab0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff fe32 	bl	800871e <USBD_SetClassConfig>
 8008aba:	2802      	cmp	r0, #2
 8008abc:	d1ef      	bne.n	8008a9e <USBD_StdDevReq+0x14e>
 8008abe:	e7c7      	b.n	8008a50 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8008ac0:	6841      	ldr	r1, [r0, #4]
 8008ac2:	2901      	cmp	r1, #1
 8008ac4:	d0eb      	beq.n	8008a9e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8008ac6:	b2c9      	uxtb	r1, r1
 8008ac8:	f7ff fe34 	bl	8008734 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008acc:	7829      	ldrb	r1, [r5, #0]
 8008ace:	6061      	str	r1, [r4, #4]
 8008ad0:	e7f0      	b.n	8008ab4 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8008ad2:	88ca      	ldrh	r2, [r1, #6]
 8008ad4:	2a01      	cmp	r2, #1
 8008ad6:	d1bb      	bne.n	8008a50 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8008ad8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d003      	beq.n	8008ae8 <USBD_StdDevReq+0x198>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d1b5      	bne.n	8008a50 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8008ae4:	1d01      	adds	r1, r0, #4
 8008ae6:	e764      	b.n	80089b2 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8008ae8:	4601      	mov	r1, r0
 8008aea:	2300      	movs	r3, #0
 8008aec:	f841 3f08 	str.w	r3, [r1, #8]!
 8008af0:	e75f      	b.n	80089b2 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8008af2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008af6:	3b02      	subs	r3, #2
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d8a9      	bhi.n	8008a50 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8008afc:	2301      	movs	r3, #1
 8008afe:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8008b00:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008b04:	b10b      	cbz	r3, 8008b0a <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8008b06:	2303      	movs	r3, #3
 8008b08:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f104 010c 	add.w	r1, r4, #12
 8008b10:	e74f      	b.n	80089b2 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b12:	884b      	ldrh	r3, [r1, #2]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d1ab      	bne.n	8008a70 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8008b18:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8008b1c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008b20:	4629      	mov	r1, r5
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	4620      	mov	r0, r4
 8008b26:	4798      	blx	r3
 8008b28:	e7b9      	b.n	8008a9e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8008b2a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008b2e:	3b02      	subs	r3, #2
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d88d      	bhi.n	8008a50 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8008b34:	884b      	ldrh	r3, [r1, #2]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d19a      	bne.n	8008a70 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e7ec      	b.n	8008b18 <USBD_StdDevReq+0x1c8>
 8008b3e:	bf00      	nop
 8008b40:	200005f2 	.word	0x200005f2

08008b44 <USBD_StdItfReq>:
{
 8008b44:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8008b46:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008b4a:	2b03      	cmp	r3, #3
{
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8008b50:	d10d      	bne.n	8008b6e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8008b52:	790b      	ldrb	r3, [r1, #4]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d80a      	bhi.n	8008b6e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8008b58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8008b60:	88eb      	ldrh	r3, [r5, #6]
 8008b62:	b913      	cbnz	r3, 8008b6a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 f8cf 	bl	8008d08 <USBD_CtlSendStatus>
}
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8008b6e:	f7ff fee4 	bl	800893a <USBD_CtlError.constprop.0>
    break;
 8008b72:	e7fa      	b.n	8008b6a <USBD_StdItfReq+0x26>

08008b74 <USBD_StdEPReq>:
{
 8008b74:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8008b76:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8008b78:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8008b7a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008b7e:	2a20      	cmp	r2, #32
{
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8008b84:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8008b86:	d105      	bne.n	8008b94 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8008b88:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	4798      	blx	r3
}
 8008b90:	2000      	movs	r0, #0
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8008b94:	784a      	ldrb	r2, [r1, #1]
 8008b96:	2a01      	cmp	r2, #1
 8008b98:	d01c      	beq.n	8008bd4 <USBD_StdEPReq+0x60>
 8008b9a:	d32a      	bcc.n	8008bf2 <USBD_StdEPReq+0x7e>
 8008b9c:	2a03      	cmp	r2, #3
 8008b9e:	d1f7      	bne.n	8008b90 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8008ba0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008ba4:	2a02      	cmp	r2, #2
 8008ba6:	d040      	beq.n	8008c2a <USBD_StdEPReq+0xb6>
 8008ba8:	2a03      	cmp	r2, #3
 8008baa:	d002      	beq.n	8008bb2 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8008bac:	f7ff fec5 	bl	800893a <USBD_CtlError.constprop.0>
      break;
 8008bb0:	e7ee      	b.n	8008b90 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8008bb2:	884a      	ldrh	r2, [r1, #2]
 8008bb4:	b922      	cbnz	r2, 8008bc0 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8008bb6:	065e      	lsls	r6, r3, #25
 8008bb8:	d002      	beq.n	8008bc0 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f7fa ff21 	bl	8003a02 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8008bc0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 f89b 	bl	8008d08 <USBD_CtlSendStatus>
 8008bd2:	e7dd      	b.n	8008b90 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8008bd4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008bd8:	2a02      	cmp	r2, #2
 8008bda:	d026      	beq.n	8008c2a <USBD_StdEPReq+0xb6>
 8008bdc:	2a03      	cmp	r2, #3
 8008bde:	d1e5      	bne.n	8008bac <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8008be0:	884a      	ldrh	r2, [r1, #2]
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d1d4      	bne.n	8008b90 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8008be6:	0659      	lsls	r1, r3, #25
 8008be8:	d0f0      	beq.n	8008bcc <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8008bea:	4619      	mov	r1, r3
 8008bec:	f7fa ff10 	bl	8003a10 <USBD_LL_ClearStallEP>
 8008bf0:	e7e6      	b.n	8008bc0 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8008bf2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008bf6:	2a02      	cmp	r2, #2
 8008bf8:	d017      	beq.n	8008c2a <USBD_StdEPReq+0xb6>
 8008bfa:	2a03      	cmp	r2, #3
 8008bfc:	d1d6      	bne.n	8008bac <USBD_StdEPReq+0x38>
 8008bfe:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8008c02:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008c06:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008c0a:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8008c0c:	bf14      	ite	ne
 8008c0e:	3514      	addne	r5, #20
 8008c10:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008c14:	f7fa ff03 	bl	8003a1e <USBD_LL_IsStallEP>
 8008c18:	b168      	cbz	r0, 8008c36 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8008c1e:	2202      	movs	r2, #2
 8008c20:	4629      	mov	r1, r5
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 f844 	bl	8008cb0 <USBD_CtlSendData>
      break;
 8008c28:	e7b2      	b.n	8008b90 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8008c2a:	065a      	lsls	r2, r3, #25
 8008c2c:	d0b0      	beq.n	8008b90 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f7fa fee7 	bl	8003a02 <USBD_LL_StallEP>
 8008c34:	e7ac      	b.n	8008b90 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8008c36:	6028      	str	r0, [r5, #0]
 8008c38:	e7f1      	b.n	8008c1e <USBD_StdEPReq+0xaa>

08008c3a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008c3a:	780b      	ldrb	r3, [r1, #0]
 8008c3c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008c3e:	784b      	ldrb	r3, [r1, #1]
 8008c40:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008c42:	78ca      	ldrb	r2, [r1, #3]
 8008c44:	788b      	ldrb	r3, [r1, #2]
 8008c46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008c4a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008c4c:	794a      	ldrb	r2, [r1, #5]
 8008c4e:	790b      	ldrb	r3, [r1, #4]
 8008c50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008c54:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008c56:	79ca      	ldrb	r2, [r1, #7]
 8008c58:	798b      	ldrb	r3, [r1, #6]
 8008c5a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008c5e:	80c3      	strh	r3, [r0, #6]
 8008c60:	4770      	bx	lr

08008c62 <USBD_CtlError>:
{
 8008c62:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8008c64:	2180      	movs	r1, #128	; 0x80
{
 8008c66:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8008c68:	f7fa fecb 	bl	8003a02 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	2100      	movs	r1, #0
}
 8008c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8008c74:	f7fa bec5 	b.w	8003a02 <USBD_LL_StallEP>

08008c78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c78:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8008c7a:	b188      	cbz	r0, 8008ca0 <USBD_GetString+0x28>
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8008c80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2c00      	cmp	r4, #0
 8008c88:	d1f9      	bne.n	8008c7e <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8008c90:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8008c92:	2303      	movs	r3, #3
 8008c94:	704b      	strb	r3, [r1, #1]
 8008c96:	3801      	subs	r0, #1
 8008c98:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8008c9a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008c9e:	b905      	cbnz	r5, 8008ca2 <USBD_GetString+0x2a>
 8008ca0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8008ca8:	3302      	adds	r3, #2
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	548c      	strb	r4, [r1, r2]
 8008cae:	e7f4      	b.n	8008c9a <USBD_GetString+0x22>

08008cb0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8008cba:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008cbc:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008cbe:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	f7fa fec6 	bl	8003a52 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8008cca:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8008ccc:	4613      	mov	r3, r2
 8008cce:	460a      	mov	r2, r1
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	f7fa febe 	bl	8003a52 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	bd08      	pop	{r3, pc}

08008cda <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8008cde:	2203      	movs	r2, #3
 8008ce0:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8008ce4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8008ce8:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008cea:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8008cee:	2100      	movs	r1, #0
 8008cf0:	f7fa feb6 	bl	8003a60 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	bd10      	pop	{r4, pc}

08008cf8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8008cf8:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	2100      	movs	r1, #0
 8008d00:	f7fa feae 	bl	8003a60 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8008d04:	2000      	movs	r0, #0
 8008d06:	bd08      	pop	{r3, pc}

08008d08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8008d08:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d0a:	2304      	movs	r3, #4
 8008d0c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8008d10:	2300      	movs	r3, #0
 8008d12:	461a      	mov	r2, r3
 8008d14:	4619      	mov	r1, r3
 8008d16:	f7fa fe9c 	bl	8003a52 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	bd08      	pop	{r3, pc}

08008d1e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8008d1e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8008d20:	2305      	movs	r3, #5
 8008d22:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8008d26:	2300      	movs	r3, #0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f7fa fe98 	bl	8003a60 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8008d30:	2000      	movs	r0, #0
 8008d32:	bd08      	pop	{r3, pc}

08008d34 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008d34:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <disk_status+0x10>)
 8008d36:	181a      	adds	r2, r3, r0
 8008d38:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008d3c:	7a10      	ldrb	r0, [r2, #8]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	4718      	bx	r3
 8008d44:	20000614 	.word	0x20000614

08008d48 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8008d48:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <disk_initialize+0x1c>)
 8008d4a:	5c1a      	ldrb	r2, [r3, r0]
 8008d4c:	b942      	cbnz	r2, 8008d60 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8008d4e:	2201      	movs	r2, #1
 8008d50:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d52:	181a      	adds	r2, r3, r0
 8008d54:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008d58:	7a10      	ldrb	r0, [r2, #8]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4718      	bx	r3
  }
  return stat;
}
 8008d60:	2000      	movs	r0, #0
 8008d62:	4770      	bx	lr
 8008d64:	20000614 	.word	0x20000614

08008d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d68:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d6a:	4c05      	ldr	r4, [pc, #20]	; (8008d80 <disk_read+0x18>)
 8008d6c:	1825      	adds	r5, r4, r0
 8008d6e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008d72:	6860      	ldr	r0, [r4, #4]
 8008d74:	6884      	ldr	r4, [r0, #8]
 8008d76:	7a28      	ldrb	r0, [r5, #8]
 8008d78:	46a4      	mov	ip, r4
  return res;
}
 8008d7a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d7c:	4760      	bx	ip
 8008d7e:	bf00      	nop
 8008d80:	20000614 	.word	0x20000614

08008d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008d84:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d86:	4c05      	ldr	r4, [pc, #20]	; (8008d9c <disk_write+0x18>)
 8008d88:	1825      	adds	r5, r4, r0
 8008d8a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008d8e:	6860      	ldr	r0, [r4, #4]
 8008d90:	68c4      	ldr	r4, [r0, #12]
 8008d92:	7a28      	ldrb	r0, [r5, #8]
 8008d94:	46a4      	mov	ip, r4
  return res;
}
 8008d96:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d98:	4760      	bx	ip
 8008d9a:	bf00      	nop
 8008d9c:	20000614 	.word	0x20000614

08008da0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <disk_ioctl+0x18>)
{
 8008da2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008da4:	181c      	adds	r4, r3, r0
 8008da6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008daa:	7a20      	ldrb	r0, [r4, #8]
 8008dac:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008dae:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	4718      	bx	r3
 8008db6:	bf00      	nop
 8008db8:	20000614 	.word	0x20000614

08008dbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008dbc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008dbe:	4c06      	ldr	r4, [pc, #24]	; (8008dd8 <SD_initialize+0x1c>)
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008dc4:	f7f8 fa0a 	bl	80011dc <BSP_SD_Init>
 8008dc8:	4623      	mov	r3, r4
 8008dca:	b918      	cbnz	r0, 8008dd4 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008dcc:	7822      	ldrb	r2, [r4, #0]
 8008dce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008dd2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8008dd4:	7818      	ldrb	r0, [r3, #0]
}
 8008dd6:	bd10      	pop	{r4, pc}
 8008dd8:	200002c8 	.word	0x200002c8

08008ddc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008ddc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008dde:	4c06      	ldr	r4, [pc, #24]	; (8008df8 <SD_status+0x1c>)
 8008de0:	2301      	movs	r3, #1
 8008de2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8008de4:	f7f8 f964 	bl	80010b0 <BSP_SD_GetStatus>
 8008de8:	4623      	mov	r3, r4
 8008dea:	b918      	cbnz	r0, 8008df4 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008dec:	7822      	ldrb	r2, [r4, #0]
 8008dee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008df2:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8008df4:	7818      	ldrb	r0, [r3, #0]
}
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	200002c8 	.word	0x200002c8

08008dfc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008dfc:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	0252      	lsls	r2, r2, #9
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	f7f8 f98e 	bl	800112c <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8008e10:	3000      	adds	r0, #0
 8008e12:	bf18      	it	ne
 8008e14:	2001      	movne	r0, #1
 8008e16:	b003      	add	sp, #12
 8008e18:	f85d fb04 	ldr.w	pc, [sp], #4

08008e1c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008e1c:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	0252      	lsls	r2, r2, #9
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	f7f8 fa56 	bl	80012dc <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8008e30:	3000      	adds	r0, #0
 8008e32:	bf18      	it	ne
 8008e34:	2001      	movne	r0, #1
 8008e36:	b003      	add	sp, #12
 8008e38:	f85d fb04 	ldr.w	pc, [sp], #4

08008e3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008e3c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008e3e:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <SD_ioctl+0x4c>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	07db      	lsls	r3, r3, #31
{
 8008e44:	b096      	sub	sp, #88	; 0x58
 8008e46:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008e48:	d41c      	bmi.n	8008e84 <SD_ioctl+0x48>
  
  switch (cmd)
 8008e4a:	2903      	cmp	r1, #3
 8008e4c:	d803      	bhi.n	8008e56 <SD_ioctl+0x1a>
 8008e4e:	e8df f001 	tbb	[pc, r1]
 8008e52:	050e      	.short	0x050e
 8008e54:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8008e56:	2004      	movs	r0, #4
  }
  
  return res;
}
 8008e58:	b016      	add	sp, #88	; 0x58
 8008e5a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008e5c:	4668      	mov	r0, sp
 8008e5e:	f7f8 f92d 	bl	80010bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8008e62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e66:	0a5b      	lsrs	r3, r3, #9
 8008e68:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008e6c:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e7f2      	b.n	8008e58 <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8008e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e76:	8013      	strh	r3, [r2, #0]
 8008e78:	e7f9      	b.n	8008e6e <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 8008e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e7e:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8008e80:	2001      	movs	r0, #1
    break;
 8008e82:	e7e9      	b.n	8008e58 <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008e84:	2003      	movs	r0, #3
 8008e86:	e7e7      	b.n	8008e58 <SD_ioctl+0x1c>
 8008e88:	200002c8 	.word	0x200002c8

08008e8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e8c:	3801      	subs	r0, #1
 8008e8e:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008e90:	4291      	cmp	r1, r2
 8008e92:	d100      	bne.n	8008e96 <mem_cpy+0xa>
		*d++ = *s++;
}
 8008e94:	4770      	bx	lr
		*d++ = *s++;
 8008e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008e9e:	e7f7      	b.n	8008e90 <mem_cpy+0x4>

08008ea0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008ea0:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8008ea2:	4290      	cmp	r0, r2
 8008ea4:	d100      	bne.n	8008ea8 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8008ea6:	4770      	bx	lr
		*d++ = (BYTE)val;
 8008ea8:	f800 1b01 	strb.w	r1, [r0], #1
 8008eac:	e7f9      	b.n	8008ea2 <mem_set+0x2>
	...

08008eb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008eb0:	4a17      	ldr	r2, [pc, #92]	; (8008f10 <chk_lock+0x60>)
 8008eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eb4:	2400      	movs	r4, #0
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8008eba:	6815      	ldr	r5, [r2, #0]
 8008ebc:	b1c5      	cbz	r5, 8008ef0 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008ebe:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8008ec2:	42bd      	cmp	r5, r7
 8008ec4:	d115      	bne.n	8008ef2 <chk_lock+0x42>
 8008ec6:	6857      	ldr	r7, [r2, #4]
 8008ec8:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008ecc:	42af      	cmp	r7, r5
 8008ece:	d110      	bne.n	8008ef2 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8008ed0:	8917      	ldrh	r7, [r2, #8]
 8008ed2:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008ed6:	42af      	cmp	r7, r5
 8008ed8:	d10b      	bne.n	8008ef2 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008eda:	b9b9      	cbnz	r1, 8008f0c <chk_lock+0x5c>
 8008edc:	220c      	movs	r2, #12
 8008ede:	fb02 6303 	mla	r3, r2, r3, r6
 8008ee2:	895b      	ldrh	r3, [r3, #10]
 8008ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee8:	bf14      	ite	ne
 8008eea:	2000      	movne	r0, #0
 8008eec:	2010      	moveq	r0, #16
 8008eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008ef0:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	f102 020c 	add.w	r2, r2, #12
 8008efa:	d1de      	bne.n	8008eba <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008efc:	b10c      	cbz	r4, 8008f02 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008efe:	2000      	movs	r0, #0
 8008f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008f02:	2902      	cmp	r1, #2
 8008f04:	bf0c      	ite	eq
 8008f06:	2000      	moveq	r0, #0
 8008f08:	2012      	movne	r0, #18
 8008f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008f0c:	2010      	movs	r0, #16
 8008f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f10:	200005f8 	.word	0x200005f8

08008f14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f16:	4c20      	ldr	r4, [pc, #128]	; (8008f98 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8008f18:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	42b5      	cmp	r5, r6
 8008f24:	d109      	bne.n	8008f3a <inc_lock+0x26>
 8008f26:	6867      	ldr	r7, [r4, #4]
 8008f28:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008f2c:	42af      	cmp	r7, r5
 8008f2e:	d104      	bne.n	8008f3a <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8008f30:	8927      	ldrh	r7, [r4, #8]
 8008f32:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008f36:	42af      	cmp	r7, r5
 8008f38:	d022      	beq.n	8008f80 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	f104 040c 	add.w	r4, r4, #12
 8008f42:	d1ed      	bne.n	8008f20 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	b113      	cbz	r3, 8008f4e <inc_lock+0x3a>
 8008f48:	68d3      	ldr	r3, [r2, #12]
 8008f4a:	bb1b      	cbnz	r3, 8008f94 <inc_lock+0x80>
 8008f4c:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8008f4e:	240c      	movs	r4, #12
 8008f50:	435c      	muls	r4, r3
 8008f52:	1915      	adds	r5, r2, r4
 8008f54:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8008f56:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8008f5a:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8008f5e:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8008f60:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8008f62:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8008f64:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f66:	b991      	cbnz	r1, 8008f8e <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f68:	210c      	movs	r1, #12
 8008f6a:	fb01 2103 	mla	r1, r1, r3, r2
 8008f6e:	8949      	ldrh	r1, [r1, #10]
 8008f70:	3101      	adds	r1, #1
 8008f72:	b289      	uxth	r1, r1
 8008f74:	200c      	movs	r0, #12
 8008f76:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8008f7a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f7c:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f80:	2900      	cmp	r1, #0
 8008f82:	d0f1      	beq.n	8008f68 <inc_lock+0x54>
 8008f84:	210c      	movs	r1, #12
 8008f86:	fb01 2103 	mla	r1, r1, r3, r2
 8008f8a:	8949      	ldrh	r1, [r1, #10]
 8008f8c:	b911      	cbnz	r1, 8008f94 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f92:	e7ef      	b.n	8008f74 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008f94:	2000      	movs	r0, #0
 8008f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f98:	200005f8 	.word	0x200005f8

08008f9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f9c:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f9e:	1e45      	subs	r5, r0, #1
 8008fa0:	2d01      	cmp	r5, #1
 8008fa2:	d811      	bhi.n	8008fc8 <dec_lock+0x2c>
		n = Files[i].ctr;
 8008fa4:	490a      	ldr	r1, [pc, #40]	; (8008fd0 <dec_lock+0x34>)
 8008fa6:	220c      	movs	r2, #12
 8008fa8:	fb02 1305 	mla	r3, r2, r5, r1
 8008fac:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8008fae:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8008fb2:	b298      	uxth	r0, r3
 8008fb4:	b108      	cbz	r0, 8008fba <dec_lock+0x1e>
 8008fb6:	3c01      	subs	r4, #1
 8008fb8:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8008fba:	fb02 f305 	mul.w	r3, r2, r5
 8008fbe:	18ca      	adds	r2, r1, r3
 8008fc0:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008fc2:	b918      	cbnz	r0, 8008fcc <dec_lock+0x30>
 8008fc4:	50c8      	str	r0, [r1, r3]
 8008fc6:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008fc8:	2002      	movs	r0, #2
 8008fca:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8008fcc:	2000      	movs	r0, #0
	}
	return res;
}
 8008fce:	bd30      	pop	{r4, r5, pc}
 8008fd0:	200005f8 	.word	0x200005f8

08008fd4 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008fd4:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008fd8:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008fdc:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008fde:	0a49      	lsrs	r1, r1, #9
 8008fe0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008fe4:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fe8:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8008fea:	b130      	cbz	r0, 8008ffa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008fec:	4281      	cmp	r1, r0
 8008fee:	d302      	bcc.n	8008ff6 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ff0:	1a09      	subs	r1, r1, r0
 8008ff2:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ff4:	e7f8      	b.n	8008fe8 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ff6:	6858      	ldr	r0, [r3, #4]
 8008ff8:	4408      	add	r0, r1
}
 8008ffa:	4770      	bx	lr

08008ffc <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8008ffc:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8009000:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8009002:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8009006:	b322      	cbz	r2, 8009052 <get_fileinfo+0x56>
		dir = dp->dir;
 8009008:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 800900c:	2400      	movs	r4, #0
 800900e:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009010:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 8009012:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8009016:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 8009018:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 800901c:	d009      	beq.n	8009032 <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800901e:	2805      	cmp	r0, #5
 8009020:	bf08      	it	eq
 8009022:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009024:	2c09      	cmp	r4, #9
 8009026:	bf04      	itt	eq
 8009028:	701e      	strbeq	r6, [r3, #0]
 800902a:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800902c:	3301      	adds	r3, #1
 800902e:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 8009032:	2c0b      	cmp	r4, #11
 8009034:	d1ed      	bne.n	8009012 <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009036:	7ad0      	ldrb	r0, [r2, #11]
 8009038:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800903a:	69d0      	ldr	r0, [r2, #28]
 800903c:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800903e:	7e54      	ldrb	r4, [r2, #25]
 8009040:	7e10      	ldrb	r0, [r2, #24]
 8009042:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8009046:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8009048:	7dd0      	ldrb	r0, [r2, #23]
 800904a:	7d92      	ldrb	r2, [r2, #22]
 800904c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009050:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	bd70      	pop	{r4, r5, r6, pc}

08009058 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009058:	6802      	ldr	r2, [r0, #0]
{
 800905a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800905c:	b152      	cbz	r2, 8009074 <get_ldnumber+0x1c>
 800905e:	4611      	mov	r1, r2
 8009060:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009066:	2c20      	cmp	r4, #32
 8009068:	d90c      	bls.n	8009084 <get_ldnumber+0x2c>
 800906a:	2c3a      	cmp	r4, #58	; 0x3a
 800906c:	d1f8      	bne.n	8009060 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800906e:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009070:	428b      	cmp	r3, r1
 8009072:	d002      	beq.n	800907a <get_ldnumber+0x22>
	int vol = -1;
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8009078:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800907a:	7812      	ldrb	r2, [r2, #0]
 800907c:	2a30      	cmp	r2, #48	; 0x30
 800907e:	d1f9      	bne.n	8009074 <get_ldnumber+0x1c>
					*path = ++tt;
 8009080:	3301      	adds	r3, #1
 8009082:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8009084:	2000      	movs	r0, #0
 8009086:	bd10      	pop	{r4, pc}

08009088 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009088:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800908a:	b190      	cbz	r0, 80090b2 <validate+0x2a>
 800908c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009090:	b17b      	cbz	r3, 80090b2 <validate+0x2a>
 8009092:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8009096:	b162      	cbz	r2, 80090b2 <validate+0x2a>
 8009098:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800909c:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80090a0:	4291      	cmp	r1, r2
 80090a2:	d106      	bne.n	80090b2 <validate+0x2a>
 80090a4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80090a8:	f7ff fe44 	bl	8008d34 <disk_status>
 80090ac:	f010 0001 	ands.w	r0, r0, #1
 80090b0:	d000      	beq.n	80090b4 <validate+0x2c>
		return FR_INVALID_OBJECT;
 80090b2:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80090b4:	bd08      	pop	{r3, pc}

080090b6 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 80090b6:	7eca      	ldrb	r2, [r1, #27]
 80090b8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 80090ba:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80090bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80090c0:	bf01      	itttt	eq
 80090c2:	7d48      	ldrbeq	r0, [r1, #21]
 80090c4:	7d0a      	ldrbeq	r2, [r1, #20]
 80090c6:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80090ca:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	4770      	bx	lr

080090d2 <sync_window.part.2>:
FRESULT sync_window (
 80090d2:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 80090d4:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 80090d8:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80090da:	4601      	mov	r1, r0
 80090dc:	2301      	movs	r3, #1
 80090de:	462a      	mov	r2, r5
 80090e0:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80090e4:	f7ff fe4e 	bl	8008d84 <disk_write>
 80090e8:	b9d0      	cbnz	r0, 8009120 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80090ea:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 80090ee:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 80090f2:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80090f6:	1aeb      	subs	r3, r5, r3
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d301      	bcc.n	8009100 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 80090fc:	2000      	movs	r0, #0
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009100:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8009104:	2e01      	cmp	r6, #1
 8009106:	d9f9      	bls.n	80090fc <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8009108:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800910c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8009110:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009112:	462a      	mov	r2, r5
 8009114:	2301      	movs	r3, #1
 8009116:	4621      	mov	r1, r4
 8009118:	f7ff fe34 	bl	8008d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800911c:	3e01      	subs	r6, #1
 800911e:	e7f1      	b.n	8009104 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8009120:	2001      	movs	r0, #1
}
 8009122:	bd70      	pop	{r4, r5, r6, pc}

08009124 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009124:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8009128:	b10b      	cbz	r3, 800912e <sync_window+0xa>
 800912a:	f7ff bfd2 	b.w	80090d2 <sync_window.part.2>
}
 800912e:	4618      	mov	r0, r3
 8009130:	4770      	bx	lr

08009132 <sync_fs>:
{
 8009132:	b538      	push	{r3, r4, r5, lr}
 8009134:	4604      	mov	r4, r0
	res = sync_window(fs);
 8009136:	f7ff fff5 	bl	8009124 <sync_window>
 800913a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800913c:	2800      	cmp	r0, #0
 800913e:	d154      	bne.n	80091ea <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009140:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8009144:	2b03      	cmp	r3, #3
 8009146:	d147      	bne.n	80091d8 <sync_fs+0xa6>
 8009148:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800914c:	2b01      	cmp	r3, #1
 800914e:	d143      	bne.n	80091d8 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8009150:	4601      	mov	r1, r0
 8009152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009156:	4620      	mov	r0, r4
 8009158:	f7ff fea2 	bl	8008ea0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800915c:	2255      	movs	r2, #85	; 0x55
 800915e:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8009162:	22aa      	movs	r2, #170	; 0xaa
 8009164:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009168:	2252      	movs	r2, #82	; 0x52
 800916a:	7022      	strb	r2, [r4, #0]
 800916c:	7062      	strb	r2, [r4, #1]
 800916e:	2261      	movs	r2, #97	; 0x61
 8009170:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009172:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009176:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800917a:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800917e:	2141      	movs	r1, #65	; 0x41
 8009180:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009182:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009186:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800918a:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 800918e:	0c11      	lsrs	r1, r2, #16
 8009190:	0e12      	lsrs	r2, r2, #24
 8009192:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009196:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800919a:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800919e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80091a2:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 80091a6:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 80091aa:	0c11      	lsrs	r1, r2, #16
 80091ac:	0e12      	lsrs	r2, r2, #24
 80091ae:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80091b2:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80091b6:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80091ba:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 80091bc:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80091be:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 80091c2:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 80091c6:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80091ca:	4621      	mov	r1, r4
 80091cc:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80091d0:	f7ff fdd8 	bl	8008d84 <disk_write>
			fs->fsi_flag = 0;
 80091d4:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80091d8:	2200      	movs	r2, #0
 80091da:	4611      	mov	r1, r2
 80091dc:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80091e0:	f7ff fdde 	bl	8008da0 <disk_ioctl>
 80091e4:	3000      	adds	r0, #0
 80091e6:	bf18      	it	ne
 80091e8:	2001      	movne	r0, #1
}
 80091ea:	bd38      	pop	{r3, r4, r5, pc}

080091ec <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80091ec:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80091f0:	428b      	cmp	r3, r1
{
 80091f2:	b570      	push	{r4, r5, r6, lr}
 80091f4:	4606      	mov	r6, r0
 80091f6:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80091f8:	d013      	beq.n	8009222 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 80091fa:	f7ff ff93 	bl	8009124 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091fe:	4604      	mov	r4, r0
 8009200:	b968      	cbnz	r0, 800921e <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009202:	462a      	mov	r2, r5
 8009204:	2301      	movs	r3, #1
 8009206:	4631      	mov	r1, r6
 8009208:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 800920c:	f7ff fdac 	bl	8008d68 <disk_read>
 8009210:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8009212:	bf1c      	itt	ne
 8009214:	f04f 35ff 	movne.w	r5, #4294967295
 8009218:	2401      	movne	r4, #1
			fs->winsect = sector;
 800921a:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 800921e:	4620      	mov	r0, r4
 8009220:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8009222:	2400      	movs	r4, #0
 8009224:	e7fb      	b.n	800921e <move_window+0x32>
	...

08009228 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009228:	2300      	movs	r3, #0
{
 800922a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800922c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8009238:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800923a:	f7ff ffd7 	bl	80091ec <move_window>
 800923e:	b9c0      	cbnz	r0, 8009272 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009240:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8009244:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8009248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800924c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009250:	4293      	cmp	r3, r2
 8009252:	d110      	bne.n	8009276 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009254:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8009258:	4a08      	ldr	r2, [pc, #32]	; (800927c <check_fs+0x54>)
 800925a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800925e:	4293      	cmp	r3, r2
 8009260:	d00a      	beq.n	8009278 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009262:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8009266:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800926a:	1a80      	subs	r0, r0, r2
 800926c:	bf18      	it	ne
 800926e:	2001      	movne	r0, #1
 8009270:	bd10      	pop	{r4, pc}
 8009272:	2003      	movs	r0, #3
 8009274:	bd10      	pop	{r4, pc}
		return 2;
 8009276:	2002      	movs	r0, #2
}
 8009278:	bd10      	pop	{r4, pc}
 800927a:	bf00      	nop
 800927c:	00544146 	.word	0x00544146

08009280 <find_volume>:
{
 8009280:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	6003      	str	r3, [r0, #0]
{
 8009286:	b085      	sub	sp, #20
 8009288:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 800928a:	4608      	mov	r0, r1
{
 800928c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800928e:	f7ff fee3 	bl	8009058 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009292:	1e06      	subs	r6, r0, #0
 8009294:	f2c0 8123 	blt.w	80094de <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009298:	4b95      	ldr	r3, [pc, #596]	; (80094f0 <find_volume+0x270>)
 800929a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800929e:	2c00      	cmp	r4, #0
 80092a0:	f000 811f 	beq.w	80094e2 <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 80092a4:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80092a6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80092aa:	b173      	cbz	r3, 80092ca <find_volume+0x4a>
		stat = disk_status(fs->drv);
 80092ac:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80092b0:	f7ff fd40 	bl	8008d34 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80092b4:	07c7      	lsls	r7, r0, #31
 80092b6:	d408      	bmi.n	80092ca <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80092b8:	2d00      	cmp	r5, #0
 80092ba:	f000 8114 	beq.w	80094e6 <find_volume+0x266>
 80092be:	f010 0004 	ands.w	r0, r0, #4
 80092c2:	d000      	beq.n	80092c6 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80092c4:	200a      	movs	r0, #10
}
 80092c6:	b005      	add	sp, #20
 80092c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80092ca:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80092cc:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80092ce:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80092d2:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80092d6:	f7ff fd37 	bl	8008d48 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80092da:	07c1      	lsls	r1, r0, #31
 80092dc:	f100 8105 	bmi.w	80094ea <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80092e0:	b10d      	cbz	r5, 80092e6 <find_volume+0x66>
 80092e2:	0742      	lsls	r2, r0, #29
 80092e4:	d4ee      	bmi.n	80092c4 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80092e6:	2100      	movs	r1, #0
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff ff9d 	bl	8009228 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80092ee:	2801      	cmp	r0, #1
 80092f0:	f040 80dc 	bne.w	80094ac <find_volume+0x22c>
 80092f4:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 80092f8:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80092fa:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80092fe:	b103      	cbz	r3, 8009302 <find_volume+0x82>
 8009300:	680b      	ldr	r3, [r1, #0]
 8009302:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009306:	3201      	adds	r2, #1
 8009308:	2a04      	cmp	r2, #4
 800930a:	f101 0110 	add.w	r1, r1, #16
 800930e:	d1f4      	bne.n	80092fa <find_volume+0x7a>
 8009310:	2600      	movs	r6, #0
			bsect = br[i];
 8009312:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009316:	2d00      	cmp	r5, #0
 8009318:	f000 80bf 	beq.w	800949a <find_volume+0x21a>
 800931c:	4629      	mov	r1, r5
 800931e:	4620      	mov	r0, r4
 8009320:	f7ff ff82 	bl	8009228 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009324:	2800      	cmp	r0, #0
 8009326:	f040 80b9 	bne.w	800949c <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800932a:	7b22      	ldrb	r2, [r4, #12]
 800932c:	7ae3      	ldrb	r3, [r4, #11]
 800932e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009336:	f040 80bc 	bne.w	80094b2 <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800933a:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800933c:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800933e:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009340:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009344:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009348:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800934c:	bf08      	it	eq
 800934e:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8009350:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009354:	2b01      	cmp	r3, #1
 8009356:	f200 80ac 	bhi.w	80094b2 <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800935a:	7b66      	ldrb	r6, [r4, #13]
 800935c:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009360:	2e00      	cmp	r6, #0
 8009362:	f000 80a6 	beq.w	80094b2 <find_volume+0x232>
 8009366:	1e73      	subs	r3, r6, #1
 8009368:	4233      	tst	r3, r6
 800936a:	f040 80a2 	bne.w	80094b2 <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800936e:	7ca3      	ldrb	r3, [r4, #18]
 8009370:	7c67      	ldrb	r7, [r4, #17]
 8009372:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009376:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009378:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800937c:	f040 8099 	bne.w	80094b2 <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009380:	7d22      	ldrb	r2, [r4, #20]
 8009382:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009384:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009388:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800938c:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800938e:	bf08      	it	eq
 8009390:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009392:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8009396:	f000 808c 	beq.w	80094b2 <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800939a:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800939e:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 80093a2:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80093a4:	4283      	cmp	r3, r0
 80093a6:	f0c0 8084 	bcc.w	80094b2 <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80093aa:	1a1b      	subs	r3, r3, r0
 80093ac:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d07e      	beq.n	80094b2 <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80093b4:	f640 76f5 	movw	r6, #4085	; 0xff5
 80093b8:	42b3      	cmp	r3, r6
 80093ba:	d97e      	bls.n	80094ba <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80093bc:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 80093c0:	42b3      	cmp	r3, r6
 80093c2:	bf94      	ite	ls
 80093c4:	2602      	movls	r6, #2
 80093c6:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80093c8:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80093ca:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 80093cc:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 80093ce:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80093d0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80093d4:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80093d8:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80093dc:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80093e0:	d16d      	bne.n	80094be <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80093e2:	2f00      	cmp	r7, #0
 80093e4:	d165      	bne.n	80094b2 <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80093e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093e8:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80093ec:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80093ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80093f2:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80093f6:	d35c      	bcc.n	80094b2 <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80093f8:	f04f 33ff 	mov.w	r3, #4294967295
 80093fc:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8009400:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009404:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8009406:	f04f 0380 	mov.w	r3, #128	; 0x80
 800940a:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800940e:	d12d      	bne.n	800946c <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009410:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8009414:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800941c:	2b01      	cmp	r3, #1
 800941e:	d125      	bne.n	800946c <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009420:	1c69      	adds	r1, r5, #1
 8009422:	4620      	mov	r0, r4
 8009424:	f7ff fee2 	bl	80091ec <move_window>
 8009428:	bb00      	cbnz	r0, 800946c <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800942a:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800942e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8009432:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009436:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800943a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800943e:	4293      	cmp	r3, r2
 8009440:	d114      	bne.n	800946c <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	4b2b      	ldr	r3, [pc, #172]	; (80094f4 <find_volume+0x274>)
 8009446:	429a      	cmp	r2, r3
 8009448:	d110      	bne.n	800946c <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800944a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800944e:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8009452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009456:	3320      	adds	r3, #32
 8009458:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800945a:	bf01      	itttt	eq
 800945c:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8009460:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009464:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8009468:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 800946c:	4a22      	ldr	r2, [pc, #136]	; (80094f8 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800946e:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8009472:	8813      	ldrh	r3, [r2, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	b29b      	uxth	r3, r3
 8009478:	8013      	strh	r3, [r2, #0]
 800947a:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800947e:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <find_volume+0x27c>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4294      	cmp	r4, r2
 8009484:	bf04      	itt	eq
 8009486:	2200      	moveq	r2, #0
 8009488:	601a      	streq	r2, [r3, #0]
 800948a:	68da      	ldr	r2, [r3, #12]
 800948c:	4294      	cmp	r4, r2
 800948e:	f04f 0000 	mov.w	r0, #0
 8009492:	f47f af18 	bne.w	80092c6 <find_volume+0x46>
 8009496:	60d8      	str	r0, [r3, #12]
 8009498:	e715      	b.n	80092c6 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800949a:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800949c:	3601      	adds	r6, #1
 800949e:	2e04      	cmp	r6, #4
 80094a0:	f47f af37 	bne.w	8009312 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80094a4:	2803      	cmp	r0, #3
 80094a6:	d104      	bne.n	80094b2 <find_volume+0x232>
 80094a8:	2001      	movs	r0, #1
 80094aa:	e70c      	b.n	80092c6 <find_volume+0x46>
 80094ac:	2803      	cmp	r0, #3
 80094ae:	d0fb      	beq.n	80094a8 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80094b0:	b108      	cbz	r0, 80094b6 <find_volume+0x236>
 80094b2:	200d      	movs	r0, #13
 80094b4:	e707      	b.n	80092c6 <find_volume+0x46>
	bsect = 0;
 80094b6:	4605      	mov	r5, r0
 80094b8:	e737      	b.n	800932a <find_volume+0xaa>
	fmt = FS_FAT12;
 80094ba:	2601      	movs	r6, #1
 80094bc:	e784      	b.n	80093c8 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80094be:	2f00      	cmp	r7, #0
 80094c0:	d0f7      	beq.n	80094b2 <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80094c2:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094c4:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80094c6:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 80094ca:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094ce:	bf1b      	ittet	ne
 80094d0:	18d2      	addne	r2, r2, r3
 80094d2:	f003 0301 	andne.w	r3, r3, #1
 80094d6:	4613      	moveq	r3, r2
 80094d8:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80094dc:	e787      	b.n	80093ee <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 80094de:	200b      	movs	r0, #11
 80094e0:	e6f1      	b.n	80092c6 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80094e2:	200c      	movs	r0, #12
 80094e4:	e6ef      	b.n	80092c6 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80094e6:	4628      	mov	r0, r5
 80094e8:	e6ed      	b.n	80092c6 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80094ea:	2003      	movs	r0, #3
 80094ec:	e6eb      	b.n	80092c6 <find_volume+0x46>
 80094ee:	bf00      	nop
 80094f0:	200005f4 	.word	0x200005f4
 80094f4:	41615252 	.word	0x41615252
 80094f8:	20000610 	.word	0x20000610
 80094fc:	200005f8 	.word	0x200005f8

08009500 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009500:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8009504:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009506:	3b02      	subs	r3, #2
 8009508:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800950a:	bf3d      	ittte	cc
 800950c:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8009510:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8009514:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009518:	2000      	movcs	r0, #0
}
 800951a:	4770      	bx	lr

0800951c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800951c:	2901      	cmp	r1, #1
{
 800951e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009520:	4606      	mov	r6, r0
 8009522:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009524:	d959      	bls.n	80095da <get_fat+0xbe>
 8009526:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800952a:	4299      	cmp	r1, r3
 800952c:	d255      	bcs.n	80095da <get_fat+0xbe>
		switch (fs->fs_type) {
 800952e:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8009532:	2b02      	cmp	r3, #2
 8009534:	d027      	beq.n	8009586 <get_fat+0x6a>
 8009536:	2b03      	cmp	r3, #3
 8009538:	d036      	beq.n	80095a8 <get_fat+0x8c>
 800953a:	2b01      	cmp	r3, #1
 800953c:	d14d      	bne.n	80095da <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 800953e:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009542:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009546:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800954a:	f7ff fe4f 	bl	80091ec <move_window>
 800954e:	b110      	cbz	r0, 8009556 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009556:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 800955a:	1c67      	adds	r7, r4, #1
 800955c:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009560:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8009564:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8009566:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009568:	f7ff fe40 	bl	80091ec <move_window>
 800956c:	2800      	cmp	r0, #0
 800956e:	d1ef      	bne.n	8009550 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009570:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009574:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009576:	5df0      	ldrb	r0, [r6, r7]
 8009578:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800957c:	bf4c      	ite	mi
 800957e:	0900      	lsrmi	r0, r0, #4
 8009580:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8009584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009586:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800958a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800958e:	f7ff fe2d 	bl	80091ec <move_window>
 8009592:	2800      	cmp	r0, #0
 8009594:	d1dc      	bne.n	8009550 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009596:	006d      	lsls	r5, r5, #1
 8009598:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 800959c:	1973      	adds	r3, r6, r5
 800959e:	5d70      	ldrb	r0, [r6, r5]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80095a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095a8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80095ac:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80095b0:	f7ff fe1c 	bl	80091ec <move_window>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1cb      	bne.n	8009550 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80095b8:	00ad      	lsls	r5, r5, #2
 80095ba:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80095be:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80095c0:	7898      	ldrb	r0, [r3, #2]
 80095c2:	78da      	ldrb	r2, [r3, #3]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	0400      	lsls	r0, r0, #16
 80095c8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80095cc:	5d72      	ldrb	r2, [r6, r5]
 80095ce:	4310      	orrs	r0, r2
 80095d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80095d4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80095d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80095da:	2001      	movs	r0, #1
}
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095de <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80095de:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 80095e2:	b570      	push	{r4, r5, r6, lr}
 80095e4:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80095e6:	2a01      	cmp	r2, #1
{
 80095e8:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 80095ea:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80095ee:	d101      	bne.n	80095f4 <dir_sdi+0x16>
		return FR_INT_ERR;
 80095f0:	2002      	movs	r0, #2
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80095f4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80095f8:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80095fc:	428a      	cmp	r2, r1
 80095fe:	d2f7      	bcs.n	80095f0 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009600:	b9f2      	cbnz	r2, 8009640 <dir_sdi+0x62>
 8009602:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8009606:	2903      	cmp	r1, #3
 8009608:	d102      	bne.n	8009610 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800960a:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800960e:	b9c1      	cbnz	r1, 8009642 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009610:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8009614:	428d      	cmp	r5, r1
 8009616:	d2eb      	bcs.n	80095f0 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8009618:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 800961c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8009620:	2800      	cmp	r0, #0
 8009622:	d0e5      	beq.n	80095f0 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009624:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009628:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800962c:	f005 050f 	and.w	r5, r5, #15
 8009630:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009634:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009638:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 800963c:	2000      	movs	r0, #0
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009642:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8009646:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009648:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800964a:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800964c:	4611      	mov	r1, r2
 800964e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8009652:	d202      	bcs.n	800965a <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8009654:	f7ff ff54 	bl	8009500 <clust2sect>
 8009658:	e7e0      	b.n	800961c <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800965a:	f7ff ff5f 	bl	800951c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800965e:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009660:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009662:	d009      	beq.n	8009678 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009664:	2801      	cmp	r0, #1
 8009666:	d9c3      	bls.n	80095f0 <dir_sdi+0x12>
 8009668:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800966c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009670:	4298      	cmp	r0, r3
 8009672:	d2bd      	bcs.n	80095f0 <dir_sdi+0x12>
			idx -= ic;
 8009674:	1bad      	subs	r5, r5, r6
 8009676:	e7e8      	b.n	800964a <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009678:	2001      	movs	r0, #1
}
 800967a:	bd70      	pop	{r4, r5, r6, pc}

0800967c <dir_remove>:
{
 800967c:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 800967e:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 8009682:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 8009684:	f7ff ffab 	bl	80095de <dir_sdi>
	if (res == FR_OK) {
 8009688:	4603      	mov	r3, r0
 800968a:	b9b0      	cbnz	r0, 80096ba <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 800968c:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009690:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009694:	f7ff fdaa 	bl	80091ec <move_window>
		if (res == FR_OK) {
 8009698:	4603      	mov	r3, r0
 800969a:	b970      	cbnz	r0, 80096ba <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 800969c:	4601      	mov	r1, r0
 800969e:	2220      	movs	r2, #32
 80096a0:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 80096a4:	f7ff fbfc 	bl	8008ea0 <mem_set>
			*dp->dir = DDEM;
 80096a8:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80096ac:	21e5      	movs	r1, #229	; 0xe5
 80096ae:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 80096b0:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80096b4:	2101      	movs	r1, #1
 80096b6:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	bd10      	pop	{r4, pc}

080096be <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80096be:	2901      	cmp	r1, #1
{
 80096c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	4605      	mov	r5, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80096ca:	d96f      	bls.n	80097ac <put_fat+0xee>
 80096cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d26b      	bcs.n	80097ac <put_fat+0xee>
		switch (fs->fs_type) {
 80096d4:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d03d      	beq.n	8009758 <put_fat+0x9a>
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d04b      	beq.n	8009778 <put_fat+0xba>
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d163      	bne.n	80097ac <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 80096e4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096e8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80096ec:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80096f0:	f7ff fd7c 	bl	80091ec <move_window>
			if (res != FR_OK) break;
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d15a      	bne.n	80097ae <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 80096f8:	f107 0801 	add.w	r8, r7, #1
 80096fc:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009700:	f014 0401 	ands.w	r4, r4, #1
 8009704:	bf1f      	itttt	ne
 8009706:	5deb      	ldrbne	r3, [r5, r7]
 8009708:	f003 020f 	andne.w	r2, r3, #15
 800970c:	0133      	lslne	r3, r6, #4
 800970e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8009712:	bf14      	ite	ne
 8009714:	4313      	orrne	r3, r2
 8009716:	b2f3      	uxtbeq	r3, r6
 8009718:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800971a:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009724:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8009728:	4628      	mov	r0, r5
 800972a:	f7ff fd5f 	bl	80091ec <move_window>
			if (res != FR_OK) break;
 800972e:	bbf0      	cbnz	r0, 80097ae <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8009730:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009734:	b144      	cbz	r4, 8009748 <put_fat+0x8a>
 8009736:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800973a:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 800973e:	2301      	movs	r3, #1
 8009740:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009748:	f815 2008 	ldrb.w	r2, [r5, r8]
 800974c:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8009750:	f022 020f 	bic.w	r2, r2, #15
 8009754:	4332      	orrs	r2, r6
 8009756:	e7f0      	b.n	800973a <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009758:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800975c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009760:	f7ff fd44 	bl	80091ec <move_window>
			if (res != FR_OK) break;
 8009764:	bb18      	cbnz	r0, 80097ae <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009766:	0064      	lsls	r4, r4, #1
 8009768:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800976c:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009770:	552e      	strb	r6, [r5, r4]
 8009772:	442c      	add	r4, r5
 8009774:	7062      	strb	r2, [r4, #1]
 8009776:	e7e2      	b.n	800973e <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009778:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800977c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8009780:	f7ff fd34 	bl	80091ec <move_window>
			if (res != FR_OK) break;
 8009784:	b998      	cbnz	r0, 80097ae <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009786:	00a4      	lsls	r4, r4, #2
 8009788:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800978c:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800978e:	78cb      	ldrb	r3, [r1, #3]
 8009790:	061b      	lsls	r3, r3, #24
 8009792:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009796:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800979a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800979e:	552a      	strb	r2, [r5, r4]
 80097a0:	704b      	strb	r3, [r1, #1]
 80097a2:	0c13      	lsrs	r3, r2, #16
 80097a4:	0e12      	lsrs	r2, r2, #24
 80097a6:	708b      	strb	r3, [r1, #2]
 80097a8:	70ca      	strb	r2, [r1, #3]
 80097aa:	e7c8      	b.n	800973e <put_fat+0x80>
			res = FR_INT_ERR;
 80097ac:	2002      	movs	r0, #2
}
 80097ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097b2 <create_chain>:
{
 80097b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b4:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80097b6:	460f      	mov	r7, r1
 80097b8:	b989      	cbnz	r1, 80097de <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80097ba:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80097be:	b1fe      	cbz	r6, 8009800 <create_chain+0x4e>
 80097c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097c4:	429e      	cmp	r6, r3
 80097c6:	bf28      	it	cs
 80097c8:	2601      	movcs	r6, #1
 80097ca:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80097cc:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 80097d0:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d317      	bcc.n	8009806 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 80097d6:	2e01      	cmp	r6, #1
 80097d8:	d814      	bhi.n	8009804 <create_chain+0x52>
 80097da:	2400      	movs	r4, #0
 80097dc:	e008      	b.n	80097f0 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80097de:	f7ff fe9d 	bl	800951c <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80097e2:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80097e4:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80097e6:	d93b      	bls.n	8009860 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80097e8:	3001      	adds	r0, #1
 80097ea:	d103      	bne.n	80097f4 <create_chain+0x42>
			ncl = 2;
 80097ec:	f04f 34ff 	mov.w	r4, #4294967295
}
 80097f0:	4620      	mov	r0, r4
 80097f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80097f4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80097f8:	429c      	cmp	r4, r3
 80097fa:	d3f9      	bcc.n	80097f0 <create_chain+0x3e>
 80097fc:	463e      	mov	r6, r7
 80097fe:	e7e4      	b.n	80097ca <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009800:	2601      	movs	r6, #1
 8009802:	e7e2      	b.n	80097ca <create_chain+0x18>
			ncl = 2;
 8009804:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f7ff fe87 	bl	800951c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800980e:	b130      	cbz	r0, 800981e <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009810:	1c41      	adds	r1, r0, #1
 8009812:	d0eb      	beq.n	80097ec <create_chain+0x3a>
 8009814:	2801      	cmp	r0, #1
 8009816:	d023      	beq.n	8009860 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8009818:	42b4      	cmp	r4, r6
 800981a:	d1d7      	bne.n	80097cc <create_chain+0x1a>
 800981c:	e7dd      	b.n	80097da <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800981e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f7ff ff4a 	bl	80096be <put_fat>
	if (res == FR_OK && clst != 0) {
 800982a:	b9b8      	cbnz	r0, 800985c <create_chain+0xaa>
 800982c:	b97f      	cbnz	r7, 800984e <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 800982e:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8009832:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	d0da      	beq.n	80097f0 <create_chain+0x3e>
			fs->free_clust--;
 800983a:	3b01      	subs	r3, #1
 800983c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009840:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8009844:	f043 0301 	orr.w	r3, r3, #1
 8009848:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 800984c:	e7d0      	b.n	80097f0 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800984e:	4622      	mov	r2, r4
 8009850:	4639      	mov	r1, r7
 8009852:	4628      	mov	r0, r5
 8009854:	f7ff ff33 	bl	80096be <put_fat>
	if (res == FR_OK) {
 8009858:	2800      	cmp	r0, #0
 800985a:	d0e8      	beq.n	800982e <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800985c:	2801      	cmp	r0, #1
 800985e:	d0c5      	beq.n	80097ec <create_chain+0x3a>
 8009860:	2401      	movs	r4, #1
 8009862:	e7c5      	b.n	80097f0 <create_chain+0x3e>

08009864 <dir_next>:
{
 8009864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8009868:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 800986c:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800986e:	b2b3      	uxth	r3, r6
{
 8009870:	4604      	mov	r4, r0
 8009872:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009874:	b913      	cbnz	r3, 800987c <dir_next+0x18>
		return FR_NO_FILE;
 8009876:	2004      	movs	r0, #4
 8009878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800987c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0f8      	beq.n	8009876 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009884:	f016 080f 	ands.w	r8, r6, #15
 8009888:	d10b      	bne.n	80098a2 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800988a:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 800988e:	3301      	adds	r3, #1
 8009890:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8009894:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8009898:	b971      	cbnz	r1, 80098b8 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800989a:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 800989e:	429e      	cmp	r6, r3
 80098a0:	d2e9      	bcs.n	8009876 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80098a2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 80098a6:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80098aa:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80098ae:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 80098b2:	2000      	movs	r0, #0
 80098b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80098b8:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80098bc:	3f01      	subs	r7, #1
 80098be:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 80098c2:	d1ee      	bne.n	80098a2 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80098c4:	f7ff fe2a 	bl	800951c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80098c8:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80098ca:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80098cc:	d802      	bhi.n	80098d4 <dir_next+0x70>
 80098ce:	2002      	movs	r0, #2
 80098d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80098d4:	1c42      	adds	r2, r0, #1
 80098d6:	d102      	bne.n	80098de <dir_next+0x7a>
 80098d8:	2001      	movs	r0, #1
 80098da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80098de:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80098e2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80098e6:	429d      	cmp	r5, r3
 80098e8:	d32f      	bcc.n	800994a <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	d0c2      	beq.n	8009876 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80098f0:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80098f4:	f7ff ff5d 	bl	80097b2 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80098f8:	4605      	mov	r5, r0
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d03e      	beq.n	800997c <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 80098fe:	2801      	cmp	r0, #1
 8009900:	d0e5      	beq.n	80098ce <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	d0e8      	beq.n	80098d8 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009906:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800990a:	f7ff fc0b 	bl	8009124 <sync_window>
 800990e:	4601      	mov	r1, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d1e1      	bne.n	80098d8 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009918:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800991c:	f7ff fac0 	bl	8008ea0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009920:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009924:	4629      	mov	r1, r5
 8009926:	4610      	mov	r0, r2
 8009928:	f7ff fdea 	bl	8009500 <clust2sect>
						dp->fs->wflag = 1;
 800992c:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009930:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009934:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009938:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800993c:	429f      	cmp	r7, r3
 800993e:	d30e      	bcc.n	800995e <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009940:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009944:	1bdf      	subs	r7, r3, r7
 8009946:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800994a:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800994e:	4629      	mov	r1, r5
 8009950:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009954:	f7ff fdd4 	bl	8009500 <clust2sect>
 8009958:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800995c:	e7a1      	b.n	80098a2 <dir_next+0x3e>
						dp->fs->wflag = 1;
 800995e:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8009962:	f7ff fbb6 	bl	80090d2 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009966:	2800      	cmp	r0, #0
 8009968:	d1b6      	bne.n	80098d8 <dir_next+0x74>
						dp->fs->winsect++;
 800996a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800996e:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8009972:	3301      	adds	r3, #1
 8009974:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009978:	3701      	adds	r7, #1
 800997a:	e7db      	b.n	8009934 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800997c:	2007      	movs	r0, #7
}
 800997e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009984 <follow_path>:
{
 8009984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009988:	780b      	ldrb	r3, [r1, #0]
 800998a:	2b2f      	cmp	r3, #47	; 0x2f
{
 800998c:	4604      	mov	r4, r0
 800998e:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009990:	d001      	beq.n	8009996 <follow_path+0x12>
 8009992:	2b5c      	cmp	r3, #92	; 0x5c
 8009994:	d100      	bne.n	8009998 <follow_path+0x14>
		path++;
 8009996:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8009998:	2600      	movs	r6, #0
 800999a:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800999e:	782b      	ldrb	r3, [r5, #0]
 80099a0:	2b1f      	cmp	r3, #31
 80099a2:	d936      	bls.n	8009a12 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80099a4:	4e5f      	ldr	r6, [pc, #380]	; (8009b24 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80099a6:	782b      	ldrb	r3, [r5, #0]
 80099a8:	2b2f      	cmp	r3, #47	; 0x2f
 80099aa:	46a8      	mov	r8, r5
 80099ac:	f105 0501 	add.w	r5, r5, #1
 80099b0:	d0f9      	beq.n	80099a6 <follow_path+0x22>
 80099b2:	2b5c      	cmp	r3, #92	; 0x5c
 80099b4:	d0f7      	beq.n	80099a6 <follow_path+0x22>
	sfn = dp->fn;
 80099b6:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 80099ba:	220b      	movs	r2, #11
 80099bc:	2120      	movs	r1, #32
 80099be:	4638      	mov	r0, r7
 80099c0:	f7ff fa6e 	bl	8008ea0 <mem_set>
	si = i = b = 0; ni = 8;
 80099c4:	f04f 0e00 	mov.w	lr, #0
 80099c8:	f108 39ff 	add.w	r9, r8, #4294967295
 80099cc:	46f4      	mov	ip, lr
 80099ce:	2108      	movs	r1, #8
 80099d0:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 80099d2:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80099d6:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80099d8:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80099dc:	d928      	bls.n	8009a30 <follow_path+0xac>
 80099de:	2b2f      	cmp	r3, #47	; 0x2f
 80099e0:	d026      	beq.n	8009a30 <follow_path+0xac>
 80099e2:	2b5c      	cmp	r3, #92	; 0x5c
 80099e4:	d024      	beq.n	8009a30 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 80099e6:	2b2e      	cmp	r3, #46	; 0x2e
 80099e8:	f000 8085 	beq.w	8009af6 <follow_path+0x172>
 80099ec:	4571      	cmp	r1, lr
 80099ee:	d90d      	bls.n	8009a0c <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 80099f0:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80099f2:	bf48      	it	mi
 80099f4:	3b80      	submi	r3, #128	; 0x80
 80099f6:	4d4c      	ldr	r5, [pc, #304]	; (8009b28 <follow_path+0x1a4>)
 80099f8:	bf44      	itt	mi
 80099fa:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 80099fc:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8009a00:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d07d      	beq.n	8009b04 <follow_path+0x180>
 8009a08:	4283      	cmp	r3, r0
 8009a0a:	d1f9      	bne.n	8009a00 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009a0c:	2006      	movs	r0, #6
	return res;
 8009a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8009a12:	4631      	mov	r1, r6
 8009a14:	4620      	mov	r0, r4
 8009a16:	f7ff fde2 	bl	80095de <dir_sdi>
		dp->dir = 0;
 8009a1a:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8009a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8009a22:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8009a26:	f807 300e 	strb.w	r3, [r7, lr]
 8009a2a:	f10e 0e01 	add.w	lr, lr, #1
 8009a2e:	e7d0      	b.n	80099d2 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009a30:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8009a32:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009a36:	bf34      	ite	cc
 8009a38:	2304      	movcc	r3, #4
 8009a3a:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009a3c:	f1be 0f00 	cmp.w	lr, #0
 8009a40:	d0e4      	beq.n	8009a0c <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8009a42:	7838      	ldrb	r0, [r7, #0]
 8009a44:	28e5      	cmp	r0, #229	; 0xe5
 8009a46:	bf04      	itt	eq
 8009a48:	2005      	moveq	r0, #5
 8009a4a:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8009a4c:	2908      	cmp	r1, #8
 8009a4e:	bf04      	itt	eq
 8009a50:	0092      	lsleq	r2, r2, #2
 8009a52:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009a54:	f002 0103 	and.w	r1, r2, #3
 8009a58:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009a5a:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009a5e:	bf08      	it	eq
 8009a60:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009a64:	2a04      	cmp	r2, #4
 8009a66:	bf08      	it	eq
 8009a68:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009a6c:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009a6e:	2100      	movs	r1, #0
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff fdb4 	bl	80095de <dir_sdi>
	if (res != FR_OK) return res;
 8009a76:	b9f8      	cbnz	r0, 8009ab8 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8009a78:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009a7c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009a80:	f7ff fbb4 	bl	80091ec <move_window>
		if (res != FR_OK) break;
 8009a84:	b9c0      	cbnz	r0, 8009ab8 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009a86:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a8a:	7813      	ldrb	r3, [r2, #0]
 8009a8c:	b19b      	cbz	r3, 8009ab6 <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009a8e:	7ad3      	ldrb	r3, [r2, #11]
 8009a90:	0719      	lsls	r1, r3, #28
 8009a92:	d40b      	bmi.n	8009aac <follow_path+0x128>
 8009a94:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009a98:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009a9c:	4573      	cmp	r3, lr
 8009a9e:	d00b      	beq.n	8009ab8 <follow_path+0x134>
 8009aa0:	f812 7b01 	ldrb.w	r7, [r2], #1
 8009aa4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009aa8:	428f      	cmp	r7, r1
 8009aaa:	d0f7      	beq.n	8009a9c <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8009aac:	2100      	movs	r1, #0
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f7ff fed8 	bl	8009864 <dir_next>
 8009ab4:	e7df      	b.n	8009a76 <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ab6:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8009ab8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009abc:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009abe:	b138      	cbz	r0, 8009ad0 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ac0:	2804      	cmp	r0, #4
 8009ac2:	d12c      	bne.n	8009b1e <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ac4:	f013 0f04 	tst.w	r3, #4
 8009ac8:	bf08      	it	eq
 8009aca:	2005      	moveq	r0, #5
 8009acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ad0:	075a      	lsls	r2, r3, #29
 8009ad2:	d424      	bmi.n	8009b1e <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8009ad4:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009ad8:	7acb      	ldrb	r3, [r1, #11]
 8009ada:	06db      	lsls	r3, r3, #27
 8009adc:	d508      	bpl.n	8009af0 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8009ade:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009ae2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009ae6:	f7ff fae6 	bl	80090b6 <ld_clust.isra.0>
 8009aea:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009aee:	e75a      	b.n	80099a6 <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009af0:	2005      	movs	r0, #5
 8009af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009af6:	2908      	cmp	r1, #8
 8009af8:	d188      	bne.n	8009a0c <follow_path+0x88>
			b <<= 2; continue;
 8009afa:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8009afc:	468e      	mov	lr, r1
			b <<= 2; continue;
 8009afe:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8009b00:	210b      	movs	r1, #11
 8009b02:	e766      	b.n	80099d2 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8009b04:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8009b08:	2819      	cmp	r0, #25
 8009b0a:	d98a      	bls.n	8009a22 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8009b0c:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8009b10:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8009b12:	bf9e      	ittt	ls
 8009b14:	3b20      	subls	r3, #32
 8009b16:	f042 0201 	orrls.w	r2, r2, #1
 8009b1a:	b2db      	uxtbls	r3, r3
 8009b1c:	e783      	b.n	8009a26 <follow_path+0xa2>
}
 8009b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b22:	bf00      	nop
 8009b24:	0800bc20 	.word	0x0800bc20
 8009b28:	0800bc9f 	.word	0x0800bc9f

08009b2c <dir_read.constprop.13>:
FRESULT dir_read (
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8009b30:	2004      	movs	r0, #4
	while (dp->sect) {
 8009b32:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009b36:	b909      	cbnz	r1, 8009b3c <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 8009b38:	b1b0      	cbz	r0, 8009b68 <dir_read.constprop.13+0x3c>
 8009b3a:	e01d      	b.n	8009b78 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 8009b3c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009b40:	f7ff fb54 	bl	80091ec <move_window>
		if (res != FR_OK) break;
 8009b44:	b9c0      	cbnz	r0, 8009b78 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009b46:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8009b4a:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b4c:	b1c3      	cbz	r3, 8009b80 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009b4e:	2be5      	cmp	r3, #229	; 0xe5
 8009b50:	d00c      	beq.n	8009b6c <dir_read.constprop.13+0x40>
 8009b52:	2b2e      	cmp	r3, #46	; 0x2e
 8009b54:	d00a      	beq.n	8009b6c <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 8009b56:	7ad3      	ldrb	r3, [r2, #11]
 8009b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009b5c:	2b0f      	cmp	r3, #15
 8009b5e:	d005      	beq.n	8009b6c <dir_read.constprop.13+0x40>
 8009b60:	f023 0320 	bic.w	r3, r3, #32
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d001      	beq.n	8009b6c <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b68:	2000      	movs	r0, #0
 8009b6a:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f7ff fe78 	bl	8009864 <dir_next>
		if (res != FR_OK) break;
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0dc      	beq.n	8009b32 <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 8009b7e:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b80:	2004      	movs	r0, #4
 8009b82:	e7f9      	b.n	8009b78 <dir_read.constprop.13+0x4c>

08009b84 <dir_register>:
{
 8009b84:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 8009b86:	2100      	movs	r1, #0
{
 8009b88:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8009b8a:	f7ff fd28 	bl	80095de <dir_sdi>
	if (res == FR_OK) {
 8009b8e:	4604      	mov	r4, r0
 8009b90:	bb78      	cbnz	r0, 8009bf2 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 8009b92:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8009b96:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8009b9a:	f7ff fb27 	bl	80091ec <move_window>
			if (res != FR_OK) break;
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	bb38      	cbnz	r0, 8009bf2 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009ba2:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2be5      	cmp	r3, #229	; 0xe5
 8009baa:	d11b      	bne.n	8009be4 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8009bac:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8009bb0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8009bb4:	f7ff fb1a 	bl	80091ec <move_window>
		if (res == FR_OK) {
 8009bb8:	4604      	mov	r4, r0
 8009bba:	b988      	cbnz	r0, 8009be0 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8009bc4:	f7ff f96c 	bl	8008ea0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009bc8:	220b      	movs	r2, #11
 8009bca:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8009bce:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8009bd2:	f7ff f95b 	bl	8008e8c <mem_cpy>
			dp->fs->wflag = 1;
 8009bd6:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8009be0:	4620      	mov	r0, r4
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0e1      	beq.n	8009bac <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009be8:	2101      	movs	r1, #1
 8009bea:	4628      	mov	r0, r5
 8009bec:	f7ff fe3a 	bl	8009864 <dir_next>
 8009bf0:	e7cd      	b.n	8009b8e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009bf2:	2c04      	cmp	r4, #4
 8009bf4:	bf08      	it	eq
 8009bf6:	2407      	moveq	r4, #7
 8009bf8:	e7f2      	b.n	8009be0 <dir_register+0x5c>

08009bfa <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009bfa:	2901      	cmp	r1, #1
{
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	4604      	mov	r4, r0
 8009c00:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009c02:	d801      	bhi.n	8009c08 <remove_chain+0xe>
		res = FR_INT_ERR;
 8009c04:	2002      	movs	r0, #2
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009c08:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	d2f9      	bcs.n	8009c04 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009c10:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009c14:	429d      	cmp	r5, r3
 8009c16:	d205      	bcs.n	8009c24 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff fc7e 	bl	800951c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8009c20:	4606      	mov	r6, r0
 8009c22:	b908      	cbnz	r0, 8009c28 <remove_chain+0x2e>
		res = FR_INT_ERR;
 8009c24:	2000      	movs	r0, #0
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009c28:	2801      	cmp	r0, #1
 8009c2a:	d0eb      	beq.n	8009c04 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009c2c:	1c41      	adds	r1, r0, #1
 8009c2e:	d014      	beq.n	8009c5a <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009c30:	2200      	movs	r2, #0
 8009c32:	4629      	mov	r1, r5
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7ff fd42 	bl	80096be <put_fat>
			if (res != FR_OK) break;
 8009c3a:	b978      	cbnz	r0, 8009c5c <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009c3c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	d008      	beq.n	8009c56 <remove_chain+0x5c>
				fs->free_clust++;
 8009c44:	3301      	adds	r3, #1
 8009c46:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8009c4a:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8009c4e:	f043 0301 	orr.w	r3, r3, #1
 8009c52:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8009c56:	4635      	mov	r5, r6
 8009c58:	e7da      	b.n	8009c10 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009c5a:	2001      	movs	r0, #1
}
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c62:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c64:	a804      	add	r0, sp, #16
{
 8009c66:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8009c68:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8009c6c:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8009c6e:	f7ff f9f3 	bl	8009058 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c72:	1e05      	subs	r5, r0, #0
 8009c74:	db21      	blt.n	8009cba <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c76:	4913      	ldr	r1, [pc, #76]	; (8009cc4 <f_mount+0x64>)
 8009c78:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8009c7c:	b164      	cbz	r4, 8009c98 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c7e:	4b12      	ldr	r3, [pc, #72]	; (8009cc8 <f_mount+0x68>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4294      	cmp	r4, r2
 8009c84:	bf04      	itt	eq
 8009c86:	2200      	moveq	r2, #0
 8009c88:	601a      	streq	r2, [r3, #0]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	4294      	cmp	r4, r2
 8009c90:	bf08      	it	eq
 8009c92:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c94:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 8009c98:	9801      	ldr	r0, [sp, #4]
 8009c9a:	b110      	cbz	r0, 8009ca2 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009ca2:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ca6:	b130      	cbz	r0, 8009cb6 <f_mount+0x56>
 8009ca8:	2e01      	cmp	r6, #1
 8009caa:	d108      	bne.n	8009cbe <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009cac:	2200      	movs	r2, #0
 8009cae:	4669      	mov	r1, sp
 8009cb0:	a801      	add	r0, sp, #4
 8009cb2:	f7ff fae5 	bl	8009280 <find_volume>
	LEAVE_FF(fs, res);
}
 8009cb6:	b004      	add	sp, #16
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cba:	200b      	movs	r0, #11
 8009cbc:	e7fb      	b.n	8009cb6 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e7f9      	b.n	8009cb6 <f_mount+0x56>
 8009cc2:	bf00      	nop
 8009cc4:	200005f4 	.word	0x200005f4
 8009cc8:	200005f8 	.word	0x200005f8

08009ccc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8009cd4:	4690      	mov	r8, r2
 8009cd6:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009cd8:	4605      	mov	r5, r0
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f000 80a6 	beq.w	8009e2c <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009ce6:	f002 021e 	and.w	r2, r2, #30
 8009cea:	a901      	add	r1, sp, #4
 8009cec:	a886      	add	r0, sp, #536	; 0x218
 8009cee:	f7ff fac7 	bl	8009280 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f040 8094 	bne.w	8009e22 <f_open+0x156>
		INIT_BUF(dj);
 8009cfa:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8009cfc:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8009cfe:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d00:	a806      	add	r0, sp, #24
 8009d02:	f7ff fe3f 	bl	8009984 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009d06:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 8009d0a:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d0c:	b948      	cbnz	r0, 8009d22 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	d05b      	beq.n	8009dca <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d12:	f017 0f1e 	tst.w	r7, #30
 8009d16:	bf14      	ite	ne
 8009d18:	2101      	movne	r1, #1
 8009d1a:	2100      	moveq	r1, #0
 8009d1c:	a806      	add	r0, sp, #24
 8009d1e:	f7ff f8c7 	bl	8008eb0 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d22:	f018 0f1c 	tst.w	r8, #28
 8009d26:	d05b      	beq.n	8009de0 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d050      	beq.n	8009dce <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009d2c:	2804      	cmp	r0, #4
 8009d2e:	d14a      	bne.n	8009dc6 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d30:	4b51      	ldr	r3, [pc, #324]	; (8009e78 <f_open+0x1ac>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	b11a      	cbz	r2, 8009d3e <f_open+0x72>
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f040 809b 	bne.w	8009e74 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d3e:	a806      	add	r0, sp, #24
 8009d40:	f7ff ff20 	bl	8009b84 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d13e      	bne.n	8009dc6 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8009d48:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d4a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d4e:	073b      	lsls	r3, r7, #28
 8009d50:	d550      	bpl.n	8009df4 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 8009d52:	f7f7 fc99 	bl	8001688 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009d56:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009d5a:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009d5e:	73a0      	strb	r0, [r4, #14]
 8009d60:	73e3      	strb	r3, [r4, #15]
 8009d62:	0c03      	lsrs	r3, r0, #16
 8009d64:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009d66:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009d6a:	f884 801c 	strb.w	r8, [r4, #28]
 8009d6e:	f884 801d 	strb.w	r8, [r4, #29]
 8009d72:	f884 801e 	strb.w	r8, [r4, #30]
 8009d76:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009d7a:	7423      	strb	r3, [r4, #16]
 8009d7c:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009d7e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009d80:	4621      	mov	r1, r4
 8009d82:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009d86:	f7ff f996 	bl	80090b6 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009d8a:	f884 801a 	strb.w	r8, [r4, #26]
 8009d8e:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009d92:	f884 8014 	strb.w	r8, [r4, #20]
 8009d96:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8009d9a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009da2:	4680      	mov	r8, r0
 8009da4:	b330      	cbz	r0, 8009df4 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 8009da6:	4601      	mov	r1, r0
 8009da8:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8009daa:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8009dae:	f7ff ff24 	bl	8009bfa <remove_chain>
					if (res == FR_OK) {
 8009db2:	b940      	cbnz	r0, 8009dc6 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009db4:	9886      	ldr	r0, [sp, #536]	; 0x218
 8009db6:	f108 33ff 	add.w	r3, r8, #4294967295
 8009dba:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7ff fa14 	bl	80091ec <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8009dc4:	b1b0      	cbz	r0, 8009df4 <f_open+0x128>
					res = FR_DENIED;
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	e02b      	b.n	8009e22 <f_open+0x156>
				res = FR_INVALID_NAME;
 8009dca:	2006      	movs	r0, #6
 8009dcc:	e7a9      	b.n	8009d22 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009dce:	7ae3      	ldrb	r3, [r4, #11]
 8009dd0:	f013 0f11 	tst.w	r3, #17
 8009dd4:	d12e      	bne.n	8009e34 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009dd6:	f018 0f04 	tst.w	r8, #4
 8009dda:	d0b8      	beq.n	8009d4e <f_open+0x82>
						res = FR_EXIST;
 8009ddc:	2608      	movs	r6, #8
 8009dde:	e020      	b.n	8009e22 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1f0      	bne.n	8009dc6 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009de4:	7ae3      	ldrb	r3, [r4, #11]
 8009de6:	06d8      	lsls	r0, r3, #27
 8009de8:	d422      	bmi.n	8009e30 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009dea:	f018 0f02 	tst.w	r8, #2
 8009dee:	d001      	beq.n	8009df4 <f_open+0x128>
 8009df0:	07da      	lsls	r2, r3, #31
 8009df2:	d41f      	bmi.n	8009e34 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009df4:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009df6:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8009df8:	bf48      	it	mi
 8009dfa:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009dfe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009e02:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e06:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 8009e0a:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e0e:	bf14      	ite	ne
 8009e10:	2101      	movne	r1, #1
 8009e12:	2100      	moveq	r1, #0
 8009e14:	a806      	add	r0, sp, #24
 8009e16:	f7ff f87d 	bl	8008f14 <inc_lock>
 8009e1a:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8009e1e:	b958      	cbnz	r0, 8009e38 <f_open+0x16c>
 8009e20:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8009e22:	4630      	mov	r0, r6
 8009e24:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8009e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8009e2c:	2609      	movs	r6, #9
 8009e2e:	e7f8      	b.n	8009e22 <f_open+0x156>
					res = FR_NO_FILE;
 8009e30:	2604      	movs	r6, #4
 8009e32:	e7f6      	b.n	8009e22 <f_open+0x156>
					res = FR_DENIED;
 8009e34:	2607      	movs	r6, #7
 8009e36:	e7f4      	b.n	8009e22 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8009e38:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009e3c:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8009e40:	2700      	movs	r7, #0
 8009e42:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009e46:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f7ff f933 	bl	80090b6 <ld_clust.isra.0>
 8009e50:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009e54:	69e3      	ldr	r3, [r4, #28]
 8009e56:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8009e5a:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8009e5e:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 8009e62:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8009e66:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8009e6a:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8009e6e:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8009e72:	e7d6      	b.n	8009e22 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009e74:	2012      	movs	r0, #18
 8009e76:	e7a6      	b.n	8009dc6 <f_open+0xfa>
 8009e78:	200005f8 	.word	0x200005f8

08009e7c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009e82:	2300      	movs	r3, #0
 8009e84:	f8cb 3000 	str.w	r3, [fp]
{
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4689      	mov	r9, r1
 8009e8c:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8009e8e:	f7ff f8fb 	bl	8009088 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009e92:	4606      	mov	r6, r0
 8009e94:	bb50      	cbnz	r0, 8009eec <f_write+0x70>
	if (fp->err)							/* Check error */
 8009e96:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 80d9 	bne.w	800a052 <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009ea0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009ea4:	0799      	lsls	r1, r3, #30
 8009ea6:	f140 80d6 	bpl.w	800a056 <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009eaa:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009eae:	42df      	cmn	r7, r3
 8009eb0:	f0c0 8083 	bcc.w	8009fba <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009eb4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009eb8:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	f200 80c5 	bhi.w	800a04c <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009ec2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009ec6:	f043 0320 	orr.w	r3, r3, #32
 8009eca:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009ece:	e00d      	b.n	8009eec <f_write+0x70>
					if (fp->cltbl)
 8009ed0:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009ed4:	b173      	cbz	r3, 8009ef4 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7ff f87c 	bl	8008fd4 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009edc:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d0e8      	beq.n	8009eb4 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009ee2:	2901      	cmp	r1, #1
 8009ee4:	d109      	bne.n	8009efa <f_write+0x7e>
 8009ee6:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ee8:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8009eec:	4630      	mov	r0, r6
 8009eee:	b003      	add	sp, #12
 8009ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ef4:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009ef8:	e07a      	b.n	8009ff0 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009efa:	1c4a      	adds	r2, r1, #1
 8009efc:	d101      	bne.n	8009f02 <f_write+0x86>
 8009efe:	2601      	movs	r6, #1
 8009f00:	e7f2      	b.n	8009ee8 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009f02:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8009f06:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009f0a:	b90b      	cbnz	r3, 8009f10 <f_write+0x94>
 8009f0c:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009f10:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009f14:	065b      	lsls	r3, r3, #25
 8009f16:	d511      	bpl.n	8009f3c <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009f18:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009f1c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009f20:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009f24:	2301      	movs	r3, #1
 8009f26:	4621      	mov	r1, r4
 8009f28:	f7fe ff2c 	bl	8008d84 <disk_write>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1e6      	bne.n	8009efe <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8009f30:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f38:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009f3c:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8009f40:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009f44:	4650      	mov	r0, sl
 8009f46:	f7ff fadb 	bl	8009500 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d0cb      	beq.n	8009ee6 <f_write+0x6a>
			sect += csect;
 8009f4e:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009f50:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8009f52:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009f56:	d04e      	beq.n	8009ff6 <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009f58:	9a01      	ldr	r2, [sp, #4]
 8009f5a:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009f5e:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009f62:	442a      	add	r2, r5
 8009f64:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8009f66:	bf84      	itt	hi
 8009f68:	9a01      	ldrhi	r2, [sp, #4]
 8009f6a:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	4642      	mov	r2, r8
 8009f70:	4649      	mov	r1, r9
 8009f72:	f7fe ff07 	bl	8008d84 <disk_write>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d1c1      	bne.n	8009efe <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009f7a:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8009f7e:	eba1 0108 	sub.w	r1, r1, r8
 8009f82:	428d      	cmp	r5, r1
 8009f84:	d90c      	bls.n	8009fa0 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f8a:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7fe ff7c 	bl	8008e8c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009f94:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f9c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009fa0:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009fa2:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009fa6:	442b      	add	r3, r5
 8009fa8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009fac:	f8db 3000 	ldr.w	r3, [fp]
 8009fb0:	442b      	add	r3, r5
 8009fb2:	44a9      	add	r9, r5
 8009fb4:	f8cb 3000 	str.w	r3, [fp]
 8009fb8:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8009fba:	2f00      	cmp	r7, #0
 8009fbc:	f43f af7a 	beq.w	8009eb4 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009fc0:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8009fc4:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009fc8:	bb5b      	cbnz	r3, 800a022 <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009fca:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009fce:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8009fd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	d197      	bne.n	8009f10 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	f47f af75 	bne.w	8009ed0 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8009fe6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8009fea:	2900      	cmp	r1, #0
 8009fec:	f47f af79 	bne.w	8009ee2 <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ff0:	f7ff fbdf 	bl	80097b2 <create_chain>
 8009ff4:	e772      	b.n	8009edc <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009ff6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009ffa:	4598      	cmp	r8, r3
 8009ffc:	d00f      	beq.n	800a01e <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 8009ffe:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800a002:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800a006:	429a      	cmp	r2, r3
 800a008:	d209      	bcs.n	800a01e <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a00a:	2301      	movs	r3, #1
 800a00c:	4642      	mov	r2, r8
 800a00e:	4621      	mov	r1, r4
 800a010:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800a014:	f7fe fea8 	bl	8008d68 <disk_read>
				if (fp->fptr < fp->fsize &&
 800a018:	2800      	cmp	r0, #0
 800a01a:	f47f af70 	bne.w	8009efe <f_write+0x82>
			fp->dsect = sect;
 800a01e:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a022:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 800a026:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800a02a:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800a02e:	42bd      	cmp	r5, r7
 800a030:	bf28      	it	cs
 800a032:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a034:	462a      	mov	r2, r5
 800a036:	4649      	mov	r1, r9
 800a038:	4420      	add	r0, r4
 800a03a:	f7fe ff27 	bl	8008e8c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a03e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a046:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800a04a:	e7aa      	b.n	8009fa2 <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a04c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800a050:	e737      	b.n	8009ec2 <f_write+0x46>
 800a052:	461e      	mov	r6, r3
 800a054:	e74a      	b.n	8009eec <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a056:	2607      	movs	r6, #7
 800a058:	e748      	b.n	8009eec <f_write+0x70>

0800a05a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a05e:	f7ff f813 	bl	8009088 <validate>
	if (res == FR_OK) {
 800a062:	2800      	cmp	r0, #0
 800a064:	d158      	bne.n	800a118 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a066:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a06a:	069a      	lsls	r2, r3, #26
 800a06c:	d554      	bpl.n	800a118 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a06e:	065b      	lsls	r3, r3, #25
 800a070:	d511      	bpl.n	800a096 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a072:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a076:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800a07a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a07e:	2301      	movs	r3, #1
 800a080:	4621      	mov	r1, r4
 800a082:	f7fe fe7f 	bl	8008d84 <disk_write>
 800a086:	2800      	cmp	r0, #0
 800a088:	d145      	bne.n	800a116 <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 800a08a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a08e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a092:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a096:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800a09a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a09e:	f7ff f8a5 	bl	80091ec <move_window>
 800a0a2:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800a0a4:	bbc0      	cbnz	r0, 800a118 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800a0a6:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a0aa:	7aeb      	ldrb	r3, [r5, #11]
 800a0ac:	f043 0320 	orr.w	r3, r3, #32
 800a0b0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a0b2:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800a0b6:	772b      	strb	r3, [r5, #28]
 800a0b8:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800a0bc:	0a1b      	lsrs	r3, r3, #8
 800a0be:	776b      	strb	r3, [r5, #29]
 800a0c0:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800a0c4:	77ab      	strb	r3, [r5, #30]
 800a0c6:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800a0ca:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a0cc:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a0d0:	76ab      	strb	r3, [r5, #26]
 800a0d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a0d6:	0c1b      	lsrs	r3, r3, #16
 800a0d8:	752b      	strb	r3, [r5, #20]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a0de:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800a0e0:	f7f7 fad2 	bl	8001688 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a0e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a0e8:	75a8      	strb	r0, [r5, #22]
 800a0ea:	75eb      	strb	r3, [r5, #23]
 800a0ec:	0c03      	lsrs	r3, r0, #16
 800a0ee:	0e00      	lsrs	r0, r0, #24
 800a0f0:	762b      	strb	r3, [r5, #24]
 800a0f2:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a0f4:	74ae      	strb	r6, [r5, #18]
 800a0f6:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800a0f8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800a0fc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800a100:	f023 0320 	bic.w	r3, r3, #32
 800a104:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800a108:	2301      	movs	r3, #1
 800a10a:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800a10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800a112:	f7ff b80e 	b.w	8009132 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a116:	2001      	movs	r0, #1
}
 800a118:	bd70      	pop	{r4, r5, r6, pc}

0800a11a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a11a:	b510      	push	{r4, lr}
 800a11c:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a11e:	f7ff ff9c 	bl	800a05a <f_sync>
	if (res == FR_OK)
 800a122:	b950      	cbnz	r0, 800a13a <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a124:	4620      	mov	r0, r4
 800a126:	f7fe ffaf 	bl	8009088 <validate>
		if (res == FR_OK) {
 800a12a:	b930      	cbnz	r0, 800a13a <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a12c:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800a130:	f7fe ff34 	bl	8008f9c <dec_lock>
			if (res == FR_OK)
 800a134:	b908      	cbnz	r0, 800a13a <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a136:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800a13a:	bd10      	pop	{r4, pc}

0800a13c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800a13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	4604      	mov	r4, r0
 800a142:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800a144:	f7fe ffa0 	bl	8009088 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a148:	4606      	mov	r6, r0
 800a14a:	bb10      	cbnz	r0, 800a192 <f_lseek+0x56>
	if (fp->err)						/* Check error */
 800a14c:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800a150:	2b00      	cmp	r3, #0
 800a152:	f040 813e 	bne.w	800a3d2 <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a156:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 8087 	beq.w	800a26e <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a160:	1c6a      	adds	r2, r5, #1
 800a162:	d13d      	bne.n	800a1e0 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800a164:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a168:	f8d3 b000 	ldr.w	fp, [r3]
 800a16c:	f103 0a04 	add.w	sl, r3, #4
 800a170:	2502      	movs	r5, #2
			if (cl) {
 800a172:	b35f      	cbz	r7, 800a1cc <f_lseek+0x90>
 800a174:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a176:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 800a17a:	4641      	mov	r1, r8
 800a17c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a180:	f7ff f9cc 	bl	800951c <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a184:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800a186:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a18a:	d807      	bhi.n	800a19c <f_lseek+0x60>
 800a18c:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a18e:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800a192:	4630      	mov	r0, r6
 800a194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	4607      	mov	r7, r0
 800a19a:	e7eb      	b.n	800a174 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d101      	bne.n	800a1a4 <f_lseek+0x68>
 800a1a0:	2601      	movs	r6, #1
 800a1a2:	e7f4      	b.n	800a18e <f_lseek+0x52>
					} while (cl == pcl + 1);
 800a1a4:	f108 0301 	add.w	r3, r8, #1
 800a1a8:	4298      	cmp	r0, r3
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	d0e5      	beq.n	800a17a <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a1ae:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a1b0:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800a1b2:	bf21      	itttt	cs
 800a1b4:	4653      	movcs	r3, sl
 800a1b6:	f843 9b08 	strcs.w	r9, [r3], #8
 800a1ba:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800a1be:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800a1c0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a1c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1c8:	4298      	cmp	r0, r3
 800a1ca:	d3e5      	bcc.n	800a198 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800a1cc:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 800a1d0:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800a1d2:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 800a1d4:	f200 80ff 	bhi.w	800a3d6 <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f8ca 3000 	str.w	r3, [sl]
 800a1de:	e7d8      	b.n	800a192 <f_lseek+0x56>
 800a1e0:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 800a1e4:	4285      	cmp	r5, r0
 800a1e6:	bf28      	it	cs
 800a1e8:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800a1ea:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800a1ee:	2d00      	cmp	r5, #0
 800a1f0:	d0cf      	beq.n	800a192 <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a1f2:	f105 38ff 	add.w	r8, r5, #4294967295
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7fe feeb 	bl	8008fd4 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 800a1fe:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 800a202:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 800a206:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 800a208:	4638      	mov	r0, r7
 800a20a:	f7ff f979 	bl	8009500 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800a20e:	2800      	cmp	r0, #0
 800a210:	d0bc      	beq.n	800a18c <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a212:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800a216:	2d00      	cmp	r5, #0
 800a218:	d0bb      	beq.n	800a192 <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a21a:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a21e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a222:	3d01      	subs	r5, #1
 800a224:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 800a228:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a22a:	4295      	cmp	r5, r2
 800a22c:	d0b1      	beq.n	800a192 <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a22e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a232:	0659      	lsls	r1, r3, #25
 800a234:	d50d      	bpl.n	800a252 <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a236:	2301      	movs	r3, #1
 800a238:	4621      	mov	r1, r4
 800a23a:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800a23e:	f7fe fda1 	bl	8008d84 <disk_write>
 800a242:	2800      	cmp	r0, #0
 800a244:	d1ac      	bne.n	800a1a0 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800a246:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a24a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a24e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a252:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a256:	2301      	movs	r3, #1
 800a258:	462a      	mov	r2, r5
 800a25a:	4621      	mov	r1, r4
 800a25c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a260:	f7fe fd82 	bl	8008d68 <disk_read>
 800a264:	2800      	cmp	r0, #0
 800a266:	d19b      	bne.n	800a1a0 <f_lseek+0x64>
					fp->dsect = dsc;
 800a268:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800a26c:	e791      	b.n	800a192 <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800a26e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800a272:	429d      	cmp	r5, r3
 800a274:	d905      	bls.n	800a282 <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800a276:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800a27a:	f012 0f02 	tst.w	r2, #2
 800a27e:	bf08      	it	eq
 800a280:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800a282:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800a284:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800a288:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800a28c:	2d00      	cmp	r5, #0
 800a28e:	d13e      	bne.n	800a30e <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a290:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a294:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800a298:	4293      	cmp	r3, r2
 800a29a:	f67f af7a 	bls.w	800a192 <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800a29e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800a2a2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a2a6:	f043 0320 	orr.w	r3, r3, #32
 800a2aa:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800a2ae:	e770      	b.n	800a192 <f_lseek+0x56>
		fp->fptr = nsect = 0;
 800a2b0:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a2b2:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0e8      	beq.n	800a290 <f_lseek+0x154>
 800a2be:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800a2c2:	4295      	cmp	r5, r2
 800a2c4:	d0e4      	beq.n	800a290 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a2c6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a2ca:	065b      	lsls	r3, r3, #25
 800a2cc:	d510      	bpl.n	800a2f0 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a2ce:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a2da:	f7fe fd53 	bl	8008d84 <disk_write>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f47f af5e 	bne.w	800a1a0 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 800a2e4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ec:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a2f0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a2fe:	f7fe fd33 	bl	8008d68 <disk_read>
 800a302:	2800      	cmp	r0, #0
 800a304:	f47f af4c 	bne.w	800a1a0 <f_lseek+0x64>
			fp->dsect = nsect;
 800a308:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800a30c:	e7c0      	b.n	800a290 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800a30e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a312:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800a316:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800a318:	b32b      	cbz	r3, 800a366 <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a31a:	3b01      	subs	r3, #1
 800a31c:	1e6a      	subs	r2, r5, #1
 800a31e:	fbb3 f1f7 	udiv	r1, r3, r7
 800a322:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800a326:	428a      	cmp	r2, r1
 800a328:	d31d      	bcc.n	800a366 <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a32a:	427a      	negs	r2, r7
 800a32c:	4013      	ands	r3, r2
				clst = fp->clust;
 800a32e:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a332:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800a336:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 800a338:	2900      	cmp	r1, #0
 800a33a:	d0b9      	beq.n	800a2b0 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 800a33c:	42bd      	cmp	r5, r7
 800a33e:	d823      	bhi.n	800a388 <f_lseek+0x24c>
				fp->fptr += ofs;
 800a340:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a344:	442b      	add	r3, r5
 800a346:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800a34a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0ae      	beq.n	800a2b0 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a352:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a356:	f7ff f8d3 	bl	8009500 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f af16 	beq.w	800a18c <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 800a360:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800a364:	e7a5      	b.n	800a2b2 <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800a366:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a36a:	b951      	cbnz	r1, 800a382 <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 800a36c:	f7ff fa21 	bl	80097b2 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a370:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800a372:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a374:	f43f af0a 	beq.w	800a18c <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a378:	1c42      	adds	r2, r0, #1
 800a37a:	f43f af11 	beq.w	800a1a0 <f_lseek+0x64>
					fp->sclust = clst;
 800a37e:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800a382:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800a386:	e7d7      	b.n	800a338 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a388:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a38c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a390:	079b      	lsls	r3, r3, #30
 800a392:	d505      	bpl.n	800a3a0 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a394:	f7ff fa0d 	bl	80097b2 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a398:	4601      	mov	r1, r0
 800a39a:	b920      	cbnz	r0, 800a3a6 <f_lseek+0x26a>
 800a39c:	463d      	mov	r5, r7
 800a39e:	e7cf      	b.n	800a340 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a3a0:	f7ff f8bc 	bl	800951c <get_fat>
 800a3a4:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a3a6:	1c4a      	adds	r2, r1, #1
 800a3a8:	f43f aefa 	beq.w	800a1a0 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a3ac:	2901      	cmp	r1, #1
 800a3ae:	f67f aeed 	bls.w	800a18c <f_lseek+0x50>
 800a3b2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a3b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ba:	4299      	cmp	r1, r3
 800a3bc:	f4bf aee6 	bcs.w	800a18c <f_lseek+0x50>
					fp->fptr += bcs;
 800a3c0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800a3c4:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 800a3c8:	443b      	add	r3, r7
 800a3ca:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800a3ce:	1bed      	subs	r5, r5, r7
 800a3d0:	e7b4      	b.n	800a33c <f_lseek+0x200>
 800a3d2:	461e      	mov	r6, r3
 800a3d4:	e6dd      	b.n	800a192 <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a3d6:	2611      	movs	r6, #17
 800a3d8:	e6db      	b.n	800a192 <f_lseek+0x56>

0800a3da <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a3da:	b530      	push	{r4, r5, lr}
 800a3dc:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800a3de:	4605      	mov	r5, r0
{
 800a3e0:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d045      	beq.n	800a472 <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	a901      	add	r1, sp, #4
 800a3ea:	a802      	add	r0, sp, #8
 800a3ec:	f7fe ff48 	bl	8009280 <find_volume>
	if (res == FR_OK) {
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	bb30      	cbnz	r0, 800a442 <f_opendir+0x68>
		dp->fs = fs;
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 800a3fa:	ab03      	add	r3, sp, #12
 800a3fc:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a400:	9901      	ldr	r1, [sp, #4]
 800a402:	4628      	mov	r0, r5
 800a404:	f7ff fabe 	bl	8009984 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800a408:	4604      	mov	r4, r0
 800a40a:	b9b8      	cbnz	r0, 800a43c <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 800a40c:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 800a410:	b149      	cbz	r1, 800a426 <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800a412:	7acb      	ldrb	r3, [r1, #11]
 800a414:	06db      	lsls	r3, r3, #27
 800a416:	d528      	bpl.n	800a46a <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 800a418:	9b02      	ldr	r3, [sp, #8]
 800a41a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a41e:	f7fe fe4a 	bl	80090b6 <ld_clust.isra.0>
 800a422:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 800a426:	9b02      	ldr	r3, [sp, #8]
 800a428:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a42c:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a430:	2100      	movs	r1, #0
 800a432:	4628      	mov	r0, r5
 800a434:	f7ff f8d3 	bl	80095de <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 800a438:	4604      	mov	r4, r0
 800a43a:	b130      	cbz	r0, 800a44a <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a43c:	2c04      	cmp	r4, #4
 800a43e:	bf08      	it	eq
 800a440:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800a442:	2300      	movs	r3, #0
 800a444:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800a448:	e009      	b.n	800a45e <f_opendir+0x84>
					if (dp->sclust) {
 800a44a:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800a44e:	b14b      	cbz	r3, 800a464 <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a450:	4621      	mov	r1, r4
 800a452:	4628      	mov	r0, r5
 800a454:	f7fe fd5e 	bl	8008f14 <inc_lock>
 800a458:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 800a45c:	b138      	cbz	r0, 800a46e <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 800a45e:	4620      	mov	r0, r4
 800a460:	b007      	add	sp, #28
 800a462:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 800a464:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800a468:	e7f9      	b.n	800a45e <f_opendir+0x84>
					res = FR_NO_PATH;
 800a46a:	2405      	movs	r4, #5
 800a46c:	e7e9      	b.n	800a442 <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 800a46e:	2412      	movs	r4, #18
 800a470:	e7e7      	b.n	800a442 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800a472:	2409      	movs	r4, #9
 800a474:	e7f3      	b.n	800a45e <f_opendir+0x84>

0800a476 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a476:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a478:	4605      	mov	r5, r0
 800a47a:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800a47c:	f7fe fe04 	bl	8009088 <validate>
	if (res == FR_OK) {
 800a480:	4604      	mov	r4, r0
 800a482:	b9e8      	cbnz	r0, 800a4c0 <f_readdir+0x4a>
		if (!fno) {
 800a484:	b92e      	cbnz	r6, 800a492 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a486:	4601      	mov	r1, r0
 800a488:	4628      	mov	r0, r5
 800a48a:	f7ff f8a8 	bl	80095de <dir_sdi>
 800a48e:	4604      	mov	r4, r0
 800a490:	e016      	b.n	800a4c0 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 800a492:	ab01      	add	r3, sp, #4
 800a494:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800a498:	4628      	mov	r0, r5
 800a49a:	f7ff fb47 	bl	8009b2c <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800a49e:	2804      	cmp	r0, #4
 800a4a0:	d111      	bne.n	800a4c6 <f_readdir+0x50>
				dp->sect = 0;
 800a4a2:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7fe fda7 	bl	8008ffc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7ff f9d7 	bl	8009864 <dir_next>
				if (res == FR_NO_FILE) {
 800a4b6:	2804      	cmp	r0, #4
 800a4b8:	d1e9      	bne.n	800a48e <f_readdir+0x18>
					dp->sect = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	b004      	add	sp, #16
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d1e1      	bne.n	800a48e <f_readdir+0x18>
 800a4ca:	e7ec      	b.n	800a4a6 <f_readdir+0x30>

0800a4cc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a4cc:	b530      	push	{r4, r5, lr}
 800a4ce:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a4d2:	2201      	movs	r2, #1
{
 800a4d4:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800a4d6:	a901      	add	r1, sp, #4
 800a4d8:	a886      	add	r0, sp, #536	; 0x218
 800a4da:	f7fe fed1 	bl	8009280 <find_volume>
	if (res == FR_OK) {
 800a4de:	b988      	cbnz	r0, 800a504 <f_unlink+0x38>
		INIT_BUF(dj);
 800a4e0:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800a4e2:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a4e4:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800a4e6:	a806      	add	r0, sp, #24
 800a4e8:	f7ff fa4c 	bl	8009984 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800a4ec:	b950      	cbnz	r0, 800a504 <f_unlink+0x38>
 800a4ee:	2102      	movs	r1, #2
 800a4f0:	a806      	add	r0, sp, #24
 800a4f2:	f7fe fcdd 	bl	8008eb0 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a4f6:	b928      	cbnz	r0, 800a504 <f_unlink+0x38>
			dir = dj.dir;
 800a4f8:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800a4fa:	b169      	cbz	r1, 800a518 <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800a4fc:	7acd      	ldrb	r5, [r1, #11]
 800a4fe:	07ea      	lsls	r2, r5, #31
 800a500:	d50c      	bpl.n	800a51c <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a502:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800a504:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800a508:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800a50a:	4621      	mov	r1, r4
 800a50c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a50e:	f7ff fb74 	bl	8009bfa <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a512:	2800      	cmp	r0, #0
 800a514:	d1f6      	bne.n	800a504 <f_unlink+0x38>
 800a516:	e026      	b.n	800a566 <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a518:	2006      	movs	r0, #6
 800a51a:	e7f3      	b.n	800a504 <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800a51c:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800a51e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a522:	f7fe fdc8 	bl	80090b6 <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800a526:	4604      	mov	r4, r0
 800a528:	b1b0      	cbz	r0, 800a558 <f_unlink+0x8c>
 800a52a:	06eb      	lsls	r3, r5, #27
 800a52c:	d514      	bpl.n	800a558 <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800a52e:	a906      	add	r1, sp, #24
 800a530:	a88e      	add	r0, sp, #568	; 0x238
 800a532:	f44f 7208 	mov.w	r2, #544	; 0x220
 800a536:	f7fe fca9 	bl	8008e8c <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800a53a:	2102      	movs	r1, #2
 800a53c:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800a53e:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800a542:	f7ff f84c 	bl	80095de <dir_sdi>
						if (res == FR_OK) {
 800a546:	2800      	cmp	r0, #0
 800a548:	d1dc      	bne.n	800a504 <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800a54a:	a88e      	add	r0, sp, #568	; 0x238
 800a54c:	f7ff faee 	bl	8009b2c <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800a550:	2800      	cmp	r0, #0
 800a552:	d0d6      	beq.n	800a502 <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800a554:	2804      	cmp	r0, #4
 800a556:	d1d5      	bne.n	800a504 <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800a558:	a806      	add	r0, sp, #24
 800a55a:	f7ff f88f 	bl	800967c <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800a55e:	2800      	cmp	r0, #0
 800a560:	d1d0      	bne.n	800a504 <f_unlink+0x38>
 800a562:	2c00      	cmp	r4, #0
 800a564:	d1d1      	bne.n	800a50a <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a566:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a568:	f7fe fde3 	bl	8009132 <sync_fs>
 800a56c:	e7ca      	b.n	800a504 <f_unlink+0x38>

0800a56e <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800a56e:	b510      	push	{r4, lr}
 800a570:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a574:	460c      	mov	r4, r1
 800a576:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a578:	2201      	movs	r2, #1
 800a57a:	a901      	add	r1, sp, #4
 800a57c:	a886      	add	r0, sp, #536	; 0x218
 800a57e:	f7fe fe7f 	bl	8009280 <find_volume>
	if (res == FR_OK) {
 800a582:	b9c0      	cbnz	r0, 800a5b6 <f_utime+0x48>
		INIT_BUF(dj);
 800a584:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800a586:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a588:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800a58a:	a806      	add	r0, sp, #24
 800a58c:	f7ff f9fa 	bl	8009984 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800a590:	b988      	cbnz	r0, 800a5b6 <f_utime+0x48>
			dir = dj.dir;
 800a592:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800a594:	b193      	cbz	r3, 800a5bc <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800a596:	88e2      	ldrh	r2, [r4, #6]
 800a598:	759a      	strb	r2, [r3, #22]
 800a59a:	88e2      	ldrh	r2, [r4, #6]
 800a59c:	0a12      	lsrs	r2, r2, #8
 800a59e:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800a5a0:	88a2      	ldrh	r2, [r4, #4]
 800a5a2:	761a      	strb	r2, [r3, #24]
 800a5a4:	88a2      	ldrh	r2, [r4, #4]
 800a5a6:	0a12      	lsrs	r2, r2, #8
 800a5a8:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800a5aa:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800a5b2:	f7fe fdbe 	bl	8009132 <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800a5b6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800a5ba:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800a5bc:	2006      	movs	r0, #6
 800a5be:	e7fa      	b.n	800a5b6 <f_utime+0x48>

0800a5c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5c0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800a5c2:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <FATFS_LinkDriverEx+0x40>)
 800a5c4:	7a5c      	ldrb	r4, [r3, #9]
 800a5c6:	2c01      	cmp	r4, #1
 800a5c8:	d818      	bhi.n	800a5fc <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5ca:	7a5d      	ldrb	r5, [r3, #9]
 800a5cc:	b2ed      	uxtb	r5, r5
 800a5ce:	2400      	movs	r4, #0
 800a5d0:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800a5d2:	7a5d      	ldrb	r5, [r3, #9]
 800a5d4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a5d8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800a5da:	7a58      	ldrb	r0, [r3, #9]
 800a5dc:	4418      	add	r0, r3
 800a5de:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a5e0:	7a5a      	ldrb	r2, [r3, #9]
 800a5e2:	b2d2      	uxtb	r2, r2
 800a5e4:	1c50      	adds	r0, r2, #1
 800a5e6:	b2c0      	uxtb	r0, r0
 800a5e8:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800a5ea:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800a5ec:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a5ee:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a5f0:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800a5f2:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800a5f4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a5f6:	70cc      	strb	r4, [r1, #3]
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a5fc:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800a5fe:	bd30      	pop	{r4, r5, pc}
 800a600:	20000614 	.word	0x20000614

0800a604 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a604:	2200      	movs	r2, #0
 800a606:	f7ff bfdb 	b.w	800a5c0 <FATFS_LinkDriverEx>
	...

0800a60c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800a60c:	4a0a      	ldr	r2, [pc, #40]	; (800a638 <FATFS_UnLinkDriverEx+0x2c>)
 800a60e:	7a53      	ldrb	r3, [r2, #9]
 800a610:	b17b      	cbz	r3, 800a632 <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800a612:	7803      	ldrb	r3, [r0, #0]
 800a614:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800a616:	b2db      	uxtb	r3, r3
 800a618:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a61c:	6848      	ldr	r0, [r1, #4]
 800a61e:	b140      	cbz	r0, 800a632 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800a620:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800a622:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800a624:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800a626:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800a628:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	7253      	strb	r3, [r2, #9]
 800a630:	4770      	bx	lr
  uint8_t ret = 1;
 800a632:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	20000614 	.word	0x20000614

0800a63c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800a63c:	2100      	movs	r1, #0
 800a63e:	f7ff bfe5 	b.w	800a60c <FATFS_UnLinkDriverEx>
	...

0800a644 <__libc_init_array>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4e0d      	ldr	r6, [pc, #52]	; (800a67c <__libc_init_array+0x38>)
 800a648:	4c0d      	ldr	r4, [pc, #52]	; (800a680 <__libc_init_array+0x3c>)
 800a64a:	1ba4      	subs	r4, r4, r6
 800a64c:	10a4      	asrs	r4, r4, #2
 800a64e:	2500      	movs	r5, #0
 800a650:	42a5      	cmp	r5, r4
 800a652:	d109      	bne.n	800a668 <__libc_init_array+0x24>
 800a654:	4e0b      	ldr	r6, [pc, #44]	; (800a684 <__libc_init_array+0x40>)
 800a656:	4c0c      	ldr	r4, [pc, #48]	; (800a688 <__libc_init_array+0x44>)
 800a658:	f001 f96c 	bl	800b934 <_init>
 800a65c:	1ba4      	subs	r4, r4, r6
 800a65e:	10a4      	asrs	r4, r4, #2
 800a660:	2500      	movs	r5, #0
 800a662:	42a5      	cmp	r5, r4
 800a664:	d105      	bne.n	800a672 <__libc_init_array+0x2e>
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a66c:	4798      	blx	r3
 800a66e:	3501      	adds	r5, #1
 800a670:	e7ee      	b.n	800a650 <__libc_init_array+0xc>
 800a672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a676:	4798      	blx	r3
 800a678:	3501      	adds	r5, #1
 800a67a:	e7f2      	b.n	800a662 <__libc_init_array+0x1e>
 800a67c:	0800be74 	.word	0x0800be74
 800a680:	0800be74 	.word	0x0800be74
 800a684:	0800be74 	.word	0x0800be74
 800a688:	0800be78 	.word	0x0800be78

0800a68c <malloc>:
 800a68c:	4b02      	ldr	r3, [pc, #8]	; (800a698 <malloc+0xc>)
 800a68e:	4601      	mov	r1, r0
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f000 b86d 	b.w	800a770 <_malloc_r>
 800a696:	bf00      	nop
 800a698:	200002cc 	.word	0x200002cc

0800a69c <free>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <free+0xc>)
 800a69e:	4601      	mov	r1, r0
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f000 b817 	b.w	800a6d4 <_free_r>
 800a6a6:	bf00      	nop
 800a6a8:	200002cc 	.word	0x200002cc

0800a6ac <memcpy>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	1e43      	subs	r3, r0, #1
 800a6b0:	440a      	add	r2, r1
 800a6b2:	4291      	cmp	r1, r2
 800a6b4:	d100      	bne.n	800a6b8 <memcpy+0xc>
 800a6b6:	bd10      	pop	{r4, pc}
 800a6b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6c0:	e7f7      	b.n	800a6b2 <memcpy+0x6>

0800a6c2 <memset>:
 800a6c2:	4402      	add	r2, r0
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d100      	bne.n	800a6cc <memset+0xa>
 800a6ca:	4770      	bx	lr
 800a6cc:	f803 1b01 	strb.w	r1, [r3], #1
 800a6d0:	e7f9      	b.n	800a6c6 <memset+0x4>
	...

0800a6d4 <_free_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d045      	beq.n	800a768 <_free_r+0x94>
 800a6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e0:	1f0c      	subs	r4, r1, #4
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfb8      	it	lt
 800a6e6:	18e4      	addlt	r4, r4, r3
 800a6e8:	f000 f923 	bl	800a932 <__malloc_lock>
 800a6ec:	4a1f      	ldr	r2, [pc, #124]	; (800a76c <_free_r+0x98>)
 800a6ee:	6813      	ldr	r3, [r2, #0]
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	b933      	cbnz	r3, 800a702 <_free_r+0x2e>
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	6014      	str	r4, [r2, #0]
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6fe:	f000 b919 	b.w	800a934 <__malloc_unlock>
 800a702:	42a3      	cmp	r3, r4
 800a704:	d90c      	bls.n	800a720 <_free_r+0x4c>
 800a706:	6821      	ldr	r1, [r4, #0]
 800a708:	1862      	adds	r2, r4, r1
 800a70a:	4293      	cmp	r3, r2
 800a70c:	bf04      	itt	eq
 800a70e:	681a      	ldreq	r2, [r3, #0]
 800a710:	685b      	ldreq	r3, [r3, #4]
 800a712:	6063      	str	r3, [r4, #4]
 800a714:	bf04      	itt	eq
 800a716:	1852      	addeq	r2, r2, r1
 800a718:	6022      	streq	r2, [r4, #0]
 800a71a:	6004      	str	r4, [r0, #0]
 800a71c:	e7ec      	b.n	800a6f8 <_free_r+0x24>
 800a71e:	4613      	mov	r3, r2
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	b10a      	cbz	r2, 800a728 <_free_r+0x54>
 800a724:	42a2      	cmp	r2, r4
 800a726:	d9fa      	bls.n	800a71e <_free_r+0x4a>
 800a728:	6819      	ldr	r1, [r3, #0]
 800a72a:	1858      	adds	r0, r3, r1
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d10b      	bne.n	800a748 <_free_r+0x74>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	4401      	add	r1, r0
 800a734:	1858      	adds	r0, r3, r1
 800a736:	4282      	cmp	r2, r0
 800a738:	6019      	str	r1, [r3, #0]
 800a73a:	d1dd      	bne.n	800a6f8 <_free_r+0x24>
 800a73c:	6810      	ldr	r0, [r2, #0]
 800a73e:	6852      	ldr	r2, [r2, #4]
 800a740:	605a      	str	r2, [r3, #4]
 800a742:	4401      	add	r1, r0
 800a744:	6019      	str	r1, [r3, #0]
 800a746:	e7d7      	b.n	800a6f8 <_free_r+0x24>
 800a748:	d902      	bls.n	800a750 <_free_r+0x7c>
 800a74a:	230c      	movs	r3, #12
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	e7d3      	b.n	800a6f8 <_free_r+0x24>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	1821      	adds	r1, r4, r0
 800a754:	428a      	cmp	r2, r1
 800a756:	bf04      	itt	eq
 800a758:	6811      	ldreq	r1, [r2, #0]
 800a75a:	6852      	ldreq	r2, [r2, #4]
 800a75c:	6062      	str	r2, [r4, #4]
 800a75e:	bf04      	itt	eq
 800a760:	1809      	addeq	r1, r1, r0
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	605c      	str	r4, [r3, #4]
 800a766:	e7c7      	b.n	800a6f8 <_free_r+0x24>
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	bf00      	nop
 800a76c:	20000620 	.word	0x20000620

0800a770 <_malloc_r>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	1ccd      	adds	r5, r1, #3
 800a774:	f025 0503 	bic.w	r5, r5, #3
 800a778:	3508      	adds	r5, #8
 800a77a:	2d0c      	cmp	r5, #12
 800a77c:	bf38      	it	cc
 800a77e:	250c      	movcc	r5, #12
 800a780:	2d00      	cmp	r5, #0
 800a782:	4606      	mov	r6, r0
 800a784:	db01      	blt.n	800a78a <_malloc_r+0x1a>
 800a786:	42a9      	cmp	r1, r5
 800a788:	d903      	bls.n	800a792 <_malloc_r+0x22>
 800a78a:	230c      	movs	r3, #12
 800a78c:	6033      	str	r3, [r6, #0]
 800a78e:	2000      	movs	r0, #0
 800a790:	bd70      	pop	{r4, r5, r6, pc}
 800a792:	f000 f8ce 	bl	800a932 <__malloc_lock>
 800a796:	4a23      	ldr	r2, [pc, #140]	; (800a824 <_malloc_r+0xb4>)
 800a798:	6814      	ldr	r4, [r2, #0]
 800a79a:	4621      	mov	r1, r4
 800a79c:	b991      	cbnz	r1, 800a7c4 <_malloc_r+0x54>
 800a79e:	4c22      	ldr	r4, [pc, #136]	; (800a828 <_malloc_r+0xb8>)
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	b91b      	cbnz	r3, 800a7ac <_malloc_r+0x3c>
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f000 f841 	bl	800a82c <_sbrk_r>
 800a7aa:	6020      	str	r0, [r4, #0]
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f000 f83c 	bl	800a82c <_sbrk_r>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d126      	bne.n	800a806 <_malloc_r+0x96>
 800a7b8:	230c      	movs	r3, #12
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f000 f8b9 	bl	800a934 <__malloc_unlock>
 800a7c2:	e7e4      	b.n	800a78e <_malloc_r+0x1e>
 800a7c4:	680b      	ldr	r3, [r1, #0]
 800a7c6:	1b5b      	subs	r3, r3, r5
 800a7c8:	d41a      	bmi.n	800a800 <_malloc_r+0x90>
 800a7ca:	2b0b      	cmp	r3, #11
 800a7cc:	d90f      	bls.n	800a7ee <_malloc_r+0x7e>
 800a7ce:	600b      	str	r3, [r1, #0]
 800a7d0:	50cd      	str	r5, [r1, r3]
 800a7d2:	18cc      	adds	r4, r1, r3
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f000 f8ad 	bl	800a934 <__malloc_unlock>
 800a7da:	f104 000b 	add.w	r0, r4, #11
 800a7de:	1d23      	adds	r3, r4, #4
 800a7e0:	f020 0007 	bic.w	r0, r0, #7
 800a7e4:	1ac3      	subs	r3, r0, r3
 800a7e6:	d01b      	beq.n	800a820 <_malloc_r+0xb0>
 800a7e8:	425a      	negs	r2, r3
 800a7ea:	50e2      	str	r2, [r4, r3]
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	428c      	cmp	r4, r1
 800a7f0:	bf0d      	iteet	eq
 800a7f2:	6863      	ldreq	r3, [r4, #4]
 800a7f4:	684b      	ldrne	r3, [r1, #4]
 800a7f6:	6063      	strne	r3, [r4, #4]
 800a7f8:	6013      	streq	r3, [r2, #0]
 800a7fa:	bf18      	it	ne
 800a7fc:	460c      	movne	r4, r1
 800a7fe:	e7e9      	b.n	800a7d4 <_malloc_r+0x64>
 800a800:	460c      	mov	r4, r1
 800a802:	6849      	ldr	r1, [r1, #4]
 800a804:	e7ca      	b.n	800a79c <_malloc_r+0x2c>
 800a806:	1cc4      	adds	r4, r0, #3
 800a808:	f024 0403 	bic.w	r4, r4, #3
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d005      	beq.n	800a81c <_malloc_r+0xac>
 800a810:	1a21      	subs	r1, r4, r0
 800a812:	4630      	mov	r0, r6
 800a814:	f000 f80a 	bl	800a82c <_sbrk_r>
 800a818:	3001      	adds	r0, #1
 800a81a:	d0cd      	beq.n	800a7b8 <_malloc_r+0x48>
 800a81c:	6025      	str	r5, [r4, #0]
 800a81e:	e7d9      	b.n	800a7d4 <_malloc_r+0x64>
 800a820:	bd70      	pop	{r4, r5, r6, pc}
 800a822:	bf00      	nop
 800a824:	20000620 	.word	0x20000620
 800a828:	20000624 	.word	0x20000624

0800a82c <_sbrk_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4c06      	ldr	r4, [pc, #24]	; (800a848 <_sbrk_r+0x1c>)
 800a830:	2300      	movs	r3, #0
 800a832:	4605      	mov	r5, r0
 800a834:	4608      	mov	r0, r1
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	f001 f86e 	bl	800b918 <_sbrk>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_sbrk_r+0x1a>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	b103      	cbz	r3, 800a846 <_sbrk_r+0x1a>
 800a844:	602b      	str	r3, [r5, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	2000adcc 	.word	0x2000adcc

0800a84c <siprintf>:
 800a84c:	b40e      	push	{r1, r2, r3}
 800a84e:	b500      	push	{lr}
 800a850:	b09c      	sub	sp, #112	; 0x70
 800a852:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a856:	ab1d      	add	r3, sp, #116	; 0x74
 800a858:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a85c:	9002      	str	r0, [sp, #8]
 800a85e:	9006      	str	r0, [sp, #24]
 800a860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a864:	480a      	ldr	r0, [pc, #40]	; (800a890 <siprintf+0x44>)
 800a866:	9104      	str	r1, [sp, #16]
 800a868:	9107      	str	r1, [sp, #28]
 800a86a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a872:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a876:	6800      	ldr	r0, [r0, #0]
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	a902      	add	r1, sp, #8
 800a87c:	f000 f8b6 	bl	800a9ec <_svfiprintf_r>
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	2200      	movs	r2, #0
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	b01c      	add	sp, #112	; 0x70
 800a888:	f85d eb04 	ldr.w	lr, [sp], #4
 800a88c:	b003      	add	sp, #12
 800a88e:	4770      	bx	lr
 800a890:	200002cc 	.word	0x200002cc

0800a894 <siscanf>:
 800a894:	b40e      	push	{r1, r2, r3}
 800a896:	b530      	push	{r4, r5, lr}
 800a898:	b09c      	sub	sp, #112	; 0x70
 800a89a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a89c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a8a0:	f854 5b04 	ldr.w	r5, [r4], #4
 800a8a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a8a8:	9002      	str	r0, [sp, #8]
 800a8aa:	9006      	str	r0, [sp, #24]
 800a8ac:	f7f5 fc90 	bl	80001d0 <strlen>
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <siscanf+0x4c>)
 800a8b2:	9003      	str	r0, [sp, #12]
 800a8b4:	9007      	str	r0, [sp, #28]
 800a8b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8b8:	480a      	ldr	r0, [pc, #40]	; (800a8e4 <siscanf+0x50>)
 800a8ba:	9401      	str	r4, [sp, #4]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8c0:	9314      	str	r3, [sp, #80]	; 0x50
 800a8c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	a902      	add	r1, sp, #8
 800a8d0:	6800      	ldr	r0, [r0, #0]
 800a8d2:	f000 f9d9 	bl	800ac88 <__ssvfiscanf_r>
 800a8d6:	b01c      	add	sp, #112	; 0x70
 800a8d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8dc:	b003      	add	sp, #12
 800a8de:	4770      	bx	lr
 800a8e0:	0800a8e9 	.word	0x0800a8e9
 800a8e4:	200002cc 	.word	0x200002cc

0800a8e8 <__seofread>:
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	4770      	bx	lr

0800a8ec <strcpy>:
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f2:	f803 2b01 	strb.w	r2, [r3], #1
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	d1f9      	bne.n	800a8ee <strcpy+0x2>
 800a8fa:	4770      	bx	lr

0800a8fc <strstr>:
 800a8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fe:	7803      	ldrb	r3, [r0, #0]
 800a900:	b133      	cbz	r3, 800a910 <strstr+0x14>
 800a902:	4603      	mov	r3, r0
 800a904:	4618      	mov	r0, r3
 800a906:	1c5e      	adds	r6, r3, #1
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b933      	cbnz	r3, 800a91a <strstr+0x1e>
 800a90c:	4618      	mov	r0, r3
 800a90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a910:	780b      	ldrb	r3, [r1, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	bf18      	it	ne
 800a916:	2000      	movne	r0, #0
 800a918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91a:	1e4d      	subs	r5, r1, #1
 800a91c:	1e44      	subs	r4, r0, #1
 800a91e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a922:	2a00      	cmp	r2, #0
 800a924:	d0f3      	beq.n	800a90e <strstr+0x12>
 800a926:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800a92a:	4297      	cmp	r7, r2
 800a92c:	4633      	mov	r3, r6
 800a92e:	d0f6      	beq.n	800a91e <strstr+0x22>
 800a930:	e7e8      	b.n	800a904 <strstr+0x8>

0800a932 <__malloc_lock>:
 800a932:	4770      	bx	lr

0800a934 <__malloc_unlock>:
 800a934:	4770      	bx	lr

0800a936 <__ssputs_r>:
 800a936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93a:	688e      	ldr	r6, [r1, #8]
 800a93c:	429e      	cmp	r6, r3
 800a93e:	4682      	mov	sl, r0
 800a940:	460c      	mov	r4, r1
 800a942:	4691      	mov	r9, r2
 800a944:	4698      	mov	r8, r3
 800a946:	d835      	bhi.n	800a9b4 <__ssputs_r+0x7e>
 800a948:	898a      	ldrh	r2, [r1, #12]
 800a94a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a94e:	d031      	beq.n	800a9b4 <__ssputs_r+0x7e>
 800a950:	6825      	ldr	r5, [r4, #0]
 800a952:	6909      	ldr	r1, [r1, #16]
 800a954:	1a6f      	subs	r7, r5, r1
 800a956:	6965      	ldr	r5, [r4, #20]
 800a958:	2302      	movs	r3, #2
 800a95a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a95e:	fb95 f5f3 	sdiv	r5, r5, r3
 800a962:	f108 0301 	add.w	r3, r8, #1
 800a966:	443b      	add	r3, r7
 800a968:	429d      	cmp	r5, r3
 800a96a:	bf38      	it	cc
 800a96c:	461d      	movcc	r5, r3
 800a96e:	0553      	lsls	r3, r2, #21
 800a970:	d531      	bpl.n	800a9d6 <__ssputs_r+0xa0>
 800a972:	4629      	mov	r1, r5
 800a974:	f7ff fefc 	bl	800a770 <_malloc_r>
 800a978:	4606      	mov	r6, r0
 800a97a:	b950      	cbnz	r0, 800a992 <__ssputs_r+0x5c>
 800a97c:	230c      	movs	r3, #12
 800a97e:	f8ca 3000 	str.w	r3, [sl]
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	f04f 30ff 	mov.w	r0, #4294967295
 800a98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a992:	463a      	mov	r2, r7
 800a994:	6921      	ldr	r1, [r4, #16]
 800a996:	f7ff fe89 	bl	800a6ac <memcpy>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a4:	81a3      	strh	r3, [r4, #12]
 800a9a6:	6126      	str	r6, [r4, #16]
 800a9a8:	6165      	str	r5, [r4, #20]
 800a9aa:	443e      	add	r6, r7
 800a9ac:	1bed      	subs	r5, r5, r7
 800a9ae:	6026      	str	r6, [r4, #0]
 800a9b0:	60a5      	str	r5, [r4, #8]
 800a9b2:	4646      	mov	r6, r8
 800a9b4:	4546      	cmp	r6, r8
 800a9b6:	bf28      	it	cs
 800a9b8:	4646      	movcs	r6, r8
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	4649      	mov	r1, r9
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	f000 ff54 	bl	800b86c <memmove>
 800a9c4:	68a3      	ldr	r3, [r4, #8]
 800a9c6:	1b9b      	subs	r3, r3, r6
 800a9c8:	60a3      	str	r3, [r4, #8]
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	441e      	add	r6, r3
 800a9ce:	6026      	str	r6, [r4, #0]
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	f000 ff62 	bl	800b8a0 <_realloc_r>
 800a9dc:	4606      	mov	r6, r0
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d1e1      	bne.n	800a9a6 <__ssputs_r+0x70>
 800a9e2:	6921      	ldr	r1, [r4, #16]
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	f7ff fe75 	bl	800a6d4 <_free_r>
 800a9ea:	e7c7      	b.n	800a97c <__ssputs_r+0x46>

0800a9ec <_svfiprintf_r>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	b09d      	sub	sp, #116	; 0x74
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	9303      	str	r3, [sp, #12]
 800a9f6:	898b      	ldrh	r3, [r1, #12]
 800a9f8:	061c      	lsls	r4, r3, #24
 800a9fa:	460d      	mov	r5, r1
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	d50f      	bpl.n	800aa20 <_svfiprintf_r+0x34>
 800aa00:	690b      	ldr	r3, [r1, #16]
 800aa02:	b96b      	cbnz	r3, 800aa20 <_svfiprintf_r+0x34>
 800aa04:	2140      	movs	r1, #64	; 0x40
 800aa06:	f7ff feb3 	bl	800a770 <_malloc_r>
 800aa0a:	6028      	str	r0, [r5, #0]
 800aa0c:	6128      	str	r0, [r5, #16]
 800aa0e:	b928      	cbnz	r0, 800aa1c <_svfiprintf_r+0x30>
 800aa10:	230c      	movs	r3, #12
 800aa12:	f8c8 3000 	str.w	r3, [r8]
 800aa16:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1a:	e0c5      	b.n	800aba8 <_svfiprintf_r+0x1bc>
 800aa1c:	2340      	movs	r3, #64	; 0x40
 800aa1e:	616b      	str	r3, [r5, #20]
 800aa20:	2300      	movs	r3, #0
 800aa22:	9309      	str	r3, [sp, #36]	; 0x24
 800aa24:	2320      	movs	r3, #32
 800aa26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2a:	2330      	movs	r3, #48	; 0x30
 800aa2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa30:	f04f 0b01 	mov.w	fp, #1
 800aa34:	4637      	mov	r7, r6
 800aa36:	463c      	mov	r4, r7
 800aa38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d13c      	bne.n	800aaba <_svfiprintf_r+0xce>
 800aa40:	ebb7 0a06 	subs.w	sl, r7, r6
 800aa44:	d00b      	beq.n	800aa5e <_svfiprintf_r+0x72>
 800aa46:	4653      	mov	r3, sl
 800aa48:	4632      	mov	r2, r6
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	f7ff ff72 	bl	800a936 <__ssputs_r>
 800aa52:	3001      	adds	r0, #1
 800aa54:	f000 80a3 	beq.w	800ab9e <_svfiprintf_r+0x1b2>
 800aa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5a:	4453      	add	r3, sl
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	783b      	ldrb	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 809c 	beq.w	800ab9e <_svfiprintf_r+0x1b2>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6c:	9304      	str	r3, [sp, #16]
 800aa6e:	9307      	str	r3, [sp, #28]
 800aa70:	9205      	str	r2, [sp, #20]
 800aa72:	9306      	str	r3, [sp, #24]
 800aa74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa78:	931a      	str	r3, [sp, #104]	; 0x68
 800aa7a:	2205      	movs	r2, #5
 800aa7c:	7821      	ldrb	r1, [r4, #0]
 800aa7e:	4850      	ldr	r0, [pc, #320]	; (800abc0 <_svfiprintf_r+0x1d4>)
 800aa80:	f7f5 fbae 	bl	80001e0 <memchr>
 800aa84:	1c67      	adds	r7, r4, #1
 800aa86:	9b04      	ldr	r3, [sp, #16]
 800aa88:	b9d8      	cbnz	r0, 800aac2 <_svfiprintf_r+0xd6>
 800aa8a:	06d9      	lsls	r1, r3, #27
 800aa8c:	bf44      	itt	mi
 800aa8e:	2220      	movmi	r2, #32
 800aa90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa94:	071a      	lsls	r2, r3, #28
 800aa96:	bf44      	itt	mi
 800aa98:	222b      	movmi	r2, #43	; 0x2b
 800aa9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa9e:	7822      	ldrb	r2, [r4, #0]
 800aaa0:	2a2a      	cmp	r2, #42	; 0x2a
 800aaa2:	d016      	beq.n	800aad2 <_svfiprintf_r+0xe6>
 800aaa4:	9a07      	ldr	r2, [sp, #28]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	200a      	movs	r0, #10
 800aaaa:	4627      	mov	r7, r4
 800aaac:	3401      	adds	r4, #1
 800aaae:	783b      	ldrb	r3, [r7, #0]
 800aab0:	3b30      	subs	r3, #48	; 0x30
 800aab2:	2b09      	cmp	r3, #9
 800aab4:	d951      	bls.n	800ab5a <_svfiprintf_r+0x16e>
 800aab6:	b1c9      	cbz	r1, 800aaec <_svfiprintf_r+0x100>
 800aab8:	e011      	b.n	800aade <_svfiprintf_r+0xf2>
 800aaba:	2b25      	cmp	r3, #37	; 0x25
 800aabc:	d0c0      	beq.n	800aa40 <_svfiprintf_r+0x54>
 800aabe:	4627      	mov	r7, r4
 800aac0:	e7b9      	b.n	800aa36 <_svfiprintf_r+0x4a>
 800aac2:	4a3f      	ldr	r2, [pc, #252]	; (800abc0 <_svfiprintf_r+0x1d4>)
 800aac4:	1a80      	subs	r0, r0, r2
 800aac6:	fa0b f000 	lsl.w	r0, fp, r0
 800aaca:	4318      	orrs	r0, r3
 800aacc:	9004      	str	r0, [sp, #16]
 800aace:	463c      	mov	r4, r7
 800aad0:	e7d3      	b.n	800aa7a <_svfiprintf_r+0x8e>
 800aad2:	9a03      	ldr	r2, [sp, #12]
 800aad4:	1d11      	adds	r1, r2, #4
 800aad6:	6812      	ldr	r2, [r2, #0]
 800aad8:	9103      	str	r1, [sp, #12]
 800aada:	2a00      	cmp	r2, #0
 800aadc:	db01      	blt.n	800aae2 <_svfiprintf_r+0xf6>
 800aade:	9207      	str	r2, [sp, #28]
 800aae0:	e004      	b.n	800aaec <_svfiprintf_r+0x100>
 800aae2:	4252      	negs	r2, r2
 800aae4:	f043 0302 	orr.w	r3, r3, #2
 800aae8:	9207      	str	r2, [sp, #28]
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	783b      	ldrb	r3, [r7, #0]
 800aaee:	2b2e      	cmp	r3, #46	; 0x2e
 800aaf0:	d10e      	bne.n	800ab10 <_svfiprintf_r+0x124>
 800aaf2:	787b      	ldrb	r3, [r7, #1]
 800aaf4:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf6:	f107 0101 	add.w	r1, r7, #1
 800aafa:	d132      	bne.n	800ab62 <_svfiprintf_r+0x176>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	1d1a      	adds	r2, r3, #4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	9203      	str	r2, [sp, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfb8      	it	lt
 800ab08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab0c:	3702      	adds	r7, #2
 800ab0e:	9305      	str	r3, [sp, #20]
 800ab10:	4c2c      	ldr	r4, [pc, #176]	; (800abc4 <_svfiprintf_r+0x1d8>)
 800ab12:	7839      	ldrb	r1, [r7, #0]
 800ab14:	2203      	movs	r2, #3
 800ab16:	4620      	mov	r0, r4
 800ab18:	f7f5 fb62 	bl	80001e0 <memchr>
 800ab1c:	b138      	cbz	r0, 800ab2e <_svfiprintf_r+0x142>
 800ab1e:	2340      	movs	r3, #64	; 0x40
 800ab20:	1b00      	subs	r0, r0, r4
 800ab22:	fa03 f000 	lsl.w	r0, r3, r0
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	4303      	orrs	r3, r0
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	3701      	adds	r7, #1
 800ab2e:	7839      	ldrb	r1, [r7, #0]
 800ab30:	4825      	ldr	r0, [pc, #148]	; (800abc8 <_svfiprintf_r+0x1dc>)
 800ab32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab36:	2206      	movs	r2, #6
 800ab38:	1c7e      	adds	r6, r7, #1
 800ab3a:	f7f5 fb51 	bl	80001e0 <memchr>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d035      	beq.n	800abae <_svfiprintf_r+0x1c2>
 800ab42:	4b22      	ldr	r3, [pc, #136]	; (800abcc <_svfiprintf_r+0x1e0>)
 800ab44:	b9fb      	cbnz	r3, 800ab86 <_svfiprintf_r+0x19a>
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	3307      	adds	r3, #7
 800ab4a:	f023 0307 	bic.w	r3, r3, #7
 800ab4e:	3308      	adds	r3, #8
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab54:	444b      	add	r3, r9
 800ab56:	9309      	str	r3, [sp, #36]	; 0x24
 800ab58:	e76c      	b.n	800aa34 <_svfiprintf_r+0x48>
 800ab5a:	fb00 3202 	mla	r2, r0, r2, r3
 800ab5e:	2101      	movs	r1, #1
 800ab60:	e7a3      	b.n	800aaaa <_svfiprintf_r+0xbe>
 800ab62:	2300      	movs	r3, #0
 800ab64:	9305      	str	r3, [sp, #20]
 800ab66:	4618      	mov	r0, r3
 800ab68:	240a      	movs	r4, #10
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	783a      	ldrb	r2, [r7, #0]
 800ab70:	3a30      	subs	r2, #48	; 0x30
 800ab72:	2a09      	cmp	r2, #9
 800ab74:	d903      	bls.n	800ab7e <_svfiprintf_r+0x192>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0ca      	beq.n	800ab10 <_svfiprintf_r+0x124>
 800ab7a:	9005      	str	r0, [sp, #20]
 800ab7c:	e7c8      	b.n	800ab10 <_svfiprintf_r+0x124>
 800ab7e:	fb04 2000 	mla	r0, r4, r0, r2
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7f1      	b.n	800ab6a <_svfiprintf_r+0x17e>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <_svfiprintf_r+0x1e4>)
 800ab8e:	a904      	add	r1, sp, #16
 800ab90:	4640      	mov	r0, r8
 800ab92:	f3af 8000 	nop.w
 800ab96:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ab9a:	4681      	mov	r9, r0
 800ab9c:	d1d9      	bne.n	800ab52 <_svfiprintf_r+0x166>
 800ab9e:	89ab      	ldrh	r3, [r5, #12]
 800aba0:	065b      	lsls	r3, r3, #25
 800aba2:	f53f af38 	bmi.w	800aa16 <_svfiprintf_r+0x2a>
 800aba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba8:	b01d      	add	sp, #116	; 0x74
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <_svfiprintf_r+0x1e4>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4640      	mov	r0, r8
 800abba:	f000 fa2f 	bl	800b01c <_printf_i>
 800abbe:	e7ea      	b.n	800ab96 <_svfiprintf_r+0x1aa>
 800abc0:	0800bcaf 	.word	0x0800bcaf
 800abc4:	0800bcb5 	.word	0x0800bcb5
 800abc8:	0800bcb9 	.word	0x0800bcb9
 800abcc:	00000000 	.word	0x00000000
 800abd0:	0800a937 	.word	0x0800a937

0800abd4 <_sungetc_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	1c4b      	adds	r3, r1, #1
 800abd8:	4614      	mov	r4, r2
 800abda:	d103      	bne.n	800abe4 <_sungetc_r+0x10>
 800abdc:	f04f 35ff 	mov.w	r5, #4294967295
 800abe0:	4628      	mov	r0, r5
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	8993      	ldrh	r3, [r2, #12]
 800abe6:	f023 0320 	bic.w	r3, r3, #32
 800abea:	8193      	strh	r3, [r2, #12]
 800abec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800abee:	6852      	ldr	r2, [r2, #4]
 800abf0:	b2cd      	uxtb	r5, r1
 800abf2:	b18b      	cbz	r3, 800ac18 <_sungetc_r+0x44>
 800abf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800abf6:	429a      	cmp	r2, r3
 800abf8:	da08      	bge.n	800ac0c <_sungetc_r+0x38>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	1e5a      	subs	r2, r3, #1
 800abfe:	6022      	str	r2, [r4, #0]
 800ac00:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	3301      	adds	r3, #1
 800ac08:	6063      	str	r3, [r4, #4]
 800ac0a:	e7e9      	b.n	800abe0 <_sungetc_r+0xc>
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f000 fdcf 	bl	800b7b0 <__submore>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0f1      	beq.n	800abfa <_sungetc_r+0x26>
 800ac16:	e7e1      	b.n	800abdc <_sungetc_r+0x8>
 800ac18:	6921      	ldr	r1, [r4, #16]
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	b151      	cbz	r1, 800ac34 <_sungetc_r+0x60>
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d208      	bcs.n	800ac34 <_sungetc_r+0x60>
 800ac22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ac26:	428d      	cmp	r5, r1
 800ac28:	d104      	bne.n	800ac34 <_sungetc_r+0x60>
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	3201      	adds	r2, #1
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	6062      	str	r2, [r4, #4]
 800ac32:	e7d5      	b.n	800abe0 <_sungetc_r+0xc>
 800ac34:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ac36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac3a:	6363      	str	r3, [r4, #52]	; 0x34
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac40:	4623      	mov	r3, r4
 800ac42:	6422      	str	r2, [r4, #64]	; 0x40
 800ac44:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e7dc      	b.n	800ac08 <_sungetc_r+0x34>

0800ac4e <__ssrefill_r>:
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	460c      	mov	r4, r1
 800ac52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ac54:	b169      	cbz	r1, 800ac72 <__ssrefill_r+0x24>
 800ac56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac5a:	4299      	cmp	r1, r3
 800ac5c:	d001      	beq.n	800ac62 <__ssrefill_r+0x14>
 800ac5e:	f7ff fd39 	bl	800a6d4 <_free_r>
 800ac62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac64:	6063      	str	r3, [r4, #4]
 800ac66:	2000      	movs	r0, #0
 800ac68:	6360      	str	r0, [r4, #52]	; 0x34
 800ac6a:	b113      	cbz	r3, 800ac72 <__ssrefill_r+0x24>
 800ac6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	bd10      	pop	{r4, pc}
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	2300      	movs	r3, #0
 800ac78:	6063      	str	r3, [r4, #4]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f043 0320 	orr.w	r3, r3, #32
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295
 800ac86:	bd10      	pop	{r4, pc}

0800ac88 <__ssvfiscanf_r>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800ac90:	f10d 080c 	add.w	r8, sp, #12
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9346      	str	r3, [sp, #280]	; 0x118
 800ac9a:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac9c:	4ba0      	ldr	r3, [pc, #640]	; (800af20 <__ssvfiscanf_r+0x298>)
 800ac9e:	93a2      	str	r3, [sp, #648]	; 0x288
 800aca0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800af28 <__ssvfiscanf_r+0x2a0>
 800aca4:	4b9f      	ldr	r3, [pc, #636]	; (800af24 <__ssvfiscanf_r+0x29c>)
 800aca6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800acaa:	4606      	mov	r6, r0
 800acac:	460c      	mov	r4, r1
 800acae:	93a3      	str	r3, [sp, #652]	; 0x28c
 800acb0:	4692      	mov	sl, r2
 800acb2:	270a      	movs	r7, #10
 800acb4:	f89a 3000 	ldrb.w	r3, [sl]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 812f 	beq.w	800af1c <__ssvfiscanf_r+0x294>
 800acbe:	f000 fdb5 	bl	800b82c <__locale_ctype_ptr>
 800acc2:	f89a b000 	ldrb.w	fp, [sl]
 800acc6:	4458      	add	r0, fp
 800acc8:	7843      	ldrb	r3, [r0, #1]
 800acca:	f013 0308 	ands.w	r3, r3, #8
 800acce:	d143      	bne.n	800ad58 <__ssvfiscanf_r+0xd0>
 800acd0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800acd4:	f10a 0501 	add.w	r5, sl, #1
 800acd8:	f040 8099 	bne.w	800ae0e <__ssvfiscanf_r+0x186>
 800acdc:	9345      	str	r3, [sp, #276]	; 0x114
 800acde:	9343      	str	r3, [sp, #268]	; 0x10c
 800ace0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ace4:	2b2a      	cmp	r3, #42	; 0x2a
 800ace6:	d103      	bne.n	800acf0 <__ssvfiscanf_r+0x68>
 800ace8:	2310      	movs	r3, #16
 800acea:	9343      	str	r3, [sp, #268]	; 0x10c
 800acec:	f10a 0502 	add.w	r5, sl, #2
 800acf0:	7829      	ldrb	r1, [r5, #0]
 800acf2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800acf6:	2a09      	cmp	r2, #9
 800acf8:	46aa      	mov	sl, r5
 800acfa:	f105 0501 	add.w	r5, r5, #1
 800acfe:	d941      	bls.n	800ad84 <__ssvfiscanf_r+0xfc>
 800ad00:	2203      	movs	r2, #3
 800ad02:	4889      	ldr	r0, [pc, #548]	; (800af28 <__ssvfiscanf_r+0x2a0>)
 800ad04:	f7f5 fa6c 	bl	80001e0 <memchr>
 800ad08:	b138      	cbz	r0, 800ad1a <__ssvfiscanf_r+0x92>
 800ad0a:	eba0 0309 	sub.w	r3, r0, r9
 800ad0e:	2001      	movs	r0, #1
 800ad10:	4098      	lsls	r0, r3
 800ad12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ad14:	4318      	orrs	r0, r3
 800ad16:	9043      	str	r0, [sp, #268]	; 0x10c
 800ad18:	46aa      	mov	sl, r5
 800ad1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1e:	2b67      	cmp	r3, #103	; 0x67
 800ad20:	f10a 0501 	add.w	r5, sl, #1
 800ad24:	d84a      	bhi.n	800adbc <__ssvfiscanf_r+0x134>
 800ad26:	2b65      	cmp	r3, #101	; 0x65
 800ad28:	f080 80b7 	bcs.w	800ae9a <__ssvfiscanf_r+0x212>
 800ad2c:	2b47      	cmp	r3, #71	; 0x47
 800ad2e:	d82f      	bhi.n	800ad90 <__ssvfiscanf_r+0x108>
 800ad30:	2b45      	cmp	r3, #69	; 0x45
 800ad32:	f080 80b2 	bcs.w	800ae9a <__ssvfiscanf_r+0x212>
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 8082 	beq.w	800ae40 <__ssvfiscanf_r+0x1b8>
 800ad3c:	2b25      	cmp	r3, #37	; 0x25
 800ad3e:	d066      	beq.n	800ae0e <__ssvfiscanf_r+0x186>
 800ad40:	2303      	movs	r3, #3
 800ad42:	9349      	str	r3, [sp, #292]	; 0x124
 800ad44:	9744      	str	r7, [sp, #272]	; 0x110
 800ad46:	e045      	b.n	800add4 <__ssvfiscanf_r+0x14c>
 800ad48:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800ad4a:	3101      	adds	r1, #1
 800ad4c:	9147      	str	r1, [sp, #284]	; 0x11c
 800ad4e:	6861      	ldr	r1, [r4, #4]
 800ad50:	3301      	adds	r3, #1
 800ad52:	3901      	subs	r1, #1
 800ad54:	6061      	str	r1, [r4, #4]
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	6863      	ldr	r3, [r4, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dd0b      	ble.n	800ad76 <__ssvfiscanf_r+0xee>
 800ad5e:	f000 fd65 	bl	800b82c <__locale_ctype_ptr>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	7819      	ldrb	r1, [r3, #0]
 800ad66:	4408      	add	r0, r1
 800ad68:	7841      	ldrb	r1, [r0, #1]
 800ad6a:	070d      	lsls	r5, r1, #28
 800ad6c:	d4ec      	bmi.n	800ad48 <__ssvfiscanf_r+0xc0>
 800ad6e:	f10a 0501 	add.w	r5, sl, #1
 800ad72:	46aa      	mov	sl, r5
 800ad74:	e79e      	b.n	800acb4 <__ssvfiscanf_r+0x2c>
 800ad76:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ad78:	4621      	mov	r1, r4
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	4798      	blx	r3
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d0ed      	beq.n	800ad5e <__ssvfiscanf_r+0xd6>
 800ad82:	e7f4      	b.n	800ad6e <__ssvfiscanf_r+0xe6>
 800ad84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ad86:	fb07 1303 	mla	r3, r7, r3, r1
 800ad8a:	3b30      	subs	r3, #48	; 0x30
 800ad8c:	9345      	str	r3, [sp, #276]	; 0x114
 800ad8e:	e7af      	b.n	800acf0 <__ssvfiscanf_r+0x68>
 800ad90:	2b5b      	cmp	r3, #91	; 0x5b
 800ad92:	d061      	beq.n	800ae58 <__ssvfiscanf_r+0x1d0>
 800ad94:	d80c      	bhi.n	800adb0 <__ssvfiscanf_r+0x128>
 800ad96:	2b58      	cmp	r3, #88	; 0x58
 800ad98:	d1d2      	bne.n	800ad40 <__ssvfiscanf_r+0xb8>
 800ad9a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ad9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada0:	9243      	str	r2, [sp, #268]	; 0x10c
 800ada2:	2210      	movs	r2, #16
 800ada4:	9244      	str	r2, [sp, #272]	; 0x110
 800ada6:	2b6f      	cmp	r3, #111	; 0x6f
 800ada8:	bfb4      	ite	lt
 800adaa:	2303      	movlt	r3, #3
 800adac:	2304      	movge	r3, #4
 800adae:	e010      	b.n	800add2 <__ssvfiscanf_r+0x14a>
 800adb0:	2b63      	cmp	r3, #99	; 0x63
 800adb2:	d05c      	beq.n	800ae6e <__ssvfiscanf_r+0x1e6>
 800adb4:	2b64      	cmp	r3, #100	; 0x64
 800adb6:	d1c3      	bne.n	800ad40 <__ssvfiscanf_r+0xb8>
 800adb8:	9744      	str	r7, [sp, #272]	; 0x110
 800adba:	e7f4      	b.n	800ada6 <__ssvfiscanf_r+0x11e>
 800adbc:	2b70      	cmp	r3, #112	; 0x70
 800adbe:	d042      	beq.n	800ae46 <__ssvfiscanf_r+0x1be>
 800adc0:	d81d      	bhi.n	800adfe <__ssvfiscanf_r+0x176>
 800adc2:	2b6e      	cmp	r3, #110	; 0x6e
 800adc4:	d059      	beq.n	800ae7a <__ssvfiscanf_r+0x1f2>
 800adc6:	d843      	bhi.n	800ae50 <__ssvfiscanf_r+0x1c8>
 800adc8:	2b69      	cmp	r3, #105	; 0x69
 800adca:	d1b9      	bne.n	800ad40 <__ssvfiscanf_r+0xb8>
 800adcc:	2300      	movs	r3, #0
 800adce:	9344      	str	r3, [sp, #272]	; 0x110
 800add0:	2303      	movs	r3, #3
 800add2:	9349      	str	r3, [sp, #292]	; 0x124
 800add4:	6863      	ldr	r3, [r4, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	dd61      	ble.n	800ae9e <__ssvfiscanf_r+0x216>
 800adda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800addc:	0659      	lsls	r1, r3, #25
 800adde:	d56f      	bpl.n	800aec0 <__ssvfiscanf_r+0x238>
 800ade0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	dc7c      	bgt.n	800aee0 <__ssvfiscanf_r+0x258>
 800ade6:	ab01      	add	r3, sp, #4
 800ade8:	4622      	mov	r2, r4
 800adea:	a943      	add	r1, sp, #268	; 0x10c
 800adec:	4630      	mov	r0, r6
 800adee:	f000 fa35 	bl	800b25c <_scanf_chars>
 800adf2:	2801      	cmp	r0, #1
 800adf4:	f000 8092 	beq.w	800af1c <__ssvfiscanf_r+0x294>
 800adf8:	2802      	cmp	r0, #2
 800adfa:	d1ba      	bne.n	800ad72 <__ssvfiscanf_r+0xea>
 800adfc:	e01d      	b.n	800ae3a <__ssvfiscanf_r+0x1b2>
 800adfe:	2b75      	cmp	r3, #117	; 0x75
 800ae00:	d0da      	beq.n	800adb8 <__ssvfiscanf_r+0x130>
 800ae02:	2b78      	cmp	r3, #120	; 0x78
 800ae04:	d0c9      	beq.n	800ad9a <__ssvfiscanf_r+0x112>
 800ae06:	2b73      	cmp	r3, #115	; 0x73
 800ae08:	d19a      	bne.n	800ad40 <__ssvfiscanf_r+0xb8>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e7e1      	b.n	800add2 <__ssvfiscanf_r+0x14a>
 800ae0e:	6863      	ldr	r3, [r4, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dd0c      	ble.n	800ae2e <__ssvfiscanf_r+0x1a6>
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	4593      	cmp	fp, r2
 800ae1a:	d17f      	bne.n	800af1c <__ssvfiscanf_r+0x294>
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	6862      	ldr	r2, [r4, #4]
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ae24:	3a01      	subs	r2, #1
 800ae26:	3301      	adds	r3, #1
 800ae28:	6062      	str	r2, [r4, #4]
 800ae2a:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae2c:	e7a1      	b.n	800ad72 <__ssvfiscanf_r+0xea>
 800ae2e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae30:	4621      	mov	r1, r4
 800ae32:	4630      	mov	r0, r6
 800ae34:	4798      	blx	r3
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d0ec      	beq.n	800ae14 <__ssvfiscanf_r+0x18c>
 800ae3a:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d163      	bne.n	800af08 <__ssvfiscanf_r+0x280>
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	e066      	b.n	800af14 <__ssvfiscanf_r+0x28c>
 800ae46:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ae48:	f042 0220 	orr.w	r2, r2, #32
 800ae4c:	9243      	str	r2, [sp, #268]	; 0x10c
 800ae4e:	e7a4      	b.n	800ad9a <__ssvfiscanf_r+0x112>
 800ae50:	2308      	movs	r3, #8
 800ae52:	9344      	str	r3, [sp, #272]	; 0x110
 800ae54:	2304      	movs	r3, #4
 800ae56:	e7bc      	b.n	800add2 <__ssvfiscanf_r+0x14a>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f000 fb56 	bl	800b50c <__sccl>
 800ae60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ae62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae66:	9343      	str	r3, [sp, #268]	; 0x10c
 800ae68:	4605      	mov	r5, r0
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e7b1      	b.n	800add2 <__ssvfiscanf_r+0x14a>
 800ae6e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ae70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae74:	9343      	str	r3, [sp, #268]	; 0x10c
 800ae76:	2300      	movs	r3, #0
 800ae78:	e7ab      	b.n	800add2 <__ssvfiscanf_r+0x14a>
 800ae7a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ae7c:	06d0      	lsls	r0, r2, #27
 800ae7e:	f53f af78 	bmi.w	800ad72 <__ssvfiscanf_r+0xea>
 800ae82:	f012 0f01 	tst.w	r2, #1
 800ae86:	9a01      	ldr	r2, [sp, #4]
 800ae88:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ae8a:	f102 0104 	add.w	r1, r2, #4
 800ae8e:	9101      	str	r1, [sp, #4]
 800ae90:	6812      	ldr	r2, [r2, #0]
 800ae92:	bf14      	ite	ne
 800ae94:	8013      	strhne	r3, [r2, #0]
 800ae96:	6013      	streq	r3, [r2, #0]
 800ae98:	e76b      	b.n	800ad72 <__ssvfiscanf_r+0xea>
 800ae9a:	2305      	movs	r3, #5
 800ae9c:	e799      	b.n	800add2 <__ssvfiscanf_r+0x14a>
 800ae9e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aea0:	4621      	mov	r1, r4
 800aea2:	4630      	mov	r0, r6
 800aea4:	4798      	blx	r3
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d097      	beq.n	800adda <__ssvfiscanf_r+0x152>
 800aeaa:	e7c6      	b.n	800ae3a <__ssvfiscanf_r+0x1b2>
 800aeac:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800aeae:	3201      	adds	r2, #1
 800aeb0:	9247      	str	r2, [sp, #284]	; 0x11c
 800aeb2:	6862      	ldr	r2, [r4, #4]
 800aeb4:	3a01      	subs	r2, #1
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	6062      	str	r2, [r4, #4]
 800aeba:	dd0a      	ble.n	800aed2 <__ssvfiscanf_r+0x24a>
 800aebc:	3301      	adds	r3, #1
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	f000 fcb4 	bl	800b82c <__locale_ctype_ptr>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	4410      	add	r0, r2
 800aeca:	7842      	ldrb	r2, [r0, #1]
 800aecc:	0712      	lsls	r2, r2, #28
 800aece:	d4ed      	bmi.n	800aeac <__ssvfiscanf_r+0x224>
 800aed0:	e786      	b.n	800ade0 <__ssvfiscanf_r+0x158>
 800aed2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aed4:	4621      	mov	r1, r4
 800aed6:	4630      	mov	r0, r6
 800aed8:	4798      	blx	r3
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d0f0      	beq.n	800aec0 <__ssvfiscanf_r+0x238>
 800aede:	e7ac      	b.n	800ae3a <__ssvfiscanf_r+0x1b2>
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	dc06      	bgt.n	800aef2 <__ssvfiscanf_r+0x26a>
 800aee4:	ab01      	add	r3, sp, #4
 800aee6:	4622      	mov	r2, r4
 800aee8:	a943      	add	r1, sp, #268	; 0x10c
 800aeea:	4630      	mov	r0, r6
 800aeec:	f000 fa1a 	bl	800b324 <_scanf_i>
 800aef0:	e77f      	b.n	800adf2 <__ssvfiscanf_r+0x16a>
 800aef2:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <__ssvfiscanf_r+0x2a4>)
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f43f af3c 	beq.w	800ad72 <__ssvfiscanf_r+0xea>
 800aefa:	ab01      	add	r3, sp, #4
 800aefc:	4622      	mov	r2, r4
 800aefe:	a943      	add	r1, sp, #268	; 0x10c
 800af00:	4630      	mov	r0, r6
 800af02:	f3af 8000 	nop.w
 800af06:	e774      	b.n	800adf2 <__ssvfiscanf_r+0x16a>
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800af0e:	bf18      	it	ne
 800af10:	f04f 30ff 	movne.w	r0, #4294967295
 800af14:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800af1e:	e7f9      	b.n	800af14 <__ssvfiscanf_r+0x28c>
 800af20:	0800abd5 	.word	0x0800abd5
 800af24:	0800ac4f 	.word	0x0800ac4f
 800af28:	0800bcb5 	.word	0x0800bcb5
 800af2c:	00000000 	.word	0x00000000

0800af30 <_printf_common>:
 800af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	4691      	mov	r9, r2
 800af36:	461f      	mov	r7, r3
 800af38:	688a      	ldr	r2, [r1, #8]
 800af3a:	690b      	ldr	r3, [r1, #16]
 800af3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af40:	4293      	cmp	r3, r2
 800af42:	bfb8      	it	lt
 800af44:	4613      	movlt	r3, r2
 800af46:	f8c9 3000 	str.w	r3, [r9]
 800af4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af4e:	4606      	mov	r6, r0
 800af50:	460c      	mov	r4, r1
 800af52:	b112      	cbz	r2, 800af5a <_printf_common+0x2a>
 800af54:	3301      	adds	r3, #1
 800af56:	f8c9 3000 	str.w	r3, [r9]
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	0699      	lsls	r1, r3, #26
 800af5e:	bf42      	ittt	mi
 800af60:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af64:	3302      	addmi	r3, #2
 800af66:	f8c9 3000 	strmi.w	r3, [r9]
 800af6a:	6825      	ldr	r5, [r4, #0]
 800af6c:	f015 0506 	ands.w	r5, r5, #6
 800af70:	d107      	bne.n	800af82 <_printf_common+0x52>
 800af72:	f104 0a19 	add.w	sl, r4, #25
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	f8d9 2000 	ldr.w	r2, [r9]
 800af7c:	1a9b      	subs	r3, r3, r2
 800af7e:	429d      	cmp	r5, r3
 800af80:	db29      	blt.n	800afd6 <_printf_common+0xa6>
 800af82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	3300      	adds	r3, #0
 800af8a:	bf18      	it	ne
 800af8c:	2301      	movne	r3, #1
 800af8e:	0692      	lsls	r2, r2, #26
 800af90:	d42e      	bmi.n	800aff0 <_printf_common+0xc0>
 800af92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af96:	4639      	mov	r1, r7
 800af98:	4630      	mov	r0, r6
 800af9a:	47c0      	blx	r8
 800af9c:	3001      	adds	r0, #1
 800af9e:	d021      	beq.n	800afe4 <_printf_common+0xb4>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	68e5      	ldr	r5, [r4, #12]
 800afa4:	f8d9 2000 	ldr.w	r2, [r9]
 800afa8:	f003 0306 	and.w	r3, r3, #6
 800afac:	2b04      	cmp	r3, #4
 800afae:	bf08      	it	eq
 800afb0:	1aad      	subeq	r5, r5, r2
 800afb2:	68a3      	ldr	r3, [r4, #8]
 800afb4:	6922      	ldr	r2, [r4, #16]
 800afb6:	bf0c      	ite	eq
 800afb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afbc:	2500      	movne	r5, #0
 800afbe:	4293      	cmp	r3, r2
 800afc0:	bfc4      	itt	gt
 800afc2:	1a9b      	subgt	r3, r3, r2
 800afc4:	18ed      	addgt	r5, r5, r3
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	341a      	adds	r4, #26
 800afcc:	454d      	cmp	r5, r9
 800afce:	d11b      	bne.n	800b008 <_printf_common+0xd8>
 800afd0:	2000      	movs	r0, #0
 800afd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd6:	2301      	movs	r3, #1
 800afd8:	4652      	mov	r2, sl
 800afda:	4639      	mov	r1, r7
 800afdc:	4630      	mov	r0, r6
 800afde:	47c0      	blx	r8
 800afe0:	3001      	adds	r0, #1
 800afe2:	d103      	bne.n	800afec <_printf_common+0xbc>
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afec:	3501      	adds	r5, #1
 800afee:	e7c2      	b.n	800af76 <_printf_common+0x46>
 800aff0:	18e1      	adds	r1, r4, r3
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	2030      	movs	r0, #48	; 0x30
 800aff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800affa:	4422      	add	r2, r4
 800affc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b004:	3302      	adds	r3, #2
 800b006:	e7c4      	b.n	800af92 <_printf_common+0x62>
 800b008:	2301      	movs	r3, #1
 800b00a:	4622      	mov	r2, r4
 800b00c:	4639      	mov	r1, r7
 800b00e:	4630      	mov	r0, r6
 800b010:	47c0      	blx	r8
 800b012:	3001      	adds	r0, #1
 800b014:	d0e6      	beq.n	800afe4 <_printf_common+0xb4>
 800b016:	f109 0901 	add.w	r9, r9, #1
 800b01a:	e7d7      	b.n	800afcc <_printf_common+0x9c>

0800b01c <_printf_i>:
 800b01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b020:	4617      	mov	r7, r2
 800b022:	7e0a      	ldrb	r2, [r1, #24]
 800b024:	b085      	sub	sp, #20
 800b026:	2a6e      	cmp	r2, #110	; 0x6e
 800b028:	4698      	mov	r8, r3
 800b02a:	4606      	mov	r6, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b030:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800b034:	f000 80bc 	beq.w	800b1b0 <_printf_i+0x194>
 800b038:	d81a      	bhi.n	800b070 <_printf_i+0x54>
 800b03a:	2a63      	cmp	r2, #99	; 0x63
 800b03c:	d02e      	beq.n	800b09c <_printf_i+0x80>
 800b03e:	d80a      	bhi.n	800b056 <_printf_i+0x3a>
 800b040:	2a00      	cmp	r2, #0
 800b042:	f000 80c8 	beq.w	800b1d6 <_printf_i+0x1ba>
 800b046:	2a58      	cmp	r2, #88	; 0x58
 800b048:	f000 808a 	beq.w	800b160 <_printf_i+0x144>
 800b04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b050:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b054:	e02a      	b.n	800b0ac <_printf_i+0x90>
 800b056:	2a64      	cmp	r2, #100	; 0x64
 800b058:	d001      	beq.n	800b05e <_printf_i+0x42>
 800b05a:	2a69      	cmp	r2, #105	; 0x69
 800b05c:	d1f6      	bne.n	800b04c <_printf_i+0x30>
 800b05e:	6821      	ldr	r1, [r4, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b066:	d023      	beq.n	800b0b0 <_printf_i+0x94>
 800b068:	1d11      	adds	r1, r2, #4
 800b06a:	6019      	str	r1, [r3, #0]
 800b06c:	6813      	ldr	r3, [r2, #0]
 800b06e:	e027      	b.n	800b0c0 <_printf_i+0xa4>
 800b070:	2a73      	cmp	r2, #115	; 0x73
 800b072:	f000 80b4 	beq.w	800b1de <_printf_i+0x1c2>
 800b076:	d808      	bhi.n	800b08a <_printf_i+0x6e>
 800b078:	2a6f      	cmp	r2, #111	; 0x6f
 800b07a:	d02a      	beq.n	800b0d2 <_printf_i+0xb6>
 800b07c:	2a70      	cmp	r2, #112	; 0x70
 800b07e:	d1e5      	bne.n	800b04c <_printf_i+0x30>
 800b080:	680a      	ldr	r2, [r1, #0]
 800b082:	f042 0220 	orr.w	r2, r2, #32
 800b086:	600a      	str	r2, [r1, #0]
 800b088:	e003      	b.n	800b092 <_printf_i+0x76>
 800b08a:	2a75      	cmp	r2, #117	; 0x75
 800b08c:	d021      	beq.n	800b0d2 <_printf_i+0xb6>
 800b08e:	2a78      	cmp	r2, #120	; 0x78
 800b090:	d1dc      	bne.n	800b04c <_printf_i+0x30>
 800b092:	2278      	movs	r2, #120	; 0x78
 800b094:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b098:	496e      	ldr	r1, [pc, #440]	; (800b254 <_printf_i+0x238>)
 800b09a:	e064      	b.n	800b166 <_printf_i+0x14a>
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b0a2:	1d11      	adds	r1, r2, #4
 800b0a4:	6019      	str	r1, [r3, #0]
 800b0a6:	6813      	ldr	r3, [r2, #0]
 800b0a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e0a3      	b.n	800b1f8 <_printf_i+0x1dc>
 800b0b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b0b4:	f102 0104 	add.w	r1, r2, #4
 800b0b8:	6019      	str	r1, [r3, #0]
 800b0ba:	d0d7      	beq.n	800b06c <_printf_i+0x50>
 800b0bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	da03      	bge.n	800b0cc <_printf_i+0xb0>
 800b0c4:	222d      	movs	r2, #45	; 0x2d
 800b0c6:	425b      	negs	r3, r3
 800b0c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0cc:	4962      	ldr	r1, [pc, #392]	; (800b258 <_printf_i+0x23c>)
 800b0ce:	220a      	movs	r2, #10
 800b0d0:	e017      	b.n	800b102 <_printf_i+0xe6>
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	6819      	ldr	r1, [r3, #0]
 800b0d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b0da:	d003      	beq.n	800b0e4 <_printf_i+0xc8>
 800b0dc:	1d08      	adds	r0, r1, #4
 800b0de:	6018      	str	r0, [r3, #0]
 800b0e0:	680b      	ldr	r3, [r1, #0]
 800b0e2:	e006      	b.n	800b0f2 <_printf_i+0xd6>
 800b0e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0e8:	f101 0004 	add.w	r0, r1, #4
 800b0ec:	6018      	str	r0, [r3, #0]
 800b0ee:	d0f7      	beq.n	800b0e0 <_printf_i+0xc4>
 800b0f0:	880b      	ldrh	r3, [r1, #0]
 800b0f2:	4959      	ldr	r1, [pc, #356]	; (800b258 <_printf_i+0x23c>)
 800b0f4:	2a6f      	cmp	r2, #111	; 0x6f
 800b0f6:	bf14      	ite	ne
 800b0f8:	220a      	movne	r2, #10
 800b0fa:	2208      	moveq	r2, #8
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800b102:	6865      	ldr	r5, [r4, #4]
 800b104:	60a5      	str	r5, [r4, #8]
 800b106:	2d00      	cmp	r5, #0
 800b108:	f2c0 809c 	blt.w	800b244 <_printf_i+0x228>
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	f020 0004 	bic.w	r0, r0, #4
 800b112:	6020      	str	r0, [r4, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d13f      	bne.n	800b198 <_printf_i+0x17c>
 800b118:	2d00      	cmp	r5, #0
 800b11a:	f040 8095 	bne.w	800b248 <_printf_i+0x22c>
 800b11e:	4675      	mov	r5, lr
 800b120:	2a08      	cmp	r2, #8
 800b122:	d10b      	bne.n	800b13c <_printf_i+0x120>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	07da      	lsls	r2, r3, #31
 800b128:	d508      	bpl.n	800b13c <_printf_i+0x120>
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	6862      	ldr	r2, [r4, #4]
 800b12e:	429a      	cmp	r2, r3
 800b130:	bfde      	ittt	le
 800b132:	2330      	movle	r3, #48	; 0x30
 800b134:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b138:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b13c:	ebae 0305 	sub.w	r3, lr, r5
 800b140:	6123      	str	r3, [r4, #16]
 800b142:	f8cd 8000 	str.w	r8, [sp]
 800b146:	463b      	mov	r3, r7
 800b148:	aa03      	add	r2, sp, #12
 800b14a:	4621      	mov	r1, r4
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff feef 	bl	800af30 <_printf_common>
 800b152:	3001      	adds	r0, #1
 800b154:	d155      	bne.n	800b202 <_printf_i+0x1e6>
 800b156:	f04f 30ff 	mov.w	r0, #4294967295
 800b15a:	b005      	add	sp, #20
 800b15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b160:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800b164:	493c      	ldr	r1, [pc, #240]	; (800b258 <_printf_i+0x23c>)
 800b166:	6822      	ldr	r2, [r4, #0]
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b16e:	f100 0504 	add.w	r5, r0, #4
 800b172:	601d      	str	r5, [r3, #0]
 800b174:	d001      	beq.n	800b17a <_printf_i+0x15e>
 800b176:	6803      	ldr	r3, [r0, #0]
 800b178:	e002      	b.n	800b180 <_printf_i+0x164>
 800b17a:	0655      	lsls	r5, r2, #25
 800b17c:	d5fb      	bpl.n	800b176 <_printf_i+0x15a>
 800b17e:	8803      	ldrh	r3, [r0, #0]
 800b180:	07d0      	lsls	r0, r2, #31
 800b182:	bf44      	itt	mi
 800b184:	f042 0220 	orrmi.w	r2, r2, #32
 800b188:	6022      	strmi	r2, [r4, #0]
 800b18a:	b91b      	cbnz	r3, 800b194 <_printf_i+0x178>
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	f022 0220 	bic.w	r2, r2, #32
 800b192:	6022      	str	r2, [r4, #0]
 800b194:	2210      	movs	r2, #16
 800b196:	e7b1      	b.n	800b0fc <_printf_i+0xe0>
 800b198:	4675      	mov	r5, lr
 800b19a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b19e:	fb02 3310 	mls	r3, r2, r0, r3
 800b1a2:	5ccb      	ldrb	r3, [r1, r3]
 800b1a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d1f5      	bne.n	800b19a <_printf_i+0x17e>
 800b1ae:	e7b7      	b.n	800b120 <_printf_i+0x104>
 800b1b0:	6808      	ldr	r0, [r1, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	6949      	ldr	r1, [r1, #20]
 800b1b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b1ba:	d004      	beq.n	800b1c6 <_printf_i+0x1aa>
 800b1bc:	1d10      	adds	r0, r2, #4
 800b1be:	6018      	str	r0, [r3, #0]
 800b1c0:	6813      	ldr	r3, [r2, #0]
 800b1c2:	6019      	str	r1, [r3, #0]
 800b1c4:	e007      	b.n	800b1d6 <_printf_i+0x1ba>
 800b1c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1ca:	f102 0004 	add.w	r0, r2, #4
 800b1ce:	6018      	str	r0, [r3, #0]
 800b1d0:	6813      	ldr	r3, [r2, #0]
 800b1d2:	d0f6      	beq.n	800b1c2 <_printf_i+0x1a6>
 800b1d4:	8019      	strh	r1, [r3, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	4675      	mov	r5, lr
 800b1dc:	e7b1      	b.n	800b142 <_printf_i+0x126>
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	1d11      	adds	r1, r2, #4
 800b1e2:	6019      	str	r1, [r3, #0]
 800b1e4:	6815      	ldr	r5, [r2, #0]
 800b1e6:	6862      	ldr	r2, [r4, #4]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f7f4 fff8 	bl	80001e0 <memchr>
 800b1f0:	b108      	cbz	r0, 800b1f6 <_printf_i+0x1da>
 800b1f2:	1b40      	subs	r0, r0, r5
 800b1f4:	6060      	str	r0, [r4, #4]
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b200:	e79f      	b.n	800b142 <_printf_i+0x126>
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	462a      	mov	r2, r5
 800b206:	4639      	mov	r1, r7
 800b208:	4630      	mov	r0, r6
 800b20a:	47c0      	blx	r8
 800b20c:	3001      	adds	r0, #1
 800b20e:	d0a2      	beq.n	800b156 <_printf_i+0x13a>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	079b      	lsls	r3, r3, #30
 800b214:	d507      	bpl.n	800b226 <_printf_i+0x20a>
 800b216:	2500      	movs	r5, #0
 800b218:	f104 0919 	add.w	r9, r4, #25
 800b21c:	68e3      	ldr	r3, [r4, #12]
 800b21e:	9a03      	ldr	r2, [sp, #12]
 800b220:	1a9b      	subs	r3, r3, r2
 800b222:	429d      	cmp	r5, r3
 800b224:	db05      	blt.n	800b232 <_printf_i+0x216>
 800b226:	68e0      	ldr	r0, [r4, #12]
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	4298      	cmp	r0, r3
 800b22c:	bfb8      	it	lt
 800b22e:	4618      	movlt	r0, r3
 800b230:	e793      	b.n	800b15a <_printf_i+0x13e>
 800b232:	2301      	movs	r3, #1
 800b234:	464a      	mov	r2, r9
 800b236:	4639      	mov	r1, r7
 800b238:	4630      	mov	r0, r6
 800b23a:	47c0      	blx	r8
 800b23c:	3001      	adds	r0, #1
 800b23e:	d08a      	beq.n	800b156 <_printf_i+0x13a>
 800b240:	3501      	adds	r5, #1
 800b242:	e7eb      	b.n	800b21c <_printf_i+0x200>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1a7      	bne.n	800b198 <_printf_i+0x17c>
 800b248:	780b      	ldrb	r3, [r1, #0]
 800b24a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b24e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b252:	e765      	b.n	800b120 <_printf_i+0x104>
 800b254:	0800bcd1 	.word	0x0800bcd1
 800b258:	0800bcc0 	.word	0x0800bcc0

0800b25c <_scanf_chars>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	4615      	mov	r5, r2
 800b262:	688a      	ldr	r2, [r1, #8]
 800b264:	4680      	mov	r8, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b932      	cbnz	r2, 800b278 <_scanf_chars+0x1c>
 800b26a:	698a      	ldr	r2, [r1, #24]
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	bf0c      	ite	eq
 800b270:	2201      	moveq	r2, #1
 800b272:	f04f 32ff 	movne.w	r2, #4294967295
 800b276:	608a      	str	r2, [r1, #8]
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	06d1      	lsls	r1, r2, #27
 800b27c:	bf5f      	itttt	pl
 800b27e:	681a      	ldrpl	r2, [r3, #0]
 800b280:	1d11      	addpl	r1, r2, #4
 800b282:	6019      	strpl	r1, [r3, #0]
 800b284:	6817      	ldrpl	r7, [r2, #0]
 800b286:	2600      	movs	r6, #0
 800b288:	69a3      	ldr	r3, [r4, #24]
 800b28a:	b1db      	cbz	r3, 800b2c4 <_scanf_chars+0x68>
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d107      	bne.n	800b2a0 <_scanf_chars+0x44>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	6962      	ldr	r2, [r4, #20]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	5cd3      	ldrb	r3, [r2, r3]
 800b298:	b9a3      	cbnz	r3, 800b2c4 <_scanf_chars+0x68>
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d132      	bne.n	800b304 <_scanf_chars+0xa8>
 800b29e:	e006      	b.n	800b2ae <_scanf_chars+0x52>
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d007      	beq.n	800b2b4 <_scanf_chars+0x58>
 800b2a4:	2e00      	cmp	r6, #0
 800b2a6:	d12d      	bne.n	800b304 <_scanf_chars+0xa8>
 800b2a8:	69a3      	ldr	r3, [r4, #24]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d12a      	bne.n	800b304 <_scanf_chars+0xa8>
 800b2ae:	2001      	movs	r0, #1
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b4:	f000 faba 	bl	800b82c <__locale_ctype_ptr>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	4418      	add	r0, r3
 800b2be:	7843      	ldrb	r3, [r0, #1]
 800b2c0:	071b      	lsls	r3, r3, #28
 800b2c2:	d4ef      	bmi.n	800b2a4 <_scanf_chars+0x48>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	06da      	lsls	r2, r3, #27
 800b2c8:	bf5e      	ittt	pl
 800b2ca:	682b      	ldrpl	r3, [r5, #0]
 800b2cc:	781b      	ldrbpl	r3, [r3, #0]
 800b2ce:	703b      	strbpl	r3, [r7, #0]
 800b2d0:	682a      	ldr	r2, [r5, #0]
 800b2d2:	686b      	ldr	r3, [r5, #4]
 800b2d4:	f102 0201 	add.w	r2, r2, #1
 800b2d8:	602a      	str	r2, [r5, #0]
 800b2da:	68a2      	ldr	r2, [r4, #8]
 800b2dc:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2e0:	f102 32ff 	add.w	r2, r2, #4294967295
 800b2e4:	606b      	str	r3, [r5, #4]
 800b2e6:	f106 0601 	add.w	r6, r6, #1
 800b2ea:	bf58      	it	pl
 800b2ec:	3701      	addpl	r7, #1
 800b2ee:	60a2      	str	r2, [r4, #8]
 800b2f0:	b142      	cbz	r2, 800b304 <_scanf_chars+0xa8>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dcc8      	bgt.n	800b288 <_scanf_chars+0x2c>
 800b2f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4640      	mov	r0, r8
 800b2fe:	4798      	blx	r3
 800b300:	2800      	cmp	r0, #0
 800b302:	d0c1      	beq.n	800b288 <_scanf_chars+0x2c>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	f013 0310 	ands.w	r3, r3, #16
 800b30a:	d105      	bne.n	800b318 <_scanf_chars+0xbc>
 800b30c:	68e2      	ldr	r2, [r4, #12]
 800b30e:	3201      	adds	r2, #1
 800b310:	60e2      	str	r2, [r4, #12]
 800b312:	69a2      	ldr	r2, [r4, #24]
 800b314:	b102      	cbz	r2, 800b318 <_scanf_chars+0xbc>
 800b316:	703b      	strb	r3, [r7, #0]
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	441e      	add	r6, r3
 800b31c:	6126      	str	r6, [r4, #16]
 800b31e:	2000      	movs	r0, #0
 800b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b324 <_scanf_i>:
 800b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	469a      	mov	sl, r3
 800b32a:	4b74      	ldr	r3, [pc, #464]	; (800b4fc <_scanf_i+0x1d8>)
 800b32c:	460c      	mov	r4, r1
 800b32e:	4683      	mov	fp, r0
 800b330:	4616      	mov	r6, r2
 800b332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b336:	b087      	sub	sp, #28
 800b338:	ab03      	add	r3, sp, #12
 800b33a:	68a7      	ldr	r7, [r4, #8]
 800b33c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b340:	4b6f      	ldr	r3, [pc, #444]	; (800b500 <_scanf_i+0x1dc>)
 800b342:	69a1      	ldr	r1, [r4, #24]
 800b344:	4a6f      	ldr	r2, [pc, #444]	; (800b504 <_scanf_i+0x1e0>)
 800b346:	2903      	cmp	r1, #3
 800b348:	bf18      	it	ne
 800b34a:	461a      	movne	r2, r3
 800b34c:	1e7b      	subs	r3, r7, #1
 800b34e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800b352:	bf84      	itt	hi
 800b354:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b358:	60a3      	strhi	r3, [r4, #8]
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	9200      	str	r2, [sp, #0]
 800b35e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b362:	bf88      	it	hi
 800b364:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b368:	f104 091c 	add.w	r9, r4, #28
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bf8c      	ite	hi
 800b370:	197f      	addhi	r7, r7, r5
 800b372:	2700      	movls	r7, #0
 800b374:	464b      	mov	r3, r9
 800b376:	f04f 0800 	mov.w	r8, #0
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	6831      	ldr	r1, [r6, #0]
 800b37e:	ab03      	add	r3, sp, #12
 800b380:	2202      	movs	r2, #2
 800b382:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b386:	7809      	ldrb	r1, [r1, #0]
 800b388:	f7f4 ff2a 	bl	80001e0 <memchr>
 800b38c:	9b01      	ldr	r3, [sp, #4]
 800b38e:	b328      	cbz	r0, 800b3dc <_scanf_i+0xb8>
 800b390:	f1b8 0f01 	cmp.w	r8, #1
 800b394:	d156      	bne.n	800b444 <_scanf_i+0x120>
 800b396:	6862      	ldr	r2, [r4, #4]
 800b398:	b92a      	cbnz	r2, 800b3a6 <_scanf_i+0x82>
 800b39a:	2208      	movs	r2, #8
 800b39c:	6062      	str	r2, [r4, #4]
 800b39e:	6822      	ldr	r2, [r4, #0]
 800b3a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3a4:	6022      	str	r2, [r4, #0]
 800b3a6:	6822      	ldr	r2, [r4, #0]
 800b3a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b3ac:	6022      	str	r2, [r4, #0]
 800b3ae:	68a2      	ldr	r2, [r4, #8]
 800b3b0:	1e51      	subs	r1, r2, #1
 800b3b2:	60a1      	str	r1, [r4, #8]
 800b3b4:	b192      	cbz	r2, 800b3dc <_scanf_i+0xb8>
 800b3b6:	6832      	ldr	r2, [r6, #0]
 800b3b8:	1c51      	adds	r1, r2, #1
 800b3ba:	6031      	str	r1, [r6, #0]
 800b3bc:	7812      	ldrb	r2, [r2, #0]
 800b3be:	701a      	strb	r2, [r3, #0]
 800b3c0:	1c5d      	adds	r5, r3, #1
 800b3c2:	6873      	ldr	r3, [r6, #4]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	6073      	str	r3, [r6, #4]
 800b3ca:	dc06      	bgt.n	800b3da <_scanf_i+0xb6>
 800b3cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4658      	mov	r0, fp
 800b3d4:	4798      	blx	r3
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d176      	bne.n	800b4c8 <_scanf_i+0x1a4>
 800b3da:	462b      	mov	r3, r5
 800b3dc:	f108 0801 	add.w	r8, r8, #1
 800b3e0:	f1b8 0f03 	cmp.w	r8, #3
 800b3e4:	d1c9      	bne.n	800b37a <_scanf_i+0x56>
 800b3e6:	6862      	ldr	r2, [r4, #4]
 800b3e8:	b90a      	cbnz	r2, 800b3ee <_scanf_i+0xca>
 800b3ea:	220a      	movs	r2, #10
 800b3ec:	6062      	str	r2, [r4, #4]
 800b3ee:	6862      	ldr	r2, [r4, #4]
 800b3f0:	4945      	ldr	r1, [pc, #276]	; (800b508 <_scanf_i+0x1e4>)
 800b3f2:	6960      	ldr	r0, [r4, #20]
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	1a89      	subs	r1, r1, r2
 800b3f8:	f000 f888 	bl	800b50c <__sccl>
 800b3fc:	9b01      	ldr	r3, [sp, #4]
 800b3fe:	f04f 0800 	mov.w	r8, #0
 800b402:	461d      	mov	r5, r3
 800b404:	68a3      	ldr	r3, [r4, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d038      	beq.n	800b47c <_scanf_i+0x158>
 800b40a:	6831      	ldr	r1, [r6, #0]
 800b40c:	6960      	ldr	r0, [r4, #20]
 800b40e:	780a      	ldrb	r2, [r1, #0]
 800b410:	5c80      	ldrb	r0, [r0, r2]
 800b412:	2800      	cmp	r0, #0
 800b414:	d032      	beq.n	800b47c <_scanf_i+0x158>
 800b416:	2a30      	cmp	r2, #48	; 0x30
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	d121      	bne.n	800b460 <_scanf_i+0x13c>
 800b41c:	0510      	lsls	r0, r2, #20
 800b41e:	d51f      	bpl.n	800b460 <_scanf_i+0x13c>
 800b420:	f108 0801 	add.w	r8, r8, #1
 800b424:	b117      	cbz	r7, 800b42c <_scanf_i+0x108>
 800b426:	3301      	adds	r3, #1
 800b428:	3f01      	subs	r7, #1
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	6873      	ldr	r3, [r6, #4]
 800b42e:	3b01      	subs	r3, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	6073      	str	r3, [r6, #4]
 800b434:	dd1b      	ble.n	800b46e <_scanf_i+0x14a>
 800b436:	6833      	ldr	r3, [r6, #0]
 800b438:	3301      	adds	r3, #1
 800b43a:	6033      	str	r3, [r6, #0]
 800b43c:	68a3      	ldr	r3, [r4, #8]
 800b43e:	3b01      	subs	r3, #1
 800b440:	60a3      	str	r3, [r4, #8]
 800b442:	e7df      	b.n	800b404 <_scanf_i+0xe0>
 800b444:	f1b8 0f02 	cmp.w	r8, #2
 800b448:	d1b1      	bne.n	800b3ae <_scanf_i+0x8a>
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b450:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b454:	d1c2      	bne.n	800b3dc <_scanf_i+0xb8>
 800b456:	2110      	movs	r1, #16
 800b458:	6061      	str	r1, [r4, #4]
 800b45a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b45e:	e7a5      	b.n	800b3ac <_scanf_i+0x88>
 800b460:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b464:	6022      	str	r2, [r4, #0]
 800b466:	780b      	ldrb	r3, [r1, #0]
 800b468:	702b      	strb	r3, [r5, #0]
 800b46a:	3501      	adds	r5, #1
 800b46c:	e7de      	b.n	800b42c <_scanf_i+0x108>
 800b46e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b472:	4631      	mov	r1, r6
 800b474:	4658      	mov	r0, fp
 800b476:	4798      	blx	r3
 800b478:	2800      	cmp	r0, #0
 800b47a:	d0df      	beq.n	800b43c <_scanf_i+0x118>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	05d9      	lsls	r1, r3, #23
 800b480:	d50c      	bpl.n	800b49c <_scanf_i+0x178>
 800b482:	454d      	cmp	r5, r9
 800b484:	d908      	bls.n	800b498 <_scanf_i+0x174>
 800b486:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b48a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b48e:	4632      	mov	r2, r6
 800b490:	4658      	mov	r0, fp
 800b492:	4798      	blx	r3
 800b494:	1e6f      	subs	r7, r5, #1
 800b496:	463d      	mov	r5, r7
 800b498:	454d      	cmp	r5, r9
 800b49a:	d02c      	beq.n	800b4f6 <_scanf_i+0x1d2>
 800b49c:	6822      	ldr	r2, [r4, #0]
 800b49e:	f012 0210 	ands.w	r2, r2, #16
 800b4a2:	d11e      	bne.n	800b4e2 <_scanf_i+0x1be>
 800b4a4:	702a      	strb	r2, [r5, #0]
 800b4a6:	6863      	ldr	r3, [r4, #4]
 800b4a8:	9e00      	ldr	r6, [sp, #0]
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	4658      	mov	r0, fp
 800b4ae:	47b0      	blx	r6
 800b4b0:	6822      	ldr	r2, [r4, #0]
 800b4b2:	f8da 3000 	ldr.w	r3, [sl]
 800b4b6:	f012 0f20 	tst.w	r2, #32
 800b4ba:	d008      	beq.n	800b4ce <_scanf_i+0x1aa>
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	f8ca 2000 	str.w	r2, [sl]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6018      	str	r0, [r3, #0]
 800b4c6:	e009      	b.n	800b4dc <_scanf_i+0x1b8>
 800b4c8:	f04f 0800 	mov.w	r8, #0
 800b4cc:	e7d6      	b.n	800b47c <_scanf_i+0x158>
 800b4ce:	07d2      	lsls	r2, r2, #31
 800b4d0:	d5f4      	bpl.n	800b4bc <_scanf_i+0x198>
 800b4d2:	1d1a      	adds	r2, r3, #4
 800b4d4:	f8ca 2000 	str.w	r2, [sl]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	8018      	strh	r0, [r3, #0]
 800b4dc:	68e3      	ldr	r3, [r4, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	60e3      	str	r3, [r4, #12]
 800b4e2:	eba5 0509 	sub.w	r5, r5, r9
 800b4e6:	44a8      	add	r8, r5
 800b4e8:	6925      	ldr	r5, [r4, #16]
 800b4ea:	4445      	add	r5, r8
 800b4ec:	6125      	str	r5, [r4, #16]
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	b007      	add	sp, #28
 800b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	e7fa      	b.n	800b4f0 <_scanf_i+0x1cc>
 800b4fa:	bf00      	nop
 800b4fc:	0800b94c 	.word	0x0800b94c
 800b500:	0800b78d 	.word	0x0800b78d
 800b504:	0800b66d 	.word	0x0800b66d
 800b508:	0800bcf2 	.word	0x0800bcf2

0800b50c <__sccl>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	780b      	ldrb	r3, [r1, #0]
 800b510:	2b5e      	cmp	r3, #94	; 0x5e
 800b512:	bf13      	iteet	ne
 800b514:	1c4a      	addne	r2, r1, #1
 800b516:	1c8a      	addeq	r2, r1, #2
 800b518:	784b      	ldrbeq	r3, [r1, #1]
 800b51a:	2100      	movne	r1, #0
 800b51c:	bf08      	it	eq
 800b51e:	2101      	moveq	r1, #1
 800b520:	1e44      	subs	r4, r0, #1
 800b522:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b526:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b52a:	42a5      	cmp	r5, r4
 800b52c:	d1fb      	bne.n	800b526 <__sccl+0x1a>
 800b52e:	b913      	cbnz	r3, 800b536 <__sccl+0x2a>
 800b530:	3a01      	subs	r2, #1
 800b532:	4610      	mov	r0, r2
 800b534:	bd70      	pop	{r4, r5, r6, pc}
 800b536:	f081 0401 	eor.w	r4, r1, #1
 800b53a:	54c4      	strb	r4, [r0, r3]
 800b53c:	4611      	mov	r1, r2
 800b53e:	780d      	ldrb	r5, [r1, #0]
 800b540:	2d2d      	cmp	r5, #45	; 0x2d
 800b542:	f101 0201 	add.w	r2, r1, #1
 800b546:	d006      	beq.n	800b556 <__sccl+0x4a>
 800b548:	2d5d      	cmp	r5, #93	; 0x5d
 800b54a:	d0f2      	beq.n	800b532 <__sccl+0x26>
 800b54c:	b90d      	cbnz	r5, 800b552 <__sccl+0x46>
 800b54e:	460a      	mov	r2, r1
 800b550:	e7ef      	b.n	800b532 <__sccl+0x26>
 800b552:	462b      	mov	r3, r5
 800b554:	e7f1      	b.n	800b53a <__sccl+0x2e>
 800b556:	784e      	ldrb	r6, [r1, #1]
 800b558:	2e5d      	cmp	r6, #93	; 0x5d
 800b55a:	d0fa      	beq.n	800b552 <__sccl+0x46>
 800b55c:	42b3      	cmp	r3, r6
 800b55e:	dcf8      	bgt.n	800b552 <__sccl+0x46>
 800b560:	3102      	adds	r1, #2
 800b562:	3301      	adds	r3, #1
 800b564:	429e      	cmp	r6, r3
 800b566:	54c4      	strb	r4, [r0, r3]
 800b568:	dcfb      	bgt.n	800b562 <__sccl+0x56>
 800b56a:	e7e8      	b.n	800b53e <__sccl+0x32>

0800b56c <_strtol_l.isra.0>:
 800b56c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	4692      	mov	sl, r2
 800b576:	461f      	mov	r7, r3
 800b578:	468b      	mov	fp, r1
 800b57a:	465d      	mov	r5, fp
 800b57c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b57e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b582:	f000 f950 	bl	800b826 <__locale_ctype_ptr_l>
 800b586:	4420      	add	r0, r4
 800b588:	7846      	ldrb	r6, [r0, #1]
 800b58a:	f016 0608 	ands.w	r6, r6, #8
 800b58e:	d10b      	bne.n	800b5a8 <_strtol_l.isra.0+0x3c>
 800b590:	2c2d      	cmp	r4, #45	; 0x2d
 800b592:	d10b      	bne.n	800b5ac <_strtol_l.isra.0+0x40>
 800b594:	782c      	ldrb	r4, [r5, #0]
 800b596:	2601      	movs	r6, #1
 800b598:	f10b 0502 	add.w	r5, fp, #2
 800b59c:	b167      	cbz	r7, 800b5b8 <_strtol_l.isra.0+0x4c>
 800b59e:	2f10      	cmp	r7, #16
 800b5a0:	d114      	bne.n	800b5cc <_strtol_l.isra.0+0x60>
 800b5a2:	2c30      	cmp	r4, #48	; 0x30
 800b5a4:	d00a      	beq.n	800b5bc <_strtol_l.isra.0+0x50>
 800b5a6:	e011      	b.n	800b5cc <_strtol_l.isra.0+0x60>
 800b5a8:	46ab      	mov	fp, r5
 800b5aa:	e7e6      	b.n	800b57a <_strtol_l.isra.0+0xe>
 800b5ac:	2c2b      	cmp	r4, #43	; 0x2b
 800b5ae:	bf04      	itt	eq
 800b5b0:	782c      	ldrbeq	r4, [r5, #0]
 800b5b2:	f10b 0502 	addeq.w	r5, fp, #2
 800b5b6:	e7f1      	b.n	800b59c <_strtol_l.isra.0+0x30>
 800b5b8:	2c30      	cmp	r4, #48	; 0x30
 800b5ba:	d127      	bne.n	800b60c <_strtol_l.isra.0+0xa0>
 800b5bc:	782b      	ldrb	r3, [r5, #0]
 800b5be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5c2:	2b58      	cmp	r3, #88	; 0x58
 800b5c4:	d14b      	bne.n	800b65e <_strtol_l.isra.0+0xf2>
 800b5c6:	786c      	ldrb	r4, [r5, #1]
 800b5c8:	2710      	movs	r7, #16
 800b5ca:	3502      	adds	r5, #2
 800b5cc:	2e00      	cmp	r6, #0
 800b5ce:	bf0c      	ite	eq
 800b5d0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b5d4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b5d8:	2200      	movs	r2, #0
 800b5da:	fbb1 fef7 	udiv	lr, r1, r7
 800b5de:	4610      	mov	r0, r2
 800b5e0:	fb07 1c1e 	mls	ip, r7, lr, r1
 800b5e4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d811      	bhi.n	800b610 <_strtol_l.isra.0+0xa4>
 800b5ec:	461c      	mov	r4, r3
 800b5ee:	42a7      	cmp	r7, r4
 800b5f0:	dd1d      	ble.n	800b62e <_strtol_l.isra.0+0xc2>
 800b5f2:	1c53      	adds	r3, r2, #1
 800b5f4:	d007      	beq.n	800b606 <_strtol_l.isra.0+0x9a>
 800b5f6:	4586      	cmp	lr, r0
 800b5f8:	d316      	bcc.n	800b628 <_strtol_l.isra.0+0xbc>
 800b5fa:	d101      	bne.n	800b600 <_strtol_l.isra.0+0x94>
 800b5fc:	45a4      	cmp	ip, r4
 800b5fe:	db13      	blt.n	800b628 <_strtol_l.isra.0+0xbc>
 800b600:	fb00 4007 	mla	r0, r0, r7, r4
 800b604:	2201      	movs	r2, #1
 800b606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b60a:	e7eb      	b.n	800b5e4 <_strtol_l.isra.0+0x78>
 800b60c:	270a      	movs	r7, #10
 800b60e:	e7dd      	b.n	800b5cc <_strtol_l.isra.0+0x60>
 800b610:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b614:	2b19      	cmp	r3, #25
 800b616:	d801      	bhi.n	800b61c <_strtol_l.isra.0+0xb0>
 800b618:	3c37      	subs	r4, #55	; 0x37
 800b61a:	e7e8      	b.n	800b5ee <_strtol_l.isra.0+0x82>
 800b61c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b620:	2b19      	cmp	r3, #25
 800b622:	d804      	bhi.n	800b62e <_strtol_l.isra.0+0xc2>
 800b624:	3c57      	subs	r4, #87	; 0x57
 800b626:	e7e2      	b.n	800b5ee <_strtol_l.isra.0+0x82>
 800b628:	f04f 32ff 	mov.w	r2, #4294967295
 800b62c:	e7eb      	b.n	800b606 <_strtol_l.isra.0+0x9a>
 800b62e:	1c53      	adds	r3, r2, #1
 800b630:	d108      	bne.n	800b644 <_strtol_l.isra.0+0xd8>
 800b632:	2322      	movs	r3, #34	; 0x22
 800b634:	f8c8 3000 	str.w	r3, [r8]
 800b638:	4608      	mov	r0, r1
 800b63a:	f1ba 0f00 	cmp.w	sl, #0
 800b63e:	d107      	bne.n	800b650 <_strtol_l.isra.0+0xe4>
 800b640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b644:	b106      	cbz	r6, 800b648 <_strtol_l.isra.0+0xdc>
 800b646:	4240      	negs	r0, r0
 800b648:	f1ba 0f00 	cmp.w	sl, #0
 800b64c:	d00c      	beq.n	800b668 <_strtol_l.isra.0+0xfc>
 800b64e:	b122      	cbz	r2, 800b65a <_strtol_l.isra.0+0xee>
 800b650:	3d01      	subs	r5, #1
 800b652:	f8ca 5000 	str.w	r5, [sl]
 800b656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	464d      	mov	r5, r9
 800b65c:	e7f9      	b.n	800b652 <_strtol_l.isra.0+0xe6>
 800b65e:	2430      	movs	r4, #48	; 0x30
 800b660:	2f00      	cmp	r7, #0
 800b662:	d1b3      	bne.n	800b5cc <_strtol_l.isra.0+0x60>
 800b664:	2708      	movs	r7, #8
 800b666:	e7b1      	b.n	800b5cc <_strtol_l.isra.0+0x60>
 800b668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b66c <_strtol_r>:
 800b66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b66e:	4c06      	ldr	r4, [pc, #24]	; (800b688 <_strtol_r+0x1c>)
 800b670:	4d06      	ldr	r5, [pc, #24]	; (800b68c <_strtol_r+0x20>)
 800b672:	6824      	ldr	r4, [r4, #0]
 800b674:	6a24      	ldr	r4, [r4, #32]
 800b676:	2c00      	cmp	r4, #0
 800b678:	bf08      	it	eq
 800b67a:	462c      	moveq	r4, r5
 800b67c:	9400      	str	r4, [sp, #0]
 800b67e:	f7ff ff75 	bl	800b56c <_strtol_l.isra.0>
 800b682:	b003      	add	sp, #12
 800b684:	bd30      	pop	{r4, r5, pc}
 800b686:	bf00      	nop
 800b688:	200002cc 	.word	0x200002cc
 800b68c:	20000330 	.word	0x20000330

0800b690 <_strtoul_l.isra.0>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	4680      	mov	r8, r0
 800b696:	4689      	mov	r9, r1
 800b698:	4692      	mov	sl, r2
 800b69a:	461e      	mov	r6, r3
 800b69c:	460f      	mov	r7, r1
 800b69e:	463d      	mov	r5, r7
 800b6a0:	9808      	ldr	r0, [sp, #32]
 800b6a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6a6:	f000 f8be 	bl	800b826 <__locale_ctype_ptr_l>
 800b6aa:	4420      	add	r0, r4
 800b6ac:	7843      	ldrb	r3, [r0, #1]
 800b6ae:	f013 0308 	ands.w	r3, r3, #8
 800b6b2:	d10a      	bne.n	800b6ca <_strtoul_l.isra.0+0x3a>
 800b6b4:	2c2d      	cmp	r4, #45	; 0x2d
 800b6b6:	d10a      	bne.n	800b6ce <_strtoul_l.isra.0+0x3e>
 800b6b8:	782c      	ldrb	r4, [r5, #0]
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	1cbd      	adds	r5, r7, #2
 800b6be:	b15e      	cbz	r6, 800b6d8 <_strtoul_l.isra.0+0x48>
 800b6c0:	2e10      	cmp	r6, #16
 800b6c2:	d113      	bne.n	800b6ec <_strtoul_l.isra.0+0x5c>
 800b6c4:	2c30      	cmp	r4, #48	; 0x30
 800b6c6:	d009      	beq.n	800b6dc <_strtoul_l.isra.0+0x4c>
 800b6c8:	e010      	b.n	800b6ec <_strtoul_l.isra.0+0x5c>
 800b6ca:	462f      	mov	r7, r5
 800b6cc:	e7e7      	b.n	800b69e <_strtoul_l.isra.0+0xe>
 800b6ce:	2c2b      	cmp	r4, #43	; 0x2b
 800b6d0:	bf04      	itt	eq
 800b6d2:	782c      	ldrbeq	r4, [r5, #0]
 800b6d4:	1cbd      	addeq	r5, r7, #2
 800b6d6:	e7f2      	b.n	800b6be <_strtoul_l.isra.0+0x2e>
 800b6d8:	2c30      	cmp	r4, #48	; 0x30
 800b6da:	d125      	bne.n	800b728 <_strtoul_l.isra.0+0x98>
 800b6dc:	782a      	ldrb	r2, [r5, #0]
 800b6de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b6e2:	2a58      	cmp	r2, #88	; 0x58
 800b6e4:	d14a      	bne.n	800b77c <_strtoul_l.isra.0+0xec>
 800b6e6:	786c      	ldrb	r4, [r5, #1]
 800b6e8:	2610      	movs	r6, #16
 800b6ea:	3502      	adds	r5, #2
 800b6ec:	f04f 31ff 	mov.w	r1, #4294967295
 800b6f0:	2700      	movs	r7, #0
 800b6f2:	fbb1 f1f6 	udiv	r1, r1, r6
 800b6f6:	fb06 fe01 	mul.w	lr, r6, r1
 800b6fa:	ea6f 0e0e 	mvn.w	lr, lr
 800b6fe:	4638      	mov	r0, r7
 800b700:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800b704:	2a09      	cmp	r2, #9
 800b706:	d811      	bhi.n	800b72c <_strtoul_l.isra.0+0x9c>
 800b708:	4614      	mov	r4, r2
 800b70a:	42a6      	cmp	r6, r4
 800b70c:	dd1d      	ble.n	800b74a <_strtoul_l.isra.0+0xba>
 800b70e:	2f00      	cmp	r7, #0
 800b710:	db18      	blt.n	800b744 <_strtoul_l.isra.0+0xb4>
 800b712:	4281      	cmp	r1, r0
 800b714:	d316      	bcc.n	800b744 <_strtoul_l.isra.0+0xb4>
 800b716:	d101      	bne.n	800b71c <_strtoul_l.isra.0+0x8c>
 800b718:	45a6      	cmp	lr, r4
 800b71a:	db13      	blt.n	800b744 <_strtoul_l.isra.0+0xb4>
 800b71c:	fb00 4006 	mla	r0, r0, r6, r4
 800b720:	2701      	movs	r7, #1
 800b722:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b726:	e7eb      	b.n	800b700 <_strtoul_l.isra.0+0x70>
 800b728:	260a      	movs	r6, #10
 800b72a:	e7df      	b.n	800b6ec <_strtoul_l.isra.0+0x5c>
 800b72c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800b730:	2a19      	cmp	r2, #25
 800b732:	d801      	bhi.n	800b738 <_strtoul_l.isra.0+0xa8>
 800b734:	3c37      	subs	r4, #55	; 0x37
 800b736:	e7e8      	b.n	800b70a <_strtoul_l.isra.0+0x7a>
 800b738:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800b73c:	2a19      	cmp	r2, #25
 800b73e:	d804      	bhi.n	800b74a <_strtoul_l.isra.0+0xba>
 800b740:	3c57      	subs	r4, #87	; 0x57
 800b742:	e7e2      	b.n	800b70a <_strtoul_l.isra.0+0x7a>
 800b744:	f04f 37ff 	mov.w	r7, #4294967295
 800b748:	e7eb      	b.n	800b722 <_strtoul_l.isra.0+0x92>
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	da09      	bge.n	800b762 <_strtoul_l.isra.0+0xd2>
 800b74e:	2322      	movs	r3, #34	; 0x22
 800b750:	f8c8 3000 	str.w	r3, [r8]
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	f1ba 0f00 	cmp.w	sl, #0
 800b75c:	d107      	bne.n	800b76e <_strtoul_l.isra.0+0xde>
 800b75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b762:	b103      	cbz	r3, 800b766 <_strtoul_l.isra.0+0xd6>
 800b764:	4240      	negs	r0, r0
 800b766:	f1ba 0f00 	cmp.w	sl, #0
 800b76a:	d00c      	beq.n	800b786 <_strtoul_l.isra.0+0xf6>
 800b76c:	b127      	cbz	r7, 800b778 <_strtoul_l.isra.0+0xe8>
 800b76e:	3d01      	subs	r5, #1
 800b770:	f8ca 5000 	str.w	r5, [sl]
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	464d      	mov	r5, r9
 800b77a:	e7f9      	b.n	800b770 <_strtoul_l.isra.0+0xe0>
 800b77c:	2430      	movs	r4, #48	; 0x30
 800b77e:	2e00      	cmp	r6, #0
 800b780:	d1b4      	bne.n	800b6ec <_strtoul_l.isra.0+0x5c>
 800b782:	2608      	movs	r6, #8
 800b784:	e7b2      	b.n	800b6ec <_strtoul_l.isra.0+0x5c>
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b78c <_strtoul_r>:
 800b78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b78e:	4c06      	ldr	r4, [pc, #24]	; (800b7a8 <_strtoul_r+0x1c>)
 800b790:	4d06      	ldr	r5, [pc, #24]	; (800b7ac <_strtoul_r+0x20>)
 800b792:	6824      	ldr	r4, [r4, #0]
 800b794:	6a24      	ldr	r4, [r4, #32]
 800b796:	2c00      	cmp	r4, #0
 800b798:	bf08      	it	eq
 800b79a:	462c      	moveq	r4, r5
 800b79c:	9400      	str	r4, [sp, #0]
 800b79e:	f7ff ff77 	bl	800b690 <_strtoul_l.isra.0>
 800b7a2:	b003      	add	sp, #12
 800b7a4:	bd30      	pop	{r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	200002cc 	.word	0x200002cc
 800b7ac:	20000330 	.word	0x20000330

0800b7b0 <__submore>:
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7bc:	4299      	cmp	r1, r3
 800b7be:	d11e      	bne.n	800b7fe <__submore+0x4e>
 800b7c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b7c4:	f7fe ffd4 	bl	800a770 <_malloc_r>
 800b7c8:	b918      	cbnz	r0, 800b7d2 <__submore+0x22>
 800b7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b7dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b7de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b7e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b7e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b7ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b7ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b7f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b7f6:	6020      	str	r0, [r4, #0]
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b800:	0077      	lsls	r7, r6, #1
 800b802:	463a      	mov	r2, r7
 800b804:	f000 f84c 	bl	800b8a0 <_realloc_r>
 800b808:	4605      	mov	r5, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d0dd      	beq.n	800b7ca <__submore+0x1a>
 800b80e:	eb00 0806 	add.w	r8, r0, r6
 800b812:	4601      	mov	r1, r0
 800b814:	4632      	mov	r2, r6
 800b816:	4640      	mov	r0, r8
 800b818:	f7fe ff48 	bl	800a6ac <memcpy>
 800b81c:	f8c4 8000 	str.w	r8, [r4]
 800b820:	6365      	str	r5, [r4, #52]	; 0x34
 800b822:	63a7      	str	r7, [r4, #56]	; 0x38
 800b824:	e7e8      	b.n	800b7f8 <__submore+0x48>

0800b826 <__locale_ctype_ptr_l>:
 800b826:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b82a:	4770      	bx	lr

0800b82c <__locale_ctype_ptr>:
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <__locale_ctype_ptr+0x14>)
 800b82e:	4a05      	ldr	r2, [pc, #20]	; (800b844 <__locale_ctype_ptr+0x18>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	2b00      	cmp	r3, #0
 800b836:	bf08      	it	eq
 800b838:	4613      	moveq	r3, r2
 800b83a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b83e:	4770      	bx	lr
 800b840:	200002cc 	.word	0x200002cc
 800b844:	20000330 	.word	0x20000330

0800b848 <__ascii_mbtowc>:
 800b848:	b082      	sub	sp, #8
 800b84a:	b901      	cbnz	r1, 800b84e <__ascii_mbtowc+0x6>
 800b84c:	a901      	add	r1, sp, #4
 800b84e:	b142      	cbz	r2, 800b862 <__ascii_mbtowc+0x1a>
 800b850:	b14b      	cbz	r3, 800b866 <__ascii_mbtowc+0x1e>
 800b852:	7813      	ldrb	r3, [r2, #0]
 800b854:	600b      	str	r3, [r1, #0]
 800b856:	7812      	ldrb	r2, [r2, #0]
 800b858:	1c10      	adds	r0, r2, #0
 800b85a:	bf18      	it	ne
 800b85c:	2001      	movne	r0, #1
 800b85e:	b002      	add	sp, #8
 800b860:	4770      	bx	lr
 800b862:	4610      	mov	r0, r2
 800b864:	e7fb      	b.n	800b85e <__ascii_mbtowc+0x16>
 800b866:	f06f 0001 	mvn.w	r0, #1
 800b86a:	e7f8      	b.n	800b85e <__ascii_mbtowc+0x16>

0800b86c <memmove>:
 800b86c:	4288      	cmp	r0, r1
 800b86e:	b510      	push	{r4, lr}
 800b870:	eb01 0302 	add.w	r3, r1, r2
 800b874:	d803      	bhi.n	800b87e <memmove+0x12>
 800b876:	1e42      	subs	r2, r0, #1
 800b878:	4299      	cmp	r1, r3
 800b87a:	d10c      	bne.n	800b896 <memmove+0x2a>
 800b87c:	bd10      	pop	{r4, pc}
 800b87e:	4298      	cmp	r0, r3
 800b880:	d2f9      	bcs.n	800b876 <memmove+0xa>
 800b882:	1881      	adds	r1, r0, r2
 800b884:	1ad2      	subs	r2, r2, r3
 800b886:	42d3      	cmn	r3, r2
 800b888:	d100      	bne.n	800b88c <memmove+0x20>
 800b88a:	bd10      	pop	{r4, pc}
 800b88c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b890:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b894:	e7f7      	b.n	800b886 <memmove+0x1a>
 800b896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b89a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b89e:	e7eb      	b.n	800b878 <memmove+0xc>

0800b8a0 <_realloc_r>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	4614      	mov	r4, r2
 800b8a6:	460e      	mov	r6, r1
 800b8a8:	b921      	cbnz	r1, 800b8b4 <_realloc_r+0x14>
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8b0:	f7fe bf5e 	b.w	800a770 <_malloc_r>
 800b8b4:	b922      	cbnz	r2, 800b8c0 <_realloc_r+0x20>
 800b8b6:	f7fe ff0d 	bl	800a6d4 <_free_r>
 800b8ba:	4625      	mov	r5, r4
 800b8bc:	4628      	mov	r0, r5
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c0:	f000 f821 	bl	800b906 <_malloc_usable_size_r>
 800b8c4:	4284      	cmp	r4, r0
 800b8c6:	d90f      	bls.n	800b8e8 <_realloc_r+0x48>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7fe ff50 	bl	800a770 <_malloc_r>
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d0f2      	beq.n	800b8bc <_realloc_r+0x1c>
 800b8d6:	4631      	mov	r1, r6
 800b8d8:	4622      	mov	r2, r4
 800b8da:	f7fe fee7 	bl	800a6ac <memcpy>
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7fe fef7 	bl	800a6d4 <_free_r>
 800b8e6:	e7e9      	b.n	800b8bc <_realloc_r+0x1c>
 800b8e8:	4635      	mov	r5, r6
 800b8ea:	e7e7      	b.n	800b8bc <_realloc_r+0x1c>

0800b8ec <__ascii_wctomb>:
 800b8ec:	b149      	cbz	r1, 800b902 <__ascii_wctomb+0x16>
 800b8ee:	2aff      	cmp	r2, #255	; 0xff
 800b8f0:	bf85      	ittet	hi
 800b8f2:	238a      	movhi	r3, #138	; 0x8a
 800b8f4:	6003      	strhi	r3, [r0, #0]
 800b8f6:	700a      	strbls	r2, [r1, #0]
 800b8f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8fc:	bf98      	it	ls
 800b8fe:	2001      	movls	r0, #1
 800b900:	4770      	bx	lr
 800b902:	4608      	mov	r0, r1
 800b904:	4770      	bx	lr

0800b906 <_malloc_usable_size_r>:
 800b906:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b90a:	2800      	cmp	r0, #0
 800b90c:	f1a0 0004 	sub.w	r0, r0, #4
 800b910:	bfbc      	itt	lt
 800b912:	580b      	ldrlt	r3, [r1, r0]
 800b914:	18c0      	addlt	r0, r0, r3
 800b916:	4770      	bx	lr

0800b918 <_sbrk>:
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <_sbrk+0x14>)
 800b91a:	6819      	ldr	r1, [r3, #0]
 800b91c:	4602      	mov	r2, r0
 800b91e:	b909      	cbnz	r1, 800b924 <_sbrk+0xc>
 800b920:	4903      	ldr	r1, [pc, #12]	; (800b930 <_sbrk+0x18>)
 800b922:	6019      	str	r1, [r3, #0]
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	4402      	add	r2, r0
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	4770      	bx	lr
 800b92c:	20000628 	.word	0x20000628
 800b930:	2000add0 	.word	0x2000add0

0800b934 <_init>:
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	bf00      	nop
 800b938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93a:	bc08      	pop	{r3}
 800b93c:	469e      	mov	lr, r3
 800b93e:	4770      	bx	lr

0800b940 <_fini>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	bf00      	nop
 800b944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b946:	bc08      	pop	{r3}
 800b948:	469e      	mov	lr, r3
 800b94a:	4770      	bx	lr
